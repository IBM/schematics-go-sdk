/**
 * (C) Copyright IBM Corp. 2022.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * IBM OpenAPI SDK Code Generator Version: 3.27.0-c07e12f4-20210209-225127
 */

// Package schematics20apiv2 : Operations and models for the Schematics20ApiV2 service
package schematics20apiv2

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"reflect"
	"time"

	"github.com/IBM/go-sdk-core/v5/core"
	"github.com/IBM/schematics-go-sdk/common"
	"github.com/go-openapi/strfmt"
)

// Schematics20ApiV2 : Use IBM Cloud Schematics service to provision a stack of IBM Cloud resources described using a
// templating language, such as - Terraform files, Helm charts, Ansible playbooks, etc..
//
// Version: 2.0
type Schematics20ApiV2 struct {
	Service *core.BaseService
}

// DefaultServiceURL is the default URL to make service requests to.
const DefaultServiceURL = "https://schematics-dev.containers.appdomain.cloud"

// DefaultServiceName is the default key used to find external configuration information.
const DefaultServiceName = "schematics_2_0_api"

// Schematics20ApiV2Options : Service options
type Schematics20ApiV2Options struct {
	ServiceName   string
	URL           string
	Authenticator core.Authenticator
}

// NewSchematics20ApiV2UsingExternalConfig : constructs an instance of Schematics20ApiV2 with passed in options and external configuration.
func NewSchematics20ApiV2UsingExternalConfig(options *Schematics20ApiV2Options) (schematics20Api *Schematics20ApiV2, err error) {
	if options.ServiceName == "" {
		options.ServiceName = DefaultServiceName
	}

	if options.Authenticator == nil {
		options.Authenticator, err = core.GetAuthenticatorFromEnvironment(options.ServiceName)
		if err != nil {
			return
		}
	}

	schematics20Api, err = NewSchematics20ApiV2(options)
	if err != nil {
		return
	}

	err = schematics20Api.Service.ConfigureService(options.ServiceName)
	if err != nil {
		return
	}

	if options.URL != "" {
		err = schematics20Api.Service.SetServiceURL(options.URL)
	}
	return
}

// NewSchematics20ApiV2 : constructs an instance of Schematics20ApiV2 with passed in options.
func NewSchematics20ApiV2(options *Schematics20ApiV2Options) (service *Schematics20ApiV2, err error) {
	serviceOptions := &core.ServiceOptions{
		URL:           DefaultServiceURL,
		Authenticator: options.Authenticator,
	}

	baseService, err := core.NewBaseService(serviceOptions)
	if err != nil {
		return
	}

	if options.URL != "" {
		err = baseService.SetServiceURL(options.URL)
		if err != nil {
			return
		}
	}

	service = &Schematics20ApiV2{
		Service: baseService,
	}

	return
}

// GetServiceURLForRegion returns the service URL to be used for the specified region
func GetServiceURLForRegion(region string) (string, error) {
	return "", fmt.Errorf("service does not support regional URLs")
}

// Clone makes a copy of "schematics20Api" suitable for processing requests.
func (schematics20Api *Schematics20ApiV2) Clone() *Schematics20ApiV2 {
	if core.IsNil(schematics20Api) {
		return nil
	}
	clone := *schematics20Api
	clone.Service = schematics20Api.Service.Clone()
	return &clone
}

// SetServiceURL sets the service URL
func (schematics20Api *Schematics20ApiV2) SetServiceURL(url string) error {
	return schematics20Api.Service.SetServiceURL(url)
}

// GetServiceURL returns the service URL
func (schematics20Api *Schematics20ApiV2) GetServiceURL() string {
	return schematics20Api.Service.GetServiceURL()
}

// SetDefaultHeaders sets HTTP headers to be sent in every request
func (schematics20Api *Schematics20ApiV2) SetDefaultHeaders(headers http.Header) {
	schematics20Api.Service.SetDefaultHeaders(headers)
}

// SetEnableGzipCompression sets the service's EnableGzipCompression field
func (schematics20Api *Schematics20ApiV2) SetEnableGzipCompression(enableGzip bool) {
	schematics20Api.Service.SetEnableGzipCompression(enableGzip)
}

// GetEnableGzipCompression returns the service's EnableGzipCompression field
func (schematics20Api *Schematics20ApiV2) GetEnableGzipCompression() bool {
	return schematics20Api.Service.GetEnableGzipCompression()
}

// EnableRetries enables automatic retries for requests invoked for this service instance.
// If either parameter is specified as 0, then a default value is used instead.
func (schematics20Api *Schematics20ApiV2) EnableRetries(maxRetries int, maxRetryInterval time.Duration) {
	schematics20Api.Service.EnableRetries(maxRetries, maxRetryInterval)
}

// DisableRetries disables automatic retries for requests invoked for this service instance.
func (schematics20Api *Schematics20ApiV2) DisableRetries() {
	schematics20Api.Service.DisableRetries()
}

// GetSchematicsInfo : Get the information about schematics
// Get detailed information about the IBM Cloud Schematics API version, supported template types and versions, and the
// supported locations.
func (schematics20Api *Schematics20ApiV2) GetSchematicsInfo(getSchematicsInfoOptions *GetSchematicsInfoOptions) (result *SchematicsInfo, response *core.DetailedResponse, err error) {
	return schematics20Api.GetSchematicsInfoWithContext(context.Background(), getSchematicsInfoOptions)
}

// GetSchematicsInfoWithContext is an alternate form of the GetSchematicsInfo method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetSchematicsInfoWithContext(ctx context.Context, getSchematicsInfoOptions *GetSchematicsInfoOptions) (result *SchematicsInfo, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(getSchematicsInfoOptions, "getSchematicsInfoOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/info`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range getSchematicsInfoOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetSchematicsInfo")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalSchematicsInfo)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListSchematicsAccessRules : Get all access_rules for all schematics resources
// Get all the authorization rules for the User for Workspaces,  Datasets, Controls & Settings API.
func (schematics20Api *Schematics20ApiV2) ListSchematicsAccessRules(listSchematicsAccessRulesOptions *ListSchematicsAccessRulesOptions) (result *SchematicsAccessRuleList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListSchematicsAccessRulesWithContext(context.Background(), listSchematicsAccessRulesOptions)
}

// ListSchematicsAccessRulesWithContext is an alternate form of the ListSchematicsAccessRules method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListSchematicsAccessRulesWithContext(ctx context.Context, listSchematicsAccessRulesOptions *ListSchematicsAccessRulesOptions) (result *SchematicsAccessRuleList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listSchematicsAccessRulesOptions, "listSchematicsAccessRulesOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/access`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listSchematicsAccessRulesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListSchematicsAccessRules")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalSchematicsAccessRuleList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetSchematicsAccessRulesForResource : Get the access_rules for the schematics resource
// Get the authorization rules for the User for Workspaces,  Shared datasets, Controls & Settings API.
func (schematics20Api *Schematics20ApiV2) GetSchematicsAccessRulesForResource(getSchematicsAccessRulesForResourceOptions *GetSchematicsAccessRulesForResourceOptions) (result *SchematicsAccessRuleList, response *core.DetailedResponse, err error) {
	return schematics20Api.GetSchematicsAccessRulesForResourceWithContext(context.Background(), getSchematicsAccessRulesForResourceOptions)
}

// GetSchematicsAccessRulesForResourceWithContext is an alternate form of the GetSchematicsAccessRulesForResource method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetSchematicsAccessRulesForResourceWithContext(ctx context.Context, getSchematicsAccessRulesForResourceOptions *GetSchematicsAccessRulesForResourceOptions) (result *SchematicsAccessRuleList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getSchematicsAccessRulesForResourceOptions, "getSchematicsAccessRulesForResourceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getSchematicsAccessRulesForResourceOptions, "getSchematicsAccessRulesForResourceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"resource_name": *getSchematicsAccessRulesForResourceOptions.ResourceName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/access/{resource_name}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getSchematicsAccessRulesForResourceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetSchematicsAccessRulesForResource")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getSchematicsAccessRulesForResourceOptions.CommandName != nil {
		builder.AddQuery("command_name", fmt.Sprint(*getSchematicsAccessRulesForResourceOptions.CommandName))
	}
	if getSchematicsAccessRulesForResourceOptions.CommandParameter != nil {
		builder.AddQuery("command_parameter", fmt.Sprint(*getSchematicsAccessRulesForResourceOptions.CommandParameter))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalSchematicsAccessRuleList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetSchematicsCommandNames : Get all the allowed commands for schematics resource
// Get all the allowed commands for schematics resource.
func (schematics20Api *Schematics20ApiV2) GetSchematicsCommandNames(getSchematicsCommandNamesOptions *GetSchematicsCommandNamesOptions) (result *CommandList, response *core.DetailedResponse, err error) {
	return schematics20Api.GetSchematicsCommandNamesWithContext(context.Background(), getSchematicsCommandNamesOptions)
}

// GetSchematicsCommandNamesWithContext is an alternate form of the GetSchematicsCommandNames method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetSchematicsCommandNamesWithContext(ctx context.Context, getSchematicsCommandNamesOptions *GetSchematicsCommandNamesOptions) (result *CommandList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getSchematicsCommandNamesOptions, "getSchematicsCommandNamesOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getSchematicsCommandNamesOptions, "getSchematicsCommandNamesOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"resource_name": *getSchematicsCommandNamesOptions.ResourceName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/commands/{resource_name}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getSchematicsCommandNamesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetSchematicsCommandNames")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCommandList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListWorkspaces : Get all Workspace definitions
// Get all Workspace definitions.
func (schematics20Api *Schematics20ApiV2) ListWorkspaces(listWorkspacesOptions *ListWorkspacesOptions) (result *WorkspaceList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListWorkspacesWithContext(context.Background(), listWorkspacesOptions)
}

// ListWorkspacesWithContext is an alternate form of the ListWorkspaces method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListWorkspacesWithContext(ctx context.Context, listWorkspacesOptions *ListWorkspacesOptions) (result *WorkspaceList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listWorkspacesOptions, "listWorkspacesOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listWorkspacesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListWorkspaces")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listWorkspacesOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listWorkspacesOptions.Offset))
	}
	if listWorkspacesOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listWorkspacesOptions.Limit))
	}
	if listWorkspacesOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listWorkspacesOptions.Sort))
	}
	if listWorkspacesOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*listWorkspacesOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalWorkspaceList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateWorkspace : Create a Workspace definition
// Create a new workspace definition.
func (schematics20Api *Schematics20ApiV2) CreateWorkspace(createWorkspaceOptions *CreateWorkspaceOptions) (result *Workspace, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateWorkspaceWithContext(context.Background(), createWorkspaceOptions)
}

// CreateWorkspaceWithContext is an alternate form of the CreateWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateWorkspaceWithContext(ctx context.Context, createWorkspaceOptions *CreateWorkspaceOptions) (result *Workspace, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createWorkspaceOptions, "createWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createWorkspaceOptions, "createWorkspaceOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createWorkspaceOptions.Workspace)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalWorkspace)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetWorkspace : Get the Workspace definition
// Get the Workspace definition.
func (schematics20Api *Schematics20ApiV2) GetWorkspace(getWorkspaceOptions *GetWorkspaceOptions) (result *Workspace, response *core.DetailedResponse, err error) {
	return schematics20Api.GetWorkspaceWithContext(context.Background(), getWorkspaceOptions)
}

// GetWorkspaceWithContext is an alternate form of the GetWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetWorkspaceWithContext(ctx context.Context, getWorkspaceOptions *GetWorkspaceOptions) (result *Workspace, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getWorkspaceOptions, "getWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getWorkspaceOptions, "getWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *getWorkspaceOptions.WID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getWorkspaceOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*getWorkspaceOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalWorkspace)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ReplaceWorkspace : Replace the Workspace definition
// Replace the Workspace definition.
func (schematics20Api *Schematics20ApiV2) ReplaceWorkspace(replaceWorkspaceOptions *ReplaceWorkspaceOptions) (result *Workspace, response *core.DetailedResponse, err error) {
	return schematics20Api.ReplaceWorkspaceWithContext(context.Background(), replaceWorkspaceOptions)
}

// ReplaceWorkspaceWithContext is an alternate form of the ReplaceWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ReplaceWorkspaceWithContext(ctx context.Context, replaceWorkspaceOptions *ReplaceWorkspaceOptions) (result *Workspace, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceWorkspaceOptions, "replaceWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(replaceWorkspaceOptions, "replaceWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *replaceWorkspaceOptions.WID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range replaceWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ReplaceWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(replaceWorkspaceOptions.Workspace)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalWorkspace)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteWorkspace : Delete the Workspace
// Delete the workspace; if the workspace's auto_destroy_on_delete is set to true, try to destroy all the resources in
// the workspace before deleting the workspace.
func (schematics20Api *Schematics20ApiV2) DeleteWorkspace(deleteWorkspaceOptions *DeleteWorkspaceOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteWorkspaceWithContext(context.Background(), deleteWorkspaceOptions)
}

// DeleteWorkspaceWithContext is an alternate form of the DeleteWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteWorkspaceWithContext(ctx context.Context, deleteWorkspaceOptions *DeleteWorkspaceOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteWorkspaceOptions, "deleteWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteWorkspaceOptions, "deleteWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *deleteWorkspaceOptions.WID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	if deleteWorkspaceOptions.Force != nil {
		builder.AddHeader("force", fmt.Sprint(*deleteWorkspaceOptions.Force))
	}
	if deleteWorkspaceOptions.Propagate != nil {
		builder.AddHeader("propagate", fmt.Sprint(*deleteWorkspaceOptions.Propagate))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// UpdateWorkspace : Update the Workspace definition
// Update the Workspace definition.
func (schematics20Api *Schematics20ApiV2) UpdateWorkspace(updateWorkspaceOptions *UpdateWorkspaceOptions) (result *Workspace, response *core.DetailedResponse, err error) {
	return schematics20Api.UpdateWorkspaceWithContext(context.Background(), updateWorkspaceOptions)
}

// UpdateWorkspaceWithContext is an alternate form of the UpdateWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UpdateWorkspaceWithContext(ctx context.Context, updateWorkspaceOptions *UpdateWorkspaceOptions) (result *Workspace, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateWorkspaceOptions, "updateWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(updateWorkspaceOptions, "updateWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *updateWorkspaceOptions.WID,
	}

	builder := core.NewRequestBuilder(core.PATCH)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range updateWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UpdateWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(updateWorkspaceOptions.Workspace)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalWorkspace)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListWorkspaceInputs : Get the Workspace input parameter definitions
// Get the input parameter definition (variables, values, metadata) for the workspace.
func (schematics20Api *Schematics20ApiV2) ListWorkspaceInputs(listWorkspaceInputsOptions *ListWorkspaceInputsOptions) (result *InputVariableDataList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListWorkspaceInputsWithContext(context.Background(), listWorkspaceInputsOptions)
}

// ListWorkspaceInputsWithContext is an alternate form of the ListWorkspaceInputs method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListWorkspaceInputsWithContext(ctx context.Context, listWorkspaceInputsOptions *ListWorkspaceInputsOptions) (result *InputVariableDataList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(listWorkspaceInputsOptions, "listWorkspaceInputsOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(listWorkspaceInputsOptions, "listWorkspaceInputsOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *listWorkspaceInputsOptions.WID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/inputs`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range listWorkspaceInputsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListWorkspaceInputs")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listWorkspaceInputsOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listWorkspaceInputsOptions.Offset))
	}
	if listWorkspaceInputsOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listWorkspaceInputsOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalInputVariableDataList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListWorkspaceOutputs : Get the Workspace output parameter definitions
// Get the output parameter definition (variables, metadata) for the workspace.
func (schematics20Api *Schematics20ApiV2) ListWorkspaceOutputs(listWorkspaceOutputsOptions *ListWorkspaceOutputsOptions) (result *OutputVariableDataList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListWorkspaceOutputsWithContext(context.Background(), listWorkspaceOutputsOptions)
}

// ListWorkspaceOutputsWithContext is an alternate form of the ListWorkspaceOutputs method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListWorkspaceOutputsWithContext(ctx context.Context, listWorkspaceOutputsOptions *ListWorkspaceOutputsOptions) (result *OutputVariableDataList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(listWorkspaceOutputsOptions, "listWorkspaceOutputsOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(listWorkspaceOutputsOptions, "listWorkspaceOutputsOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *listWorkspaceOutputsOptions.WID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/outputs`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range listWorkspaceOutputsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListWorkspaceOutputs")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listWorkspaceOutputsOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listWorkspaceOutputsOptions.Offset))
	}
	if listWorkspaceOutputsOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listWorkspaceOutputsOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalOutputVariableDataList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateWorkspaceTemplates : Create a new Workspace with Template definitions
// A new workspace is created for the templates.
func (schematics20Api *Schematics20ApiV2) CreateWorkspaceTemplates(createWorkspaceTemplatesOptions *CreateWorkspaceTemplatesOptions) (result *Workspace, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateWorkspaceTemplatesWithContext(context.Background(), createWorkspaceTemplatesOptions)
}

// CreateWorkspaceTemplatesWithContext is an alternate form of the CreateWorkspaceTemplates method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateWorkspaceTemplatesWithContext(ctx context.Context, createWorkspaceTemplatesOptions *CreateWorkspaceTemplatesOptions) (result *Workspace, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createWorkspaceTemplatesOptions, "createWorkspaceTemplatesOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createWorkspaceTemplatesOptions, "createWorkspaceTemplatesOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/templates`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createWorkspaceTemplatesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateWorkspaceTemplates")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")
	if createWorkspaceTemplatesOptions.XGithubToken != nil {
		builder.AddHeader("X-Github-token", fmt.Sprint(*createWorkspaceTemplatesOptions.XGithubToken))
	}

	_, err = builder.SetBodyContentJSON(createWorkspaceTemplatesOptions.TemplateListRequest)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalWorkspace)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListTemplatesInWorkspace : Get all Template definitions from the Workspace
// Get list of all Templates in a Workspace.
func (schematics20Api *Schematics20ApiV2) ListTemplatesInWorkspace(listTemplatesInWorkspaceOptions *ListTemplatesInWorkspaceOptions) (result *TemplateList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListTemplatesInWorkspaceWithContext(context.Background(), listTemplatesInWorkspaceOptions)
}

// ListTemplatesInWorkspaceWithContext is an alternate form of the ListTemplatesInWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListTemplatesInWorkspaceWithContext(ctx context.Context, listTemplatesInWorkspaceOptions *ListTemplatesInWorkspaceOptions) (result *TemplateList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(listTemplatesInWorkspaceOptions, "listTemplatesInWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(listTemplatesInWorkspaceOptions, "listTemplatesInWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *listTemplatesInWorkspaceOptions.WID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range listTemplatesInWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListTemplatesInWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listTemplatesInWorkspaceOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listTemplatesInWorkspaceOptions.Offset))
	}
	if listTemplatesInWorkspaceOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listTemplatesInWorkspaceOptions.Limit))
	}
	if listTemplatesInWorkspaceOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listTemplatesInWorkspaceOptions.Sort))
	}
	if listTemplatesInWorkspaceOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*listTemplatesInWorkspaceOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTemplateList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// AddTemplatesToWorkspace : Add a new Template definition to the Workspace
// Creates a new Template and adds it to Workspace.
func (schematics20Api *Schematics20ApiV2) AddTemplatesToWorkspace(addTemplatesToWorkspaceOptions *AddTemplatesToWorkspaceOptions) (result *Template, response *core.DetailedResponse, err error) {
	return schematics20Api.AddTemplatesToWorkspaceWithContext(context.Background(), addTemplatesToWorkspaceOptions)
}

// AddTemplatesToWorkspaceWithContext is an alternate form of the AddTemplatesToWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) AddTemplatesToWorkspaceWithContext(ctx context.Context, addTemplatesToWorkspaceOptions *AddTemplatesToWorkspaceOptions) (result *Template, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(addTemplatesToWorkspaceOptions, "addTemplatesToWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(addTemplatesToWorkspaceOptions, "addTemplatesToWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *addTemplatesToWorkspaceOptions.WID,
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range addTemplatesToWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "AddTemplatesToWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")
	if addTemplatesToWorkspaceOptions.XGithubToken != nil {
		builder.AddHeader("X-Github-token", fmt.Sprint(*addTemplatesToWorkspaceOptions.XGithubToken))
	}

	_, err = builder.SetBodyContentJSON(addTemplatesToWorkspaceOptions.Template)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTemplate)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetTemplateInWorkspace : Get the Template definition from the Workspace
// Get the Template definition from the workspace.
func (schematics20Api *Schematics20ApiV2) GetTemplateInWorkspace(getTemplateInWorkspaceOptions *GetTemplateInWorkspaceOptions) (result *Template, response *core.DetailedResponse, err error) {
	return schematics20Api.GetTemplateInWorkspaceWithContext(context.Background(), getTemplateInWorkspaceOptions)
}

// GetTemplateInWorkspaceWithContext is an alternate form of the GetTemplateInWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetTemplateInWorkspaceWithContext(ctx context.Context, getTemplateInWorkspaceOptions *GetTemplateInWorkspaceOptions) (result *Template, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getTemplateInWorkspaceOptions, "getTemplateInWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getTemplateInWorkspaceOptions, "getTemplateInWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *getTemplateInWorkspaceOptions.WID,
		"t_id": *getTemplateInWorkspaceOptions.TID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates/{t_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getTemplateInWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetTemplateInWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getTemplateInWorkspaceOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*getTemplateInWorkspaceOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTemplate)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ReplaceTemplateInWorkspace : Replace the Template definition in the Workspace
// Replace the Template definition in the Workspace.
func (schematics20Api *Schematics20ApiV2) ReplaceTemplateInWorkspace(replaceTemplateInWorkspaceOptions *ReplaceTemplateInWorkspaceOptions) (result *Template, response *core.DetailedResponse, err error) {
	return schematics20Api.ReplaceTemplateInWorkspaceWithContext(context.Background(), replaceTemplateInWorkspaceOptions)
}

// ReplaceTemplateInWorkspaceWithContext is an alternate form of the ReplaceTemplateInWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ReplaceTemplateInWorkspaceWithContext(ctx context.Context, replaceTemplateInWorkspaceOptions *ReplaceTemplateInWorkspaceOptions) (result *Template, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceTemplateInWorkspaceOptions, "replaceTemplateInWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(replaceTemplateInWorkspaceOptions, "replaceTemplateInWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *replaceTemplateInWorkspaceOptions.WID,
		"t_id": *replaceTemplateInWorkspaceOptions.TID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates/{t_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range replaceTemplateInWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ReplaceTemplateInWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")
	if replaceTemplateInWorkspaceOptions.XGithubToken != nil {
		builder.AddHeader("X-Github-token", fmt.Sprint(*replaceTemplateInWorkspaceOptions.XGithubToken))
	}

	if replaceTemplateInWorkspaceOptions.Template != nil {
		_, err = builder.SetBodyContentJSON(replaceTemplateInWorkspaceOptions.Template)
		if err != nil {
			return
		}
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTemplate)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteTemplateFromWorkspace : Remove the Template from the Workspace
// Delete the Template associated with the workspace; if the template's auto_destroy_on_delete is set to true, try to
// destroy all the resources  associated with Template before deleting the Template.
func (schematics20Api *Schematics20ApiV2) DeleteTemplateFromWorkspace(deleteTemplateFromWorkspaceOptions *DeleteTemplateFromWorkspaceOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteTemplateFromWorkspaceWithContext(context.Background(), deleteTemplateFromWorkspaceOptions)
}

// DeleteTemplateFromWorkspaceWithContext is an alternate form of the DeleteTemplateFromWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteTemplateFromWorkspaceWithContext(ctx context.Context, deleteTemplateFromWorkspaceOptions *DeleteTemplateFromWorkspaceOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteTemplateFromWorkspaceOptions, "deleteTemplateFromWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteTemplateFromWorkspaceOptions, "deleteTemplateFromWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *deleteTemplateFromWorkspaceOptions.WID,
		"t_id": *deleteTemplateFromWorkspaceOptions.TID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates/{t_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteTemplateFromWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteTemplateFromWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	if deleteTemplateFromWorkspaceOptions.Force != nil {
		builder.AddHeader("force", fmt.Sprint(*deleteTemplateFromWorkspaceOptions.Force))
	}
	if deleteTemplateFromWorkspaceOptions.Propagate != nil {
		builder.AddHeader("propagate", fmt.Sprint(*deleteTemplateFromWorkspaceOptions.Propagate))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// UpdateTemplateInWorkspace : Update the Template definition in the Workspace
// Update the Template definition in the Workspace.
func (schematics20Api *Schematics20ApiV2) UpdateTemplateInWorkspace(updateTemplateInWorkspaceOptions *UpdateTemplateInWorkspaceOptions) (result *Template, response *core.DetailedResponse, err error) {
	return schematics20Api.UpdateTemplateInWorkspaceWithContext(context.Background(), updateTemplateInWorkspaceOptions)
}

// UpdateTemplateInWorkspaceWithContext is an alternate form of the UpdateTemplateInWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UpdateTemplateInWorkspaceWithContext(ctx context.Context, updateTemplateInWorkspaceOptions *UpdateTemplateInWorkspaceOptions) (result *Template, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateTemplateInWorkspaceOptions, "updateTemplateInWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(updateTemplateInWorkspaceOptions, "updateTemplateInWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *updateTemplateInWorkspaceOptions.WID,
		"t_id": *updateTemplateInWorkspaceOptions.TID,
	}

	builder := core.NewRequestBuilder(core.PATCH)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates/{t_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range updateTemplateInWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UpdateTemplateInWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")
	if updateTemplateInWorkspaceOptions.XGithubToken != nil {
		builder.AddHeader("X-Github-token", fmt.Sprint(*updateTemplateInWorkspaceOptions.XGithubToken))
	}

	if updateTemplateInWorkspaceOptions.Template != nil {
		_, err = builder.SetBodyContentJSON(updateTemplateInWorkspaceOptions.Template)
		if err != nil {
			return
		}
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTemplate)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// UploadTemplateTarInWorkspace : Upload the Template content as tar-file
// Upload the Template content as tar-file.
func (schematics20Api *Schematics20ApiV2) UploadTemplateTarInWorkspace(uploadTemplateTarInWorkspaceOptions *UploadTemplateTarInWorkspaceOptions) (result *Template, response *core.DetailedResponse, err error) {
	return schematics20Api.UploadTemplateTarInWorkspaceWithContext(context.Background(), uploadTemplateTarInWorkspaceOptions)
}

// UploadTemplateTarInWorkspaceWithContext is an alternate form of the UploadTemplateTarInWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UploadTemplateTarInWorkspaceWithContext(ctx context.Context, uploadTemplateTarInWorkspaceOptions *UploadTemplateTarInWorkspaceOptions) (result *Template, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(uploadTemplateTarInWorkspaceOptions, "uploadTemplateTarInWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(uploadTemplateTarInWorkspaceOptions, "uploadTemplateTarInWorkspaceOptions")
	if err != nil {
		return
	}
	if uploadTemplateTarInWorkspaceOptions.File == nil {
		err = fmt.Errorf("at least one of  or file must be supplied")
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *uploadTemplateTarInWorkspaceOptions.WID,
		"t_id": *uploadTemplateTarInWorkspaceOptions.TID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates/{t_id}/content`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range uploadTemplateTarInWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UploadTemplateTarInWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	if uploadTemplateTarInWorkspaceOptions.XGithubToken != nil {
		builder.AddHeader("X-Github-token", fmt.Sprint(*uploadTemplateTarInWorkspaceOptions.XGithubToken))
	}

	if uploadTemplateTarInWorkspaceOptions.File != nil {
		builder.AddFormData("file", "filename",
			core.StringNilMapper(uploadTemplateTarInWorkspaceOptions.FileContentType), uploadTemplateTarInWorkspaceOptions.File)
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTemplate)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetTemplateReadme : Get the Templates Readme file
// Get the Readme file from the Template in the Workspace.
func (schematics20Api *Schematics20ApiV2) GetTemplateReadme(getTemplateReadmeOptions *GetTemplateReadmeOptions) (result *string, response *core.DetailedResponse, err error) {
	return schematics20Api.GetTemplateReadmeWithContext(context.Background(), getTemplateReadmeOptions)
}

// GetTemplateReadmeWithContext is an alternate form of the GetTemplateReadme method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetTemplateReadmeWithContext(ctx context.Context, getTemplateReadmeOptions *GetTemplateReadmeOptions) (result *string, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getTemplateReadmeOptions, "getTemplateReadmeOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getTemplateReadmeOptions, "getTemplateReadmeOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *getTemplateReadmeOptions.WID,
		"t_id": *getTemplateReadmeOptions.TID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates/{t_id}/readme`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getTemplateReadmeOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetTemplateReadme")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "text/markdown")
	if getTemplateReadmeOptions.Accept != nil {
		builder.AddHeader("Accept", fmt.Sprint(*getTemplateReadmeOptions.Accept))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, &result)

	return
}

// GetTemplateSource : Get the Template source details
// Get the source details (Git repo, IBM Catalog, or other catalog sources) of the Template in the Workspace.
func (schematics20Api *Schematics20ApiV2) GetTemplateSource(getTemplateSourceOptions *GetTemplateSourceOptions) (result *ExternalSource, response *core.DetailedResponse, err error) {
	return schematics20Api.GetTemplateSourceWithContext(context.Background(), getTemplateSourceOptions)
}

// GetTemplateSourceWithContext is an alternate form of the GetTemplateSource method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetTemplateSourceWithContext(ctx context.Context, getTemplateSourceOptions *GetTemplateSourceOptions) (result *ExternalSource, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getTemplateSourceOptions, "getTemplateSourceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getTemplateSourceOptions, "getTemplateSourceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *getTemplateSourceOptions.WID,
		"t_id": *getTemplateSourceOptions.TID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates/{t_id}/source`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getTemplateSourceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetTemplateSource")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalExternalSource)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListTemplateInputs : Get the Template input parameter definitions
// Get the template input parameter definitions (variables, values, metadata) of Template in the Workspace.
func (schematics20Api *Schematics20ApiV2) ListTemplateInputs(listTemplateInputsOptions *ListTemplateInputsOptions) (result *VariableDataList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListTemplateInputsWithContext(context.Background(), listTemplateInputsOptions)
}

// ListTemplateInputsWithContext is an alternate form of the ListTemplateInputs method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListTemplateInputsWithContext(ctx context.Context, listTemplateInputsOptions *ListTemplateInputsOptions) (result *VariableDataList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(listTemplateInputsOptions, "listTemplateInputsOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(listTemplateInputsOptions, "listTemplateInputsOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *listTemplateInputsOptions.WID,
		"t_id": *listTemplateInputsOptions.TID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates/{t_id}/inputs`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range listTemplateInputsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListTemplateInputs")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalVariableDataList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListTemplateOutputs : Get the Template output parameter definitions
// Get the output parameter definitions (variables, values, metadata) of Template in the Workspace.
func (schematics20Api *Schematics20ApiV2) ListTemplateOutputs(listTemplateOutputsOptions *ListTemplateOutputsOptions) (result *VariableDataList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListTemplateOutputsWithContext(context.Background(), listTemplateOutputsOptions)
}

// ListTemplateOutputsWithContext is an alternate form of the ListTemplateOutputs method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListTemplateOutputsWithContext(ctx context.Context, listTemplateOutputsOptions *ListTemplateOutputsOptions) (result *VariableDataList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(listTemplateOutputsOptions, "listTemplateOutputsOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(listTemplateOutputsOptions, "listTemplateOutputsOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *listTemplateOutputsOptions.WID,
		"t_id": *listTemplateOutputsOptions.TID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates/{t_id}/outputs`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range listTemplateOutputsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListTemplateOutputs")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalVariableDataList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListFlowsInWorkspace : Get all Flow definitions from the Workspace
// Get list of all Flow definitions in a Workspace.
func (schematics20Api *Schematics20ApiV2) ListFlowsInWorkspace(listFlowsInWorkspaceOptions *ListFlowsInWorkspaceOptions) (result *TemplateFlowList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListFlowsInWorkspaceWithContext(context.Background(), listFlowsInWorkspaceOptions)
}

// ListFlowsInWorkspaceWithContext is an alternate form of the ListFlowsInWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListFlowsInWorkspaceWithContext(ctx context.Context, listFlowsInWorkspaceOptions *ListFlowsInWorkspaceOptions) (result *TemplateFlowList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(listFlowsInWorkspaceOptions, "listFlowsInWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(listFlowsInWorkspaceOptions, "listFlowsInWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *listFlowsInWorkspaceOptions.WID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/flows`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range listFlowsInWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListFlowsInWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listFlowsInWorkspaceOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listFlowsInWorkspaceOptions.Offset))
	}
	if listFlowsInWorkspaceOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listFlowsInWorkspaceOptions.Limit))
	}
	if listFlowsInWorkspaceOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listFlowsInWorkspaceOptions.Sort))
	}
	if listFlowsInWorkspaceOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*listFlowsInWorkspaceOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTemplateFlowList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// AddFlowToWorkspace : Add a new Flow definition to the Workspace
// Creates a new Flow and adds it to the Workspace.
func (schematics20Api *Schematics20ApiV2) AddFlowToWorkspace(addFlowToWorkspaceOptions *AddFlowToWorkspaceOptions) (result *TemplateFlow, response *core.DetailedResponse, err error) {
	return schematics20Api.AddFlowToWorkspaceWithContext(context.Background(), addFlowToWorkspaceOptions)
}

// AddFlowToWorkspaceWithContext is an alternate form of the AddFlowToWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) AddFlowToWorkspaceWithContext(ctx context.Context, addFlowToWorkspaceOptions *AddFlowToWorkspaceOptions) (result *TemplateFlow, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(addFlowToWorkspaceOptions, "addFlowToWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(addFlowToWorkspaceOptions, "addFlowToWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id": *addFlowToWorkspaceOptions.WID,
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/flows`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range addFlowToWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "AddFlowToWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(addFlowToWorkspaceOptions.TemplateFlow)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTemplateFlow)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetFlowInWorkspace : Get Flow definition from the Workspace
// Get specified flow details in a workspace.
func (schematics20Api *Schematics20ApiV2) GetFlowInWorkspace(getFlowInWorkspaceOptions *GetFlowInWorkspaceOptions) (result *TemplateFlow, response *core.DetailedResponse, err error) {
	return schematics20Api.GetFlowInWorkspaceWithContext(context.Background(), getFlowInWorkspaceOptions)
}

// GetFlowInWorkspaceWithContext is an alternate form of the GetFlowInWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetFlowInWorkspaceWithContext(ctx context.Context, getFlowInWorkspaceOptions *GetFlowInWorkspaceOptions) (result *TemplateFlow, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getFlowInWorkspaceOptions, "getFlowInWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getFlowInWorkspaceOptions, "getFlowInWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id":    *getFlowInWorkspaceOptions.WID,
		"flow_id": *getFlowInWorkspaceOptions.FlowID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/flows/{flow_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getFlowInWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetFlowInWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getFlowInWorkspaceOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*getFlowInWorkspaceOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTemplateFlow)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ReplaceFlowInWorkspace : Replace the Flow definition in the Workspace
// Replace the Flow definition in the Workspace.
func (schematics20Api *Schematics20ApiV2) ReplaceFlowInWorkspace(replaceFlowInWorkspaceOptions *ReplaceFlowInWorkspaceOptions) (result *TemplateFlow, response *core.DetailedResponse, err error) {
	return schematics20Api.ReplaceFlowInWorkspaceWithContext(context.Background(), replaceFlowInWorkspaceOptions)
}

// ReplaceFlowInWorkspaceWithContext is an alternate form of the ReplaceFlowInWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ReplaceFlowInWorkspaceWithContext(ctx context.Context, replaceFlowInWorkspaceOptions *ReplaceFlowInWorkspaceOptions) (result *TemplateFlow, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceFlowInWorkspaceOptions, "replaceFlowInWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(replaceFlowInWorkspaceOptions, "replaceFlowInWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id":    *replaceFlowInWorkspaceOptions.WID,
		"flow_id": *replaceFlowInWorkspaceOptions.FlowID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/flows/{flow_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range replaceFlowInWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ReplaceFlowInWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	if replaceFlowInWorkspaceOptions.TemplateFlow != nil {
		_, err = builder.SetBodyContentJSON(replaceFlowInWorkspaceOptions.TemplateFlow)
		if err != nil {
			return
		}
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTemplateFlow)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteFlowFromWorkspace : Remove the Flow from the Workspace
// Delete the flow associated with workspace;.
func (schematics20Api *Schematics20ApiV2) DeleteFlowFromWorkspace(deleteFlowFromWorkspaceOptions *DeleteFlowFromWorkspaceOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteFlowFromWorkspaceWithContext(context.Background(), deleteFlowFromWorkspaceOptions)
}

// DeleteFlowFromWorkspaceWithContext is an alternate form of the DeleteFlowFromWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteFlowFromWorkspaceWithContext(ctx context.Context, deleteFlowFromWorkspaceOptions *DeleteFlowFromWorkspaceOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteFlowFromWorkspaceOptions, "deleteFlowFromWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteFlowFromWorkspaceOptions, "deleteFlowFromWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id":    *deleteFlowFromWorkspaceOptions.WID,
		"flow_id": *deleteFlowFromWorkspaceOptions.FlowID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/flows/{flow_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteFlowFromWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteFlowFromWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	if deleteFlowFromWorkspaceOptions.Propagate != nil {
		builder.AddHeader("propagate", fmt.Sprint(*deleteFlowFromWorkspaceOptions.Propagate))
	}
	if deleteFlowFromWorkspaceOptions.Force != nil {
		builder.AddHeader("force", fmt.Sprint(*deleteFlowFromWorkspaceOptions.Force))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// UpdateFlowInWorkspace : Update the Flow definition in the Workspace
// Update the Flow definition in the Workspace.
func (schematics20Api *Schematics20ApiV2) UpdateFlowInWorkspace(updateFlowInWorkspaceOptions *UpdateFlowInWorkspaceOptions) (result *TemplateFlow, response *core.DetailedResponse, err error) {
	return schematics20Api.UpdateFlowInWorkspaceWithContext(context.Background(), updateFlowInWorkspaceOptions)
}

// UpdateFlowInWorkspaceWithContext is an alternate form of the UpdateFlowInWorkspace method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UpdateFlowInWorkspaceWithContext(ctx context.Context, updateFlowInWorkspaceOptions *UpdateFlowInWorkspaceOptions) (result *TemplateFlow, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateFlowInWorkspaceOptions, "updateFlowInWorkspaceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(updateFlowInWorkspaceOptions, "updateFlowInWorkspaceOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id":    *updateFlowInWorkspaceOptions.WID,
		"flow_id": *updateFlowInWorkspaceOptions.FlowID,
	}

	builder := core.NewRequestBuilder(core.PATCH)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/flows/{flow_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range updateFlowInWorkspaceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UpdateFlowInWorkspace")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	if updateFlowInWorkspaceOptions.TemplateFlow != nil {
		_, err = builder.SetBodyContentJSON(updateFlowInWorkspaceOptions.TemplateFlow)
		if err != nil {
			return
		}
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTemplateFlow)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListActions : List actions
// Retrieve a list of all Schematics actions that depends on the API endpoint that you have access. For example, if you
// use an API endpoint for a geography, such as North America, only actions that are created in `us-south` or `us-east`
// are retrieved.
//  For more information, about supported API endpoints, see
// [API endpoints](/apidocs/schematics#api-endpoints).
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) ListActions(listActionsOptions *ListActionsOptions) (result *ActionList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListActionsWithContext(context.Background(), listActionsOptions)
}

// ListActionsWithContext is an alternate form of the ListActions method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListActionsWithContext(ctx context.Context, listActionsOptions *ListActionsOptions) (result *ActionList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listActionsOptions, "listActionsOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/actions`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listActionsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListActions")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listActionsOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listActionsOptions.Offset))
	}
	if listActionsOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listActionsOptions.Limit))
	}
	if listActionsOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listActionsOptions.Sort))
	}
	if listActionsOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*listActionsOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalActionList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateAction : Create an action
// Create an IBM Cloud Schematics action to run on a single target or groups of target hosts, roles, policies, or steps
// to deploy your resources in the target hosts. You can run the IBM Cloud resources the order in which you want to
// execute them. **Note** If your Git repository already contains a host file. Schematics does not overwrite the host
// file already present in your Git repository. For sample templates, see IBM Cloud Automation
// [templates](https://github.com/Cloud-Schematics).
//  The Schematics action API now supports bastion host connection with `non-root` user, and bastion connection type is
// marked as optional, when inventory connection type is set as [Windows Remote
// Management](https://www.ibm.com/docs/en/license-metric-tool?topic=v-configuring-winrm-hyper-hosts)(`winrm`).
//
//  For more information, about the Schematics create action,
//  see [ibmcloud schematics action
// create](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-create-action).
//  **Note** you cannot update the location and region once an action is created.
//  Also, make sure your IP addresses are in the
// [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses).
//
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions,
//  see [Schematics service access roles and required
// permissions](/docs/schematics?topic=schematics-access#action-permissions).
func (schematics20Api *Schematics20ApiV2) CreateAction(createActionOptions *CreateActionOptions) (result *Action, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateActionWithContext(context.Background(), createActionOptions)
}

// CreateActionWithContext is an alternate form of the CreateAction method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateActionWithContext(ctx context.Context, createActionOptions *CreateActionOptions) (result *Action, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createActionOptions, "createActionOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createActionOptions, "createActionOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/actions`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createActionOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateAction")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")
	if createActionOptions.XGithubToken != nil {
		builder.AddHeader("X-Github-token", fmt.Sprint(*createActionOptions.XGithubToken))
	}

	_, err = builder.SetBodyContentJSON(createActionOptions.Action)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAction)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetAction : Get action details
// Retrieve the detailed information of an actions from your IBM Cloud account.  This API returns a URL to the log file
// that you can retrieve by using  the `GET /v2/actions/{action_id}/logs` API.
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#action-permissions).
func (schematics20Api *Schematics20ApiV2) GetAction(getActionOptions *GetActionOptions) (result *Action, response *core.DetailedResponse, err error) {
	return schematics20Api.GetActionWithContext(context.Background(), getActionOptions)
}

// GetActionWithContext is an alternate form of the GetAction method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetActionWithContext(ctx context.Context, getActionOptions *GetActionOptions) (result *Action, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getActionOptions, "getActionOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getActionOptions, "getActionOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"action_id": *getActionOptions.ActionID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/actions/{action_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getActionOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetAction")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getActionOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*getActionOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAction)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteAction : Delete an action
// Delete a Schematics action and specify the Ansible playbook that you want to run against your IBM Cloud resources.
// **Note** you cannot delete or stop the job activity from an ongoing execution of an action defined in the playbook.
// You can repeat the execution of same job, whenever you patch the actions. For more information, about the Schematics
// action state, see  [Schematics action state
// diagram](https://cloud.ibm.com/docs/schematics?topic=schematics-action-setup#action-state-diagram).
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) DeleteAction(deleteActionOptions *DeleteActionOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteActionWithContext(context.Background(), deleteActionOptions)
}

// DeleteActionWithContext is an alternate form of the DeleteAction method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteActionWithContext(ctx context.Context, deleteActionOptions *DeleteActionOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteActionOptions, "deleteActionOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteActionOptions, "deleteActionOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"action_id": *deleteActionOptions.ActionID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/actions/{action_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteActionOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteAction")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	if deleteActionOptions.Force != nil {
		builder.AddHeader("force", fmt.Sprint(*deleteActionOptions.Force))
	}
	if deleteActionOptions.Propagate != nil {
		builder.AddHeader("propagate", fmt.Sprint(*deleteActionOptions.Propagate))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// UpdateAction : Update an action
// Update or replace an action to change the action state from the critical state to normal state, or pending state to
// the normal state for a successful execution. For more information, about the Schematics action state, see [Schematics
// action state diagram](https://cloud.ibm.com/docs/schematics?topic=schematics-action-setup#action-state-diagram).
//  The Schematics action API now supports bastion host connection with `non-root` user, and bastion connection type is
// marked as optional, when inventory connection type is set as [Windows Remote
// Management](https://www.ibm.com/docs/en/license-metric-tool?topic=v-configuring-winrm-hyper-hosts)(`winrm`).
//
//  **Note** you cannot update the location and region once an action is created. Also, make sure your IP addresses are
// in the [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses].
//
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) UpdateAction(updateActionOptions *UpdateActionOptions) (result *Action, response *core.DetailedResponse, err error) {
	return schematics20Api.UpdateActionWithContext(context.Background(), updateActionOptions)
}

// UpdateActionWithContext is an alternate form of the UpdateAction method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UpdateActionWithContext(ctx context.Context, updateActionOptions *UpdateActionOptions) (result *Action, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateActionOptions, "updateActionOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(updateActionOptions, "updateActionOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"action_id": *updateActionOptions.ActionID,
	}

	builder := core.NewRequestBuilder(core.PATCH)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/actions/{action_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range updateActionOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UpdateAction")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")
	if updateActionOptions.XGithubToken != nil {
		builder.AddHeader("X-Github-token", fmt.Sprint(*updateActionOptions.XGithubToken))
	}

	_, err = builder.SetBodyContentJSON(updateActionOptions.Action)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAction)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// UploadTemplateTarAction : Upload a TAR file to an action
// Update your template by uploading tape archive file (.tar) file from  your local machine. Before you use this API,
// you must create an action  without a link to a GitHub or GitLab repository with the `POST /v2/actions` API.
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions,
//  see [Schematics service access roles and required
// permissions](/docs/schematics?topic=schematics-access#action-permissions).
func (schematics20Api *Schematics20ApiV2) UploadTemplateTarAction(uploadTemplateTarActionOptions *UploadTemplateTarActionOptions) (result *TemplateRepoTarUploadResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.UploadTemplateTarActionWithContext(context.Background(), uploadTemplateTarActionOptions)
}

// UploadTemplateTarActionWithContext is an alternate form of the UploadTemplateTarAction method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UploadTemplateTarActionWithContext(ctx context.Context, uploadTemplateTarActionOptions *UploadTemplateTarActionOptions) (result *TemplateRepoTarUploadResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(uploadTemplateTarActionOptions, "uploadTemplateTarActionOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(uploadTemplateTarActionOptions, "uploadTemplateTarActionOptions")
	if err != nil {
		return
	}
	if uploadTemplateTarActionOptions.File == nil {
		err = fmt.Errorf("at least one of  or file must be supplied")
		return
	}

	pathParamsMap := map[string]string{
		"action_id": *uploadTemplateTarActionOptions.ActionID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/actions/{action_id}/template_repo_upload`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range uploadTemplateTarActionOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UploadTemplateTarAction")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if uploadTemplateTarActionOptions.File != nil {
		builder.AddFormData("file", "filename",
			core.StringNilMapper(uploadTemplateTarActionOptions.FileContentType), uploadTemplateTarActionOptions.File)
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTemplateRepoTarUploadResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListJobs : List jobs
// Retrieve a list of all Schematics jobs.  The job displays a list of jobs with the status as `pending`, `in_progess`,
// `success`, or `failed`. Jobs are generated when you use the  `POST /v2/jobs`, `PUT /v2/jobs/{job_id}`, or `DELETE
// /v2/jobs/{job_id}`.
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) ListJobs(listJobsOptions *ListJobsOptions) (result *JobList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListJobsWithContext(context.Background(), listJobsOptions)
}

// ListJobsWithContext is an alternate form of the ListJobs method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListJobsWithContext(ctx context.Context, listJobsOptions *ListJobsOptions) (result *JobList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listJobsOptions, "listJobsOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/jobs`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listJobsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListJobs")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listJobsOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listJobsOptions.Offset))
	}
	if listJobsOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listJobsOptions.Limit))
	}
	if listJobsOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listJobsOptions.Sort))
	}
	if listJobsOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*listJobsOptions.Profile))
	}
	if listJobsOptions.Resource != nil {
		builder.AddQuery("resource", fmt.Sprint(*listJobsOptions.Resource))
	}
	if listJobsOptions.ResourceID != nil {
		builder.AddQuery("resource_id", fmt.Sprint(*listJobsOptions.ResourceID))
	}
	if listJobsOptions.ActionID != nil {
		builder.AddQuery("action_id", fmt.Sprint(*listJobsOptions.ActionID))
	}
	if listJobsOptions.List != nil {
		builder.AddQuery("list", fmt.Sprint(*listJobsOptions.List))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalJobList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateJob : Create a job
// Create & launch the Schematics job. It can be used to launch an Ansible playbook against a target hosts.  The job
// displays a list of jobs with the status as `pending`, `in_progess`, `success`, or `failed`.
func (schematics20Api *Schematics20ApiV2) CreateJob(createJobOptions *CreateJobOptions) (result *Job, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateJobWithContext(context.Background(), createJobOptions)
}

// CreateJobWithContext is an alternate form of the CreateJob method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateJobWithContext(ctx context.Context, createJobOptions *CreateJobOptions) (result *Job, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createJobOptions, "createJobOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createJobOptions, "createJobOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/jobs`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createJobOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateJob")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")
	if createJobOptions.RefreshToken != nil {
		builder.AddHeader("refresh_token", fmt.Sprint(*createJobOptions.RefreshToken))
	}

	_, err = builder.SetBodyContentJSON(createJobOptions.Job)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalJob)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetJob : Get a job
// Retrieve the detailed information of Job
//
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) GetJob(getJobOptions *GetJobOptions) (result *Job, response *core.DetailedResponse, err error) {
	return schematics20Api.GetJobWithContext(context.Background(), getJobOptions)
}

// GetJobWithContext is an alternate form of the GetJob method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetJobWithContext(ctx context.Context, getJobOptions *GetJobOptions) (result *Job, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getJobOptions, "getJobOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getJobOptions, "getJobOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"job_id": *getJobOptions.JobID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/jobs/{job_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getJobOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetJob")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getJobOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*getJobOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalJob)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// UpdateJob : Update a job
// Creates a copy of the Schematics job and relaunches an existing job  by updating the information of an existing
// Schematics job.
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) UpdateJob(updateJobOptions *UpdateJobOptions) (result *Job, response *core.DetailedResponse, err error) {
	return schematics20Api.UpdateJobWithContext(context.Background(), updateJobOptions)
}

// UpdateJobWithContext is an alternate form of the UpdateJob method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UpdateJobWithContext(ctx context.Context, updateJobOptions *UpdateJobOptions) (result *Job, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateJobOptions, "updateJobOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(updateJobOptions, "updateJobOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"job_id": *updateJobOptions.JobID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/jobs/{job_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range updateJobOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UpdateJob")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")
	if updateJobOptions.RefreshToken != nil {
		builder.AddHeader("refresh_token", fmt.Sprint(*updateJobOptions.RefreshToken))
	}

	_, err = builder.SetBodyContentJSON(updateJobOptions.Job)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalJob)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteJob : Stop the running Job, and delete the Job
// Stop the running Job, and delete the Job.  **Note** You cannot delete or stop the job activity from an ongoing
// execution of an action defined in the playbook.  You can repeat the execution of same job, whenever you patch or
// update the action or workspace.
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) DeleteJob(deleteJobOptions *DeleteJobOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteJobWithContext(context.Background(), deleteJobOptions)
}

// DeleteJobWithContext is an alternate form of the DeleteJob method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteJobWithContext(ctx context.Context, deleteJobOptions *DeleteJobOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteJobOptions, "deleteJobOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteJobOptions, "deleteJobOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"job_id": *deleteJobOptions.JobID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/jobs/{job_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteJobOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteJob")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	if deleteJobOptions.RefreshToken != nil {
		builder.AddHeader("refresh_token", fmt.Sprint(*deleteJobOptions.RefreshToken))
	}
	if deleteJobOptions.Force != nil {
		builder.AddHeader("force", fmt.Sprint(*deleteJobOptions.Force))
	}
	if deleteJobOptions.Propagate != nil {
		builder.AddHeader("propagate", fmt.Sprint(*deleteJobOptions.Propagate))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// ListJobLogs : Get job logs
// Retrieve the job logs <h3>Authorization</h3> Schematics support generic authorization for its resources. For more
// information, about Schematics access and permissions, see [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) ListJobLogs(listJobLogsOptions *ListJobLogsOptions) (result *JobLog, response *core.DetailedResponse, err error) {
	return schematics20Api.ListJobLogsWithContext(context.Background(), listJobLogsOptions)
}

// ListJobLogsWithContext is an alternate form of the ListJobLogs method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListJobLogsWithContext(ctx context.Context, listJobLogsOptions *ListJobLogsOptions) (result *JobLog, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(listJobLogsOptions, "listJobLogsOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(listJobLogsOptions, "listJobLogsOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"job_id": *listJobLogsOptions.JobID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/jobs/{job_id}/logs`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range listJobLogsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListJobLogs")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalJobLog)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetJobFiles : Get output files from the Job record
// Get output files from the Job record. For more information, about the Schematics job status, download job logs, and
// download the output files, see [Download Schematics
// Job](https://cloud.ibm.com/docs/schematics?topic=schematics-job-download).
func (schematics20Api *Schematics20ApiV2) GetJobFiles(getJobFilesOptions *GetJobFilesOptions) (result *JobFileData, response *core.DetailedResponse, err error) {
	return schematics20Api.GetJobFilesWithContext(context.Background(), getJobFilesOptions)
}

// GetJobFilesWithContext is an alternate form of the GetJobFiles method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetJobFilesWithContext(ctx context.Context, getJobFilesOptions *GetJobFilesOptions) (result *JobFileData, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getJobFilesOptions, "getJobFilesOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getJobFilesOptions, "getJobFilesOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"job_id": *getJobFilesOptions.JobID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/jobs/{job_id}/files`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getJobFilesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetJobFiles")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	builder.AddQuery("file_type", fmt.Sprint(*getJobFilesOptions.FileType))

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalJobFileData)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListControls : Get all Controls definition
// Get all Controls definition.
func (schematics20Api *Schematics20ApiV2) ListControls(listControlsOptions *ListControlsOptions) (result *ControlsList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListControlsWithContext(context.Background(), listControlsOptions)
}

// ListControlsWithContext is an alternate form of the ListControls method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListControlsWithContext(ctx context.Context, listControlsOptions *ListControlsOptions) (result *ControlsList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listControlsOptions, "listControlsOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/controls`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listControlsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListControls")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listControlsOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listControlsOptions.Offset))
	}
	if listControlsOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listControlsOptions.Limit))
	}
	if listControlsOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listControlsOptions.Sort))
	}
	if listControlsOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*listControlsOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalControlsList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateControls : Register a new Controls definition
// Create a new Controls definition.
func (schematics20Api *Schematics20ApiV2) CreateControls(createControlsOptions *CreateControlsOptions) (result *Controls, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateControlsWithContext(context.Background(), createControlsOptions)
}

// CreateControlsWithContext is an alternate form of the CreateControls method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateControlsWithContext(ctx context.Context, createControlsOptions *CreateControlsOptions) (result *Controls, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createControlsOptions, "createControlsOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createControlsOptions, "createControlsOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/controls`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createControlsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateControls")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createControlsOptions.Controls)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalControls)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetControls : Get the Controls definition
// Get the Controls definition.
func (schematics20Api *Schematics20ApiV2) GetControls(getControlsOptions *GetControlsOptions) (result *Controls, response *core.DetailedResponse, err error) {
	return schematics20Api.GetControlsWithContext(context.Background(), getControlsOptions)
}

// GetControlsWithContext is an alternate form of the GetControls method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetControlsWithContext(ctx context.Context, getControlsOptions *GetControlsOptions) (result *Controls, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getControlsOptions, "getControlsOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getControlsOptions, "getControlsOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"controls_id": *getControlsOptions.ControlsID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/controls/{controls_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getControlsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetControls")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getControlsOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*getControlsOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalControls)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteControls : Delete the Controls definition
// Delete the Controls definition.
func (schematics20Api *Schematics20ApiV2) DeleteControls(deleteControlsOptions *DeleteControlsOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteControlsWithContext(context.Background(), deleteControlsOptions)
}

// DeleteControlsWithContext is an alternate form of the DeleteControls method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteControlsWithContext(ctx context.Context, deleteControlsOptions *DeleteControlsOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteControlsOptions, "deleteControlsOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteControlsOptions, "deleteControlsOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"controls_id": *deleteControlsOptions.ControlsID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/controls/{controls_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteControlsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteControls")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	if deleteControlsOptions.Force != nil {
		builder.AddHeader("force", fmt.Sprint(*deleteControlsOptions.Force))
	}
	if deleteControlsOptions.Propagate != nil {
		builder.AddHeader("propagate", fmt.Sprint(*deleteControlsOptions.Propagate))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// UpdateControls : Update the Controls definition
// Update the Controls definition.
func (schematics20Api *Schematics20ApiV2) UpdateControls(updateControlsOptions *UpdateControlsOptions) (result *Controls, response *core.DetailedResponse, err error) {
	return schematics20Api.UpdateControlsWithContext(context.Background(), updateControlsOptions)
}

// UpdateControlsWithContext is an alternate form of the UpdateControls method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UpdateControlsWithContext(ctx context.Context, updateControlsOptions *UpdateControlsOptions) (result *Controls, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateControlsOptions, "updateControlsOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(updateControlsOptions, "updateControlsOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"controls_id": *updateControlsOptions.ControlsID,
	}

	builder := core.NewRequestBuilder(core.PATCH)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/controls/{controls_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range updateControlsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UpdateControls")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(updateControlsOptions.Controls)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalControls)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListCapsules : Get all Policy Capsules in the Controls definition
// Get all Policy Capsules in the Controls definition.
func (schematics20Api *Schematics20ApiV2) ListCapsules(listCapsulesOptions *ListCapsulesOptions) (result *CapsuleList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListCapsulesWithContext(context.Background(), listCapsulesOptions)
}

// ListCapsulesWithContext is an alternate form of the ListCapsules method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListCapsulesWithContext(ctx context.Context, listCapsulesOptions *ListCapsulesOptions) (result *CapsuleList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(listCapsulesOptions, "listCapsulesOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(listCapsulesOptions, "listCapsulesOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"controls_id": *listCapsulesOptions.ControlsID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/controls/{controls_id}/capsules`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range listCapsulesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListCapsules")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listCapsulesOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listCapsulesOptions.Offset))
	}
	if listCapsulesOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listCapsulesOptions.Limit))
	}
	if listCapsulesOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listCapsulesOptions.Sort))
	}
	if listCapsulesOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*listCapsulesOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCapsuleList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateCapsule : Register a Policy Capsule to the Controls definition
// Create a Policy Capsule in the Controls definition.
func (schematics20Api *Schematics20ApiV2) CreateCapsule(createCapsuleOptions *CreateCapsuleOptions) (result *CapsuleList, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateCapsuleWithContext(context.Background(), createCapsuleOptions)
}

// CreateCapsuleWithContext is an alternate form of the CreateCapsule method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateCapsuleWithContext(ctx context.Context, createCapsuleOptions *CreateCapsuleOptions) (result *CapsuleList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createCapsuleOptions, "createCapsuleOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createCapsuleOptions, "createCapsuleOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"controls_id": *createCapsuleOptions.ControlsID,
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/controls/{controls_id}/capsules`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range createCapsuleOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateCapsule")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createCapsuleOptions.Capsule)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCapsuleList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetCapsule : Get Policy Capsule from the Controls definition
// Get Policy Capsule from the Controls definition.
func (schematics20Api *Schematics20ApiV2) GetCapsule(getCapsuleOptions *GetCapsuleOptions) (result *Capsule, response *core.DetailedResponse, err error) {
	return schematics20Api.GetCapsuleWithContext(context.Background(), getCapsuleOptions)
}

// GetCapsuleWithContext is an alternate form of the GetCapsule method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetCapsuleWithContext(ctx context.Context, getCapsuleOptions *GetCapsuleOptions) (result *Capsule, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getCapsuleOptions, "getCapsuleOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getCapsuleOptions, "getCapsuleOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"controls_id": *getCapsuleOptions.ControlsID,
		"capsule_id":  *getCapsuleOptions.CapsuleID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/controls/{controls_id}/capsules/{capsule_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getCapsuleOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetCapsule")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getCapsuleOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*getCapsuleOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCapsule)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteCapsule : Unregister the Policy Capsule from the Controls
// Delete the Policy Capsule from the Controls.
func (schematics20Api *Schematics20ApiV2) DeleteCapsule(deleteCapsuleOptions *DeleteCapsuleOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteCapsuleWithContext(context.Background(), deleteCapsuleOptions)
}

// DeleteCapsuleWithContext is an alternate form of the DeleteCapsule method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteCapsuleWithContext(ctx context.Context, deleteCapsuleOptions *DeleteCapsuleOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteCapsuleOptions, "deleteCapsuleOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteCapsuleOptions, "deleteCapsuleOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"controls_id": *deleteCapsuleOptions.ControlsID,
		"capsule_id":  *deleteCapsuleOptions.CapsuleID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/controls/{controls_id}/capsules/{capsule_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteCapsuleOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteCapsule")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// UpdateCapsule : Update the Policy Capsule in the Controls definition
// Update the Policy Capsule in the Controls definition.
func (schematics20Api *Schematics20ApiV2) UpdateCapsule(updateCapsuleOptions *UpdateCapsuleOptions) (result *Capsule, response *core.DetailedResponse, err error) {
	return schematics20Api.UpdateCapsuleWithContext(context.Background(), updateCapsuleOptions)
}

// UpdateCapsuleWithContext is an alternate form of the UpdateCapsule method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UpdateCapsuleWithContext(ctx context.Context, updateCapsuleOptions *UpdateCapsuleOptions) (result *Capsule, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateCapsuleOptions, "updateCapsuleOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(updateCapsuleOptions, "updateCapsuleOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"controls_id": *updateCapsuleOptions.ControlsID,
		"capsule_id":  *updateCapsuleOptions.CapsuleID,
	}

	builder := core.NewRequestBuilder(core.PATCH)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/controls/{controls_id}/capsules/{capsule_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range updateCapsuleOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UpdateCapsule")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(updateCapsuleOptions.Capsule)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCapsule)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListDatasets : Get all shared datasets
// Get all shared datasets.
func (schematics20Api *Schematics20ApiV2) ListDatasets(listDatasetsOptions *ListDatasetsOptions) (result *DatasetList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListDatasetsWithContext(context.Background(), listDatasetsOptions)
}

// ListDatasetsWithContext is an alternate form of the ListDatasets method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListDatasetsWithContext(ctx context.Context, listDatasetsOptions *ListDatasetsOptions) (result *DatasetList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listDatasetsOptions, "listDatasetsOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/datasets`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listDatasetsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListDatasets")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listDatasetsOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listDatasetsOptions.Offset))
	}
	if listDatasetsOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listDatasetsOptions.Limit))
	}
	if listDatasetsOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listDatasetsOptions.Sort))
	}
	if listDatasetsOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*listDatasetsOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDatasetList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateDataset : Create a shared dataset
// Create a shared dataset.
func (schematics20Api *Schematics20ApiV2) CreateDataset(createDatasetOptions *CreateDatasetOptions) (result *Dataset, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateDatasetWithContext(context.Background(), createDatasetOptions)
}

// CreateDatasetWithContext is an alternate form of the CreateDataset method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateDatasetWithContext(ctx context.Context, createDatasetOptions *CreateDatasetOptions) (result *Dataset, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createDatasetOptions, "createDatasetOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createDatasetOptions, "createDatasetOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/datasets`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createDatasetOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateDataset")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createDatasetOptions.Dataset)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDataset)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetDataset : Get the shared dataset
// Get the Shared dataset.
func (schematics20Api *Schematics20ApiV2) GetDataset(getDatasetOptions *GetDatasetOptions) (result *Dataset, response *core.DetailedResponse, err error) {
	return schematics20Api.GetDatasetWithContext(context.Background(), getDatasetOptions)
}

// GetDatasetWithContext is an alternate form of the GetDataset method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetDatasetWithContext(ctx context.Context, getDatasetOptions *GetDatasetOptions) (result *Dataset, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getDatasetOptions, "getDatasetOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getDatasetOptions, "getDatasetOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"dataset_id": *getDatasetOptions.DatasetID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/datasets/{dataset_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getDatasetOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetDataset")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDataset)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ReplaceDataset : Replace the shared dataset
// Replace the shared dataset.
func (schematics20Api *Schematics20ApiV2) ReplaceDataset(replaceDatasetOptions *ReplaceDatasetOptions) (result *Dataset, response *core.DetailedResponse, err error) {
	return schematics20Api.ReplaceDatasetWithContext(context.Background(), replaceDatasetOptions)
}

// ReplaceDatasetWithContext is an alternate form of the ReplaceDataset method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ReplaceDatasetWithContext(ctx context.Context, replaceDatasetOptions *ReplaceDatasetOptions) (result *Dataset, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceDatasetOptions, "replaceDatasetOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(replaceDatasetOptions, "replaceDatasetOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"dataset_id": *replaceDatasetOptions.DatasetID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/datasets/{dataset_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range replaceDatasetOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ReplaceDataset")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(replaceDatasetOptions.Dataset)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDataset)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteDataset : Delete the Shared dataset
// Delete the shared dataset.
func (schematics20Api *Schematics20ApiV2) DeleteDataset(deleteDatasetOptions *DeleteDatasetOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteDatasetWithContext(context.Background(), deleteDatasetOptions)
}

// DeleteDatasetWithContext is an alternate form of the DeleteDataset method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteDatasetWithContext(ctx context.Context, deleteDatasetOptions *DeleteDatasetOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteDatasetOptions, "deleteDatasetOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteDatasetOptions, "deleteDatasetOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"dataset_id": *deleteDatasetOptions.DatasetID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/datasets/{dataset_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteDatasetOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteDataset")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	if deleteDatasetOptions.Force != nil {
		builder.AddHeader("force", fmt.Sprint(*deleteDatasetOptions.Force))
	}
	if deleteDatasetOptions.Propagate != nil {
		builder.AddHeader("propagate", fmt.Sprint(*deleteDatasetOptions.Propagate))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// UpdateAtaset : Update the shared dataset
// Update the shared dataset details.
func (schematics20Api *Schematics20ApiV2) UpdateAtaset(updateAtasetOptions *UpdateAtasetOptions) (result *Dataset, response *core.DetailedResponse, err error) {
	return schematics20Api.UpdateAtasetWithContext(context.Background(), updateAtasetOptions)
}

// UpdateAtasetWithContext is an alternate form of the UpdateAtaset method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UpdateAtasetWithContext(ctx context.Context, updateAtasetOptions *UpdateAtasetOptions) (result *Dataset, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateAtasetOptions, "updateAtasetOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(updateAtasetOptions, "updateAtasetOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"dataset_id": *updateAtasetOptions.DatasetID,
	}

	builder := core.NewRequestBuilder(core.PATCH)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/datasets/{dataset_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range updateAtasetOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UpdateAtaset")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(updateAtasetOptions.Dataset)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDataset)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListDatasetVariables : Get all the Shared dataset variable definitions
// Get all the shared dataset variable definitions (variables, values, metadata).
func (schematics20Api *Schematics20ApiV2) ListDatasetVariables(listDatasetVariablesOptions *ListDatasetVariablesOptions) (result *VariableDataList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListDatasetVariablesWithContext(context.Background(), listDatasetVariablesOptions)
}

// ListDatasetVariablesWithContext is an alternate form of the ListDatasetVariables method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListDatasetVariablesWithContext(ctx context.Context, listDatasetVariablesOptions *ListDatasetVariablesOptions) (result *VariableDataList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(listDatasetVariablesOptions, "listDatasetVariablesOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(listDatasetVariablesOptions, "listDatasetVariablesOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"dataset_id": *listDatasetVariablesOptions.DatasetID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/datasets/{dataset_id}/variables`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range listDatasetVariablesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListDatasetVariables")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalVariableDataList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetDatasetVariable : Get the Shared dataset
// Get the shared dataset.
func (schematics20Api *Schematics20ApiV2) GetDatasetVariable(getDatasetVariableOptions *GetDatasetVariableOptions) (result *VariableData, response *core.DetailedResponse, err error) {
	return schematics20Api.GetDatasetVariableWithContext(context.Background(), getDatasetVariableOptions)
}

// GetDatasetVariableWithContext is an alternate form of the GetDatasetVariable method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetDatasetVariableWithContext(ctx context.Context, getDatasetVariableOptions *GetDatasetVariableOptions) (result *VariableData, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getDatasetVariableOptions, "getDatasetVariableOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getDatasetVariableOptions, "getDatasetVariableOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"dataset_id": *getDatasetVariableOptions.DatasetID,
		"var_name":   *getDatasetVariableOptions.VarName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/datasets/{dataset_id}/values/{var_name}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getDatasetVariableOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetDatasetVariable")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalVariableData)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListInventories : List inventory definitions
// Retrieve a list of all Schematics inventories that depends on the API endpoint that you have access. For example, if
// you use an API endpoint for a geography, such as North America, only inventories that are created in `us-south` or
// `us-east` are retrieved. For more information, about supported API endpoints, see
// [APIendpoints](/apidocs/schematics#api-endpoints).
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) ListInventories(listInventoriesOptions *ListInventoriesOptions) (result *InventoryResourceRecordList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListInventoriesWithContext(context.Background(), listInventoriesOptions)
}

// ListInventoriesWithContext is an alternate form of the ListInventories method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListInventoriesWithContext(ctx context.Context, listInventoriesOptions *ListInventoriesOptions) (result *InventoryResourceRecordList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listInventoriesOptions, "listInventoriesOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/inventories`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listInventoriesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListInventories")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listInventoriesOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listInventoriesOptions.Offset))
	}
	if listInventoriesOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listInventoriesOptions.Limit))
	}
	if listInventoriesOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listInventoriesOptions.Sort))
	}
	if listInventoriesOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*listInventoriesOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalInventoryResourceRecordList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateInventory : Create an inventory definition
// Create an IBM Cloud Schematics inventory as a single IBM Cloud resource where you want to run Ansible playbook by
// using Schematics actions. For more information, about inventory host groups, refer to [creating static and dynamic
// inventory for Schematics actions](https://cloud.ibm.com/docs/schematics?topic=schematics-inventories-setup).
//  **Note** you cannot update the location and region, resource group once an action is created. Also, make sure your
// IP addresses are in the [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses).
//  If your Git repository already contains a host file. Schematics does not overwrite the host file already present in
// your Git repository.
//
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) CreateInventory(createInventoryOptions *CreateInventoryOptions) (result *InventoryResourceRecord, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateInventoryWithContext(context.Background(), createInventoryOptions)
}

// CreateInventoryWithContext is an alternate form of the CreateInventory method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateInventoryWithContext(ctx context.Context, createInventoryOptions *CreateInventoryOptions) (result *InventoryResourceRecord, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createInventoryOptions, "createInventoryOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createInventoryOptions, "createInventoryOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/inventories`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createInventoryOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateInventory")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createInventoryOptions.InventoryResourceDefinition)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalInventoryResourceRecord)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetInventory : Get an inventory definition
// Use this API to retrieve the detailed information for a resource inventory definition used to target an action in
// your IBM Cloud account. For more information, about inventory get, refer to [ibmcloud schematics inventory
// get](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-get-inv).
//  **Note** you can fetch only the location and region, resource group from where your inventory is created.
//  Also, make sure your IP addresses are in the
// [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses).
//
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) GetInventory(getInventoryOptions *GetInventoryOptions) (result *InventoryResourceRecord, response *core.DetailedResponse, err error) {
	return schematics20Api.GetInventoryWithContext(context.Background(), getInventoryOptions)
}

// GetInventoryWithContext is an alternate form of the GetInventory method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetInventoryWithContext(ctx context.Context, getInventoryOptions *GetInventoryOptions) (result *InventoryResourceRecord, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getInventoryOptions, "getInventoryOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getInventoryOptions, "getInventoryOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"inventory_id": *getInventoryOptions.InventoryID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/inventories/{inventory_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getInventoryOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetInventory")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getInventoryOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*getInventoryOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalInventoryResourceRecord)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ReplaceInventory : Update an inventory definition
// Use this API to update the inventory definition resource used to target an action. For more information, about
// inventory update, refer to [ibmcloud schematics inventory
// update](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-update-inv).
//  **Note** you cannot update the location and region, resource group once an action is created.
//  Also, make sure your IP addresses are in the
// [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses).
//
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) ReplaceInventory(replaceInventoryOptions *ReplaceInventoryOptions) (result *InventoryResourceRecord, response *core.DetailedResponse, err error) {
	return schematics20Api.ReplaceInventoryWithContext(context.Background(), replaceInventoryOptions)
}

// ReplaceInventoryWithContext is an alternate form of the ReplaceInventory method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ReplaceInventoryWithContext(ctx context.Context, replaceInventoryOptions *ReplaceInventoryOptions) (result *InventoryResourceRecord, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceInventoryOptions, "replaceInventoryOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(replaceInventoryOptions, "replaceInventoryOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"inventory_id": *replaceInventoryOptions.InventoryID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/inventories/{inventory_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range replaceInventoryOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ReplaceInventory")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(replaceInventoryOptions.InventoryResourceDefinition)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalInventoryResourceRecord)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteInventory : Delete an inventory definition
// Use this API to delete the resource inventory definition by using the inventory ID that you want to run against. For
// more information, about inventory delete, refer to [ibmcloud schematics inventory
// delete](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-delete-inventory).
//
//  **Note** you cannot delete the location and region, resource group from where your inventory is created. Also, make
// sure your IP addresses are in the
// [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses).
//
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) DeleteInventory(deleteInventoryOptions *DeleteInventoryOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteInventoryWithContext(context.Background(), deleteInventoryOptions)
}

// DeleteInventoryWithContext is an alternate form of the DeleteInventory method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteInventoryWithContext(ctx context.Context, deleteInventoryOptions *DeleteInventoryOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteInventoryOptions, "deleteInventoryOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteInventoryOptions, "deleteInventoryOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"inventory_id": *deleteInventoryOptions.InventoryID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/inventories/{inventory_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteInventoryOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteInventory")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	if deleteInventoryOptions.Force != nil {
		builder.AddHeader("force", fmt.Sprint(*deleteInventoryOptions.Force))
	}
	if deleteInventoryOptions.Propagate != nil {
		builder.AddHeader("propagate", fmt.Sprint(*deleteInventoryOptions.Propagate))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// ListResourceQuery : List resource queries
// Retrieve the list of resource query definitions that you have access to.  The list of resource queries that is
// returned depends on the API  endpoint that you use. For example, if you use an API endpoint for a geography, such as
// North America, only resource query definitions that are created in `us-south` or `us-east` are retrieved. For more
// information, about supported API endpoints, see [API endpoints](/apidocs/schematics#api-endpoints).
// <h3>Authorization</h3>
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) ListResourceQuery(listResourceQueryOptions *ListResourceQueryOptions) (result *ResourceQueryRecordList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListResourceQueryWithContext(context.Background(), listResourceQueryOptions)
}

// ListResourceQueryWithContext is an alternate form of the ListResourceQuery method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListResourceQueryWithContext(ctx context.Context, listResourceQueryOptions *ListResourceQueryOptions) (result *ResourceQueryRecordList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listResourceQueryOptions, "listResourceQueryOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/resources_query`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listResourceQueryOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListResourceQuery")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listResourceQueryOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listResourceQueryOptions.Offset))
	}
	if listResourceQueryOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listResourceQueryOptions.Limit))
	}
	if listResourceQueryOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listResourceQueryOptions.Sort))
	}
	if listResourceQueryOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*listResourceQueryOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalResourceQueryRecordList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateResourceQuery : Create resource query
// Use this API to create a resource query definition that will be used to select an IBM Cloud resource or a group of
// resources as the dynamic inventory for the Schematics Actions. For more information, about resource query commands,
// refer to  [ibmcloud schematics resource query
// create](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-create-rq).
// **Note** you cannot update the location and region, resource group  once an action is created. Also, make sure your
// IP addresses are  in the [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses). If
// your Git repository already contains a host file.  Schematics does not overwrite the host file already present in
// your Git repository.
// <h3>Authorization</h3>
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) CreateResourceQuery(createResourceQueryOptions *CreateResourceQueryOptions) (result *ResourceQueryRecord, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateResourceQueryWithContext(context.Background(), createResourceQueryOptions)
}

// CreateResourceQueryWithContext is an alternate form of the CreateResourceQuery method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateResourceQueryWithContext(ctx context.Context, createResourceQueryOptions *CreateResourceQueryOptions) (result *ResourceQueryRecord, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createResourceQueryOptions, "createResourceQueryOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createResourceQueryOptions, "createResourceQueryOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/resources_query`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createResourceQueryOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateResourceQuery")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createResourceQueryOptions.ResourceQueryDefinition)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalResourceQueryRecord)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetResourcesQuery : Get resources query
// Use this API to retrieve the information resource query by Id.  For more information, about resource query commands,
// refer to  [ibmcloud schematics resource query
// get](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-get-rq).
// <h3>Authorization</h3>
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) GetResourcesQuery(getResourcesQueryOptions *GetResourcesQueryOptions) (result *ResourceQueryRecord, response *core.DetailedResponse, err error) {
	return schematics20Api.GetResourcesQueryWithContext(context.Background(), getResourcesQueryOptions)
}

// GetResourcesQueryWithContext is an alternate form of the GetResourcesQuery method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetResourcesQueryWithContext(ctx context.Context, getResourcesQueryOptions *GetResourcesQueryOptions) (result *ResourceQueryRecord, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getResourcesQueryOptions, "getResourcesQueryOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getResourcesQueryOptions, "getResourcesQueryOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"query_id": *getResourcesQueryOptions.QueryID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/resources_query/{query_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getResourcesQueryOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetResourcesQuery")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalResourceQueryRecord)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ReplaceResourcesQuery : Update resources query definition
// Use this API to update the resource query definition used to build  the dynamic inventory for the Schematics Action.
// For more information, about resource query commands, refer to [ibmcloud schematics resource query
// update](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-update-rq).
// **Note** you cannot update the location and region, resource group  once a resource query is created. Also, make sure
// your IP addresses  are in the
// [allowlist](https://cloud.ibm.com/docs/schematics?topic=schematics-allowed-ipaddresses).
// <h3>Authorization</h3>
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) ReplaceResourcesQuery(replaceResourcesQueryOptions *ReplaceResourcesQueryOptions) (result *ResourceQueryRecord, response *core.DetailedResponse, err error) {
	return schematics20Api.ReplaceResourcesQueryWithContext(context.Background(), replaceResourcesQueryOptions)
}

// ReplaceResourcesQueryWithContext is an alternate form of the ReplaceResourcesQuery method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ReplaceResourcesQueryWithContext(ctx context.Context, replaceResourcesQueryOptions *ReplaceResourcesQueryOptions) (result *ResourceQueryRecord, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceResourcesQueryOptions, "replaceResourcesQueryOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(replaceResourcesQueryOptions, "replaceResourcesQueryOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"query_id": *replaceResourcesQueryOptions.QueryID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/resources_query/{query_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range replaceResourcesQueryOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ReplaceResourcesQuery")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(replaceResourcesQueryOptions.ResourceQueryDefinition)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalResourceQueryRecord)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ExecuteResourceQuery : Run the resource query
// Run the resource query.
func (schematics20Api *Schematics20ApiV2) ExecuteResourceQuery(executeResourceQueryOptions *ExecuteResourceQueryOptions) (result *ResourceQueryResponseRecord, response *core.DetailedResponse, err error) {
	return schematics20Api.ExecuteResourceQueryWithContext(context.Background(), executeResourceQueryOptions)
}

// ExecuteResourceQueryWithContext is an alternate form of the ExecuteResourceQuery method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ExecuteResourceQueryWithContext(ctx context.Context, executeResourceQueryOptions *ExecuteResourceQueryOptions) (result *ResourceQueryResponseRecord, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(executeResourceQueryOptions, "executeResourceQueryOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(executeResourceQueryOptions, "executeResourceQueryOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"query_id": *executeResourceQueryOptions.QueryID,
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/resources_query/{query_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range executeResourceQueryOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ExecuteResourceQuery")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalResourceQueryResponseRecord)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteResourcesQuery : Delete resources query
// Use this API to delete the resource query definition by Id.  For more information, about resource query commands,
// refer to  [ibmcloud schematics resource query
// delete](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-delete-resource-query).
// <h3>Authorization</h3>
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) DeleteResourcesQuery(deleteResourcesQueryOptions *DeleteResourcesQueryOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteResourcesQueryWithContext(context.Background(), deleteResourcesQueryOptions)
}

// DeleteResourcesQueryWithContext is an alternate form of the DeleteResourcesQuery method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteResourcesQueryWithContext(ctx context.Context, deleteResourcesQueryOptions *DeleteResourcesQueryOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteResourcesQueryOptions, "deleteResourcesQueryOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteResourcesQueryOptions, "deleteResourcesQueryOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"query_id": *deleteResourcesQueryOptions.QueryID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/resources_query/{query_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteResourcesQueryOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteResourcesQuery")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	if deleteResourcesQueryOptions.Force != nil {
		builder.AddHeader("force", fmt.Sprint(*deleteResourcesQueryOptions.Force))
	}
	if deleteResourcesQueryOptions.Propagate != nil {
		builder.AddHeader("propagate", fmt.Sprint(*deleteResourcesQueryOptions.Propagate))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// ListAgent : Get all registered agents, in the Account
// Get all registered agents, in the Account.
func (schematics20Api *Schematics20ApiV2) ListAgent(listAgentOptions *ListAgentOptions) (result *AgentList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListAgentWithContext(context.Background(), listAgentOptions)
}

// ListAgentWithContext is an alternate form of the ListAgent method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListAgentWithContext(ctx context.Context, listAgentOptions *ListAgentOptions) (result *AgentList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listAgentOptions, "listAgentOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/agents`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listAgentOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListAgent")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listAgentOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listAgentOptions.Offset))
	}
	if listAgentOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listAgentOptions.Limit))
	}
	if listAgentOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*listAgentOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAgentList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// RegisterAgent : Register the agent with schematics
// Register the agent with schematics.
func (schematics20Api *Schematics20ApiV2) RegisterAgent(registerAgentOptions *RegisterAgentOptions) (result *Agent, response *core.DetailedResponse, err error) {
	return schematics20Api.RegisterAgentWithContext(context.Background(), registerAgentOptions)
}

// RegisterAgentWithContext is an alternate form of the RegisterAgent method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) RegisterAgentWithContext(ctx context.Context, registerAgentOptions *RegisterAgentOptions) (result *Agent, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(registerAgentOptions, "registerAgentOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(registerAgentOptions, "registerAgentOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/agents`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range registerAgentOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "RegisterAgent")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(registerAgentOptions.Agent)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAgent)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetAgent : Get the registered agent details
// Get the registered agent details.
func (schematics20Api *Schematics20ApiV2) GetAgent(getAgentOptions *GetAgentOptions) (result *Agent, response *core.DetailedResponse, err error) {
	return schematics20Api.GetAgentWithContext(context.Background(), getAgentOptions)
}

// GetAgentWithContext is an alternate form of the GetAgent method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetAgentWithContext(ctx context.Context, getAgentOptions *GetAgentOptions) (result *Agent, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getAgentOptions, "getAgentOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getAgentOptions, "getAgentOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"agent_id": *getAgentOptions.AgentID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/agents/{agent_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getAgentOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetAgent")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getAgentOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*getAgentOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAgent)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteAgent : Deregister the agent
// Deregister the agent.
func (schematics20Api *Schematics20ApiV2) DeleteAgent(deleteAgentOptions *DeleteAgentOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteAgentWithContext(context.Background(), deleteAgentOptions)
}

// DeleteAgentWithContext is an alternate form of the DeleteAgent method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteAgentWithContext(ctx context.Context, deleteAgentOptions *DeleteAgentOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteAgentOptions, "deleteAgentOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteAgentOptions, "deleteAgentOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"agent_id": *deleteAgentOptions.AgentID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/agents/{agent_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteAgentOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteAgent")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// UpdateAgentRegistration : Update the agent registration
// Update the agent registeration.
func (schematics20Api *Schematics20ApiV2) UpdateAgentRegistration(updateAgentRegistrationOptions *UpdateAgentRegistrationOptions) (result *Agent, response *core.DetailedResponse, err error) {
	return schematics20Api.UpdateAgentRegistrationWithContext(context.Background(), updateAgentRegistrationOptions)
}

// UpdateAgentRegistrationWithContext is an alternate form of the UpdateAgentRegistration method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UpdateAgentRegistrationWithContext(ctx context.Context, updateAgentRegistrationOptions *UpdateAgentRegistrationOptions) (result *Agent, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateAgentRegistrationOptions, "updateAgentRegistrationOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(updateAgentRegistrationOptions, "updateAgentRegistrationOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"agent_id": *updateAgentRegistrationOptions.AgentID,
	}

	builder := core.NewRequestBuilder(core.PATCH)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/agents/{agent_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range updateAgentRegistrationOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UpdateAgentRegistration")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(updateAgentRegistrationOptions.Agent)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAgent)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetDatasetVariableValue : Shared dataset value for {var_name}
// Get the Shared dataset value for {var_name}; "$$D(dataset_id):$$V(var_name)".
func (schematics20Api *Schematics20ApiV2) GetDatasetVariableValue(getDatasetVariableValueOptions *GetDatasetVariableValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.GetDatasetVariableValueWithContext(context.Background(), getDatasetVariableValueOptions)
}

// GetDatasetVariableValueWithContext is an alternate form of the GetDatasetVariableValue method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetDatasetVariableValueWithContext(ctx context.Context, getDatasetVariableValueOptions *GetDatasetVariableValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getDatasetVariableValueOptions, "getDatasetVariableValueOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getDatasetVariableValueOptions, "getDatasetVariableValueOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"dataset_id": *getDatasetVariableValueOptions.DatasetID,
		"var_name":   *getDatasetVariableValueOptions.VarName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/datasets/{dataset_id}/values/{var_name}/value`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getDatasetVariableValueOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetDatasetVariableValue")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalValueResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetCredentialVariableValue : Get the credential value for {var_name}
// Get the credential value for {var_name}; "$$C(creds_id):$$V(var_name)".
func (schematics20Api *Schematics20ApiV2) GetCredentialVariableValue(getCredentialVariableValueOptions *GetCredentialVariableValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.GetCredentialVariableValueWithContext(context.Background(), getCredentialVariableValueOptions)
}

// GetCredentialVariableValueWithContext is an alternate form of the GetCredentialVariableValue method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetCredentialVariableValueWithContext(ctx context.Context, getCredentialVariableValueOptions *GetCredentialVariableValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getCredentialVariableValueOptions, "getCredentialVariableValueOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getCredentialVariableValueOptions, "getCredentialVariableValueOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"creds_id": *getCredentialVariableValueOptions.CredsID,
		"var_name": *getCredentialVariableValueOptions.VarName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/credentials/{creds_id}/variables/{var_name}/value`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getCredentialVariableValueOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetCredentialVariableValue")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalValueResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetInventoryVariableValue : Get the resource ids for {var_name}
// Get the resource ids for {var_name}.
func (schematics20Api *Schematics20ApiV2) GetInventoryVariableValue(getInventoryVariableValueOptions *GetInventoryVariableValueOptions) (result *ValueListResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.GetInventoryVariableValueWithContext(context.Background(), getInventoryVariableValueOptions)
}

// GetInventoryVariableValueWithContext is an alternate form of the GetInventoryVariableValue method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetInventoryVariableValueWithContext(ctx context.Context, getInventoryVariableValueOptions *GetInventoryVariableValueOptions) (result *ValueListResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getInventoryVariableValueOptions, "getInventoryVariableValueOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getInventoryVariableValueOptions, "getInventoryVariableValueOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"inventory_id": *getInventoryVariableValueOptions.InventoryID,
		"var_name":     *getInventoryVariableValueOptions.VarName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/inventories/{inventory_id}/variables/{var_name}/value`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getInventoryVariableValueOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetInventoryVariableValue")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalValueListResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetWorkspaceInputValue : Workspace Input value for {var_name}, used by the recent job execution
// Get Workspace Input value for {var_name}, used by the recent job execution; "$$W(workspace_name):$$I(var_name)".
func (schematics20Api *Schematics20ApiV2) GetWorkspaceInputValue(getWorkspaceInputValueOptions *GetWorkspaceInputValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.GetWorkspaceInputValueWithContext(context.Background(), getWorkspaceInputValueOptions)
}

// GetWorkspaceInputValueWithContext is an alternate form of the GetWorkspaceInputValue method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetWorkspaceInputValueWithContext(ctx context.Context, getWorkspaceInputValueOptions *GetWorkspaceInputValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getWorkspaceInputValueOptions, "getWorkspaceInputValueOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getWorkspaceInputValueOptions, "getWorkspaceInputValueOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id":     *getWorkspaceInputValueOptions.WID,
		"var_name": *getWorkspaceInputValueOptions.VarName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/inputs/{var_name}/value`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getWorkspaceInputValueOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetWorkspaceInputValue")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getWorkspaceInputValueOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*getWorkspaceInputValueOptions.Limit))
	}
	if getWorkspaceInputValueOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*getWorkspaceInputValueOptions.Offset))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalValueResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetWorkspaceOutputValue : Workspace Output value for {var_name}, produced by the recent job execution
// Get Workspace Output value for {var_name}, produced by the recent job execution; "$$W(workspace_name):$$O(var_name)".
func (schematics20Api *Schematics20ApiV2) GetWorkspaceOutputValue(getWorkspaceOutputValueOptions *GetWorkspaceOutputValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.GetWorkspaceOutputValueWithContext(context.Background(), getWorkspaceOutputValueOptions)
}

// GetWorkspaceOutputValueWithContext is an alternate form of the GetWorkspaceOutputValue method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetWorkspaceOutputValueWithContext(ctx context.Context, getWorkspaceOutputValueOptions *GetWorkspaceOutputValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getWorkspaceOutputValueOptions, "getWorkspaceOutputValueOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getWorkspaceOutputValueOptions, "getWorkspaceOutputValueOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id":     *getWorkspaceOutputValueOptions.WID,
		"var_name": *getWorkspaceOutputValueOptions.VarName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/outputs/{var_name}/value`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getWorkspaceOutputValueOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetWorkspaceOutputValue")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getWorkspaceOutputValueOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*getWorkspaceOutputValueOptions.Offset))
	}
	if getWorkspaceOutputValueOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*getWorkspaceOutputValueOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalValueResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetWorkspaceSettingsValue : Workspace environment setting value for {var_name}, used by the recent job execution
// Get Workspace environment setting value for {var_name}, used by the recent job execution;
// "$$W(workspace_name):$$S(var_name)".
func (schematics20Api *Schematics20ApiV2) GetWorkspaceSettingsValue(getWorkspaceSettingsValueOptions *GetWorkspaceSettingsValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.GetWorkspaceSettingsValueWithContext(context.Background(), getWorkspaceSettingsValueOptions)
}

// GetWorkspaceSettingsValueWithContext is an alternate form of the GetWorkspaceSettingsValue method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetWorkspaceSettingsValueWithContext(ctx context.Context, getWorkspaceSettingsValueOptions *GetWorkspaceSettingsValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getWorkspaceSettingsValueOptions, "getWorkspaceSettingsValueOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getWorkspaceSettingsValueOptions, "getWorkspaceSettingsValueOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id":     *getWorkspaceSettingsValueOptions.WID,
		"var_name": *getWorkspaceSettingsValueOptions.VarName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/settings/{var_name}/value`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getWorkspaceSettingsValueOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetWorkspaceSettingsValue")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getWorkspaceSettingsValueOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*getWorkspaceSettingsValueOptions.Offset))
	}
	if getWorkspaceSettingsValueOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*getWorkspaceSettingsValueOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalValueResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetWorkspaceTemplateInputValue : Workspace Input value for {var_name}, used by the recent job execution
// Get Workspace Input value for {var_name}, used by the recent job execution;
// "$$W(workspace_name):$$T(template_name):$$I(var_name)".
func (schematics20Api *Schematics20ApiV2) GetWorkspaceTemplateInputValue(getWorkspaceTemplateInputValueOptions *GetWorkspaceTemplateInputValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.GetWorkspaceTemplateInputValueWithContext(context.Background(), getWorkspaceTemplateInputValueOptions)
}

// GetWorkspaceTemplateInputValueWithContext is an alternate form of the GetWorkspaceTemplateInputValue method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetWorkspaceTemplateInputValueWithContext(ctx context.Context, getWorkspaceTemplateInputValueOptions *GetWorkspaceTemplateInputValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getWorkspaceTemplateInputValueOptions, "getWorkspaceTemplateInputValueOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getWorkspaceTemplateInputValueOptions, "getWorkspaceTemplateInputValueOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id":     *getWorkspaceTemplateInputValueOptions.WID,
		"t_id":     *getWorkspaceTemplateInputValueOptions.TID,
		"var_name": *getWorkspaceTemplateInputValueOptions.VarName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates/{t_id}/inputs/{var_name}/value`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getWorkspaceTemplateInputValueOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetWorkspaceTemplateInputValue")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getWorkspaceTemplateInputValueOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*getWorkspaceTemplateInputValueOptions.Offset))
	}
	if getWorkspaceTemplateInputValueOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*getWorkspaceTemplateInputValueOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalValueResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetWorkspaceTemplateOutputValue : Workspace Output value for {var_name}, produced by the recent job execution
// Get Workspace Output value for {var_name}, produced by the recent job execution;
// "$$W(workspace_name):$$T(template_name):$$O(var_name)".
func (schematics20Api *Schematics20ApiV2) GetWorkspaceTemplateOutputValue(getWorkspaceTemplateOutputValueOptions *GetWorkspaceTemplateOutputValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.GetWorkspaceTemplateOutputValueWithContext(context.Background(), getWorkspaceTemplateOutputValueOptions)
}

// GetWorkspaceTemplateOutputValueWithContext is an alternate form of the GetWorkspaceTemplateOutputValue method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetWorkspaceTemplateOutputValueWithContext(ctx context.Context, getWorkspaceTemplateOutputValueOptions *GetWorkspaceTemplateOutputValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getWorkspaceTemplateOutputValueOptions, "getWorkspaceTemplateOutputValueOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getWorkspaceTemplateOutputValueOptions, "getWorkspaceTemplateOutputValueOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id":     *getWorkspaceTemplateOutputValueOptions.WID,
		"t_id":     *getWorkspaceTemplateOutputValueOptions.TID,
		"var_name": *getWorkspaceTemplateOutputValueOptions.VarName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates/{t_id}/outputs/{var_name}/value`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getWorkspaceTemplateOutputValueOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetWorkspaceTemplateOutputValue")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getWorkspaceTemplateOutputValueOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*getWorkspaceTemplateOutputValueOptions.Offset))
	}
	if getWorkspaceTemplateOutputValueOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*getWorkspaceTemplateOutputValueOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalValueResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetWorkspaceTemplateSettingValue : Workspace environment setting value for {var_name}, used by the recent job execution
// Get Workspace environment setting value for {var_name}, used by the recent job execution;
// "$$W(workspace_name):$$T(template_name):$$S(var_name)".
func (schematics20Api *Schematics20ApiV2) GetWorkspaceTemplateSettingValue(getWorkspaceTemplateSettingValueOptions *GetWorkspaceTemplateSettingValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.GetWorkspaceTemplateSettingValueWithContext(context.Background(), getWorkspaceTemplateSettingValueOptions)
}

// GetWorkspaceTemplateSettingValueWithContext is an alternate form of the GetWorkspaceTemplateSettingValue method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetWorkspaceTemplateSettingValueWithContext(ctx context.Context, getWorkspaceTemplateSettingValueOptions *GetWorkspaceTemplateSettingValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getWorkspaceTemplateSettingValueOptions, "getWorkspaceTemplateSettingValueOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getWorkspaceTemplateSettingValueOptions, "getWorkspaceTemplateSettingValueOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"w_id":     *getWorkspaceTemplateSettingValueOptions.WID,
		"t_id":     *getWorkspaceTemplateSettingValueOptions.TID,
		"var_name": *getWorkspaceTemplateSettingValueOptions.VarName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/workspaces/{w_id}/templates/{t_id}/settings/{var_name}/value`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getWorkspaceTemplateSettingValueOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetWorkspaceTemplateSettingValue")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getWorkspaceTemplateSettingValueOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*getWorkspaceTemplateSettingValueOptions.Offset))
	}
	if getWorkspaceTemplateSettingValueOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*getWorkspaceTemplateSettingValueOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalValueResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetJobWorkspaceInputValue : Workspace Input value for {var_name}, used by the job {job_id}
// Get Workspace Input value for {var_name}, used by the recent job execution;
// "$$J(job_id):$$W(workspace_name):$$I(var_name)".
func (schematics20Api *Schematics20ApiV2) GetJobWorkspaceInputValue(getJobWorkspaceInputValueOptions *GetJobWorkspaceInputValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.GetJobWorkspaceInputValueWithContext(context.Background(), getJobWorkspaceInputValueOptions)
}

// GetJobWorkspaceInputValueWithContext is an alternate form of the GetJobWorkspaceInputValue method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetJobWorkspaceInputValueWithContext(ctx context.Context, getJobWorkspaceInputValueOptions *GetJobWorkspaceInputValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getJobWorkspaceInputValueOptions, "getJobWorkspaceInputValueOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getJobWorkspaceInputValueOptions, "getJobWorkspaceInputValueOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"job_id":   *getJobWorkspaceInputValueOptions.JobID,
		"w_id":     *getJobWorkspaceInputValueOptions.WID,
		"var_name": *getJobWorkspaceInputValueOptions.VarName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/jobs/{job_id}/workspaces/{w_id}/inputs/{var_name}/value`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getJobWorkspaceInputValueOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetJobWorkspaceInputValue")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getJobWorkspaceInputValueOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*getJobWorkspaceInputValueOptions.Offset))
	}
	if getJobWorkspaceInputValueOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*getJobWorkspaceInputValueOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalValueResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetJobWorkspaceOutputValue : Workspace Output value for {var_name}, produced by the job {job_id}
// Get Workspace Output value for {var_name}, produced by the recent job execution;
// "$$J(job_id):$$W(workspace_name):$$O(var_name)".
func (schematics20Api *Schematics20ApiV2) GetJobWorkspaceOutputValue(getJobWorkspaceOutputValueOptions *GetJobWorkspaceOutputValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.GetJobWorkspaceOutputValueWithContext(context.Background(), getJobWorkspaceOutputValueOptions)
}

// GetJobWorkspaceOutputValueWithContext is an alternate form of the GetJobWorkspaceOutputValue method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetJobWorkspaceOutputValueWithContext(ctx context.Context, getJobWorkspaceOutputValueOptions *GetJobWorkspaceOutputValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getJobWorkspaceOutputValueOptions, "getJobWorkspaceOutputValueOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getJobWorkspaceOutputValueOptions, "getJobWorkspaceOutputValueOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"job_id":   *getJobWorkspaceOutputValueOptions.JobID,
		"w_id":     *getJobWorkspaceOutputValueOptions.WID,
		"var_name": *getJobWorkspaceOutputValueOptions.VarName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/jobs/{job_id}/workspaces/{w_id}/outputs/{var_name}/value`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getJobWorkspaceOutputValueOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetJobWorkspaceOutputValue")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getJobWorkspaceOutputValueOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*getJobWorkspaceOutputValueOptions.Offset))
	}
	if getJobWorkspaceOutputValueOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*getJobWorkspaceOutputValueOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalValueResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetJobWorkspaceSettingValue : Workspace environment setting value for {var_name}, used by the recent job execution
// Get Workspace environment setting value for {var_name}, used by the recent job execution;
// "$$J(job_id):$$W(workspace_name):$$S(var_name)".
func (schematics20Api *Schematics20ApiV2) GetJobWorkspaceSettingValue(getJobWorkspaceSettingValueOptions *GetJobWorkspaceSettingValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.GetJobWorkspaceSettingValueWithContext(context.Background(), getJobWorkspaceSettingValueOptions)
}

// GetJobWorkspaceSettingValueWithContext is an alternate form of the GetJobWorkspaceSettingValue method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetJobWorkspaceSettingValueWithContext(ctx context.Context, getJobWorkspaceSettingValueOptions *GetJobWorkspaceSettingValueOptions) (result *ValueResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getJobWorkspaceSettingValueOptions, "getJobWorkspaceSettingValueOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getJobWorkspaceSettingValueOptions, "getJobWorkspaceSettingValueOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"job_id":   *getJobWorkspaceSettingValueOptions.JobID,
		"w_id":     *getJobWorkspaceSettingValueOptions.WID,
		"var_name": *getJobWorkspaceSettingValueOptions.VarName,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/jobs/{job_id}/workspaces/{w_id}/settings/{var_name}/value`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getJobWorkspaceSettingValueOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetJobWorkspaceSettingValue")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getJobWorkspaceSettingValueOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*getJobWorkspaceSettingValueOptions.Offset))
	}
	if getJobWorkspaceSettingValueOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*getJobWorkspaceSettingValueOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalValueResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetKmsSettings : Get a KMS settings
// Retrieve the kms instance that is integrated with Schematics for the **byok** and **kyok**. For each geographic
// location supported in Schematics we can have different kms settings. For example `US` and `EU` will have different
// kms settings.
// <h3>Authorization</h3>
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) GetKmsSettings(getKmsSettingsOptions *GetKmsSettingsOptions) (result *KMSSettings, response *core.DetailedResponse, err error) {
	return schematics20Api.GetKmsSettingsWithContext(context.Background(), getKmsSettingsOptions)
}

// GetKmsSettingsWithContext is an alternate form of the GetKmsSettings method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetKmsSettingsWithContext(ctx context.Context, getKmsSettingsOptions *GetKmsSettingsOptions) (result *KMSSettings, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getKmsSettingsOptions, "getKmsSettingsOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getKmsSettingsOptions, "getKmsSettingsOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/kms`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range getKmsSettingsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetKmsSettings")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	builder.AddQuery("location", fmt.Sprint(*getKmsSettingsOptions.Location))

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalKMSSettings)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// UpdateKmsSettings : Update a KMS settings
// Replace or Update kms settings for a given location can be updated.
// **Note** you can update the kms settings only once. For example, if you use an API endpoint for a geography, such as
// North America, only kms settings for that region can be retrieved.
// <h3>Authorization</h3>
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) UpdateKmsSettings(updateKmsSettingsOptions *UpdateKmsSettingsOptions) (result *KMSSettings, response *core.DetailedResponse, err error) {
	return schematics20Api.UpdateKmsSettingsWithContext(context.Background(), updateKmsSettingsOptions)
}

// UpdateKmsSettingsWithContext is an alternate form of the UpdateKmsSettings method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UpdateKmsSettingsWithContext(ctx context.Context, updateKmsSettingsOptions *UpdateKmsSettingsOptions) (result *KMSSettings, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateKmsSettingsOptions, "updateKmsSettingsOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(updateKmsSettingsOptions, "updateKmsSettingsOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/kms`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range updateKmsSettingsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UpdateKmsSettings")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(updateKmsSettingsOptions.KMSSettings)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalKMSSettings)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListKms : List KMS instances
// Lists the kms instances of your IBM Cloud account to find your Key Protect or Hyper Protect Crypto Services by using
// the location and encrypted scheme.
//  <h3>Authorization</h3>
//
//  Schematics support generic authorization for its resources.
//  For more information, about Schematics access and permissions, see
//  [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) ListKms(listKmsOptions *ListKmsOptions) (result *KMSDiscovery, response *core.DetailedResponse, err error) {
	return schematics20Api.ListKmsWithContext(context.Background(), listKmsOptions)
}

// ListKmsWithContext is an alternate form of the ListKms method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListKmsWithContext(ctx context.Context, listKmsOptions *ListKmsOptions) (result *KMSDiscovery, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(listKmsOptions, "listKmsOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(listKmsOptions, "listKmsOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/kms_instances`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listKmsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListKms")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	builder.AddQuery("encryption_scheme", fmt.Sprint(*listKmsOptions.EncryptionScheme))
	builder.AddQuery("location", fmt.Sprint(*listKmsOptions.Location))
	if listKmsOptions.ResourceGroup != nil {
		builder.AddQuery("resource_group", fmt.Sprint(*listKmsOptions.ResourceGroup))
	}
	if listKmsOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listKmsOptions.Limit))
	}
	if listKmsOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listKmsOptions.Sort))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalKMSDiscovery)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListTriggers : Get all the Schematics triggers
// Get all the Schematics triggers.
func (schematics20Api *Schematics20ApiV2) ListTriggers(listTriggersOptions *ListTriggersOptions) (result *TriggerList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListTriggersWithContext(context.Background(), listTriggersOptions)
}

// ListTriggersWithContext is an alternate form of the ListTriggers method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListTriggersWithContext(ctx context.Context, listTriggersOptions *ListTriggersOptions) (result *TriggerList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listTriggersOptions, "listTriggersOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/triggers`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listTriggersOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListTriggers")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listTriggersOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listTriggersOptions.Offset))
	}
	if listTriggersOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listTriggersOptions.Limit))
	}
	if listTriggersOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listTriggersOptions.Sort))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTriggerList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateTrigger : Register a Schematics trigger
// Register a Schematics trigger.
func (schematics20Api *Schematics20ApiV2) CreateTrigger(createTriggerOptions *CreateTriggerOptions) (result *Trigger, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateTriggerWithContext(context.Background(), createTriggerOptions)
}

// CreateTriggerWithContext is an alternate form of the CreateTrigger method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateTriggerWithContext(ctx context.Context, createTriggerOptions *CreateTriggerOptions) (result *Trigger, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createTriggerOptions, "createTriggerOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createTriggerOptions, "createTriggerOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/triggers`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createTriggerOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateTrigger")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createTriggerOptions.Trigger)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTrigger)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetTrigger : Get the Schematics trigger
// Get the Schematics trigger.
func (schematics20Api *Schematics20ApiV2) GetTrigger(getTriggerOptions *GetTriggerOptions) (result *Trigger, response *core.DetailedResponse, err error) {
	return schematics20Api.GetTriggerWithContext(context.Background(), getTriggerOptions)
}

// GetTriggerWithContext is an alternate form of the GetTrigger method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetTriggerWithContext(ctx context.Context, getTriggerOptions *GetTriggerOptions) (result *Trigger, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getTriggerOptions, "getTriggerOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getTriggerOptions, "getTriggerOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"trigger_id": *getTriggerOptions.TriggerID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/triggers/{trigger_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getTriggerOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetTrigger")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTrigger)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ReplaceTrigger : Replace the Schematics trigger
// Replace the Schematics trigger.
func (schematics20Api *Schematics20ApiV2) ReplaceTrigger(replaceTriggerOptions *ReplaceTriggerOptions) (result *Trigger, response *core.DetailedResponse, err error) {
	return schematics20Api.ReplaceTriggerWithContext(context.Background(), replaceTriggerOptions)
}

// ReplaceTriggerWithContext is an alternate form of the ReplaceTrigger method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ReplaceTriggerWithContext(ctx context.Context, replaceTriggerOptions *ReplaceTriggerOptions) (result *Trigger, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceTriggerOptions, "replaceTriggerOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(replaceTriggerOptions, "replaceTriggerOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"trigger_id": *replaceTriggerOptions.TriggerID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/triggers/{trigger_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range replaceTriggerOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ReplaceTrigger")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(replaceTriggerOptions.Trigger)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTrigger)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteTrigger : Unregister the Schematics trigger
// Delete the Schematics trigger.
func (schematics20Api *Schematics20ApiV2) DeleteTrigger(deleteTriggerOptions *DeleteTriggerOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteTriggerWithContext(context.Background(), deleteTriggerOptions)
}

// DeleteTriggerWithContext is an alternate form of the DeleteTrigger method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteTriggerWithContext(ctx context.Context, deleteTriggerOptions *DeleteTriggerOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteTriggerOptions, "deleteTriggerOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteTriggerOptions, "deleteTriggerOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"trigger_id": *deleteTriggerOptions.TriggerID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/triggers/{trigger_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteTriggerOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteTrigger")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// ListWebhook : Get all the Schematics web-hooks
// Get all the Schematics web-hooks.
func (schematics20Api *Schematics20ApiV2) ListWebhook(listWebhookOptions *ListWebhookOptions) (result *WebHookList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListWebhookWithContext(context.Background(), listWebhookOptions)
}

// ListWebhookWithContext is an alternate form of the ListWebhook method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListWebhookWithContext(ctx context.Context, listWebhookOptions *ListWebhookOptions) (result *WebHookList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listWebhookOptions, "listWebhookOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/hooks`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listWebhookOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListWebhook")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listWebhookOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listWebhookOptions.Offset))
	}
	if listWebhookOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listWebhookOptions.Limit))
	}
	if listWebhookOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listWebhookOptions.Sort))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalWebHookList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateWebhook : Register a Schematics web-hook
// Register a Schematics web-hook.
func (schematics20Api *Schematics20ApiV2) CreateWebhook(createWebhookOptions *CreateWebhookOptions) (result *WebHook, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateWebhookWithContext(context.Background(), createWebhookOptions)
}

// CreateWebhookWithContext is an alternate form of the CreateWebhook method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateWebhookWithContext(ctx context.Context, createWebhookOptions *CreateWebhookOptions) (result *WebHook, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createWebhookOptions, "createWebhookOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createWebhookOptions, "createWebhookOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/hooks`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createWebhookOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateWebhook")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createWebhookOptions.WebHook)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalWebHook)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetWebhook : Get the Schematics web-hook
// Get the Schematics web-hook.
func (schematics20Api *Schematics20ApiV2) GetWebhook(getWebhookOptions *GetWebhookOptions) (result *WebHook, response *core.DetailedResponse, err error) {
	return schematics20Api.GetWebhookWithContext(context.Background(), getWebhookOptions)
}

// GetWebhookWithContext is an alternate form of the GetWebhook method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetWebhookWithContext(ctx context.Context, getWebhookOptions *GetWebhookOptions) (result *WebHook, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getWebhookOptions, "getWebhookOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getWebhookOptions, "getWebhookOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"hook_id": *getWebhookOptions.HookID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/hooks/{hook_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getWebhookOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetWebhook")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalWebHook)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ReplaceWebhook : Replace the Schematics web-hook
// Replace the Schematics web-hooks.
func (schematics20Api *Schematics20ApiV2) ReplaceWebhook(replaceWebhookOptions *ReplaceWebhookOptions) (result *WebHook, response *core.DetailedResponse, err error) {
	return schematics20Api.ReplaceWebhookWithContext(context.Background(), replaceWebhookOptions)
}

// ReplaceWebhookWithContext is an alternate form of the ReplaceWebhook method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ReplaceWebhookWithContext(ctx context.Context, replaceWebhookOptions *ReplaceWebhookOptions) (result *WebHook, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceWebhookOptions, "replaceWebhookOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(replaceWebhookOptions, "replaceWebhookOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"hook_id": *replaceWebhookOptions.HookID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/hooks/{hook_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range replaceWebhookOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ReplaceWebhook")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(replaceWebhookOptions.WebHook)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalWebHook)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteWebhook : Unregister the Schematics web-hook
// Delete the Schematics web-hook.
func (schematics20Api *Schematics20ApiV2) DeleteWebhook(deleteWebhookOptions *DeleteWebhookOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteWebhookWithContext(context.Background(), deleteWebhookOptions)
}

// DeleteWebhookWithContext is an alternate form of the DeleteWebhook method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteWebhookWithContext(ctx context.Context, deleteWebhookOptions *DeleteWebhookOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteWebhookOptions, "deleteWebhookOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteWebhookOptions, "deleteWebhookOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"hook_id": *deleteWebhookOptions.HookID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/hooks/{hook_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteWebhookOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteWebhook")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// GetPrivateCluster : Get the details of private cluster registered with Schematics
// Get the details of private cluster registered with Schematics.
func (schematics20Api *Schematics20ApiV2) GetPrivateCluster(getPrivateClusterOptions *GetPrivateClusterOptions) (result *PrivateClusterList, response *core.DetailedResponse, err error) {
	return schematics20Api.GetPrivateClusterWithContext(context.Background(), getPrivateClusterOptions)
}

// GetPrivateClusterWithContext is an alternate form of the GetPrivateCluster method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetPrivateClusterWithContext(ctx context.Context, getPrivateClusterOptions *GetPrivateClusterOptions) (result *PrivateClusterList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(getPrivateClusterOptions, "getPrivateClusterOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/private_clusters`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range getPrivateClusterOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetPrivateCluster")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalPrivateClusterList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreatePrivateCluster : Register your private cluster with Schematics
// Register your private Kubernetes cluster, that will be used by schematics to run its Job (over a private network).
func (schematics20Api *Schematics20ApiV2) CreatePrivateCluster(createPrivateClusterOptions *CreatePrivateClusterOptions) (result *PrivateCluster, response *core.DetailedResponse, err error) {
	return schematics20Api.CreatePrivateClusterWithContext(context.Background(), createPrivateClusterOptions)
}

// CreatePrivateClusterWithContext is an alternate form of the CreatePrivateCluster method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreatePrivateClusterWithContext(ctx context.Context, createPrivateClusterOptions *CreatePrivateClusterOptions) (result *PrivateCluster, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createPrivateClusterOptions, "createPrivateClusterOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createPrivateClusterOptions, "createPrivateClusterOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/private_clusters`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createPrivateClusterOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreatePrivateCluster")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createPrivateClusterOptions.PrivateCluster)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalPrivateCluster)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeletePrivateCluster : Un-register your private cluster with Schematics
// Un-register the private cluster registered with Schematics.
func (schematics20Api *Schematics20ApiV2) DeletePrivateCluster(deletePrivateClusterOptions *DeletePrivateClusterOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeletePrivateClusterWithContext(context.Background(), deletePrivateClusterOptions)
}

// DeletePrivateClusterWithContext is an alternate form of the DeletePrivateCluster method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeletePrivateClusterWithContext(ctx context.Context, deletePrivateClusterOptions *DeletePrivateClusterOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(deletePrivateClusterOptions, "deletePrivateClusterOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/private_clusters`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range deletePrivateClusterOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeletePrivateCluster")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// ListAdapter : Get all Schematics Adapter definitions
// Get all the registered Schematics Adapter definitions.
func (schematics20Api *Schematics20ApiV2) ListAdapter(listAdapterOptions *ListAdapterOptions) (result *AdapterList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListAdapterWithContext(context.Background(), listAdapterOptions)
}

// ListAdapterWithContext is an alternate form of the ListAdapter method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListAdapterWithContext(ctx context.Context, listAdapterOptions *ListAdapterOptions) (result *AdapterList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listAdapterOptions, "listAdapterOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/adapters`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listAdapterOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListAdapter")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listAdapterOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listAdapterOptions.Offset))
	}
	if listAdapterOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listAdapterOptions.Limit))
	}
	if listAdapterOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listAdapterOptions.Sort))
	}
	if listAdapterOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*listAdapterOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAdapterList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateAdapter : Register an Adapter definition with Schematics
// Register an adapter with Schematics, used to access your SCM Repo, Action,  Provisioner, Data, and Credentials.
func (schematics20Api *Schematics20ApiV2) CreateAdapter(createAdapterOptions *CreateAdapterOptions) (result *Adapter, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateAdapterWithContext(context.Background(), createAdapterOptions)
}

// CreateAdapterWithContext is an alternate form of the CreateAdapter method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateAdapterWithContext(ctx context.Context, createAdapterOptions *CreateAdapterOptions) (result *Adapter, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createAdapterOptions, "createAdapterOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createAdapterOptions, "createAdapterOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/adapters`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createAdapterOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateAdapter")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createAdapterOptions.Adapter)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAdapter)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetAdapter : Get the Schematics Adapter definition
// Get the Schematics Adapter definition.
func (schematics20Api *Schematics20ApiV2) GetAdapter(getAdapterOptions *GetAdapterOptions) (result *Adapter, response *core.DetailedResponse, err error) {
	return schematics20Api.GetAdapterWithContext(context.Background(), getAdapterOptions)
}

// GetAdapterWithContext is an alternate form of the GetAdapter method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetAdapterWithContext(ctx context.Context, getAdapterOptions *GetAdapterOptions) (result *Adapter, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getAdapterOptions, "getAdapterOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getAdapterOptions, "getAdapterOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"adapter_id": *getAdapterOptions.AdapterID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/adapters/{adapter_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getAdapterOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetAdapter")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAdapter)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ReplaceAdapter : Replace the Schematics Adapter definition
// Replace the Schematics Adapter definition.
func (schematics20Api *Schematics20ApiV2) ReplaceAdapter(replaceAdapterOptions *ReplaceAdapterOptions) (result *Adapter, response *core.DetailedResponse, err error) {
	return schematics20Api.ReplaceAdapterWithContext(context.Background(), replaceAdapterOptions)
}

// ReplaceAdapterWithContext is an alternate form of the ReplaceAdapter method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ReplaceAdapterWithContext(ctx context.Context, replaceAdapterOptions *ReplaceAdapterOptions) (result *Adapter, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceAdapterOptions, "replaceAdapterOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(replaceAdapterOptions, "replaceAdapterOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"adapter_id": *replaceAdapterOptions.AdapterID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/adapters/{adapter_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range replaceAdapterOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ReplaceAdapter")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(replaceAdapterOptions.Adapter)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAdapter)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteAdapter : Unregister the Schematics Adapter definition
// Delete the Schematics Adapter definition.
func (schematics20Api *Schematics20ApiV2) DeleteAdapter(deleteAdapterOptions *DeleteAdapterOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteAdapterWithContext(context.Background(), deleteAdapterOptions)
}

// DeleteAdapterWithContext is an alternate form of the DeleteAdapter method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteAdapterWithContext(ctx context.Context, deleteAdapterOptions *DeleteAdapterOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteAdapterOptions, "deleteAdapterOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteAdapterOptions, "deleteAdapterOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"adapter_id": *deleteAdapterOptions.AdapterID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/adapters/{adapter_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteAdapterOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteAdapter")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// ListConnection : Get connection definition
// Get all external connection definition.
func (schematics20Api *Schematics20ApiV2) ListConnection(listConnectionOptions *ListConnectionOptions) (result *ConnectionList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListConnectionWithContext(context.Background(), listConnectionOptions)
}

// ListConnectionWithContext is an alternate form of the ListConnection method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListConnectionWithContext(ctx context.Context, listConnectionOptions *ListConnectionOptions) (result *ConnectionList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listConnectionOptions, "listConnectionOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/connections`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listConnectionOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListConnection")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listConnectionOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listConnectionOptions.Offset))
	}
	if listConnectionOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listConnectionOptions.Limit))
	}
	if listConnectionOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listConnectionOptions.Sort))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalConnectionList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateConnection : Register an connection definition for an external datastore
// Register an external connection definition.
func (schematics20Api *Schematics20ApiV2) CreateConnection(createConnectionOptions *CreateConnectionOptions) (result *Connection, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateConnectionWithContext(context.Background(), createConnectionOptions)
}

// CreateConnectionWithContext is an alternate form of the CreateConnection method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateConnectionWithContext(ctx context.Context, createConnectionOptions *CreateConnectionOptions) (result *Connection, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createConnectionOptions, "createConnectionOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createConnectionOptions, "createConnectionOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/connections`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createConnectionOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateConnection")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createConnectionOptions.Connection)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalConnection)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetConnection : Get connection definition for external datastore
// Get the external connection definition.
func (schematics20Api *Schematics20ApiV2) GetConnection(getConnectionOptions *GetConnectionOptions) (result *ConnectionLite, response *core.DetailedResponse, err error) {
	return schematics20Api.GetConnectionWithContext(context.Background(), getConnectionOptions)
}

// GetConnectionWithContext is an alternate form of the GetConnection method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetConnectionWithContext(ctx context.Context, getConnectionOptions *GetConnectionOptions) (result *ConnectionLite, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getConnectionOptions, "getConnectionOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getConnectionOptions, "getConnectionOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"connection_id": *getConnectionOptions.ConnectionID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/connections/{connection_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getConnectionOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetConnection")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalConnectionLite)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteConnection : Unregister connection definition
// Delete the Schematics external data source connection definition.
func (schematics20Api *Schematics20ApiV2) DeleteConnection(deleteConnectionOptions *DeleteConnectionOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteConnectionWithContext(context.Background(), deleteConnectionOptions)
}

// DeleteConnectionWithContext is an alternate form of the DeleteConnection method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteConnectionWithContext(ctx context.Context, deleteConnectionOptions *DeleteConnectionOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteConnectionOptions, "deleteConnectionOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteConnectionOptions, "deleteConnectionOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"connection_id": *deleteConnectionOptions.ConnectionID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/connections/{connection_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteConnectionOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteConnection")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// ListDatasources : Get all datasources registered with Schematics
// Get all datasource registered with Schematics.
func (schematics20Api *Schematics20ApiV2) ListDatasources(listDatasourcesOptions *ListDatasourcesOptions) (result *DatasourceList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListDatasourcesWithContext(context.Background(), listDatasourcesOptions)
}

// ListDatasourcesWithContext is an alternate form of the ListDatasources method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListDatasourcesWithContext(ctx context.Context, listDatasourcesOptions *ListDatasourcesOptions) (result *DatasourceList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listDatasourcesOptions, "listDatasourcesOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/datasources`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listDatasourcesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListDatasources")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listDatasourcesOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listDatasourcesOptions.Offset))
	}
	if listDatasourcesOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listDatasourcesOptions.Limit))
	}
	if listDatasourcesOptions.Sort != nil {
		builder.AddQuery("sort", fmt.Sprint(*listDatasourcesOptions.Sort))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDatasourceList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateDatasource : Register a datasource definition
// Register a datasource definition.
func (schematics20Api *Schematics20ApiV2) CreateDatasource(createDatasourceOptions *CreateDatasourceOptions) (result *Datasource, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateDatasourceWithContext(context.Background(), createDatasourceOptions)
}

// CreateDatasourceWithContext is an alternate form of the CreateDatasource method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateDatasourceWithContext(ctx context.Context, createDatasourceOptions *CreateDatasourceOptions) (result *Datasource, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createDatasourceOptions, "createDatasourceOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createDatasourceOptions, "createDatasourceOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/datasources`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createDatasourceOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateDatasource")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createDatasourceOptions.Datasource)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDatasource)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetData : Get a data from the datasource
// Get data from the datasource.
func (schematics20Api *Schematics20ApiV2) GetData(getDataOptions *GetDataOptions) (result *PreviewData, response *core.DetailedResponse, err error) {
	return schematics20Api.GetDataWithContext(context.Background(), getDataOptions)
}

// GetDataWithContext is an alternate form of the GetData method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetDataWithContext(ctx context.Context, getDataOptions *GetDataOptions) (result *PreviewData, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getDataOptions, "getDataOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getDataOptions, "getDataOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"datasource_id": *getDataOptions.DatasourceID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/settings/datasources/{datasource_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getDataOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetData")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getDataOptions.Preview != nil {
		builder.AddQuery("preview", fmt.Sprint(*getDataOptions.Preview))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalPreviewData)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListCart : List fulfilment job order
// Retrieve a list of all fulfilment job order for the cart that depends on the API endpoint that you have access. For
// example, if you use an API endpoint for a geography, such as North America, only actions that are created in us-south
// or us-east are retrieved.
// <h3>Authorization</h3> Schematics support generic authorization for its resources. For more information, about
// Schematics access and permissions, see [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) ListCart(listCartOptions *ListCartOptions) (result *CartOrderList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListCartWithContext(context.Background(), listCartOptions)
}

// ListCartWithContext is an alternate form of the ListCart method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListCartWithContext(ctx context.Context, listCartOptions *ListCartOptions) (result *CartOrderList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listCartOptions, "listCartOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/cart`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listCartOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListCart")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listCartOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listCartOptions.Offset))
	}
	if listCartOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listCartOptions.Limit))
	}
	if listCartOptions.ServiceName != nil {
		builder.AddQuery("service_name", fmt.Sprint(*listCartOptions.ServiceName))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCartOrderList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateCartOrder : Create a fulfilment job order
// Create an IBM Cloud Schematics fulfilment job order for the cart that points to your account. For example, if you use
// an API endpoint for a geography, such as North America, only actions that are created in us-south or us-east are
// retrieved. Getting API endpoint:- * The Schematics API endpoint that you use to create the fulfilment determines
// where your Schematics job run and your data is stored. See API endpoints for more information. * If you use the API
// endpoint for a geography and not a specific location, such as North America, you can specify the location in your API
// request body. * If you do not specify the location in the request body, Schematics determines your fulfilment
// location based on availability. * If you use an API endpoint for a specific location, such as Frankfurt, the location
// that you enter in your API request body must match your API endpoint. * You also have the option to not specify a
// location in your API request body if you use a location-specific API endpoint.
// <h3>Authorization</h3> Schematics support generic authorization for its resources. For more information, about
// Schematics access and permissions, see [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) CreateCartOrder(createCartOrderOptions *CreateCartOrderOptions) (result *CartOrder, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateCartOrderWithContext(context.Background(), createCartOrderOptions)
}

// CreateCartOrderWithContext is an alternate form of the CreateCartOrder method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateCartOrderWithContext(ctx context.Context, createCartOrderOptions *CreateCartOrderOptions) (result *CartOrder, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createCartOrderOptions, "createCartOrderOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createCartOrderOptions, "createCartOrderOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/cart`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createCartOrderOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateCartOrder")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createCartOrderOptions.CartOrder)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCartOrder)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetCartOrder : Get fulfilment job order details
// Retrieve detailed information for a fulfilment job order for the cart details in your IBM Cloud account.
// <h3>Authorization</h3> Schematics support generic authorization for its resources. For more information, about
// Schematics access and permissions, see [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) GetCartOrder(getCartOrderOptions *GetCartOrderOptions) (result *CartOrder, response *core.DetailedResponse, err error) {
	return schematics20Api.GetCartOrderWithContext(context.Background(), getCartOrderOptions)
}

// GetCartOrderWithContext is an alternate form of the GetCartOrder method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetCartOrderWithContext(ctx context.Context, getCartOrderOptions *GetCartOrderOptions) (result *CartOrder, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getCartOrderOptions, "getCartOrderOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getCartOrderOptions, "getCartOrderOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"order_id": *getCartOrderOptions.OrderID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/cart/{order_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getCartOrderOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetCartOrder")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getCartOrderOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*getCartOrderOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCartOrder)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ReplaceCartOrder : Update fulfilment job order
// Use this API to update or replace the entire fulfilment job order for the cart in your IBM Cloud account.
// <h3>Authorization</h3> Schematics support generic authorization for its resources. For more information, about
// Schematics access and permissions, see [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) ReplaceCartOrder(replaceCartOrderOptions *ReplaceCartOrderOptions) (result *CartOrder, response *core.DetailedResponse, err error) {
	return schematics20Api.ReplaceCartOrderWithContext(context.Background(), replaceCartOrderOptions)
}

// ReplaceCartOrderWithContext is an alternate form of the ReplaceCartOrder method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ReplaceCartOrderWithContext(ctx context.Context, replaceCartOrderOptions *ReplaceCartOrderOptions) (result *CartOrder, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceCartOrderOptions, "replaceCartOrderOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(replaceCartOrderOptions, "replaceCartOrderOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"order_id": *replaceCartOrderOptions.OrderID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/cart/{order_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range replaceCartOrderOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ReplaceCartOrder")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	builder.AddQuery("operation", fmt.Sprint(*replaceCartOrderOptions.Operation))

	_, err = builder.SetBodyContentJSON(replaceCartOrderOptions.CartOrder)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCartOrder)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// RunFulfilmentOperation : Run the fulfilment job operation for the cart
// Run the fulfilment job operation for the cart
// <h3>Authorization</h3> Schematics support generic authorization for its resources.  For more information, about
// Schematics access and permissions,  see [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) RunFulfilmentOperation(runFulfilmentOperationOptions *RunFulfilmentOperationOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.RunFulfilmentOperationWithContext(context.Background(), runFulfilmentOperationOptions)
}

// RunFulfilmentOperationWithContext is an alternate form of the RunFulfilmentOperation method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) RunFulfilmentOperationWithContext(ctx context.Context, runFulfilmentOperationOptions *RunFulfilmentOperationOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(runFulfilmentOperationOptions, "runFulfilmentOperationOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(runFulfilmentOperationOptions, "runFulfilmentOperationOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"order_id": *runFulfilmentOperationOptions.OrderID,
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/cart/{order_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range runFulfilmentOperationOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "RunFulfilmentOperation")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	builder.AddQuery("operation", fmt.Sprint(*runFulfilmentOperationOptions.Operation))

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// DeleteCartOrder : Delete a fulfilment job order
// Deletes a fulfilment job order for the card in your IBM Cloud account.
// <h3>Authorization</h3> Schematics support generic authorization for its resources.  For more information, about
// Schematics access and permissions,  see [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) DeleteCartOrder(deleteCartOrderOptions *DeleteCartOrderOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteCartOrderWithContext(context.Background(), deleteCartOrderOptions)
}

// DeleteCartOrderWithContext is an alternate form of the DeleteCartOrder method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteCartOrderWithContext(ctx context.Context, deleteCartOrderOptions *DeleteCartOrderOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteCartOrderOptions, "deleteCartOrderOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteCartOrderOptions, "deleteCartOrderOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"order_id": *deleteCartOrderOptions.OrderID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/cart/{order_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteCartOrderOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteCartOrder")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	if deleteCartOrderOptions.Destroy != nil {
		builder.AddQuery("destroy", fmt.Sprint(*deleteCartOrderOptions.Destroy))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// UpdateCartOrder : Update fulfilment job order
// Use this API to update or replace the entire fulfilment job order for the cart in your IBM Cloud account.
// <h3>Authorization</h3> Schematics support generic authorization for its resources. For more information, about
// Schematics access and permissions, see [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) UpdateCartOrder(updateCartOrderOptions *UpdateCartOrderOptions) (result *CartOrder, response *core.DetailedResponse, err error) {
	return schematics20Api.UpdateCartOrderWithContext(context.Background(), updateCartOrderOptions)
}

// UpdateCartOrderWithContext is an alternate form of the UpdateCartOrder method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UpdateCartOrderWithContext(ctx context.Context, updateCartOrderOptions *UpdateCartOrderOptions) (result *CartOrder, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateCartOrderOptions, "updateCartOrderOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(updateCartOrderOptions, "updateCartOrderOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"order_id": *updateCartOrderOptions.OrderID,
	}

	builder := core.NewRequestBuilder(core.PATCH)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/cart/{order_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range updateCartOrderOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UpdateCartOrder")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	builder.AddQuery("operation", fmt.Sprint(*updateCartOrderOptions.Operation))

	_, err = builder.SetBodyContentJSON(updateCartOrderOptions.UpdateCartOrder)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCartOrder)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetCartMetadata : Get metadata for the fulfilment job order
// Get variable and operation metadata for the fulfilment job order.
func (schematics20Api *Schematics20ApiV2) GetCartMetadata(getCartMetadataOptions *GetCartMetadataOptions) (result *ItemMetadata, response *core.DetailedResponse, err error) {
	return schematics20Api.GetCartMetadataWithContext(context.Background(), getCartMetadataOptions)
}

// GetCartMetadataWithContext is an alternate form of the GetCartMetadata method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetCartMetadataWithContext(ctx context.Context, getCartMetadataOptions *GetCartMetadataOptions) (result *ItemMetadata, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getCartMetadataOptions, "getCartMetadataOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getCartMetadataOptions, "getCartMetadataOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"order_id": *getCartMetadataOptions.OrderID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/cart/{order_id}/metadata`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getCartMetadataOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetCartMetadata")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalItemMetadata)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListCartResources : Get current list of cloud sources, fulfilled by the cart
// Get current list of cloud resources, fulfilled by the cart.
func (schematics20Api *Schematics20ApiV2) ListCartResources(listCartResourcesOptions *ListCartResourcesOptions) (result *CloudResourceList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListCartResourcesWithContext(context.Background(), listCartResourcesOptions)
}

// ListCartResourcesWithContext is an alternate form of the ListCartResources method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListCartResourcesWithContext(ctx context.Context, listCartResourcesOptions *ListCartResourcesOptions) (result *CloudResourceList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(listCartResourcesOptions, "listCartResourcesOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(listCartResourcesOptions, "listCartResourcesOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"order_id": *listCartResourcesOptions.OrderID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/cart/{order_id}/resources`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range listCartResourcesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListCartResources")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listCartResourcesOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listCartResourcesOptions.Offset))
	}
	if listCartResourcesOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listCartResourcesOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCloudResourceList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListCartOrderJobs : Get the list of fulfilment jobs performed on the cart
// Get list of fulfilment jobs performed on the cart.
func (schematics20Api *Schematics20ApiV2) ListCartOrderJobs(listCartOrderJobsOptions *ListCartOrderJobsOptions) (result *JobList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListCartOrderJobsWithContext(context.Background(), listCartOrderJobsOptions)
}

// ListCartOrderJobsWithContext is an alternate form of the ListCartOrderJobs method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListCartOrderJobsWithContext(ctx context.Context, listCartOrderJobsOptions *ListCartOrderJobsOptions) (result *JobList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(listCartOrderJobsOptions, "listCartOrderJobsOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(listCartOrderJobsOptions, "listCartOrderJobsOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"order_id": *listCartOrderJobsOptions.OrderID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/cart/{order_id}/jobs`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range listCartOrderJobsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListCartOrderJobs")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listCartOrderJobsOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listCartOrderJobsOptions.Offset))
	}
	if listCartOrderJobsOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listCartOrderJobsOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalJobList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetCartOrderJob : Get fulfilment job details
// Get fulfilment job details.
func (schematics20Api *Schematics20ApiV2) GetCartOrderJob(getCartOrderJobOptions *GetCartOrderJobOptions) (result *JobLite, response *core.DetailedResponse, err error) {
	return schematics20Api.GetCartOrderJobWithContext(context.Background(), getCartOrderJobOptions)
}

// GetCartOrderJobWithContext is an alternate form of the GetCartOrderJob method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetCartOrderJobWithContext(ctx context.Context, getCartOrderJobOptions *GetCartOrderJobOptions) (result *JobLite, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getCartOrderJobOptions, "getCartOrderJobOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getCartOrderJobOptions, "getCartOrderJobOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"order_id": *getCartOrderJobOptions.OrderID,
		"job_id":   *getCartOrderJobOptions.JobID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/cart/{order_id}/jobs/{job_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getCartOrderJobOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetCartOrderJob")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getCartOrderJobOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*getCartOrderJobOptions.Offset))
	}
	if getCartOrderJobOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*getCartOrderJobOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalJobLite)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetCartOrderJobLog : Get the fulfilment job logs
// Get the fulfilment job logs.
func (schematics20Api *Schematics20ApiV2) GetCartOrderJobLog(getCartOrderJobLogOptions *GetCartOrderJobLogOptions) (result *JobLog, response *core.DetailedResponse, err error) {
	return schematics20Api.GetCartOrderJobLogWithContext(context.Background(), getCartOrderJobLogOptions)
}

// GetCartOrderJobLogWithContext is an alternate form of the GetCartOrderJobLog method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetCartOrderJobLogWithContext(ctx context.Context, getCartOrderJobLogOptions *GetCartOrderJobLogOptions) (result *JobLog, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getCartOrderJobLogOptions, "getCartOrderJobLogOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getCartOrderJobLogOptions, "getCartOrderJobLogOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"order_id": *getCartOrderJobLogOptions.OrderID,
		"job_id":   *getCartOrderJobLogOptions.JobID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/cart/{order_id}/jobs/{job_id}/logs`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getCartOrderJobLogOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetCartOrderJobLog")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getCartOrderJobLogOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*getCartOrderJobLogOptions.Offset))
	}
	if getCartOrderJobLogOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*getCartOrderJobLogOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalJobLog)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetCartOrderJobResources : Get the fulfilment job resources
// Get the fulfilment job resources.
func (schematics20Api *Schematics20ApiV2) GetCartOrderJobResources(getCartOrderJobResourcesOptions *GetCartOrderJobResourcesOptions) (result *CloudResourceList, response *core.DetailedResponse, err error) {
	return schematics20Api.GetCartOrderJobResourcesWithContext(context.Background(), getCartOrderJobResourcesOptions)
}

// GetCartOrderJobResourcesWithContext is an alternate form of the GetCartOrderJobResources method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetCartOrderJobResourcesWithContext(ctx context.Context, getCartOrderJobResourcesOptions *GetCartOrderJobResourcesOptions) (result *CloudResourceList, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getCartOrderJobResourcesOptions, "getCartOrderJobResourcesOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getCartOrderJobResourcesOptions, "getCartOrderJobResourcesOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"order_id": *getCartOrderJobResourcesOptions.OrderID,
		"job_id":   *getCartOrderJobResourcesOptions.JobID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/cart/{order_id}/jobs/{job_id}/resources`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getCartOrderJobResourcesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetCartOrderJobResources")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getCartOrderJobResourcesOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*getCartOrderJobResourcesOptions.Offset))
	}
	if getCartOrderJobResourcesOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*getCartOrderJobResourcesOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCloudResourceList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListBlueprint : Get all the blueprint instances, in the Account
// Get all the blueprint instances, in the Account, associated with a Service.
func (schematics20Api *Schematics20ApiV2) ListBlueprint(listBlueprintOptions *ListBlueprintOptions) (result *BlueprintList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListBlueprintWithContext(context.Background(), listBlueprintOptions)
}

// ListBlueprintWithContext is an alternate form of the ListBlueprint method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListBlueprintWithContext(ctx context.Context, listBlueprintOptions *ListBlueprintOptions) (result *BlueprintList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listBlueprintOptions, "listBlueprintOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/blueprints`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listBlueprintOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListBlueprint")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listBlueprintOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listBlueprintOptions.Offset))
	}
	if listBlueprintOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listBlueprintOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalBlueprintList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// CreateBlueprint : Create a new blueprint
// Create a new blueprint.
func (schematics20Api *Schematics20ApiV2) CreateBlueprint(createBlueprintOptions *CreateBlueprintOptions) (result *Blueprint, response *core.DetailedResponse, err error) {
	return schematics20Api.CreateBlueprintWithContext(context.Background(), createBlueprintOptions)
}

// CreateBlueprintWithContext is an alternate form of the CreateBlueprint method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) CreateBlueprintWithContext(ctx context.Context, createBlueprintOptions *CreateBlueprintOptions) (result *Blueprint, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createBlueprintOptions, "createBlueprintOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(createBlueprintOptions, "createBlueprintOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/blueprints`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range createBlueprintOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "CreateBlueprint")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createBlueprintOptions.Blueprint)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalBlueprint)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetBlueprint : Get the blueprint details
// Get the blueprint details.
func (schematics20Api *Schematics20ApiV2) GetBlueprint(getBlueprintOptions *GetBlueprintOptions) (result *Blueprint, response *core.DetailedResponse, err error) {
	return schematics20Api.GetBlueprintWithContext(context.Background(), getBlueprintOptions)
}

// GetBlueprintWithContext is an alternate form of the GetBlueprint method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetBlueprintWithContext(ctx context.Context, getBlueprintOptions *GetBlueprintOptions) (result *Blueprint, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getBlueprintOptions, "getBlueprintOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getBlueprintOptions, "getBlueprintOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"blueprint_id": *getBlueprintOptions.BlueprintID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/blueprints/{blueprint_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getBlueprintOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetBlueprint")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getBlueprintOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*getBlueprintOptions.Profile))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalBlueprint)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ReplaceBlueprint : Update the blueprint details
// Update the blueprint details.
func (schematics20Api *Schematics20ApiV2) ReplaceBlueprint(replaceBlueprintOptions *ReplaceBlueprintOptions) (result *Blueprint, response *core.DetailedResponse, err error) {
	return schematics20Api.ReplaceBlueprintWithContext(context.Background(), replaceBlueprintOptions)
}

// ReplaceBlueprintWithContext is an alternate form of the ReplaceBlueprint method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ReplaceBlueprintWithContext(ctx context.Context, replaceBlueprintOptions *ReplaceBlueprintOptions) (result *Blueprint, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceBlueprintOptions, "replaceBlueprintOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(replaceBlueprintOptions, "replaceBlueprintOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"blueprint_id": *replaceBlueprintOptions.BlueprintID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/blueprints/{blueprint_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range replaceBlueprintOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ReplaceBlueprint")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	if replaceBlueprintOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*replaceBlueprintOptions.Profile))
	}

	_, err = builder.SetBodyContentJSON(replaceBlueprintOptions.Blueprint)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalBlueprint)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// DeleteBlueprint : Delete the blueprint
// Delete the blueprint.
func (schematics20Api *Schematics20ApiV2) DeleteBlueprint(deleteBlueprintOptions *DeleteBlueprintOptions) (response *core.DetailedResponse, err error) {
	return schematics20Api.DeleteBlueprintWithContext(context.Background(), deleteBlueprintOptions)
}

// DeleteBlueprintWithContext is an alternate form of the DeleteBlueprint method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) DeleteBlueprintWithContext(ctx context.Context, deleteBlueprintOptions *DeleteBlueprintOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteBlueprintOptions, "deleteBlueprintOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(deleteBlueprintOptions, "deleteBlueprintOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"blueprint_id": *deleteBlueprintOptions.BlueprintID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/blueprints/{blueprint_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range deleteBlueprintOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "DeleteBlueprint")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	if deleteBlueprintOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*deleteBlueprintOptions.Profile))
	}
	if deleteBlueprintOptions.Destroy != nil {
		builder.AddQuery("destroy", fmt.Sprint(*deleteBlueprintOptions.Destroy))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	response, err = schematics20Api.Service.Request(request, nil)

	return
}

// UpdateBlueprint : Update the blueprint details
// Update the blueprint details.
func (schematics20Api *Schematics20ApiV2) UpdateBlueprint(updateBlueprintOptions *UpdateBlueprintOptions) (result *Blueprint, response *core.DetailedResponse, err error) {
	return schematics20Api.UpdateBlueprintWithContext(context.Background(), updateBlueprintOptions)
}

// UpdateBlueprintWithContext is an alternate form of the UpdateBlueprint method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UpdateBlueprintWithContext(ctx context.Context, updateBlueprintOptions *UpdateBlueprintOptions) (result *Blueprint, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateBlueprintOptions, "updateBlueprintOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(updateBlueprintOptions, "updateBlueprintOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"blueprint_id": *updateBlueprintOptions.BlueprintID,
	}

	builder := core.NewRequestBuilder(core.PATCH)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/blueprints/{blueprint_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range updateBlueprintOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UpdateBlueprint")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	if updateBlueprintOptions.Profile != nil {
		builder.AddQuery("profile", fmt.Sprint(*updateBlueprintOptions.Profile))
	}

	_, err = builder.SetBodyContentJSON(updateBlueprintOptions.Blueprint)
	if err != nil {
		return
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalBlueprint)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// UploadTemplateTarBlueprint : Upload a TAR file to an blueprint
// Update your blueprint by uploading tape archive file (.tar) file from your local machine.
func (schematics20Api *Schematics20ApiV2) UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptions *UploadTemplateTarBlueprintOptions) (result *TemplateRepoTarUploadResponse, response *core.DetailedResponse, err error) {
	return schematics20Api.UploadTemplateTarBlueprintWithContext(context.Background(), uploadTemplateTarBlueprintOptions)
}

// UploadTemplateTarBlueprintWithContext is an alternate form of the UploadTemplateTarBlueprint method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) UploadTemplateTarBlueprintWithContext(ctx context.Context, uploadTemplateTarBlueprintOptions *UploadTemplateTarBlueprintOptions) (result *TemplateRepoTarUploadResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(uploadTemplateTarBlueprintOptions, "uploadTemplateTarBlueprintOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(uploadTemplateTarBlueprintOptions, "uploadTemplateTarBlueprintOptions")
	if err != nil {
		return
	}
	if uploadTemplateTarBlueprintOptions.File == nil {
		err = fmt.Errorf("at least one of  or file must be supplied")
		return
	}

	pathParamsMap := map[string]string{
		"blueprint_id": *uploadTemplateTarBlueprintOptions.BlueprintID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/blueprints/{blueprint_id}/template_repo_upload`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range uploadTemplateTarBlueprintOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "UploadTemplateTarBlueprint")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if uploadTemplateTarBlueprintOptions.File != nil {
		builder.AddFormData("file", "filename",
			core.StringNilMapper(uploadTemplateTarBlueprintOptions.FileContentType), uploadTemplateTarBlueprintOptions.File)
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalTemplateRepoTarUploadResponse)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListCatalogItems : List all the items from the catalog
// Get all items in the catalog, filtered by offering kind.
func (schematics20Api *Schematics20ApiV2) ListCatalogItems(listCatalogItemsOptions *ListCatalogItemsOptions) (result []CatalogOfferingItem, response *core.DetailedResponse, err error) {
	return schematics20Api.ListCatalogItemsWithContext(context.Background(), listCatalogItemsOptions)
}

// ListCatalogItemsWithContext is an alternate form of the ListCatalogItems method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListCatalogItemsWithContext(ctx context.Context, listCatalogItemsOptions *ListCatalogItemsOptions) (result []CatalogOfferingItem, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listCatalogItemsOptions, "listCatalogItemsOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/catalog`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listCatalogItemsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListCatalogItems")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listCatalogItemsOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*listCatalogItemsOptions.Offset))
	}
	if listCatalogItemsOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*listCatalogItemsOptions.Limit))
	}
	if listCatalogItemsOptions.CatalogID != nil {
		builder.AddQuery("catalog_id", fmt.Sprint(*listCatalogItemsOptions.CatalogID))
	}
	if listCatalogItemsOptions.CatalogName != nil {
		builder.AddQuery("catalog_name", fmt.Sprint(*listCatalogItemsOptions.CatalogName))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse []json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCatalogOfferingItem)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// GetCatalogItem : Get the catalog item details
// Get the catalog item details for a given catalog_id, offering_id and offering version.
func (schematics20Api *Schematics20ApiV2) GetCatalogItem(getCatalogItemOptions *GetCatalogItemOptions) (result *CatalogOfferingItem, response *core.DetailedResponse, err error) {
	return schematics20Api.GetCatalogItemWithContext(context.Background(), getCatalogItemOptions)
}

// GetCatalogItemWithContext is an alternate form of the GetCatalogItem method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) GetCatalogItemWithContext(ctx context.Context, getCatalogItemOptions *GetCatalogItemOptions) (result *CatalogOfferingItem, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getCatalogItemOptions, "getCatalogItemOptions cannot be nil")
	if err != nil {
		return
	}
	err = core.ValidateStruct(getCatalogItemOptions, "getCatalogItemOptions")
	if err != nil {
		return
	}

	pathParamsMap := map[string]string{
		"offering_id": *getCatalogItemOptions.OfferingID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/catalog/{offering_id}`, pathParamsMap)
	if err != nil {
		return
	}

	for headerName, headerValue := range getCatalogItemOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "GetCatalogItem")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getCatalogItemOptions.CatalogID != nil {
		builder.AddQuery("catalog_id", fmt.Sprint(*getCatalogItemOptions.CatalogID))
	}
	if getCatalogItemOptions.CatalogName != nil {
		builder.AddQuery("catalog_name", fmt.Sprint(*getCatalogItemOptions.CatalogName))
	}
	if getCatalogItemOptions.OfferingName != nil {
		builder.AddQuery("offering_name", fmt.Sprint(*getCatalogItemOptions.OfferingName))
	}
	if getCatalogItemOptions.OfferingVersion != nil {
		builder.AddQuery("offering_version", fmt.Sprint(*getCatalogItemOptions.OfferingVersion))
	}
	if getCatalogItemOptions.Offset != nil {
		builder.AddQuery("offset", fmt.Sprint(*getCatalogItemOptions.Offset))
	}
	if getCatalogItemOptions.Limit != nil {
		builder.AddQuery("limit", fmt.Sprint(*getCatalogItemOptions.Limit))
	}

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalCatalogOfferingItem)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// ListLocations : List supported locations
// Retrieve a list of IBM Cloud locations where you can work with the Schematics objects.
//
//   <h3>Authorization</h3>
//
//   Schematics support generic authorization for its resources.
//   For more information, about Schematics access and permissions,
//   see [Schematics service access roles and required
// permissions](https://cloud.ibm.com/docs/schematics?topic=schematics-access#access-roles).
func (schematics20Api *Schematics20ApiV2) ListLocations(listLocationsOptions *ListLocationsOptions) (result *SchematicsLocationsList, response *core.DetailedResponse, err error) {
	return schematics20Api.ListLocationsWithContext(context.Background(), listLocationsOptions)
}

// ListLocationsWithContext is an alternate form of the ListLocations method which supports a Context parameter
func (schematics20Api *Schematics20ApiV2) ListLocationsWithContext(ctx context.Context, listLocationsOptions *ListLocationsOptions) (result *SchematicsLocationsList, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listLocationsOptions, "listLocationsOptions")
	if err != nil {
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = schematics20Api.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(schematics20Api.Service.Options.URL, `/v2/locations`, nil)
	if err != nil {
		return
	}

	for headerName, headerValue := range listLocationsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("schematics_2_0_api", "V2", "ListLocations")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = schematics20Api.Service.Request(request, &rawResponse)
	if err != nil {
		return
	}
	err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalSchematicsLocationsList)
	if err != nil {
		return
	}
	response.Result = result

	return
}

// Action : Complete Action details with user inputs and system generated data.
type Action struct {
	// The unique name of your action. The name can be up to 128 characters long and can include alphanumeric characters,
	// spaces, dashes, and underscores. **Example** you can use the name to stop action.
	Name *string `json:"name,omitempty"`

	// Action description.
	Description *string `json:"description,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Resource-group name for an action. By default, an action is created in `Default` resource group.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Type of connection to be used when connecting to bastion host. If the `inventory_connection_type=winrm`, then
	// `bastion_connection_type` is not supported.
	BastionConnectionType *string `json:"bastion_connection_type,omitempty"`

	// Type of connection to be used when connecting to remote host. **Note** Currently, WinRM supports only Windows system
	// with the public IPs and do not support Bastion host.
	InventoryConnectionType *string `json:"inventory_connection_type,omitempty"`

	// Action tags.
	Tags []string `json:"tags,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// URL of the `README` file, for the source URL.
	SourceReadmeURL *string `json:"source_readme_url,omitempty"`

	// Source of templates, playbooks, or controls.
	Source *ExternalSource `json:"source,omitempty"`

	// Type of source for the Template.
	SourceType *string `json:"source_type,omitempty"`

	// Schematics job command parameter (playbook-name).
	CommandParameter *string `json:"command_parameter,omitempty"`

	// Target inventory record ID, used by the action or ansible playbook.
	Inventory *string `json:"inventory,omitempty"`

	// credentials of the Action.
	Credentials []CredentialVariableData `json:"credentials,omitempty"`

	// Describes a bastion resource.
	Bastion *BastionResourceDefinition `json:"bastion,omitempty"`

	// User editable credential variable data and system generated reference to the value.
	BastionCredential *CredentialVariableData `json:"bastion_credential,omitempty"`

	// Inventory of host and host group for the playbook in `INI` file format. For example, `"targets_ini":
	// "[webserverhost] 172.22.192.6
	//  [dbhost]
	//  172.22.192.5"`. For more information, about an inventory host group syntax, see [Inventory host
	// groups](https://cloud.ibm.com/docs/schematics?topic=schematics-schematics-cli-reference#schematics-inventory-host-grps).
	TargetsIni *string `json:"targets_ini,omitempty"`

	// Input variables for the Action.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Output variables for the Action.
	Outputs []VariableData `json:"outputs,omitempty"`

	// Environment variables for the Action.
	Settings []VariableData `json:"settings,omitempty"`

	// Action ID.
	ID *string `json:"id,omitempty"`

	// Action Cloud Resource Name.
	Crn *string `json:"crn,omitempty"`

	// Action account ID.
	Account *string `json:"account,omitempty"`

	// Action Playbook Source creation time.
	SourceCreatedAt *strfmt.DateTime `json:"source_created_at,omitempty"`

	// E-mail address of user who created the Action Playbook Source.
	SourceCreatedBy *string `json:"source_created_by,omitempty"`

	// The action playbook updation time.
	SourceUpdatedAt *strfmt.DateTime `json:"source_updated_at,omitempty"`

	// E-mail address of user who updated the action playbook source.
	SourceUpdatedBy *string `json:"source_updated_by,omitempty"`

	// Action creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// E-mail address of the user who created an action.
	CreatedBy *string `json:"created_by,omitempty"`

	// Action updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// E-mail address of the user who updated an action.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Computed state of the Action.
	State *ActionState `json:"state,omitempty"`

	// Playbook names retrieved from the repository.
	PlaybookNames []string `json:"playbook_names,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the Action.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	Action_Location_EuDe    = "eu-de"
	Action_Location_EuGb    = "eu-gb"
	Action_Location_UsEast  = "us-east"
	Action_Location_UsSouth = "us-south"
)

// Constants associated with the Action.BastionConnectionType property.
// Type of connection to be used when connecting to bastion host. If the `inventory_connection_type=winrm`, then
// `bastion_connection_type` is not supported.
const (
	Action_BastionConnectionType_Ssh = "ssh"
)

// Constants associated with the Action.InventoryConnectionType property.
// Type of connection to be used when connecting to remote host. **Note** Currently, WinRM supports only Windows system
// with the public IPs and do not support Bastion host.
const (
	Action_InventoryConnectionType_Ssh   = "ssh"
	Action_InventoryConnectionType_Winrm = "winrm"
)

// Constants associated with the Action.SourceType property.
// Type of source for the Template.
const (
	Action_SourceType_ExternalScm      = "external_scm"
	Action_SourceType_GitHub           = "git_hub"
	Action_SourceType_GitHubEnterprise = "git_hub_enterprise"
	Action_SourceType_GitLab           = "git_lab"
	Action_SourceType_IbmCloudCatalog  = "ibm_cloud_catalog"
	Action_SourceType_IbmGitLab        = "ibm_git_lab"
	Action_SourceType_Local            = "local"
)

// SetProperty allows the user to set an arbitrary property on an instance of Action
func (o *Action) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of Action
func (o *Action) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of Action
func (o *Action) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of Action
func (o *Action) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.BastionConnectionType != nil {
		m["bastion_connection_type"] = o.BastionConnectionType
	}
	if o.InventoryConnectionType != nil {
		m["inventory_connection_type"] = o.InventoryConnectionType
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.SourceReadmeURL != nil {
		m["source_readme_url"] = o.SourceReadmeURL
	}
	if o.Source != nil {
		m["source"] = o.Source
	}
	if o.SourceType != nil {
		m["source_type"] = o.SourceType
	}
	if o.CommandParameter != nil {
		m["command_parameter"] = o.CommandParameter
	}
	if o.Inventory != nil {
		m["inventory"] = o.Inventory
	}
	if o.Credentials != nil {
		m["credentials"] = o.Credentials
	}
	if o.Bastion != nil {
		m["bastion"] = o.Bastion
	}
	if o.BastionCredential != nil {
		m["bastion_credential"] = o.BastionCredential
	}
	if o.TargetsIni != nil {
		m["targets_ini"] = o.TargetsIni
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	if o.Settings != nil {
		m["settings"] = o.Settings
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.Account != nil {
		m["account"] = o.Account
	}
	if o.SourceCreatedAt != nil {
		m["source_created_at"] = o.SourceCreatedAt
	}
	if o.SourceCreatedBy != nil {
		m["source_created_by"] = o.SourceCreatedBy
	}
	if o.SourceUpdatedAt != nil {
		m["source_updated_at"] = o.SourceUpdatedAt
	}
	if o.SourceUpdatedBy != nil {
		m["source_updated_by"] = o.SourceUpdatedBy
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.State != nil {
		m["state"] = o.State
	}
	if o.PlaybookNames != nil {
		m["playbook_names"] = o.PlaybookNames
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalAction unmarshals an instance of Action from the specified map of raw messages.
func UnmarshalAction(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Action)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "bastion_connection_type", &obj.BastionConnectionType)
	if err != nil {
		return
	}
	delete(m, "bastion_connection_type")
	err = core.UnmarshalPrimitive(m, "inventory_connection_type", &obj.InventoryConnectionType)
	if err != nil {
		return
	}
	delete(m, "inventory_connection_type")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalPrimitive(m, "source_readme_url", &obj.SourceReadmeURL)
	if err != nil {
		return
	}
	delete(m, "source_readme_url")
	err = core.UnmarshalModel(m, "source", &obj.Source, UnmarshalExternalSource)
	if err != nil {
		return
	}
	delete(m, "source")
	err = core.UnmarshalPrimitive(m, "source_type", &obj.SourceType)
	if err != nil {
		return
	}
	delete(m, "source_type")
	err = core.UnmarshalPrimitive(m, "command_parameter", &obj.CommandParameter)
	if err != nil {
		return
	}
	delete(m, "command_parameter")
	err = core.UnmarshalPrimitive(m, "inventory", &obj.Inventory)
	if err != nil {
		return
	}
	delete(m, "inventory")
	err = core.UnmarshalModel(m, "credentials", &obj.Credentials, UnmarshalCredentialVariableData)
	if err != nil {
		return
	}
	delete(m, "credentials")
	err = core.UnmarshalModel(m, "bastion", &obj.Bastion, UnmarshalBastionResourceDefinition)
	if err != nil {
		return
	}
	delete(m, "bastion")
	err = core.UnmarshalModel(m, "bastion_credential", &obj.BastionCredential, UnmarshalCredentialVariableData)
	if err != nil {
		return
	}
	delete(m, "bastion_credential")
	err = core.UnmarshalPrimitive(m, "targets_ini", &obj.TargetsIni)
	if err != nil {
		return
	}
	delete(m, "targets_ini")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "outputs")
	err = core.UnmarshalModel(m, "settings", &obj.Settings, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "settings")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "account", &obj.Account)
	if err != nil {
		return
	}
	delete(m, "account")
	err = core.UnmarshalPrimitive(m, "source_created_at", &obj.SourceCreatedAt)
	if err != nil {
		return
	}
	delete(m, "source_created_at")
	err = core.UnmarshalPrimitive(m, "source_created_by", &obj.SourceCreatedBy)
	if err != nil {
		return
	}
	delete(m, "source_created_by")
	err = core.UnmarshalPrimitive(m, "source_updated_at", &obj.SourceUpdatedAt)
	if err != nil {
		return
	}
	delete(m, "source_updated_at")
	err = core.UnmarshalPrimitive(m, "source_updated_by", &obj.SourceUpdatedBy)
	if err != nil {
		return
	}
	delete(m, "source_updated_by")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "state", &obj.State, UnmarshalActionState)
	if err != nil {
		return
	}
	delete(m, "state")
	err = core.UnmarshalPrimitive(m, "playbook_names", &obj.PlaybookNames)
	if err != nil {
		return
	}
	delete(m, "playbook_names")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ActionList : List of Action definition response.
type ActionList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of action records.
	Actions []ActionLite `json:"actions,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ActionList
func (o *ActionList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ActionList
func (o *ActionList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ActionList
func (o *ActionList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ActionList
func (o *ActionList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Actions != nil {
		m["actions"] = o.Actions
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalActionList unmarshals an instance of ActionList from the specified map of raw messages.
func UnmarshalActionList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ActionList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "actions", &obj.Actions, UnmarshalActionLite)
	if err != nil {
		return
	}
	delete(m, "actions")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ActionLite : Action summary profile with user inputs and system generated data.
type ActionLite struct {
	// Action name (unique for an account).
	Name *string `json:"name,omitempty"`

	// Action description.
	Description *string `json:"description,omitempty"`

	// Action Id.
	ID *string `json:"id,omitempty"`

	// Action Cloud Resource Name.
	Crn *string `json:"crn,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Resource-group name for the Action.  By default, Action will be created in Default Resource Group.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// name of the namespace.
	Namespace *string `json:"namespace,omitempty"`

	// Action tags.
	Tags []string `json:"tags,omitempty"`

	// Name of the selected playbook.
	PlaybookName *string `json:"playbook_name,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Computed state of the Action.
	State *ActionLiteState `json:"state,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Action creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the action.
	CreatedBy *string `json:"created_by,omitempty"`

	// Action updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the action.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the ActionLite.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	ActionLite_Location_EuDe    = "eu-de"
	ActionLite_Location_EuGb    = "eu-gb"
	ActionLite_Location_UsEast  = "us-east"
	ActionLite_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of ActionLite
func (o *ActionLite) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ActionLite
func (o *ActionLite) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ActionLite
func (o *ActionLite) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ActionLite
func (o *ActionLite) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Namespace != nil {
		m["namespace"] = o.Namespace
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.PlaybookName != nil {
		m["playbook_name"] = o.PlaybookName
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.State != nil {
		m["state"] = o.State
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalActionLite unmarshals an instance of ActionLite from the specified map of raw messages.
func UnmarshalActionLite(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ActionLite)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "namespace", &obj.Namespace)
	if err != nil {
		return
	}
	delete(m, "namespace")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "playbook_name", &obj.PlaybookName)
	if err != nil {
		return
	}
	delete(m, "playbook_name")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalModel(m, "state", &obj.State, UnmarshalActionLiteState)
	if err != nil {
		return
	}
	delete(m, "state")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ActionLiteState : Computed state of the Action.
type ActionLiteState struct {
	// Status of automation (workspace or action).
	StatusCode *string `json:"status_code,omitempty"`

	// Automation status message - to be displayed along with the status_code.
	StatusMessage *string `json:"status_message,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the ActionLiteState.StatusCode property.
// Status of automation (workspace or action).
const (
	ActionLiteState_StatusCode_Critical = "critical"
	ActionLiteState_StatusCode_Disabled = "disabled"
	ActionLiteState_StatusCode_Normal   = "normal"
	ActionLiteState_StatusCode_Pending  = "pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of ActionLiteState
func (o *ActionLiteState) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ActionLiteState
func (o *ActionLiteState) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ActionLiteState
func (o *ActionLiteState) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ActionLiteState
func (o *ActionLiteState) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalActionLiteState unmarshals an instance of ActionLiteState from the specified map of raw messages.
func UnmarshalActionLiteState(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ActionLiteState)
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ActionState : Computed state of the Action.
type ActionState struct {
	// Status of automation (workspace or action).
	StatusCode *string `json:"status_code,omitempty"`

	// Job id reference for this status.
	StatusJobID *string `json:"status_job_id,omitempty"`

	// Automation status message - to be displayed along with the status_code.
	StatusMessage *string `json:"status_message,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the ActionState.StatusCode property.
// Status of automation (workspace or action).
const (
	ActionState_StatusCode_Critical = "critical"
	ActionState_StatusCode_Disabled = "disabled"
	ActionState_StatusCode_Normal   = "normal"
	ActionState_StatusCode_Pending  = "pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of ActionState
func (o *ActionState) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ActionState
func (o *ActionState) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ActionState
func (o *ActionState) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ActionState
func (o *ActionState) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusJobID != nil {
		m["status_job_id"] = o.StatusJobID
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalActionState unmarshals an instance of ActionState from the specified map of raw messages.
func UnmarshalActionState(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ActionState)
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_job_id", &obj.StatusJobID)
	if err != nil {
		return
	}
	delete(m, "status_job_id")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Adapter : Complete Schematics Adapter details provided by user and system generated.
type Adapter struct {
	// Name of the Adapter.
	AdapterName *string `json:"adapter_name,omitempty"`

	// Type of external schematics adapters.
	AdapterType *string `json:"adapter_type,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Resource-group id for the Adapter.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Adapter tags.
	Tags []string `json:"tags,omitempty"`

	// Endpoint URL for the Adapter.
	AdapterEndpointURL *string `json:"adapter_endpoint_url,omitempty"`

	// Service-ID to connect to the Adapter; if this is not provided, Schematics will used the IAM token of the user to
	// connect to the Adapter.
	ServiceID *string `json:"service_id,omitempty"`

	// API Key for the Service ID.
	Apikey *string `json:"apikey,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// True - Replace the Adapter definition, without waiting for completion of all inflight Schematics operations; False -
	//  Block all new Schematics operations in the Account, and wait for inflight operations to complete - before changing
	// the Adapter definition.
	IgnoreInflightOperations *bool `json:"ignore_inflight_operations,omitempty"`

	// Id of the Adapter.
	AdapterID *string `json:"adapter_id,omitempty"`

	// Name of the user who registered the Adapter.
	RegisteredBy *string `json:"registered_by,omitempty"`

	// Timestamp of Adapter registration.
	RegisteredAt *strfmt.DateTime `json:"registered_at,omitempty"`

	// Adapter updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Name of user who updated the Adapter definition.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Health of the adapter.
	AdapterHealth *string `json:"adapter_health,omitempty"`

	// Timestamp of the last health check.
	LastHealthCheckedAt *strfmt.DateTime `json:"last_health_checked_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the Adapter.AdapterType property.
// Type of external schematics adapters.
const (
	Adapter_AdapterType_CatalogAdapter       = "catalog_adapter"
	Adapter_AdapterType_PolicyAgentAdapter   = "policy_agent_adapter"
	Adapter_AdapterType_ProvisionerAdapter   = "provisioner_adapter"
	Adapter_AdapterType_ScmAdapter           = "scm_adapter"
	Adapter_AdapterType_VaultAdapter         = "vault_adapter"
	Adapter_AdapterType_WorkspaceDataAdapter = "workspace_data_adapter"
)

// Constants associated with the Adapter.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	Adapter_Location_EuDe    = "eu-de"
	Adapter_Location_EuGb    = "eu-gb"
	Adapter_Location_UsEast  = "us-east"
	Adapter_Location_UsSouth = "us-south"
)

// Constants associated with the Adapter.AdapterHealth property.
// Health of the adapter.
const (
	Adapter_AdapterHealth_Active   = "active"
	Adapter_AdapterHealth_Inactive = "inactive"
)

// SetProperty allows the user to set an arbitrary property on an instance of Adapter
func (o *Adapter) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of Adapter
func (o *Adapter) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of Adapter
func (o *Adapter) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of Adapter
func (o *Adapter) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.AdapterName != nil {
		m["adapter_name"] = o.AdapterName
	}
	if o.AdapterType != nil {
		m["adapter_type"] = o.AdapterType
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.AdapterEndpointURL != nil {
		m["adapter_endpoint_url"] = o.AdapterEndpointURL
	}
	if o.ServiceID != nil {
		m["service_id"] = o.ServiceID
	}
	if o.Apikey != nil {
		m["apikey"] = o.Apikey
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.IgnoreInflightOperations != nil {
		m["ignore_inflight_operations"] = o.IgnoreInflightOperations
	}
	if o.AdapterID != nil {
		m["adapter_id"] = o.AdapterID
	}
	if o.RegisteredBy != nil {
		m["registered_by"] = o.RegisteredBy
	}
	if o.RegisteredAt != nil {
		m["registered_at"] = o.RegisteredAt
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.AdapterHealth != nil {
		m["adapter_health"] = o.AdapterHealth
	}
	if o.LastHealthCheckedAt != nil {
		m["last_health_checked_at"] = o.LastHealthCheckedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalAdapter unmarshals an instance of Adapter from the specified map of raw messages.
func UnmarshalAdapter(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Adapter)
	err = core.UnmarshalPrimitive(m, "adapter_name", &obj.AdapterName)
	if err != nil {
		return
	}
	delete(m, "adapter_name")
	err = core.UnmarshalPrimitive(m, "adapter_type", &obj.AdapterType)
	if err != nil {
		return
	}
	delete(m, "adapter_type")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "adapter_endpoint_url", &obj.AdapterEndpointURL)
	if err != nil {
		return
	}
	delete(m, "adapter_endpoint_url")
	err = core.UnmarshalPrimitive(m, "service_id", &obj.ServiceID)
	if err != nil {
		return
	}
	delete(m, "service_id")
	err = core.UnmarshalPrimitive(m, "apikey", &obj.Apikey)
	if err != nil {
		return
	}
	delete(m, "apikey")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalPrimitive(m, "ignore_inflight_operations", &obj.IgnoreInflightOperations)
	if err != nil {
		return
	}
	delete(m, "ignore_inflight_operations")
	err = core.UnmarshalPrimitive(m, "adapter_id", &obj.AdapterID)
	if err != nil {
		return
	}
	delete(m, "adapter_id")
	err = core.UnmarshalPrimitive(m, "registered_by", &obj.RegisteredBy)
	if err != nil {
		return
	}
	delete(m, "registered_by")
	err = core.UnmarshalPrimitive(m, "registered_at", &obj.RegisteredAt)
	if err != nil {
		return
	}
	delete(m, "registered_at")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalPrimitive(m, "adapter_health", &obj.AdapterHealth)
	if err != nil {
		return
	}
	delete(m, "adapter_health")
	err = core.UnmarshalPrimitive(m, "last_health_checked_at", &obj.LastHealthCheckedAt)
	if err != nil {
		return
	}
	delete(m, "last_health_checked_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AdapterList : List of schematics adapter details.
type AdapterList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of external schematics adapters.
	Adapters []Adapter `json:"adapters,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of AdapterList
func (o *AdapterList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of AdapterList
func (o *AdapterList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of AdapterList
func (o *AdapterList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of AdapterList
func (o *AdapterList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Adapters != nil {
		m["adapters"] = o.Adapters
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalAdapterList unmarshals an instance of AdapterList from the specified map of raw messages.
func UnmarshalAdapterList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AdapterList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "adapters", &obj.Adapters, UnmarshalAdapter)
	if err != nil {
		return
	}
	delete(m, "adapters")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AddFlowToWorkspaceOptions : The AddFlowToWorkspace options.
type AddFlowToWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Add a new Flow to the Workspace.
	TemplateFlow *TemplateFlow `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewAddFlowToWorkspaceOptions : Instantiate AddFlowToWorkspaceOptions
func (*Schematics20ApiV2) NewAddFlowToWorkspaceOptions(wID string, templateFlow *TemplateFlow) *AddFlowToWorkspaceOptions {
	return &AddFlowToWorkspaceOptions{
		WID:          core.StringPtr(wID),
		TemplateFlow: templateFlow,
	}
}

// SetWID : Allow user to set WID
func (options *AddFlowToWorkspaceOptions) SetWID(wID string) *AddFlowToWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTemplateFlow : Allow user to set TemplateFlow
func (options *AddFlowToWorkspaceOptions) SetTemplateFlow(templateFlow *TemplateFlow) *AddFlowToWorkspaceOptions {
	options.TemplateFlow = templateFlow
	return options
}

// SetHeaders : Allow user to set Headers
func (options *AddFlowToWorkspaceOptions) SetHeaders(param map[string]string) *AddFlowToWorkspaceOptions {
	options.Headers = param
	return options
}

// AddTemplatesToWorkspaceOptions : The AddTemplatesToWorkspace options.
type AddTemplatesToWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Add a new Template to the Workspace.
	Template *Template `validate:"required"`

	// The personal access token to authenticate with your private GitHub or GitLab repository and access your Terraform
	// template.
	XGithubToken *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewAddTemplatesToWorkspaceOptions : Instantiate AddTemplatesToWorkspaceOptions
func (*Schematics20ApiV2) NewAddTemplatesToWorkspaceOptions(wID string, template *Template) *AddTemplatesToWorkspaceOptions {
	return &AddTemplatesToWorkspaceOptions{
		WID:      core.StringPtr(wID),
		Template: template,
	}
}

// SetWID : Allow user to set WID
func (options *AddTemplatesToWorkspaceOptions) SetWID(wID string) *AddTemplatesToWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTemplate : Allow user to set Template
func (options *AddTemplatesToWorkspaceOptions) SetTemplate(template *Template) *AddTemplatesToWorkspaceOptions {
	options.Template = template
	return options
}

// SetXGithubToken : Allow user to set XGithubToken
func (options *AddTemplatesToWorkspaceOptions) SetXGithubToken(xGithubToken string) *AddTemplatesToWorkspaceOptions {
	options.XGithubToken = core.StringPtr(xGithubToken)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *AddTemplatesToWorkspaceOptions) SetHeaders(param map[string]string) *AddTemplatesToWorkspaceOptions {
	options.Headers = param
	return options
}

// Agent : Agent registration details, with user inputs and system generated data.
type Agent struct {
	// Name of the agent (must be unique, for an account).
	Name *string `json:"name" validate:"required"`

	// Agent description.
	Description *string `json:"description,omitempty"`

	// Resource-group name for the agent.  By default, Agent will be registered in Default Resource Group.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Tags for the agent.
	Tags []string `json:"tags,omitempty"`

	// User defined location of the Agent.
	Location *string `json:"location,omitempty"`

	// IAM trusted profile id, used by the Agent instance.
	ProfileID *string `json:"profile_id" validate:"required"`

	// Agent id, obtained from the Schematics Agent deployment configuration.
	AgentID *string `json:"agent_id" validate:"required"`

	// Agent CRN.
	Crn *string `json:"crn,omitempty"`

	// Account id.
	Account *string `json:"account,omitempty"`

	// Agent registration id.
	ID *string `json:"id,omitempty"`

	// Agent registration date-time.
	RegisteredAt *strfmt.DateTime `json:"registered_at,omitempty"`

	// Email address of user who registered the Agent.
	RegisteredBy *string `json:"registered_by,omitempty"`

	// Agent registration updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the Agent registration.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Health check details of the agent.
	AgentHealth *AgentHealth `json:"agent_health,omitempty"`

	// Computed state of the agent.
	SystemState *AgentSystemState `json:"system_state,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// NewAgent : Instantiate Agent (Generic Model Constructor)
func (*Schematics20ApiV2) NewAgent(name string, profileID string, agentID string) (model *Agent, err error) {
	model = &Agent{
		Name:      core.StringPtr(name),
		ProfileID: core.StringPtr(profileID),
		AgentID:   core.StringPtr(agentID),
	}
	err = core.ValidateStruct(model, "required parameters")
	return
}

// SetProperty allows the user to set an arbitrary property on an instance of Agent
func (o *Agent) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of Agent
func (o *Agent) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of Agent
func (o *Agent) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of Agent
func (o *Agent) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ProfileID != nil {
		m["profile_id"] = o.ProfileID
	}
	if o.AgentID != nil {
		m["agent_id"] = o.AgentID
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.Account != nil {
		m["account"] = o.Account
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.RegisteredAt != nil {
		m["registered_at"] = o.RegisteredAt
	}
	if o.RegisteredBy != nil {
		m["registered_by"] = o.RegisteredBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.AgentHealth != nil {
		m["agent_health"] = o.AgentHealth
	}
	if o.SystemState != nil {
		m["system_state"] = o.SystemState
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalAgent unmarshals an instance of Agent from the specified map of raw messages.
func UnmarshalAgent(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Agent)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "profile_id", &obj.ProfileID)
	if err != nil {
		return
	}
	delete(m, "profile_id")
	err = core.UnmarshalPrimitive(m, "agent_id", &obj.AgentID)
	if err != nil {
		return
	}
	delete(m, "agent_id")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "account", &obj.Account)
	if err != nil {
		return
	}
	delete(m, "account")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "registered_at", &obj.RegisteredAt)
	if err != nil {
		return
	}
	delete(m, "registered_at")
	err = core.UnmarshalPrimitive(m, "registered_by", &obj.RegisteredBy)
	if err != nil {
		return
	}
	delete(m, "registered_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalModel(m, "agent_health", &obj.AgentHealth, UnmarshalAgentHealth)
	if err != nil {
		return
	}
	delete(m, "agent_health")
	err = core.UnmarshalModel(m, "system_state", &obj.SystemState, UnmarshalAgentSystemState)
	if err != nil {
		return
	}
	delete(m, "system_state")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AgentHealth : Health check details of the agent.
type AgentHealth struct {
	// User-defined states
	//   * `Connected` When Schematics is able to connect to the agent.
	//   * `Disconnected` When Schematics is able not connect to the agent.
	State *string `json:"state,omitempty"`

	// When the health check is performed.
	CheckedAt *strfmt.DateTime `json:"checked_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the AgentHealth.State property.
// User-defined states
//   * `Connected` When Schematics is able to connect to the agent.
//   * `Disconnected` When Schematics is able not connect to the agent.
const (
	AgentHealth_State_Connected    = "Connected"
	AgentHealth_State_Disconnected = "Disconnected"
)

// SetProperty allows the user to set an arbitrary property on an instance of AgentHealth
func (o *AgentHealth) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of AgentHealth
func (o *AgentHealth) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of AgentHealth
func (o *AgentHealth) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of AgentHealth
func (o *AgentHealth) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.State != nil {
		m["state"] = o.State
	}
	if o.CheckedAt != nil {
		m["checked_at"] = o.CheckedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalAgentHealth unmarshals an instance of AgentHealth from the specified map of raw messages.
func UnmarshalAgentHealth(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AgentHealth)
	err = core.UnmarshalPrimitive(m, "state", &obj.State)
	if err != nil {
		return
	}
	delete(m, "state")
	err = core.UnmarshalPrimitive(m, "checked_at", &obj.CheckedAt)
	if err != nil {
		return
	}
	delete(m, "checked_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AgentList : List of agent.
type AgentList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of agent in the account.
	Agents []Agent `json:"agents,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of AgentList
func (o *AgentList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of AgentList
func (o *AgentList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of AgentList
func (o *AgentList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of AgentList
func (o *AgentList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Agents != nil {
		m["agents"] = o.Agents
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalAgentList unmarshals an instance of AgentList from the specified map of raw messages.
func UnmarshalAgentList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AgentList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "agents", &obj.Agents, UnmarshalAgent)
	if err != nil {
		return
	}
	delete(m, "agents")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AgentSystemState : Computed state of the agent.
type AgentSystemState struct {
	// Status of while registering the agent.
	State *string `json:"state,omitempty"`

	// Agent status message.
	Message *string `json:"message,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the AgentSystemState.State property.
// Status of while registering the agent.
const (
	AgentSystemState_State_Active = "active"
	AgentSystemState_State_Error  = "error"
)

// SetProperty allows the user to set an arbitrary property on an instance of AgentSystemState
func (o *AgentSystemState) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of AgentSystemState
func (o *AgentSystemState) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of AgentSystemState
func (o *AgentSystemState) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of AgentSystemState
func (o *AgentSystemState) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.State != nil {
		m["state"] = o.State
	}
	if o.Message != nil {
		m["message"] = o.Message
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalAgentSystemState unmarshals an instance of AgentSystemState from the specified map of raw messages.
func UnmarshalAgentSystemState(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AgentSystemState)
	err = core.UnmarshalPrimitive(m, "state", &obj.State)
	if err != nil {
		return
	}
	delete(m, "state")
	err = core.UnmarshalPrimitive(m, "message", &obj.Message)
	if err != nil {
		return
	}
	delete(m, "message")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// BastionResourceDefinition : Describes a bastion resource.
type BastionResourceDefinition struct {
	// Bastion Name(Unique).
	Name *string `json:"name,omitempty"`

	// Reference to the Inventory resource definition.
	Host *string `json:"host,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of BastionResourceDefinition
func (o *BastionResourceDefinition) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of BastionResourceDefinition
func (o *BastionResourceDefinition) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of BastionResourceDefinition
func (o *BastionResourceDefinition) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of BastionResourceDefinition
func (o *BastionResourceDefinition) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Host != nil {
		m["host"] = o.Host
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalBastionResourceDefinition unmarshals an instance of BastionResourceDefinition from the specified map of raw messages.
func UnmarshalBastionResourceDefinition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(BastionResourceDefinition)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "host", &obj.Host)
	if err != nil {
		return
	}
	delete(m, "host")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Blueprint : Blueprint details with user inputs and system generated data.
type Blueprint struct {
	// Blueprint name (unique for an account).
	Name *string `json:"name" validate:"required"`

	// Schema version.
	SchemaVersion *string `json:"schema_version,omitempty"`

	// Source of templates, playbooks, or controls.
	Source *ExternalSource `json:"source,omitempty"`

	// Blueprint input configuration definition.
	Config []BlueprintConfigItem `json:"config,omitempty"`

	// Blueprint description.
	Description *string `json:"description,omitempty"`

	// Resource-group name for the Blueprint.  By default, Blueprint will be created in Default Resource Group.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Blueprint instance tags.
	Tags []string `json:"tags,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Additional inputs configuration for the blueprint.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Input environemnt settings for blueprint.
	Settings []VariableData `json:"settings,omitempty"`

	// Output variables for the blueprint.
	Outputs []VariableData `json:"outputs,omitempty"`

	// Components of the blueprint.
	Components []BlueprintComponent `json:"components,omitempty"`

	// Flow definitions for all the Blueprint command.
	Flow *BlueprintFlow `json:"flow,omitempty"`

	// System generated Blueprint Id.
	BlueprintID *string `json:"blueprint_id,omitempty"`

	// Blueprint CRN.
	Crn *string `json:"crn,omitempty"`

	// Account id.
	Account *string `json:"account,omitempty"`

	// Blueprint creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// User who created the Blueprint.
	CreatedBy *string `json:"created_by,omitempty"`

	// Blueprint updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// User who updated the Blueprint.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Computed state of the Blueprint.
	State *BlueprintLiteState `json:"state,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the Blueprint.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	Blueprint_Location_EuDe    = "eu-de"
	Blueprint_Location_EuGb    = "eu-gb"
	Blueprint_Location_UsEast  = "us-east"
	Blueprint_Location_UsSouth = "us-south"
)

// NewBlueprint : Instantiate Blueprint (Generic Model Constructor)
func (*Schematics20ApiV2) NewBlueprint(name string) (model *Blueprint, err error) {
	model = &Blueprint{
		Name: core.StringPtr(name),
	}
	err = core.ValidateStruct(model, "required parameters")
	return
}

// SetProperty allows the user to set an arbitrary property on an instance of Blueprint
func (o *Blueprint) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of Blueprint
func (o *Blueprint) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of Blueprint
func (o *Blueprint) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of Blueprint
func (o *Blueprint) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.SchemaVersion != nil {
		m["schema_version"] = o.SchemaVersion
	}
	if o.Source != nil {
		m["source"] = o.Source
	}
	if o.Config != nil {
		m["config"] = o.Config
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Settings != nil {
		m["settings"] = o.Settings
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	if o.Components != nil {
		m["components"] = o.Components
	}
	if o.Flow != nil {
		m["flow"] = o.Flow
	}
	if o.BlueprintID != nil {
		m["blueprint_id"] = o.BlueprintID
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.Account != nil {
		m["account"] = o.Account
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.State != nil {
		m["state"] = o.State
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalBlueprint unmarshals an instance of Blueprint from the specified map of raw messages.
func UnmarshalBlueprint(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Blueprint)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "schema_version", &obj.SchemaVersion)
	if err != nil {
		return
	}
	delete(m, "schema_version")
	err = core.UnmarshalModel(m, "source", &obj.Source, UnmarshalExternalSource)
	if err != nil {
		return
	}
	delete(m, "source")
	err = core.UnmarshalModel(m, "config", &obj.Config, UnmarshalBlueprintConfigItem)
	if err != nil {
		return
	}
	delete(m, "config")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "settings", &obj.Settings, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "settings")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "outputs")
	err = core.UnmarshalModel(m, "components", &obj.Components, UnmarshalBlueprintComponent)
	if err != nil {
		return
	}
	delete(m, "components")
	err = core.UnmarshalModel(m, "flow", &obj.Flow, UnmarshalBlueprintFlow)
	if err != nil {
		return
	}
	delete(m, "flow")
	err = core.UnmarshalPrimitive(m, "blueprint_id", &obj.BlueprintID)
	if err != nil {
		return
	}
	delete(m, "blueprint_id")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "account", &obj.Account)
	if err != nil {
		return
	}
	delete(m, "account")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalModel(m, "state", &obj.State, UnmarshalBlueprintLiteState)
	if err != nil {
		return
	}
	delete(m, "state")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// BlueprintComponent : Component for the Blueprint.
type BlueprintComponent struct {
	// Component id.
	ComponentID *string `json:"component_id,omitempty"`

	// Name of the Schematics automation resource.
	ComponentType *string `json:"component_type,omitempty"`

	// Name of the component.
	Name *string `json:"name,omitempty"`

	// Layer for the component.
	Layer *string `json:"layer,omitempty"`

	// Source of templates, playbooks, or controls.
	Source *ExternalSource `json:"source,omitempty"`

	// Array of injectable terraform blocks.
	Injectors []InjectTerraformTemplateInner `json:"injectors,omitempty"`

	// Tags used by the component.
	Tags *string `json:"tags,omitempty"`

	// Inputs used by the component.
	Inputs []BlueprintVariableData `json:"inputs,omitempty"`

	// Environment settings for the component.
	Settings []BlueprintVariableData `json:"settings,omitempty"`

	// Outputs from the component.
	Outputs []BlueprintVariableData `json:"outputs,omitempty"`

	// Status of the last job executed by the component.
	LastJob *BlueprintComponentLastJob `json:"last_job,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the BlueprintComponent.ComponentType property.
// Name of the Schematics automation resource.
const (
	BlueprintComponent_ComponentType_Action      = "action"
	BlueprintComponent_ComponentType_Environment = "environment"
	BlueprintComponent_ComponentType_System      = "system"
	BlueprintComponent_ComponentType_Workspace   = "workspace"
)

// SetProperty allows the user to set an arbitrary property on an instance of BlueprintComponent
func (o *BlueprintComponent) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of BlueprintComponent
func (o *BlueprintComponent) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of BlueprintComponent
func (o *BlueprintComponent) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of BlueprintComponent
func (o *BlueprintComponent) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ComponentID != nil {
		m["component_id"] = o.ComponentID
	}
	if o.ComponentType != nil {
		m["component_type"] = o.ComponentType
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Layer != nil {
		m["layer"] = o.Layer
	}
	if o.Source != nil {
		m["source"] = o.Source
	}
	if o.Injectors != nil {
		m["injectors"] = o.Injectors
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Settings != nil {
		m["settings"] = o.Settings
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	if o.LastJob != nil {
		m["last_job"] = o.LastJob
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalBlueprintComponent unmarshals an instance of BlueprintComponent from the specified map of raw messages.
func UnmarshalBlueprintComponent(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(BlueprintComponent)
	err = core.UnmarshalPrimitive(m, "component_id", &obj.ComponentID)
	if err != nil {
		return
	}
	delete(m, "component_id")
	err = core.UnmarshalPrimitive(m, "component_type", &obj.ComponentType)
	if err != nil {
		return
	}
	delete(m, "component_type")
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "layer", &obj.Layer)
	if err != nil {
		return
	}
	delete(m, "layer")
	err = core.UnmarshalModel(m, "source", &obj.Source, UnmarshalExternalSource)
	if err != nil {
		return
	}
	delete(m, "source")
	err = core.UnmarshalModel(m, "injectors", &obj.Injectors, UnmarshalInjectTerraformTemplateInner)
	if err != nil {
		return
	}
	delete(m, "injectors")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalBlueprintVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "settings", &obj.Settings, UnmarshalBlueprintVariableData)
	if err != nil {
		return
	}
	delete(m, "settings")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalBlueprintVariableData)
	if err != nil {
		return
	}
	delete(m, "outputs")
	err = core.UnmarshalModel(m, "last_job", &obj.LastJob, UnmarshalBlueprintComponentLastJob)
	if err != nil {
		return
	}
	delete(m, "last_job")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// BlueprintComponentLastJob : Status of the last job executed by the component.
type BlueprintComponentLastJob struct {
	// Name of the Schematics automation resource.
	CommandObject *string `json:"command_object,omitempty"`

	// Name of the command object id, maps to workspace_name or action_name.
	CommandObjectName *string `json:"command_object_name,omitempty"`

	// Component command object id, maps to workspace_id or action_id.
	CommandObjectID *string `json:"command_object_id,omitempty"`

	// Schematics job command name.
	CommandName *string `json:"command_name,omitempty"`

	// Status of Jobs.
	JobStatus *string `json:"job_status,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the BlueprintComponentLastJob.CommandObject property.
// Name of the Schematics automation resource.
const (
	BlueprintComponentLastJob_CommandObject_Action      = "action"
	BlueprintComponentLastJob_CommandObject_Environment = "environment"
	BlueprintComponentLastJob_CommandObject_System      = "system"
	BlueprintComponentLastJob_CommandObject_Workspace   = "workspace"
)

// Constants associated with the BlueprintComponentLastJob.CommandName property.
// Schematics job command name.
const (
	BlueprintComponentLastJob_CommandName_AnsiblePlaybookCheck = "ansible_playbook_check"
	BlueprintComponentLastJob_CommandName_AnsiblePlaybookRun   = "ansible_playbook_run"
	BlueprintComponentLastJob_CommandName_CreateAction         = "create_action"
	BlueprintComponentLastJob_CommandName_CreateCart           = "create_cart"
	BlueprintComponentLastJob_CommandName_CreateEnvironment    = "create_environment"
	BlueprintComponentLastJob_CommandName_CreateWorkspace      = "create_workspace"
	BlueprintComponentLastJob_CommandName_DeleteAction         = "delete_action"
	BlueprintComponentLastJob_CommandName_DeleteEnvironment    = "delete_environment"
	BlueprintComponentLastJob_CommandName_DeleteWorkspace      = "delete_workspace"
	BlueprintComponentLastJob_CommandName_EnvironmentInit      = "environment_init"
	BlueprintComponentLastJob_CommandName_EnvironmentInstall   = "environment_install"
	BlueprintComponentLastJob_CommandName_EnvironmentUninstall = "environment_uninstall"
	BlueprintComponentLastJob_CommandName_PatchAction          = "patch_action"
	BlueprintComponentLastJob_CommandName_PatchWorkspace       = "patch_workspace"
	BlueprintComponentLastJob_CommandName_PutAction            = "put_action"
	BlueprintComponentLastJob_CommandName_PutEnvironment       = "put_environment"
	BlueprintComponentLastJob_CommandName_PutWorkspace         = "put_workspace"
	BlueprintComponentLastJob_CommandName_RepositoryProcess    = "repository_process"
	BlueprintComponentLastJob_CommandName_SystemKeyDelete      = "system_key_delete"
	BlueprintComponentLastJob_CommandName_SystemKeyDisable     = "system_key_disable"
	BlueprintComponentLastJob_CommandName_SystemKeyEnable      = "system_key_enable"
	BlueprintComponentLastJob_CommandName_SystemKeyRestore     = "system_key_restore"
	BlueprintComponentLastJob_CommandName_SystemKeyRotate      = "system_key_rotate"
	BlueprintComponentLastJob_CommandName_TerraformCommands    = "terraform_commands"
	BlueprintComponentLastJob_CommandName_WorkspaceApply       = "workspace_apply"
	BlueprintComponentLastJob_CommandName_WorkspaceDestroy     = "workspace_destroy"
	BlueprintComponentLastJob_CommandName_WorkspacePlan        = "workspace_plan"
	BlueprintComponentLastJob_CommandName_WorkspaceRefresh     = "workspace_refresh"
)

// Constants associated with the BlueprintComponentLastJob.JobStatus property.
// Status of Jobs.
const (
	BlueprintComponentLastJob_JobStatus_JobCancelled  = "job_cancelled"
	BlueprintComponentLastJob_JobStatus_JobFailed     = "job_failed"
	BlueprintComponentLastJob_JobStatus_JobFinished   = "job_finished"
	BlueprintComponentLastJob_JobStatus_JobInProgress = "job_in_progress"
	BlueprintComponentLastJob_JobStatus_JobPending    = "job_pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of BlueprintComponentLastJob
func (o *BlueprintComponentLastJob) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of BlueprintComponentLastJob
func (o *BlueprintComponentLastJob) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of BlueprintComponentLastJob
func (o *BlueprintComponentLastJob) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of BlueprintComponentLastJob
func (o *BlueprintComponentLastJob) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.CommandObject != nil {
		m["command_object"] = o.CommandObject
	}
	if o.CommandObjectName != nil {
		m["command_object_name"] = o.CommandObjectName
	}
	if o.CommandObjectID != nil {
		m["command_object_id"] = o.CommandObjectID
	}
	if o.CommandName != nil {
		m["command_name"] = o.CommandName
	}
	if o.JobStatus != nil {
		m["job_status"] = o.JobStatus
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalBlueprintComponentLastJob unmarshals an instance of BlueprintComponentLastJob from the specified map of raw messages.
func UnmarshalBlueprintComponentLastJob(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(BlueprintComponentLastJob)
	err = core.UnmarshalPrimitive(m, "command_object", &obj.CommandObject)
	if err != nil {
		return
	}
	delete(m, "command_object")
	err = core.UnmarshalPrimitive(m, "command_object_name", &obj.CommandObjectName)
	if err != nil {
		return
	}
	delete(m, "command_object_name")
	err = core.UnmarshalPrimitive(m, "command_object_id", &obj.CommandObjectID)
	if err != nil {
		return
	}
	delete(m, "command_object_id")
	err = core.UnmarshalPrimitive(m, "command_name", &obj.CommandName)
	if err != nil {
		return
	}
	delete(m, "command_name")
	err = core.UnmarshalPrimitive(m, "job_status", &obj.JobStatus)
	if err != nil {
		return
	}
	delete(m, "job_status")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// BlueprintConfigItem : Blueprint configuration item.
type BlueprintConfigItem struct {
	// Name of the blueprint configuration item.
	Name *string `json:"name,omitempty"`

	// Description for the blueprint configuration item.
	Description *string `json:"description,omitempty"`

	// Source of templates, playbooks, or controls.
	Source *ExternalSource `json:"source,omitempty"`

	// Input variables and values for the blueprint configuration item.
	Inputs []BlueprintVariableData `json:"inputs,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of BlueprintConfigItem
func (o *BlueprintConfigItem) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of BlueprintConfigItem
func (o *BlueprintConfigItem) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of BlueprintConfigItem
func (o *BlueprintConfigItem) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of BlueprintConfigItem
func (o *BlueprintConfigItem) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.Source != nil {
		m["source"] = o.Source
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalBlueprintConfigItem unmarshals an instance of BlueprintConfigItem from the specified map of raw messages.
func UnmarshalBlueprintConfigItem(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(BlueprintConfigItem)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalModel(m, "source", &obj.Source, UnmarshalExternalSource)
	if err != nil {
		return
	}
	delete(m, "source")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalBlueprintVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// BlueprintFlow : Flow definitions for all the Blueprint command.
type BlueprintFlow struct {
	// Blueprint flow specification.
	Specs []BlueprintFlowSpecs `json:"specs,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of BlueprintFlow
func (o *BlueprintFlow) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of BlueprintFlow
func (o *BlueprintFlow) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of BlueprintFlow
func (o *BlueprintFlow) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of BlueprintFlow
func (o *BlueprintFlow) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Specs != nil {
		m["specs"] = o.Specs
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalBlueprintFlow unmarshals an instance of BlueprintFlow from the specified map of raw messages.
func UnmarshalBlueprintFlow(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(BlueprintFlow)
	err = core.UnmarshalModel(m, "specs", &obj.Specs, UnmarshalBlueprintFlowSpecs)
	if err != nil {
		return
	}
	delete(m, "specs")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// BlueprintFlowSequenceFlow : BlueprintFlowSequenceFlow struct
type BlueprintFlowSequenceFlow struct {
	// Sequence number in the order or execution.
	SequenceNumber *int64 `json:"sequence_number,omitempty"`

	// Name of the layer or component to run this command.
	ItemName *string `json:"item_name,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of BlueprintFlowSequenceFlow
func (o *BlueprintFlowSequenceFlow) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of BlueprintFlowSequenceFlow
func (o *BlueprintFlowSequenceFlow) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of BlueprintFlowSequenceFlow
func (o *BlueprintFlowSequenceFlow) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of BlueprintFlowSequenceFlow
func (o *BlueprintFlowSequenceFlow) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.SequenceNumber != nil {
		m["sequence_number"] = o.SequenceNumber
	}
	if o.ItemName != nil {
		m["item_name"] = o.ItemName
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalBlueprintFlowSequenceFlow unmarshals an instance of BlueprintFlowSequenceFlow from the specified map of raw messages.
func UnmarshalBlueprintFlowSequenceFlow(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(BlueprintFlowSequenceFlow)
	err = core.UnmarshalPrimitive(m, "sequence_number", &obj.SequenceNumber)
	if err != nil {
		return
	}
	delete(m, "sequence_number")
	err = core.UnmarshalPrimitive(m, "item_name", &obj.ItemName)
	if err != nil {
		return
	}
	delete(m, "item_name")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// BlueprintFlowSpecs : BlueprintFlowSpecs struct
type BlueprintFlowSpecs struct {
	// Schematics job command name.
	CommandName *string `json:"command_name,omitempty"`

	// Type of Blueprint flow specification.
	FlowType *string `json:"flow_type,omitempty"`

	// Ordered items in the simple sequence.
	SequenceFlow []BlueprintFlowSequenceFlow `json:"sequence_flow,omitempty"`

	// Placeholder for conditional flow.
	ConditionalFlow *string `json:"conditional_flow,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the BlueprintFlowSpecs.CommandName property.
// Schematics job command name.
const (
	BlueprintFlowSpecs_CommandName_AnsiblePlaybookCheck = "ansible_playbook_check"
	BlueprintFlowSpecs_CommandName_AnsiblePlaybookRun   = "ansible_playbook_run"
	BlueprintFlowSpecs_CommandName_CreateAction         = "create_action"
	BlueprintFlowSpecs_CommandName_CreateCart           = "create_cart"
	BlueprintFlowSpecs_CommandName_CreateEnvironment    = "create_environment"
	BlueprintFlowSpecs_CommandName_CreateWorkspace      = "create_workspace"
	BlueprintFlowSpecs_CommandName_DeleteAction         = "delete_action"
	BlueprintFlowSpecs_CommandName_DeleteEnvironment    = "delete_environment"
	BlueprintFlowSpecs_CommandName_DeleteWorkspace      = "delete_workspace"
	BlueprintFlowSpecs_CommandName_EnvironmentInit      = "environment_init"
	BlueprintFlowSpecs_CommandName_EnvironmentInstall   = "environment_install"
	BlueprintFlowSpecs_CommandName_EnvironmentUninstall = "environment_uninstall"
	BlueprintFlowSpecs_CommandName_PatchAction          = "patch_action"
	BlueprintFlowSpecs_CommandName_PatchWorkspace       = "patch_workspace"
	BlueprintFlowSpecs_CommandName_PutAction            = "put_action"
	BlueprintFlowSpecs_CommandName_PutEnvironment       = "put_environment"
	BlueprintFlowSpecs_CommandName_PutWorkspace         = "put_workspace"
	BlueprintFlowSpecs_CommandName_RepositoryProcess    = "repository_process"
	BlueprintFlowSpecs_CommandName_SystemKeyDelete      = "system_key_delete"
	BlueprintFlowSpecs_CommandName_SystemKeyDisable     = "system_key_disable"
	BlueprintFlowSpecs_CommandName_SystemKeyEnable      = "system_key_enable"
	BlueprintFlowSpecs_CommandName_SystemKeyRestore     = "system_key_restore"
	BlueprintFlowSpecs_CommandName_SystemKeyRotate      = "system_key_rotate"
	BlueprintFlowSpecs_CommandName_TerraformCommands    = "terraform_commands"
	BlueprintFlowSpecs_CommandName_WorkspaceApply       = "workspace_apply"
	BlueprintFlowSpecs_CommandName_WorkspaceDestroy     = "workspace_destroy"
	BlueprintFlowSpecs_CommandName_WorkspacePlan        = "workspace_plan"
	BlueprintFlowSpecs_CommandName_WorkspaceRefresh     = "workspace_refresh"
)

// Constants associated with the BlueprintFlowSpecs.FlowType property.
// Type of Blueprint flow specification.
const (
	BlueprintFlowSpecs_FlowType_ConditionalFlow = "conditional_flow"
	BlueprintFlowSpecs_FlowType_SequenceFlow    = "sequence_flow"
)

// SetProperty allows the user to set an arbitrary property on an instance of BlueprintFlowSpecs
func (o *BlueprintFlowSpecs) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of BlueprintFlowSpecs
func (o *BlueprintFlowSpecs) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of BlueprintFlowSpecs
func (o *BlueprintFlowSpecs) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of BlueprintFlowSpecs
func (o *BlueprintFlowSpecs) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.CommandName != nil {
		m["command_name"] = o.CommandName
	}
	if o.FlowType != nil {
		m["flow_type"] = o.FlowType
	}
	if o.SequenceFlow != nil {
		m["sequence_flow"] = o.SequenceFlow
	}
	if o.ConditionalFlow != nil {
		m["conditional_flow"] = o.ConditionalFlow
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalBlueprintFlowSpecs unmarshals an instance of BlueprintFlowSpecs from the specified map of raw messages.
func UnmarshalBlueprintFlowSpecs(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(BlueprintFlowSpecs)
	err = core.UnmarshalPrimitive(m, "command_name", &obj.CommandName)
	if err != nil {
		return
	}
	delete(m, "command_name")
	err = core.UnmarshalPrimitive(m, "flow_type", &obj.FlowType)
	if err != nil {
		return
	}
	delete(m, "flow_type")
	err = core.UnmarshalModel(m, "sequence_flow", &obj.SequenceFlow, UnmarshalBlueprintFlowSequenceFlow)
	if err != nil {
		return
	}
	delete(m, "sequence_flow")
	err = core.UnmarshalPrimitive(m, "conditional_flow", &obj.ConditionalFlow)
	if err != nil {
		return
	}
	delete(m, "conditional_flow")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// BlueprintList : List of Blueprints.
type BlueprintList struct {
	// Total number of Blueprint records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of Blueprint records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of Blueprint records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of Blueprints.
	Blueprints []BlueprintLite `json:"blueprints,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of BlueprintList
func (o *BlueprintList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of BlueprintList
func (o *BlueprintList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of BlueprintList
func (o *BlueprintList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of BlueprintList
func (o *BlueprintList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Blueprints != nil {
		m["blueprints"] = o.Blueprints
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalBlueprintList unmarshals an instance of BlueprintList from the specified map of raw messages.
func UnmarshalBlueprintList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(BlueprintList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "blueprints", &obj.Blueprints, UnmarshalBlueprintLite)
	if err != nil {
		return
	}
	delete(m, "blueprints")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// BlueprintLite : Blueprint summary profile.
type BlueprintLite struct {
	// Blueprint name (unique for an account).
	Name *string `json:"name" validate:"required"`

	// Blueprint description.
	Description *string `json:"description,omitempty"`

	// Resource-group name for the Blueprint.  By default, Blueprint will be created in Default Resource Group.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Blueprint tags.
	Tags []string `json:"tags,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// System generated Blueprint Id.
	ID *string `json:"id,omitempty"`

	// Blueprint CRN.
	Crn *string `json:"crn,omitempty"`

	// Account id for the Blueprint.
	Account *string `json:"account,omitempty"`

	// Blueprint creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// User who created the Cart order.
	CreatedBy *string `json:"created_by,omitempty"`

	// Blueprint updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// User who updated the Cart order.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Computed state of the Blueprint.
	State *BlueprintLiteState `json:"state,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the BlueprintLite.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	BlueprintLite_Location_EuDe    = "eu-de"
	BlueprintLite_Location_EuGb    = "eu-gb"
	BlueprintLite_Location_UsEast  = "us-east"
	BlueprintLite_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of BlueprintLite
func (o *BlueprintLite) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of BlueprintLite
func (o *BlueprintLite) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of BlueprintLite
func (o *BlueprintLite) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of BlueprintLite
func (o *BlueprintLite) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.Account != nil {
		m["account"] = o.Account
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.State != nil {
		m["state"] = o.State
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalBlueprintLite unmarshals an instance of BlueprintLite from the specified map of raw messages.
func UnmarshalBlueprintLite(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(BlueprintLite)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "account", &obj.Account)
	if err != nil {
		return
	}
	delete(m, "account")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalModel(m, "state", &obj.State, UnmarshalBlueprintLiteState)
	if err != nil {
		return
	}
	delete(m, "state")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// BlueprintLiteState : Computed state of the Blueprint.
type BlueprintLiteState struct {
	// User-defined states
	//   * `Blueprint_Create_Init` When Create Blueprint POST API is invoked and CreateBlueprint process is initiated.
	//   * `Blueprint_Create_InProgress` When Create Blueprint process is in progress.
	//   * `Blueprint_Create_Success` Repos are downloaded and underlying objects are created
	//   * `Blueprint_Create_Failed` Failed to create Blueprint or underlying schematics objects.
	StatusCode *string `json:"status_code,omitempty"`

	// Automation status message - to be displayed along with the status_code.
	StatusMessage *string `json:"status_message,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the BlueprintLiteState.StatusCode property.
// User-defined states
//   * `Blueprint_Create_Init` When Create Blueprint POST API is invoked and CreateBlueprint process is initiated.
//   * `Blueprint_Create_InProgress` When Create Blueprint process is in progress.
//   * `Blueprint_Create_Success` Repos are downloaded and underlying objects are created
//   * `Blueprint_Create_Failed` Failed to create Blueprint or underlying schematics objects.
const (
	BlueprintLiteState_StatusCode_BlueprintCreateFailed     = "Blueprint_Create_Failed"
	BlueprintLiteState_StatusCode_BlueprintCreateInit       = "Blueprint_Create_Init"
	BlueprintLiteState_StatusCode_BlueprintCreateInprogress = "Blueprint_Create_InProgress"
	BlueprintLiteState_StatusCode_BlueprintCreateSuccess    = "Blueprint_Create_Success"
)

// SetProperty allows the user to set an arbitrary property on an instance of BlueprintLiteState
func (o *BlueprintLiteState) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of BlueprintLiteState
func (o *BlueprintLiteState) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of BlueprintLiteState
func (o *BlueprintLiteState) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of BlueprintLiteState
func (o *BlueprintLiteState) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalBlueprintLiteState unmarshals an instance of BlueprintLiteState from the specified map of raw messages.
func UnmarshalBlueprintLiteState(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(BlueprintLiteState)
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// BlueprintVariableData : User editable variable data & system generated reference to value.
type BlueprintVariableData struct {
	// Name of the variable.
	Name *string `json:"name,omitempty"`

	// Value for the variable or reference to the value.
	Value *string `json:"value,omitempty"`

	// Reference link to the variable value By default the expression will point to self.value.
	Link *string `json:"link,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of BlueprintVariableData
func (o *BlueprintVariableData) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of BlueprintVariableData
func (o *BlueprintVariableData) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of BlueprintVariableData
func (o *BlueprintVariableData) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of BlueprintVariableData
func (o *BlueprintVariableData) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Value != nil {
		m["value"] = o.Value
	}
	if o.Link != nil {
		m["link"] = o.Link
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalBlueprintVariableData unmarshals an instance of BlueprintVariableData from the specified map of raw messages.
func UnmarshalBlueprintVariableData(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(BlueprintVariableData)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		return
	}
	delete(m, "value")
	err = core.UnmarshalPrimitive(m, "link", &obj.Link)
	if err != nil {
		return
	}
	delete(m, "link")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Capsule : Complete capsule definition record.
type Capsule struct {
	// Name of the capsule.
	Name *string `json:"name,omitempty"`

	// Capsule description.
	Description *string `json:"description,omitempty"`

	// capsule type.
	Type *string `json:"type,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Policy package path.
	Package *string `json:"package,omitempty"`

	// Severity.
	Severity *int64 `json:"severity,omitempty"`

	// Target inventory record ID, used to evaluate the policy.
	Inventory *string `json:"inventory,omitempty"`

	// Id to the Trigger.
	TriggerRecordID *string `json:"trigger_record_id,omitempty"`

	// List of Job Triggers.
	JobTriggers []TriggerJob `json:"job_triggers,omitempty"`

	// List of Scheduled Triggers.
	ScheduledTriggers []TriggerScheduled `json:"scheduled_triggers,omitempty"`

	// Input data for the capsule.
	Inputs []VariableData `json:"inputs,omitempty"`

	// List of decisions.
	Decisions []ControlsDecision `json:"decisions,omitempty"`

	// List of escalations.
	Escalations []ControlsEscalation `json:"escalations,omitempty"`

	// Capsule Id.
	ID *string `json:"id,omitempty"`

	// Capsule status.
	Status *string `json:"status,omitempty"`

	// Controls Id.
	ControlsID *string `json:"controls_id,omitempty"`

	// Controls name.
	ControlsName *string `json:"controls_name,omitempty"`

	// Control policy creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Name of user who created the control policy.
	CreatedBy *string `json:"created_by,omitempty"`

	// Control policy updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Name of user who updated the control policy.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Computed state of the Controls.
	State *ControlsLiteState `json:"state,omitempty"`

	// Capsule Job data.
	LastJobData *JobDataCapsule `json:"last_job_data,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of Capsule
func (o *Capsule) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of Capsule
func (o *Capsule) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of Capsule
func (o *Capsule) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of Capsule
func (o *Capsule) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.Package != nil {
		m["package"] = o.Package
	}
	if o.Severity != nil {
		m["severity"] = o.Severity
	}
	if o.Inventory != nil {
		m["inventory"] = o.Inventory
	}
	if o.TriggerRecordID != nil {
		m["trigger_record_id"] = o.TriggerRecordID
	}
	if o.JobTriggers != nil {
		m["job_triggers"] = o.JobTriggers
	}
	if o.ScheduledTriggers != nil {
		m["scheduled_triggers"] = o.ScheduledTriggers
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Decisions != nil {
		m["decisions"] = o.Decisions
	}
	if o.Escalations != nil {
		m["escalations"] = o.Escalations
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Status != nil {
		m["status"] = o.Status
	}
	if o.ControlsID != nil {
		m["controls_id"] = o.ControlsID
	}
	if o.ControlsName != nil {
		m["controls_name"] = o.ControlsName
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.State != nil {
		m["state"] = o.State
	}
	if o.LastJobData != nil {
		m["last_job_data"] = o.LastJobData
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCapsule unmarshals an instance of Capsule from the specified map of raw messages.
func UnmarshalCapsule(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Capsule)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalPrimitive(m, "package", &obj.Package)
	if err != nil {
		return
	}
	delete(m, "package")
	err = core.UnmarshalPrimitive(m, "severity", &obj.Severity)
	if err != nil {
		return
	}
	delete(m, "severity")
	err = core.UnmarshalPrimitive(m, "inventory", &obj.Inventory)
	if err != nil {
		return
	}
	delete(m, "inventory")
	err = core.UnmarshalPrimitive(m, "trigger_record_id", &obj.TriggerRecordID)
	if err != nil {
		return
	}
	delete(m, "trigger_record_id")
	err = core.UnmarshalModel(m, "job_triggers", &obj.JobTriggers, UnmarshalTriggerJob)
	if err != nil {
		return
	}
	delete(m, "job_triggers")
	err = core.UnmarshalModel(m, "scheduled_triggers", &obj.ScheduledTriggers, UnmarshalTriggerScheduled)
	if err != nil {
		return
	}
	delete(m, "scheduled_triggers")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "decisions", &obj.Decisions, UnmarshalControlsDecision)
	if err != nil {
		return
	}
	delete(m, "decisions")
	err = core.UnmarshalModel(m, "escalations", &obj.Escalations, UnmarshalControlsEscalation)
	if err != nil {
		return
	}
	delete(m, "escalations")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "status", &obj.Status)
	if err != nil {
		return
	}
	delete(m, "status")
	err = core.UnmarshalPrimitive(m, "controls_id", &obj.ControlsID)
	if err != nil {
		return
	}
	delete(m, "controls_id")
	err = core.UnmarshalPrimitive(m, "controls_name", &obj.ControlsName)
	if err != nil {
		return
	}
	delete(m, "controls_name")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "state", &obj.State, UnmarshalControlsLiteState)
	if err != nil {
		return
	}
	delete(m, "state")
	err = core.UnmarshalModel(m, "last_job_data", &obj.LastJobData, UnmarshalJobDataCapsule)
	if err != nil {
		return
	}
	delete(m, "last_job_data")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CapsuleList : List of Capsule definitions response.
type CapsuleList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of capsule records.
	Capsules []CapsuleLite `json:"capsules,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of CapsuleList
func (o *CapsuleList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CapsuleList
func (o *CapsuleList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CapsuleList
func (o *CapsuleList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CapsuleList
func (o *CapsuleList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Capsules != nil {
		m["capsules"] = o.Capsules
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCapsuleList unmarshals an instance of CapsuleList from the specified map of raw messages.
func UnmarshalCapsuleList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CapsuleList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "capsules", &obj.Capsules, UnmarshalCapsuleLite)
	if err != nil {
		return
	}
	delete(m, "capsules")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CapsuleLite : Capsule summary profile with user inputs and system generated data.
type CapsuleLite struct {
	// Capsule name (unique for an account).
	Name *string `json:"name,omitempty"`

	// Capsule description.
	Description *string `json:"description,omitempty"`

	// Capsule Id.
	ID *string `json:"id,omitempty"`

	// Capsule Cloud Resource Name.
	Crn *string `json:"crn,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Resource-group name for the Capsule.  By default, Capsule will be created in Default Resource Group.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Capsule tags.
	Tags []string `json:"tags,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Computed state of the Capsule.
	State *CapsuleLiteState `json:"state,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Capsule creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the Capsule.
	CreatedBy *string `json:"created_by,omitempty"`

	// Capsule updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the Capsule.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the CapsuleLite.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	CapsuleLite_Location_EuDe    = "eu-de"
	CapsuleLite_Location_EuGb    = "eu-gb"
	CapsuleLite_Location_UsEast  = "us-east"
	CapsuleLite_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of CapsuleLite
func (o *CapsuleLite) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CapsuleLite
func (o *CapsuleLite) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CapsuleLite
func (o *CapsuleLite) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CapsuleLite
func (o *CapsuleLite) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.State != nil {
		m["state"] = o.State
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCapsuleLite unmarshals an instance of CapsuleLite from the specified map of raw messages.
func UnmarshalCapsuleLite(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CapsuleLite)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalModel(m, "state", &obj.State, UnmarshalCapsuleLiteState)
	if err != nil {
		return
	}
	delete(m, "state")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CapsuleLiteState : Computed state of the Capsule.
type CapsuleLiteState struct {
	// Status of automation (workspace or action).
	StatusCode *string `json:"status_code,omitempty"`

	// Automation status message - to be displayed along with the status_code.
	StatusMessage *string `json:"status_message,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the CapsuleLiteState.StatusCode property.
// Status of automation (workspace or action).
const (
	CapsuleLiteState_StatusCode_Critical = "critical"
	CapsuleLiteState_StatusCode_Disabled = "disabled"
	CapsuleLiteState_StatusCode_Normal   = "normal"
	CapsuleLiteState_StatusCode_Pending  = "pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of CapsuleLiteState
func (o *CapsuleLiteState) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CapsuleLiteState
func (o *CapsuleLiteState) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CapsuleLiteState
func (o *CapsuleLiteState) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CapsuleLiteState
func (o *CapsuleLiteState) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCapsuleLiteState unmarshals an instance of CapsuleLiteState from the specified map of raw messages.
func UnmarshalCapsuleLiteState(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CapsuleLiteState)
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CapsuleResultEvidences : List of capsule evidences.
type CapsuleResultEvidences struct {
	// List of resources.
	Resources []CapsuleResultResources `json:"resources,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of CapsuleResultEvidences
func (o *CapsuleResultEvidences) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CapsuleResultEvidences
func (o *CapsuleResultEvidences) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CapsuleResultEvidences
func (o *CapsuleResultEvidences) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CapsuleResultEvidences
func (o *CapsuleResultEvidences) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Resources != nil {
		m["resources"] = o.Resources
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCapsuleResultEvidences unmarshals an instance of CapsuleResultEvidences from the specified map of raw messages.
func UnmarshalCapsuleResultEvidences(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CapsuleResultEvidences)
	err = core.UnmarshalModel(m, "resources", &obj.Resources, UnmarshalCapsuleResultResources)
	if err != nil {
		return
	}
	delete(m, "resources")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CapsuleResultResources : Resource details.
type CapsuleResultResources struct {
	// Name of the resource.
	Name *string `json:"name,omitempty"`

	// Type of resource.
	Type *string `json:"type,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of CapsuleResultResources
func (o *CapsuleResultResources) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CapsuleResultResources
func (o *CapsuleResultResources) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CapsuleResultResources
func (o *CapsuleResultResources) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CapsuleResultResources
func (o *CapsuleResultResources) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCapsuleResultResources unmarshals an instance of CapsuleResultResources from the specified map of raw messages.
func UnmarshalCapsuleResultResources(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CapsuleResultResources)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CartOrder : Complete Cart order details with user inputs and system generated data.
type CartOrder struct {
	// Cart order name (unique for an account).
	Name *string `json:"name" validate:"required"`

	// Cart order description.
	Description *string `json:"description,omitempty"`

	// Cart order tags.
	Tags []string `json:"tags,omitempty"`

	CartItems []OrderItemConfiguration `json:"cart_items,omitempty"`

	// Service short name.
	ServiceName *string `json:"service_name,omitempty"`

	// Resource-group name for the Cart order.  By default, Cart order will be created in Default Resource Group.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// User defined status of the Schematics object.
	UserState *CartOrderUserState `json:"user_state,omitempty"`

	// System generated Cart order Id.
	CartOrderID *string `json:"cart_order_id,omitempty"`

	// Cart order CRN.
	Crn *string `json:"crn,omitempty"`

	// Account id.
	Account *string `json:"account,omitempty"`

	// Cart order creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the Cart order.
	CreatedBy *string `json:"created_by,omitempty"`

	// Cart order updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the Cart order.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Computed state of the CartOrder.
	State *CartOrderLiteState `json:"state,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the CartOrder.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	CartOrder_Location_EuDe    = "eu-de"
	CartOrder_Location_EuGb    = "eu-gb"
	CartOrder_Location_UsEast  = "us-east"
	CartOrder_Location_UsSouth = "us-south"
)

// NewCartOrder : Instantiate CartOrder (Generic Model Constructor)
func (*Schematics20ApiV2) NewCartOrder(name string) (model *CartOrder, err error) {
	model = &CartOrder{
		Name: core.StringPtr(name),
	}
	err = core.ValidateStruct(model, "required parameters")
	return
}

// SetProperty allows the user to set an arbitrary property on an instance of CartOrder
func (o *CartOrder) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CartOrder
func (o *CartOrder) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CartOrder
func (o *CartOrder) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CartOrder
func (o *CartOrder) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.CartItems != nil {
		m["cart_items"] = o.CartItems
	}
	if o.ServiceName != nil {
		m["service_name"] = o.ServiceName
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.CartOrderID != nil {
		m["cart_order_id"] = o.CartOrderID
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.Account != nil {
		m["account"] = o.Account
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.State != nil {
		m["state"] = o.State
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCartOrder unmarshals an instance of CartOrder from the specified map of raw messages.
func UnmarshalCartOrder(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CartOrder)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalModel(m, "cart_items", &obj.CartItems, UnmarshalOrderItemConfiguration)
	if err != nil {
		return
	}
	delete(m, "cart_items")
	err = core.UnmarshalPrimitive(m, "service_name", &obj.ServiceName)
	if err != nil {
		return
	}
	delete(m, "service_name")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalCartOrderUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalPrimitive(m, "cart_order_id", &obj.CartOrderID)
	if err != nil {
		return
	}
	delete(m, "cart_order_id")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "account", &obj.Account)
	if err != nil {
		return
	}
	delete(m, "account")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalModel(m, "state", &obj.State, UnmarshalCartOrderLiteState)
	if err != nil {
		return
	}
	delete(m, "state")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CartOrderList : List of Cart orders.
type CartOrderList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of Cart order records.
	Cart []CartOrderLite `json:"cart,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of CartOrderList
func (o *CartOrderList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CartOrderList
func (o *CartOrderList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CartOrderList
func (o *CartOrderList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CartOrderList
func (o *CartOrderList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Cart != nil {
		m["cart"] = o.Cart
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCartOrderList unmarshals an instance of CartOrderList from the specified map of raw messages.
func UnmarshalCartOrderList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CartOrderList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "cart", &obj.Cart, UnmarshalCartOrderLite)
	if err != nil {
		return
	}
	delete(m, "cart")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CartOrderLite : Cart order summary profile.
type CartOrderLite struct {
	// Unique account name for Cart order(unique for an account).
	Name *string `json:"name" validate:"required"`

	// Cart order description.
	Description *string `json:"description,omitempty"`

	// Service short name.
	ServiceName *string `json:"service_name,omitempty"`

	// Resource-group name for the Cart order.  By default, Cart order will be created in Default Resource Group.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Cart order tags.
	Tags []string `json:"tags,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// System generated cart order Id.
	ID *string `json:"id,omitempty"`

	// Cart order CRN.
	Crn *string `json:"crn,omitempty"`

	// Account id.
	Account *string `json:"account,omitempty"`

	// Cart order creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the Cart order.
	CreatedBy *string `json:"created_by,omitempty"`

	// Cart order updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the Cart order.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// User defined status of the Schematics object.
	UserState *CartOrderUserState `json:"user_state,omitempty"`

	// Computed state of the CartOrder.
	State *CartOrderLiteState `json:"state,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the CartOrderLite.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	CartOrderLite_Location_EuDe    = "eu-de"
	CartOrderLite_Location_EuGb    = "eu-gb"
	CartOrderLite_Location_UsEast  = "us-east"
	CartOrderLite_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of CartOrderLite
func (o *CartOrderLite) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CartOrderLite
func (o *CartOrderLite) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CartOrderLite
func (o *CartOrderLite) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CartOrderLite
func (o *CartOrderLite) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ServiceName != nil {
		m["service_name"] = o.ServiceName
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.Account != nil {
		m["account"] = o.Account
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.State != nil {
		m["state"] = o.State
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCartOrderLite unmarshals an instance of CartOrderLite from the specified map of raw messages.
func UnmarshalCartOrderLite(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CartOrderLite)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "service_name", &obj.ServiceName)
	if err != nil {
		return
	}
	delete(m, "service_name")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "account", &obj.Account)
	if err != nil {
		return
	}
	delete(m, "account")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalCartOrderUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalModel(m, "state", &obj.State, UnmarshalCartOrderLiteState)
	if err != nil {
		return
	}
	delete(m, "state")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CartOrderLiteState : Computed state of the CartOrder.
type CartOrderLiteState struct {
	// Status of automation (workspace or action).
	StatusCode *string `json:"status_code,omitempty"`

	// Automation status message - to be displayed along with the status_code.
	StatusMessage *string `json:"status_message,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the CartOrderLiteState.StatusCode property.
// Status of automation (workspace or action).
const (
	CartOrderLiteState_StatusCode_Critical = "critical"
	CartOrderLiteState_StatusCode_Disabled = "disabled"
	CartOrderLiteState_StatusCode_Normal   = "normal"
	CartOrderLiteState_StatusCode_Pending  = "pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of CartOrderLiteState
func (o *CartOrderLiteState) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CartOrderLiteState
func (o *CartOrderLiteState) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CartOrderLiteState
func (o *CartOrderLiteState) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CartOrderLiteState
func (o *CartOrderLiteState) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCartOrderLiteState unmarshals an instance of CartOrderLiteState from the specified map of raw messages.
func UnmarshalCartOrderLiteState(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CartOrderLiteState)
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CartOrderUserState : User defined status of the Schematics object.
type CartOrderUserState struct {
	// User-defined states
	//   * `Order_Create_Init` When Create Order POST API is invoked and CreateOrder process is initiated.
	//   * `Order_Create_InProgress` When CreateOrder process is in progress.
	//   * `Order_Create_Success` Repos are downloaded and underlying objects are created
	//   * `Order_Create_Failed` Failed to create CartOrder or underlying schematics objects
	//   * `Order_Fulfilment_Pending` Fulfilment operation is triggered and waiting to be picked up by orchestrator.
	//   * `Order_Fulfilment_InProgress` Actively processing fulfilment operation
	//   * `Order_Fulfilment_Success` Fulfilment successful
	//   * `Order_Fulfilment_Failed` Fulfilment failed.
	State *string `json:"state,omitempty"`

	// Name of the User who set the state of the Object.
	SetBy *string `json:"set_by,omitempty"`

	// When the User who set the state of the Object.
	SetAt *strfmt.DateTime `json:"set_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the CartOrderUserState.State property.
// User-defined states
//   * `Order_Create_Init` When Create Order POST API is invoked and CreateOrder process is initiated.
//   * `Order_Create_InProgress` When CreateOrder process is in progress.
//   * `Order_Create_Success` Repos are downloaded and underlying objects are created
//   * `Order_Create_Failed` Failed to create CartOrder or underlying schematics objects
//   * `Order_Fulfilment_Pending` Fulfilment operation is triggered and waiting to be picked up by orchestrator.
//   * `Order_Fulfilment_InProgress` Actively processing fulfilment operation
//   * `Order_Fulfilment_Success` Fulfilment successful
//   * `Order_Fulfilment_Failed` Fulfilment failed.
const (
	CartOrderUserState_State_OrderCreateFailed      = "Order_Create_Failed"
	CartOrderUserState_State_OrderCreateInit        = "Order_Create_Init"
	CartOrderUserState_State_OrderCreateInprogress  = "Order_Create_InProgress"
	CartOrderUserState_State_OrderCreateSuccess     = "Order_Create_Success"
	CartOrderUserState_State_OrderFulfilmentFailed  = "Order_Fulfilment_Failed"
	CartOrderUserState_State_OrderFulfilmentPending = "Order_Fulfilment_Pending"
	CartOrderUserState_State_OrderFulfilmentSuccess = "Order_Fulfilment_Success"
)

// SetProperty allows the user to set an arbitrary property on an instance of CartOrderUserState
func (o *CartOrderUserState) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CartOrderUserState
func (o *CartOrderUserState) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CartOrderUserState
func (o *CartOrderUserState) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CartOrderUserState
func (o *CartOrderUserState) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.State != nil {
		m["state"] = o.State
	}
	if o.SetBy != nil {
		m["set_by"] = o.SetBy
	}
	if o.SetAt != nil {
		m["set_at"] = o.SetAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCartOrderUserState unmarshals an instance of CartOrderUserState from the specified map of raw messages.
func UnmarshalCartOrderUserState(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CartOrderUserState)
	err = core.UnmarshalPrimitive(m, "state", &obj.State)
	if err != nil {
		return
	}
	delete(m, "state")
	err = core.UnmarshalPrimitive(m, "set_by", &obj.SetBy)
	if err != nil {
		return
	}
	delete(m, "set_by")
	err = core.UnmarshalPrimitive(m, "set_at", &obj.SetAt)
	if err != nil {
		return
	}
	delete(m, "set_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CatalogOfferingItem : Catalog offering details.
type CatalogOfferingItem struct {
	// Catalog offering item name.
	Name *string `json:"name,omitempty"`

	// Catalog offering item label name.
	Label *string `json:"label,omitempty"`

	// Offering Id.
	OfferingID *string `json:"offering_id,omitempty"`

	ShortDescription *string `json:"short_description,omitempty"`

	// CRN of the catalog item.
	Crn *string `json:"crn,omitempty"`

	// Offering url.
	OfferingURL *string `json:"offering_url,omitempty"`

	// Offering version.
	Versions []CatalogOfferingItemVersions `json:"versions,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of CatalogOfferingItem
func (o *CatalogOfferingItem) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CatalogOfferingItem
func (o *CatalogOfferingItem) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CatalogOfferingItem
func (o *CatalogOfferingItem) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CatalogOfferingItem
func (o *CatalogOfferingItem) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Label != nil {
		m["label"] = o.Label
	}
	if o.OfferingID != nil {
		m["offering_id"] = o.OfferingID
	}
	if o.ShortDescription != nil {
		m["short_description"] = o.ShortDescription
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.OfferingURL != nil {
		m["offering_url"] = o.OfferingURL
	}
	if o.Versions != nil {
		m["versions"] = o.Versions
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCatalogOfferingItem unmarshals an instance of CatalogOfferingItem from the specified map of raw messages.
func UnmarshalCatalogOfferingItem(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CatalogOfferingItem)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "label", &obj.Label)
	if err != nil {
		return
	}
	delete(m, "label")
	err = core.UnmarshalPrimitive(m, "offering_id", &obj.OfferingID)
	if err != nil {
		return
	}
	delete(m, "offering_id")
	err = core.UnmarshalPrimitive(m, "short_description", &obj.ShortDescription)
	if err != nil {
		return
	}
	delete(m, "short_description")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "offering_url", &obj.OfferingURL)
	if err != nil {
		return
	}
	delete(m, "offering_url")
	err = core.UnmarshalModel(m, "versions", &obj.Versions, UnmarshalCatalogOfferingItemVersions)
	if err != nil {
		return
	}
	delete(m, "versions")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CatalogOfferingItemVersions : CatalogOfferingItemVersions struct
type CatalogOfferingItemVersions struct {
	Version *string `json:"version,omitempty"`

	Versionid *string `json:"versionid,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of CatalogOfferingItemVersions
func (o *CatalogOfferingItemVersions) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CatalogOfferingItemVersions
func (o *CatalogOfferingItemVersions) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CatalogOfferingItemVersions
func (o *CatalogOfferingItemVersions) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CatalogOfferingItemVersions
func (o *CatalogOfferingItemVersions) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Version != nil {
		m["version"] = o.Version
	}
	if o.Versionid != nil {
		m["versionid"] = o.Versionid
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCatalogOfferingItemVersions unmarshals an instance of CatalogOfferingItemVersions from the specified map of raw messages.
func UnmarshalCatalogOfferingItemVersions(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CatalogOfferingItemVersions)
	err = core.UnmarshalPrimitive(m, "version", &obj.Version)
	if err != nil {
		return
	}
	delete(m, "version")
	err = core.UnmarshalPrimitive(m, "versionid", &obj.Versionid)
	if err != nil {
		return
	}
	delete(m, "versionid")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CloudResource : Cloud resource data.
type CloudResource struct {
	// Cloud resource id.
	ResourceID *string `json:"resource_id,omitempty"`

	// Cloud resource name.
	CloudResourceName *string `json:"cloud_resource_name,omitempty"`

	// Terraform cloud resource name.
	TerraformResourceName *string `json:"terraform_resource_name,omitempty"`

	// Cloud resource CRN (if applicable).
	Crn *string `json:"crn,omitempty"`

	// State of the Cloud resource.
	ResourceState *string `json:"resource_state,omitempty"`

	// Cloud resource tags.
	Tags []string `json:"tags,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of CloudResource
func (o *CloudResource) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CloudResource
func (o *CloudResource) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CloudResource
func (o *CloudResource) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CloudResource
func (o *CloudResource) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ResourceID != nil {
		m["resource_id"] = o.ResourceID
	}
	if o.CloudResourceName != nil {
		m["cloud_resource_name"] = o.CloudResourceName
	}
	if o.TerraformResourceName != nil {
		m["terraform_resource_name"] = o.TerraformResourceName
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.ResourceState != nil {
		m["resource_state"] = o.ResourceState
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCloudResource unmarshals an instance of CloudResource from the specified map of raw messages.
func UnmarshalCloudResource(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CloudResource)
	err = core.UnmarshalPrimitive(m, "resource_id", &obj.ResourceID)
	if err != nil {
		return
	}
	delete(m, "resource_id")
	err = core.UnmarshalPrimitive(m, "cloud_resource_name", &obj.CloudResourceName)
	if err != nil {
		return
	}
	delete(m, "cloud_resource_name")
	err = core.UnmarshalPrimitive(m, "terraform_resource_name", &obj.TerraformResourceName)
	if err != nil {
		return
	}
	delete(m, "terraform_resource_name")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "resource_state", &obj.ResourceState)
	if err != nil {
		return
	}
	delete(m, "resource_state")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CloudResourceList : List of cloud resources.
type CloudResourceList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of cloud resource details.
	Outputs []CloudResource `json:"outputs,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of CloudResourceList
func (o *CloudResourceList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CloudResourceList
func (o *CloudResourceList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CloudResourceList
func (o *CloudResourceList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CloudResourceList
func (o *CloudResourceList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCloudResourceList unmarshals an instance of CloudResourceList from the specified map of raw messages.
func UnmarshalCloudResourceList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CloudResourceList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalCloudResource)
	if err != nil {
		return
	}
	delete(m, "outputs")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CommandList : List of Schematics commands.
type CommandList struct {
	// List of Schematics command names and parameters.
	Commands []CommandListCommands `json:"commands,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of CommandList
func (o *CommandList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CommandList
func (o *CommandList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CommandList
func (o *CommandList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CommandList
func (o *CommandList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Commands != nil {
		m["commands"] = o.Commands
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCommandList unmarshals an instance of CommandList from the specified map of raw messages.
func UnmarshalCommandList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CommandList)
	err = core.UnmarshalModel(m, "commands", &obj.Commands, UnmarshalCommandListCommands)
	if err != nil {
		return
	}
	delete(m, "commands")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CommandListCommands : CommandListCommands struct
type CommandListCommands struct {
	// Schematics job command name.
	CommandName *string `json:"command_name,omitempty"`

	// Schematics job command parameter (playbook-name, capsule-name or flow-name).
	CommandParameter *string `json:"command_parameter,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the CommandListCommands.CommandName property.
// Schematics job command name.
const (
	CommandListCommands_CommandName_AnsiblePlaybookCheck = "ansible_playbook_check"
	CommandListCommands_CommandName_AnsiblePlaybookRun   = "ansible_playbook_run"
	CommandListCommands_CommandName_CreateAction         = "create_action"
	CommandListCommands_CommandName_CreateCart           = "create_cart"
	CommandListCommands_CommandName_CreateEnvironment    = "create_environment"
	CommandListCommands_CommandName_CreateWorkspace      = "create_workspace"
	CommandListCommands_CommandName_DeleteAction         = "delete_action"
	CommandListCommands_CommandName_DeleteEnvironment    = "delete_environment"
	CommandListCommands_CommandName_DeleteWorkspace      = "delete_workspace"
	CommandListCommands_CommandName_EnvironmentInit      = "environment_init"
	CommandListCommands_CommandName_EnvironmentInstall   = "environment_install"
	CommandListCommands_CommandName_EnvironmentUninstall = "environment_uninstall"
	CommandListCommands_CommandName_PatchAction          = "patch_action"
	CommandListCommands_CommandName_PatchWorkspace       = "patch_workspace"
	CommandListCommands_CommandName_PutAction            = "put_action"
	CommandListCommands_CommandName_PutEnvironment       = "put_environment"
	CommandListCommands_CommandName_PutWorkspace         = "put_workspace"
	CommandListCommands_CommandName_RepositoryProcess    = "repository_process"
	CommandListCommands_CommandName_SystemKeyDelete      = "system_key_delete"
	CommandListCommands_CommandName_SystemKeyDisable     = "system_key_disable"
	CommandListCommands_CommandName_SystemKeyEnable      = "system_key_enable"
	CommandListCommands_CommandName_SystemKeyRestore     = "system_key_restore"
	CommandListCommands_CommandName_SystemKeyRotate      = "system_key_rotate"
	CommandListCommands_CommandName_TerraformCommands    = "terraform_commands"
	CommandListCommands_CommandName_WorkspaceApply       = "workspace_apply"
	CommandListCommands_CommandName_WorkspaceDestroy     = "workspace_destroy"
	CommandListCommands_CommandName_WorkspacePlan        = "workspace_plan"
	CommandListCommands_CommandName_WorkspaceRefresh     = "workspace_refresh"
)

// SetProperty allows the user to set an arbitrary property on an instance of CommandListCommands
func (o *CommandListCommands) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CommandListCommands
func (o *CommandListCommands) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CommandListCommands
func (o *CommandListCommands) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CommandListCommands
func (o *CommandListCommands) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.CommandName != nil {
		m["command_name"] = o.CommandName
	}
	if o.CommandParameter != nil {
		m["command_parameter"] = o.CommandParameter
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCommandListCommands unmarshals an instance of CommandListCommands from the specified map of raw messages.
func UnmarshalCommandListCommands(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CommandListCommands)
	err = core.UnmarshalPrimitive(m, "command_name", &obj.CommandName)
	if err != nil {
		return
	}
	delete(m, "command_name")
	err = core.UnmarshalPrimitive(m, "command_parameter", &obj.CommandParameter)
	if err != nil {
		return
	}
	delete(m, "command_parameter")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CommandsInfo : Workspace commands run as part of the job.
type CommandsInfo struct {
	// Name of the command.
	Name *string `json:"name,omitempty"`

	// outcome of the command.
	Outcome *string `json:"outcome,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of CommandsInfo
func (o *CommandsInfo) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CommandsInfo
func (o *CommandsInfo) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CommandsInfo
func (o *CommandsInfo) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CommandsInfo
func (o *CommandsInfo) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Outcome != nil {
		m["outcome"] = o.Outcome
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCommandsInfo unmarshals an instance of CommandsInfo from the specified map of raw messages.
func UnmarshalCommandsInfo(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CommandsInfo)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "outcome", &obj.Outcome)
	if err != nil {
		return
	}
	delete(m, "outcome")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Connection : External connection definition with unique id.
type Connection struct {
	// connection name (unique for an account).
	Name *string `json:"name,omitempty"`

	// connection description.
	Description *string `json:"description,omitempty"`

	// Resource-group id for the connection.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// connection tags.
	Tags []string `json:"tags,omitempty"`

	// The CRN of the connection.
	Crn *string `json:"crn,omitempty"`

	// Name of the plugin used for the connection.
	ConnectionType *string `json:"connection_type,omitempty"`

	ConnectionProperties []VariableData `json:"connection_properties,omitempty"`

	// Generated connection id.
	ID *string `json:"id,omitempty"`

	// account id.
	Account *string `json:"account,omitempty"`

	// connection creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the connection.
	CreatedBy *string `json:"created_by,omitempty"`

	// connection updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the connection.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the Connection.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	Connection_Location_EuDe    = "eu-de"
	Connection_Location_EuGb    = "eu-gb"
	Connection_Location_UsEast  = "us-east"
	Connection_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of Connection
func (o *Connection) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of Connection
func (o *Connection) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of Connection
func (o *Connection) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of Connection
func (o *Connection) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.ConnectionType != nil {
		m["connection_type"] = o.ConnectionType
	}
	if o.ConnectionProperties != nil {
		m["connection_properties"] = o.ConnectionProperties
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Account != nil {
		m["account"] = o.Account
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalConnection unmarshals an instance of Connection from the specified map of raw messages.
func UnmarshalConnection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Connection)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "connection_type", &obj.ConnectionType)
	if err != nil {
		return
	}
	delete(m, "connection_type")
	err = core.UnmarshalModel(m, "connection_properties", &obj.ConnectionProperties, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "connection_properties")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "account", &obj.Account)
	if err != nil {
		return
	}
	delete(m, "account")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ConnectionList : List of external connection definition.
type ConnectionList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of connection records.
	Connections []ConnectionLite `json:"connections,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ConnectionList
func (o *ConnectionList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ConnectionList
func (o *ConnectionList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ConnectionList
func (o *ConnectionList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ConnectionList
func (o *ConnectionList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Connections != nil {
		m["connections"] = o.Connections
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalConnectionList unmarshals an instance of ConnectionList from the specified map of raw messages.
func UnmarshalConnectionList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ConnectionList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "connections", &obj.Connections, UnmarshalConnectionLite)
	if err != nil {
		return
	}
	delete(m, "connections")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ConnectionLite : External connection definition required to connect external services.
type ConnectionLite struct {
	// Connection name (unique for an account).
	Name *string `json:"name,omitempty"`

	// Resource-group id for the connection.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// connection tags.
	Tags []string `json:"tags,omitempty"`

	// Name of the plugin used for the connection.
	ConnectionType *string `json:"connection_type,omitempty"`

	// Generated connection id.
	ID *string `json:"id,omitempty"`

	// connection creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the connection.
	CreatedBy *string `json:"created_by,omitempty"`

	// connection updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the connection.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the ConnectionLite.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	ConnectionLite_Location_EuDe    = "eu-de"
	ConnectionLite_Location_EuGb    = "eu-gb"
	ConnectionLite_Location_UsEast  = "us-east"
	ConnectionLite_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of ConnectionLite
func (o *ConnectionLite) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ConnectionLite
func (o *ConnectionLite) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ConnectionLite
func (o *ConnectionLite) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ConnectionLite
func (o *ConnectionLite) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.ConnectionType != nil {
		m["connection_type"] = o.ConnectionType
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalConnectionLite unmarshals an instance of ConnectionLite from the specified map of raw messages.
func UnmarshalConnectionLite(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ConnectionLite)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "connection_type", &obj.ConnectionType)
	if err != nil {
		return
	}
	delete(m, "connection_type")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Controls : Complete Controls definition with user input and system generated data.
type Controls struct {
	// Controls name (unique for an account).
	Name *string `json:"name,omitempty"`

	// Controls type.
	Type *string `json:"type,omitempty"`

	// Control description.
	Description *string `json:"description,omitempty"`

	// Resource-group name for the Controls. By default, controls will be created in Default Resource Group.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Tags for the Controls definition.
	Tags []string `json:"tags,omitempty"`

	// URL of the Readme file, for the source.
	SourceReadmeURL *string `json:"source_readme_url,omitempty"`

	// Source of templates, playbooks, or controls.
	Source *ExternalSource `json:"source,omitempty"`

	// Type of source for the Template.
	SourceType *string `json:"source_type,omitempty"`

	// Input variables for the Controls.
	Inputs []VariableData `json:"inputs,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Controls Id.
	ID *string `json:"id,omitempty"`

	// Controls Cloud Resource Name.
	Crn *string `json:"crn,omitempty"`

	// Controls Source creation time.
	SourceCreatedAt *strfmt.DateTime `json:"source_created_at,omitempty"`

	// Email address of user who created the Controls Source.
	SourceCreatedBy *string `json:"source_created_by,omitempty"`

	// Controls Source updation time.
	SourceUpdatedAt *strfmt.DateTime `json:"source_updated_at,omitempty"`

	// Email address of user who updated the Controls Source.
	SourceUpdatedBy *string `json:"source_updated_by,omitempty"`

	// Controls creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Name of user who created the controls.
	CreatedBy *string `json:"created_by,omitempty"`

	// Controls updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Name of user who updated the controls.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// List of capsules.
	Capsules []Capsule `json:"capsules,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the Controls.Type property.
// Controls type.
const (
	Controls_Type_FinancialControls = "financial_controls"
	Controls_Type_ItControls        = "it_controls"
	Controls_Type_OtherControls     = "other_controls"
	Controls_Type_SecurityControls  = "security_controls"
)

// Constants associated with the Controls.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	Controls_Location_EuDe    = "eu-de"
	Controls_Location_EuGb    = "eu-gb"
	Controls_Location_UsEast  = "us-east"
	Controls_Location_UsSouth = "us-south"
)

// Constants associated with the Controls.SourceType property.
// Type of source for the Template.
const (
	Controls_SourceType_ExternalScm      = "external_scm"
	Controls_SourceType_GitHub           = "git_hub"
	Controls_SourceType_GitHubEnterprise = "git_hub_enterprise"
	Controls_SourceType_GitLab           = "git_lab"
	Controls_SourceType_IbmCloudCatalog  = "ibm_cloud_catalog"
	Controls_SourceType_IbmGitLab        = "ibm_git_lab"
	Controls_SourceType_Local            = "local"
)

// SetProperty allows the user to set an arbitrary property on an instance of Controls
func (o *Controls) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of Controls
func (o *Controls) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of Controls
func (o *Controls) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of Controls
func (o *Controls) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.SourceReadmeURL != nil {
		m["source_readme_url"] = o.SourceReadmeURL
	}
	if o.Source != nil {
		m["source"] = o.Source
	}
	if o.SourceType != nil {
		m["source_type"] = o.SourceType
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.SourceCreatedAt != nil {
		m["source_created_at"] = o.SourceCreatedAt
	}
	if o.SourceCreatedBy != nil {
		m["source_created_by"] = o.SourceCreatedBy
	}
	if o.SourceUpdatedAt != nil {
		m["source_updated_at"] = o.SourceUpdatedAt
	}
	if o.SourceUpdatedBy != nil {
		m["source_updated_by"] = o.SourceUpdatedBy
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.Capsules != nil {
		m["capsules"] = o.Capsules
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalControls unmarshals an instance of Controls from the specified map of raw messages.
func UnmarshalControls(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Controls)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "source_readme_url", &obj.SourceReadmeURL)
	if err != nil {
		return
	}
	delete(m, "source_readme_url")
	err = core.UnmarshalModel(m, "source", &obj.Source, UnmarshalExternalSource)
	if err != nil {
		return
	}
	delete(m, "source")
	err = core.UnmarshalPrimitive(m, "source_type", &obj.SourceType)
	if err != nil {
		return
	}
	delete(m, "source_type")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "source_created_at", &obj.SourceCreatedAt)
	if err != nil {
		return
	}
	delete(m, "source_created_at")
	err = core.UnmarshalPrimitive(m, "source_created_by", &obj.SourceCreatedBy)
	if err != nil {
		return
	}
	delete(m, "source_created_by")
	err = core.UnmarshalPrimitive(m, "source_updated_at", &obj.SourceUpdatedAt)
	if err != nil {
		return
	}
	delete(m, "source_updated_at")
	err = core.UnmarshalPrimitive(m, "source_updated_by", &obj.SourceUpdatedBy)
	if err != nil {
		return
	}
	delete(m, "source_updated_by")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalModel(m, "capsules", &obj.Capsules, UnmarshalCapsule)
	if err != nil {
		return
	}
	delete(m, "capsules")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ControlsDecision : Policy ControlsDecision definition.
type ControlsDecision struct {
	// ControlsDecision rules.
	Rule *string `json:"rule,omitempty"`

	// Pass value.
	PassValue *string `json:"pass_value,omitempty"`

	// Pass expression.
	PassExpr *string `json:"pass_expr,omitempty"`

	// Evidence found in.
	EvidenceFoundIn *string `json:"evidence_found_in,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the ControlsDecision.PassValue property.
// Pass value.
const (
	ControlsDecision_PassValue_After  = "after"
	ControlsDecision_PassValue_Before = "before"
)

// SetProperty allows the user to set an arbitrary property on an instance of ControlsDecision
func (o *ControlsDecision) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ControlsDecision
func (o *ControlsDecision) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ControlsDecision
func (o *ControlsDecision) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ControlsDecision
func (o *ControlsDecision) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Rule != nil {
		m["rule"] = o.Rule
	}
	if o.PassValue != nil {
		m["pass_value"] = o.PassValue
	}
	if o.PassExpr != nil {
		m["pass_expr"] = o.PassExpr
	}
	if o.EvidenceFoundIn != nil {
		m["evidence_found_in"] = o.EvidenceFoundIn
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalControlsDecision unmarshals an instance of ControlsDecision from the specified map of raw messages.
func UnmarshalControlsDecision(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ControlsDecision)
	err = core.UnmarshalPrimitive(m, "rule", &obj.Rule)
	if err != nil {
		return
	}
	delete(m, "rule")
	err = core.UnmarshalPrimitive(m, "pass_value", &obj.PassValue)
	if err != nil {
		return
	}
	delete(m, "pass_value")
	err = core.UnmarshalPrimitive(m, "pass_expr", &obj.PassExpr)
	if err != nil {
		return
	}
	delete(m, "pass_expr")
	err = core.UnmarshalPrimitive(m, "evidence_found_in", &obj.EvidenceFoundIn)
	if err != nil {
		return
	}
	delete(m, "evidence_found_in")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ControlsEscalation : ControlsEscalation definition.
type ControlsEscalation struct {
	// ControlsEscalation details (placeholder).
	ActionID *string `json:"action_id,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ControlsEscalation
func (o *ControlsEscalation) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ControlsEscalation
func (o *ControlsEscalation) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ControlsEscalation
func (o *ControlsEscalation) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ControlsEscalation
func (o *ControlsEscalation) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ActionID != nil {
		m["action_id"] = o.ActionID
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalControlsEscalation unmarshals an instance of ControlsEscalation from the specified map of raw messages.
func UnmarshalControlsEscalation(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ControlsEscalation)
	err = core.UnmarshalPrimitive(m, "action_id", &obj.ActionID)
	if err != nil {
		return
	}
	delete(m, "action_id")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ControlsList : List of Controls definition response.
type ControlsList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of control records.
	Controls []ControlsLite `json:"controls,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ControlsList
func (o *ControlsList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ControlsList
func (o *ControlsList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ControlsList
func (o *ControlsList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ControlsList
func (o *ControlsList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Controls != nil {
		m["controls"] = o.Controls
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalControlsList unmarshals an instance of ControlsList from the specified map of raw messages.
func UnmarshalControlsList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ControlsList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "controls", &obj.Controls, UnmarshalControlsLite)
	if err != nil {
		return
	}
	delete(m, "controls")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ControlsLite : Controls summary profile with user inputs and system generated data.
type ControlsLite struct {
	// Controls name (unique for an account).
	Name *string `json:"name,omitempty"`

	// Controls description.
	Description *string `json:"description,omitempty"`

	// Controls Id.
	ID *string `json:"id,omitempty"`

	// Controls Cloud Resource Name.
	Crn *string `json:"crn,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Resource-group name for the Controls.  By default, Controls will be created in Default Resource Group.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Controls tags.
	Tags []string `json:"tags,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Computed state of the Controls.
	State *ControlsLiteState `json:"state,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Controls creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the Controls.
	CreatedBy *string `json:"created_by,omitempty"`

	// Controls updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the Controls.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the ControlsLite.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	ControlsLite_Location_EuDe    = "eu-de"
	ControlsLite_Location_EuGb    = "eu-gb"
	ControlsLite_Location_UsEast  = "us-east"
	ControlsLite_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of ControlsLite
func (o *ControlsLite) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ControlsLite
func (o *ControlsLite) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ControlsLite
func (o *ControlsLite) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ControlsLite
func (o *ControlsLite) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.State != nil {
		m["state"] = o.State
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalControlsLite unmarshals an instance of ControlsLite from the specified map of raw messages.
func UnmarshalControlsLite(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ControlsLite)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalModel(m, "state", &obj.State, UnmarshalControlsLiteState)
	if err != nil {
		return
	}
	delete(m, "state")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ControlsLiteState : Computed state of the Controls.
type ControlsLiteState struct {
	// Status of automation (workspace or action).
	StatusCode *string `json:"status_code,omitempty"`

	// Automation status message - to be displayed along with the status_code.
	StatusMessage *string `json:"status_message,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the ControlsLiteState.StatusCode property.
// Status of automation (workspace or action).
const (
	ControlsLiteState_StatusCode_Critical = "critical"
	ControlsLiteState_StatusCode_Disabled = "disabled"
	ControlsLiteState_StatusCode_Normal   = "normal"
	ControlsLiteState_StatusCode_Pending  = "pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of ControlsLiteState
func (o *ControlsLiteState) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ControlsLiteState
func (o *ControlsLiteState) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ControlsLiteState
func (o *ControlsLiteState) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ControlsLiteState
func (o *ControlsLiteState) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalControlsLiteState unmarshals an instance of ControlsLiteState from the specified map of raw messages.
func UnmarshalControlsLiteState(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ControlsLiteState)
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CreateActionOptions : The CreateAction options.
type CreateActionOptions struct {
	// Create Action request.
	Action *Action `validate:"required"`

	// The personal access token to authenticate with your private GitHub or GitLab repository and access your Terraform
	// template.
	XGithubToken *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateActionOptions : Instantiate CreateActionOptions
func (*Schematics20ApiV2) NewCreateActionOptions(action *Action) *CreateActionOptions {
	return &CreateActionOptions{
		Action: action,
	}
}

// SetAction : Allow user to set Action
func (options *CreateActionOptions) SetAction(action *Action) *CreateActionOptions {
	options.Action = action
	return options
}

// SetXGithubToken : Allow user to set XGithubToken
func (options *CreateActionOptions) SetXGithubToken(xGithubToken string) *CreateActionOptions {
	options.XGithubToken = core.StringPtr(xGithubToken)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateActionOptions) SetHeaders(param map[string]string) *CreateActionOptions {
	options.Headers = param
	return options
}

// CreateAdapterOptions : The CreateAdapter options.
type CreateAdapterOptions struct {
	// Adapter Register Request.
	Adapter *Adapter `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateAdapterOptions : Instantiate CreateAdapterOptions
func (*Schematics20ApiV2) NewCreateAdapterOptions(adapter *Adapter) *CreateAdapterOptions {
	return &CreateAdapterOptions{
		Adapter: adapter,
	}
}

// SetAdapter : Allow user to set Adapter
func (options *CreateAdapterOptions) SetAdapter(adapter *Adapter) *CreateAdapterOptions {
	options.Adapter = adapter
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateAdapterOptions) SetHeaders(param map[string]string) *CreateAdapterOptions {
	options.Headers = param
	return options
}

// CreateBlueprintOptions : The CreateBlueprint options.
type CreateBlueprintOptions struct {
	// Create blueprint.
	Blueprint *Blueprint `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateBlueprintOptions : Instantiate CreateBlueprintOptions
func (*Schematics20ApiV2) NewCreateBlueprintOptions(blueprint *Blueprint) *CreateBlueprintOptions {
	return &CreateBlueprintOptions{
		Blueprint: blueprint,
	}
}

// SetBlueprint : Allow user to set Blueprint
func (options *CreateBlueprintOptions) SetBlueprint(blueprint *Blueprint) *CreateBlueprintOptions {
	options.Blueprint = blueprint
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateBlueprintOptions) SetHeaders(param map[string]string) *CreateBlueprintOptions {
	options.Headers = param
	return options
}

// CreateCapsuleOptions : The CreateCapsule options.
type CreateCapsuleOptions struct {
	// Controls Id.  Use `GET /v2/controls` API to look up the Controls Ids in your IBM Cloud account.
	ControlsID *string `validate:"required,ne="`

	// Create a Policy Capsule in the Controls definition.
	Capsule *Capsule `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateCapsuleOptions : Instantiate CreateCapsuleOptions
func (*Schematics20ApiV2) NewCreateCapsuleOptions(controlsID string, capsule *Capsule) *CreateCapsuleOptions {
	return &CreateCapsuleOptions{
		ControlsID: core.StringPtr(controlsID),
		Capsule:    capsule,
	}
}

// SetControlsID : Allow user to set ControlsID
func (options *CreateCapsuleOptions) SetControlsID(controlsID string) *CreateCapsuleOptions {
	options.ControlsID = core.StringPtr(controlsID)
	return options
}

// SetCapsule : Allow user to set Capsule
func (options *CreateCapsuleOptions) SetCapsule(capsule *Capsule) *CreateCapsuleOptions {
	options.Capsule = capsule
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateCapsuleOptions) SetHeaders(param map[string]string) *CreateCapsuleOptions {
	options.Headers = param
	return options
}

// CreateCartOrderOptions : The CreateCartOrder options.
type CreateCartOrderOptions struct {
	// Create fulfilment job order for the cart.
	CartOrder *CartOrder `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateCartOrderOptions : Instantiate CreateCartOrderOptions
func (*Schematics20ApiV2) NewCreateCartOrderOptions(cartOrder *CartOrder) *CreateCartOrderOptions {
	return &CreateCartOrderOptions{
		CartOrder: cartOrder,
	}
}

// SetCartOrder : Allow user to set CartOrder
func (options *CreateCartOrderOptions) SetCartOrder(cartOrder *CartOrder) *CreateCartOrderOptions {
	options.CartOrder = cartOrder
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateCartOrderOptions) SetHeaders(param map[string]string) *CreateCartOrderOptions {
	options.Headers = param
	return options
}

// CreateConnectionOptions : The CreateConnection options.
type CreateConnectionOptions struct {
	// Register a new connection.
	Connection *Connection `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateConnectionOptions : Instantiate CreateConnectionOptions
func (*Schematics20ApiV2) NewCreateConnectionOptions(connection *Connection) *CreateConnectionOptions {
	return &CreateConnectionOptions{
		Connection: connection,
	}
}

// SetConnection : Allow user to set Connection
func (options *CreateConnectionOptions) SetConnection(connection *Connection) *CreateConnectionOptions {
	options.Connection = connection
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateConnectionOptions) SetHeaders(param map[string]string) *CreateConnectionOptions {
	options.Headers = param
	return options
}

// CreateControlsOptions : The CreateControls options.
type CreateControlsOptions struct {
	// Register a Control.
	Controls *Controls `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateControlsOptions : Instantiate CreateControlsOptions
func (*Schematics20ApiV2) NewCreateControlsOptions(controls *Controls) *CreateControlsOptions {
	return &CreateControlsOptions{
		Controls: controls,
	}
}

// SetControls : Allow user to set Controls
func (options *CreateControlsOptions) SetControls(controls *Controls) *CreateControlsOptions {
	options.Controls = controls
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateControlsOptions) SetHeaders(param map[string]string) *CreateControlsOptions {
	options.Headers = param
	return options
}

// CreateDatasetOptions : The CreateDataset options.
type CreateDatasetOptions struct {
	// Create a shared dataset.
	Dataset *Dataset `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateDatasetOptions : Instantiate CreateDatasetOptions
func (*Schematics20ApiV2) NewCreateDatasetOptions(dataset *Dataset) *CreateDatasetOptions {
	return &CreateDatasetOptions{
		Dataset: dataset,
	}
}

// SetDataset : Allow user to set Dataset
func (options *CreateDatasetOptions) SetDataset(dataset *Dataset) *CreateDatasetOptions {
	options.Dataset = dataset
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateDatasetOptions) SetHeaders(param map[string]string) *CreateDatasetOptions {
	options.Headers = param
	return options
}

// CreateDatasourceOptions : The CreateDatasource options.
type CreateDatasourceOptions struct {
	// Register a datasource.
	Datasource *Datasource `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateDatasourceOptions : Instantiate CreateDatasourceOptions
func (*Schematics20ApiV2) NewCreateDatasourceOptions(datasource *Datasource) *CreateDatasourceOptions {
	return &CreateDatasourceOptions{
		Datasource: datasource,
	}
}

// SetDatasource : Allow user to set Datasource
func (options *CreateDatasourceOptions) SetDatasource(datasource *Datasource) *CreateDatasourceOptions {
	options.Datasource = datasource
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateDatasourceOptions) SetHeaders(param map[string]string) *CreateDatasourceOptions {
	options.Headers = param
	return options
}

// CreateInventoryOptions : The CreateInventory options.
type CreateInventoryOptions struct {
	// Create a Inventory definition resource.
	InventoryResourceDefinition *InventoryResourceDefinition `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateInventoryOptions : Instantiate CreateInventoryOptions
func (*Schematics20ApiV2) NewCreateInventoryOptions(inventoryResourceDefinition *InventoryResourceDefinition) *CreateInventoryOptions {
	return &CreateInventoryOptions{
		InventoryResourceDefinition: inventoryResourceDefinition,
	}
}

// SetInventoryResourceDefinition : Allow user to set InventoryResourceDefinition
func (options *CreateInventoryOptions) SetInventoryResourceDefinition(inventoryResourceDefinition *InventoryResourceDefinition) *CreateInventoryOptions {
	options.InventoryResourceDefinition = inventoryResourceDefinition
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateInventoryOptions) SetHeaders(param map[string]string) *CreateInventoryOptions {
	options.Headers = param
	return options
}

// CreateJobOptions : The CreateJob options.
type CreateJobOptions struct {
	// The IAM refresh token for the user or service identity.
	//
	//   **Retrieving refresh token**:
	//   * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST
	// "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d
	// "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
	//   * For more information, about creating IAM access token and API Docs, refer, [IAM access
	// token](/apidocs/iam-identity-token-api#gettoken-password) and [Create API
	// key](/apidocs/iam-identity-token-api#create-api-key).
	//
	//   **Limitation**:
	//   * If the token is expired, you can use `refresh token` to get a new IAM access token.
	//   * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
	//   * When the IAM access token is about to expire, use the API key to create a new access token.
	RefreshToken *string `validate:"required"`

	// Create a Job Record and launch the Job.
	Job *Job `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateJobOptions : Instantiate CreateJobOptions
func (*Schematics20ApiV2) NewCreateJobOptions(refreshToken string, job *Job) *CreateJobOptions {
	return &CreateJobOptions{
		RefreshToken: core.StringPtr(refreshToken),
		Job:          job,
	}
}

// SetRefreshToken : Allow user to set RefreshToken
func (options *CreateJobOptions) SetRefreshToken(refreshToken string) *CreateJobOptions {
	options.RefreshToken = core.StringPtr(refreshToken)
	return options
}

// SetJob : Allow user to set Job
func (options *CreateJobOptions) SetJob(job *Job) *CreateJobOptions {
	options.Job = job
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateJobOptions) SetHeaders(param map[string]string) *CreateJobOptions {
	options.Headers = param
	return options
}

// CreatePrivateClusterOptions : The CreatePrivateCluster options.
type CreatePrivateClusterOptions struct {
	// Register your private cluster with Schematics to run the jobs.
	PrivateCluster *PrivateCluster `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreatePrivateClusterOptions : Instantiate CreatePrivateClusterOptions
func (*Schematics20ApiV2) NewCreatePrivateClusterOptions(privateCluster *PrivateCluster) *CreatePrivateClusterOptions {
	return &CreatePrivateClusterOptions{
		PrivateCluster: privateCluster,
	}
}

// SetPrivateCluster : Allow user to set PrivateCluster
func (options *CreatePrivateClusterOptions) SetPrivateCluster(privateCluster *PrivateCluster) *CreatePrivateClusterOptions {
	options.PrivateCluster = privateCluster
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreatePrivateClusterOptions) SetHeaders(param map[string]string) *CreatePrivateClusterOptions {
	options.Headers = param
	return options
}

// CreateResourceQueryOptions : The CreateResourceQuery options.
type CreateResourceQueryOptions struct {
	// Create a resource query definition.
	ResourceQueryDefinition *ResourceQueryDefinition `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateResourceQueryOptions : Instantiate CreateResourceQueryOptions
func (*Schematics20ApiV2) NewCreateResourceQueryOptions(resourceQueryDefinition *ResourceQueryDefinition) *CreateResourceQueryOptions {
	return &CreateResourceQueryOptions{
		ResourceQueryDefinition: resourceQueryDefinition,
	}
}

// SetResourceQueryDefinition : Allow user to set ResourceQueryDefinition
func (options *CreateResourceQueryOptions) SetResourceQueryDefinition(resourceQueryDefinition *ResourceQueryDefinition) *CreateResourceQueryOptions {
	options.ResourceQueryDefinition = resourceQueryDefinition
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateResourceQueryOptions) SetHeaders(param map[string]string) *CreateResourceQueryOptions {
	options.Headers = param
	return options
}

// CreateTriggerOptions : The CreateTrigger options.
type CreateTriggerOptions struct {
	// Register a Scheduling or Action Trigger with Schematics.
	Trigger *Trigger `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateTriggerOptions : Instantiate CreateTriggerOptions
func (*Schematics20ApiV2) NewCreateTriggerOptions(trigger *Trigger) *CreateTriggerOptions {
	return &CreateTriggerOptions{
		Trigger: trigger,
	}
}

// SetTrigger : Allow user to set Trigger
func (options *CreateTriggerOptions) SetTrigger(trigger *Trigger) *CreateTriggerOptions {
	options.Trigger = trigger
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateTriggerOptions) SetHeaders(param map[string]string) *CreateTriggerOptions {
	options.Headers = param
	return options
}

// CreateWebhookOptions : The CreateWebhook options.
type CreateWebhookOptions struct {
	// Register a Web-hook or callback (pre- & post-  actions, such as initialise, redeploy, reconfigure, refresh) with
	// Schematics.
	WebHook *WebHook `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateWebhookOptions : Instantiate CreateWebhookOptions
func (*Schematics20ApiV2) NewCreateWebhookOptions(webHook *WebHook) *CreateWebhookOptions {
	return &CreateWebhookOptions{
		WebHook: webHook,
	}
}

// SetWebHook : Allow user to set WebHook
func (options *CreateWebhookOptions) SetWebHook(webHook *WebHook) *CreateWebhookOptions {
	options.WebHook = webHook
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateWebhookOptions) SetHeaders(param map[string]string) *CreateWebhookOptions {
	options.Headers = param
	return options
}

// CreateWorkspaceOptions : The CreateWorkspace options.
type CreateWorkspaceOptions struct {
	// Create a Workspace in your Account.
	Workspace *Workspace `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateWorkspaceOptions : Instantiate CreateWorkspaceOptions
func (*Schematics20ApiV2) NewCreateWorkspaceOptions(workspace *Workspace) *CreateWorkspaceOptions {
	return &CreateWorkspaceOptions{
		Workspace: workspace,
	}
}

// SetWorkspace : Allow user to set Workspace
func (options *CreateWorkspaceOptions) SetWorkspace(workspace *Workspace) *CreateWorkspaceOptions {
	options.Workspace = workspace
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateWorkspaceOptions) SetHeaders(param map[string]string) *CreateWorkspaceOptions {
	options.Headers = param
	return options
}

// CreateWorkspaceTemplatesOptions : The CreateWorkspaceTemplates options.
type CreateWorkspaceTemplatesOptions struct {
	// List of Templates.
	TemplateListRequest *TemplateListRequest `validate:"required"`

	// The personal access token to authenticate with your private GitHub or GitLab repository and access your Terraform
	// template.
	XGithubToken *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateWorkspaceTemplatesOptions : Instantiate CreateWorkspaceTemplatesOptions
func (*Schematics20ApiV2) NewCreateWorkspaceTemplatesOptions(templateListRequest *TemplateListRequest) *CreateWorkspaceTemplatesOptions {
	return &CreateWorkspaceTemplatesOptions{
		TemplateListRequest: templateListRequest,
	}
}

// SetTemplateListRequest : Allow user to set TemplateListRequest
func (options *CreateWorkspaceTemplatesOptions) SetTemplateListRequest(templateListRequest *TemplateListRequest) *CreateWorkspaceTemplatesOptions {
	options.TemplateListRequest = templateListRequest
	return options
}

// SetXGithubToken : Allow user to set XGithubToken
func (options *CreateWorkspaceTemplatesOptions) SetXGithubToken(xGithubToken string) *CreateWorkspaceTemplatesOptions {
	options.XGithubToken = core.StringPtr(xGithubToken)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *CreateWorkspaceTemplatesOptions) SetHeaders(param map[string]string) *CreateWorkspaceTemplatesOptions {
	options.Headers = param
	return options
}

// CredentialVariableData : User editable credential variable data and system generated reference to the value.
type CredentialVariableData struct {
	// The name of the credential variable.
	Name *string `json:"name,omitempty"`

	// The credential value for the variable or reference to the value. For example, `value = "<provide your ssh_key_value
	// with \n>"`. **Note** The SSH key should contain `\n` at the end of the key details in case of command line or API
	// calls.
	Value *string `json:"value,omitempty"`

	// True, will ignore the data in the value attribute, instead the data in metadata.default_value will be used.
	UseDefault *bool `json:"use_default,omitempty"`

	// An user editable metadata for the credential variables.
	Metadata *CredentialVariableMetadata `json:"metadata,omitempty"`

	// The reference link to the variable value By default the expression points to `$self.value`.
	Link *string `json:"link,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of CredentialVariableData
func (o *CredentialVariableData) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CredentialVariableData
func (o *CredentialVariableData) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CredentialVariableData
func (o *CredentialVariableData) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CredentialVariableData
func (o *CredentialVariableData) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Value != nil {
		m["value"] = o.Value
	}
	if o.UseDefault != nil {
		m["use_default"] = o.UseDefault
	}
	if o.Metadata != nil {
		m["metadata"] = o.Metadata
	}
	if o.Link != nil {
		m["link"] = o.Link
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCredentialVariableData unmarshals an instance of CredentialVariableData from the specified map of raw messages.
func UnmarshalCredentialVariableData(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CredentialVariableData)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		return
	}
	delete(m, "value")
	err = core.UnmarshalPrimitive(m, "use_default", &obj.UseDefault)
	if err != nil {
		return
	}
	delete(m, "use_default")
	err = core.UnmarshalModel(m, "metadata", &obj.Metadata, UnmarshalCredentialVariableMetadata)
	if err != nil {
		return
	}
	delete(m, "metadata")
	err = core.UnmarshalPrimitive(m, "link", &obj.Link)
	if err != nil {
		return
	}
	delete(m, "link")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CredentialVariableMetadata : An user editable metadata for the credential variables.
type CredentialVariableMetadata struct {
	// Type of the variable.
	Type *string `json:"type,omitempty"`

	// The list of aliases for the variable name.
	Aliases []string `json:"aliases,omitempty"`

	// The description of the meta data.
	Description *string `json:"description,omitempty"`

	// Cloud data type of the credential variable. eg. api_key, iam_token, profile_id.
	CloudDataType *string `json:"cloud_data_type,omitempty"`

	// Default value for the variable only if the override value is not specified.
	DefaultValue *string `json:"default_value,omitempty"`

	// The status of the link.
	LinkStatus *string `json:"link_status,omitempty"`

	// Is the variable readonly ?.
	Immutable *bool `json:"immutable,omitempty"`

	// If **true**, the variable is not displayed on UI or Command line.
	Hidden *bool `json:"hidden,omitempty"`

	// If the variable required?.
	Required *bool `json:"required,omitempty"`

	// The relative position of this variable in a list.
	Position *int64 `json:"position,omitempty"`

	// The display name of the group this variable belongs to.
	GroupBy *string `json:"group_by,omitempty"`

	// The source of this meta-data.
	Source *string `json:"source,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the CredentialVariableMetadata.Type property.
// Type of the variable.
const (
	CredentialVariableMetadata_Type_Link   = "link"
	CredentialVariableMetadata_Type_String = "string"
)

// Constants associated with the CredentialVariableMetadata.LinkStatus property.
// The status of the link.
const (
	CredentialVariableMetadata_LinkStatus_Broken = "broken"
	CredentialVariableMetadata_LinkStatus_Normal = "normal"
)

// SetProperty allows the user to set an arbitrary property on an instance of CredentialVariableMetadata
func (o *CredentialVariableMetadata) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of CredentialVariableMetadata
func (o *CredentialVariableMetadata) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of CredentialVariableMetadata
func (o *CredentialVariableMetadata) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of CredentialVariableMetadata
func (o *CredentialVariableMetadata) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.Aliases != nil {
		m["aliases"] = o.Aliases
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.CloudDataType != nil {
		m["cloud_data_type"] = o.CloudDataType
	}
	if o.DefaultValue != nil {
		m["default_value"] = o.DefaultValue
	}
	if o.LinkStatus != nil {
		m["link_status"] = o.LinkStatus
	}
	if o.Immutable != nil {
		m["immutable"] = o.Immutable
	}
	if o.Hidden != nil {
		m["hidden"] = o.Hidden
	}
	if o.Required != nil {
		m["required"] = o.Required
	}
	if o.Position != nil {
		m["position"] = o.Position
	}
	if o.GroupBy != nil {
		m["group_by"] = o.GroupBy
	}
	if o.Source != nil {
		m["source"] = o.Source
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalCredentialVariableMetadata unmarshals an instance of CredentialVariableMetadata from the specified map of raw messages.
func UnmarshalCredentialVariableMetadata(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(CredentialVariableMetadata)
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalPrimitive(m, "aliases", &obj.Aliases)
	if err != nil {
		return
	}
	delete(m, "aliases")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "cloud_data_type", &obj.CloudDataType)
	if err != nil {
		return
	}
	delete(m, "cloud_data_type")
	err = core.UnmarshalPrimitive(m, "default_value", &obj.DefaultValue)
	if err != nil {
		return
	}
	delete(m, "default_value")
	err = core.UnmarshalPrimitive(m, "link_status", &obj.LinkStatus)
	if err != nil {
		return
	}
	delete(m, "link_status")
	err = core.UnmarshalPrimitive(m, "immutable", &obj.Immutable)
	if err != nil {
		return
	}
	delete(m, "immutable")
	err = core.UnmarshalPrimitive(m, "hidden", &obj.Hidden)
	if err != nil {
		return
	}
	delete(m, "hidden")
	err = core.UnmarshalPrimitive(m, "required", &obj.Required)
	if err != nil {
		return
	}
	delete(m, "required")
	err = core.UnmarshalPrimitive(m, "position", &obj.Position)
	if err != nil {
		return
	}
	delete(m, "position")
	err = core.UnmarshalPrimitive(m, "group_by", &obj.GroupBy)
	if err != nil {
		return
	}
	delete(m, "group_by")
	err = core.UnmarshalPrimitive(m, "source", &obj.Source)
	if err != nil {
		return
	}
	delete(m, "source")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Dataset : Complete details of the Dataset record.
type Dataset struct {
	// Shared dataset name (unique for an account).
	Name *string `json:"name,omitempty"`

	// Dataset types.
	Type *string `json:"type,omitempty"`

	// Shared dataset description.
	Description *string `json:"description,omitempty"`

	// Resource-group id for the shared dataset.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Shared dataset tags.
	Tags []string `json:"tags,omitempty"`

	// Local shared dataset.
	Data []VariableData `json:"data,omitempty"`

	// Reference to Datasource ID.
	Datasource *string `json:"datasource,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Dataset Id.
	DatasetID *string `json:"dataset_id,omitempty"`

	// Account id.
	Account *string `json:"account,omitempty"`

	// Dataset creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Name of user who created the shared dataset.
	CreatedBy *string `json:"created_by,omitempty"`

	// Dataset updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Name of user who updated the shared dataset.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// List of resouce-ids (Workspace, Action, Controls) that are impacted by the change in shared dataset values.
	AffectedResourceIds []string `json:"affected_resource_ids,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the Dataset.Type property.
// Dataset types.
const (
	Dataset_Type_Configuration = "configuration"
	Dataset_Type_Credential    = "credential"
)

// Constants associated with the Dataset.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	Dataset_Location_EuDe    = "eu-de"
	Dataset_Location_EuGb    = "eu-gb"
	Dataset_Location_UsEast  = "us-east"
	Dataset_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of Dataset
func (o *Dataset) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of Dataset
func (o *Dataset) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of Dataset
func (o *Dataset) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of Dataset
func (o *Dataset) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.Data != nil {
		m["data"] = o.Data
	}
	if o.Datasource != nil {
		m["datasource"] = o.Datasource
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.DatasetID != nil {
		m["dataset_id"] = o.DatasetID
	}
	if o.Account != nil {
		m["account"] = o.Account
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.AffectedResourceIds != nil {
		m["affected_resource_ids"] = o.AffectedResourceIds
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalDataset unmarshals an instance of Dataset from the specified map of raw messages.
func UnmarshalDataset(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Dataset)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalModel(m, "data", &obj.Data, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "data")
	err = core.UnmarshalPrimitive(m, "datasource", &obj.Datasource)
	if err != nil {
		return
	}
	delete(m, "datasource")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalPrimitive(m, "dataset_id", &obj.DatasetID)
	if err != nil {
		return
	}
	delete(m, "dataset_id")
	err = core.UnmarshalPrimitive(m, "account", &obj.Account)
	if err != nil {
		return
	}
	delete(m, "account")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalPrimitive(m, "affected_resource_ids", &obj.AffectedResourceIds)
	if err != nil {
		return
	}
	delete(m, "affected_resource_ids")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DatasetList : List of dataset definition response.
type DatasetList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of dataset records.
	Datasets []DatasetLite `json:"datasets,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of DatasetList
func (o *DatasetList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of DatasetList
func (o *DatasetList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of DatasetList
func (o *DatasetList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of DatasetList
func (o *DatasetList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Datasets != nil {
		m["datasets"] = o.Datasets
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalDatasetList unmarshals an instance of DatasetList from the specified map of raw messages.
func UnmarshalDatasetList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DatasetList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "datasets", &obj.Datasets, UnmarshalDatasetLite)
	if err != nil {
		return
	}
	delete(m, "datasets")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DatasetLite : Summary Profile of the Dataset.
type DatasetLite struct {
	// Dataset name (unique for an account).
	Name *string `json:"name,omitempty"`

	// Dataset Id.
	DatasetID *string `json:"dataset_id,omitempty"`

	// Dataset types.
	Type *string `json:"type,omitempty"`

	// Dataset description.
	Description *string `json:"description,omitempty"`

	// Resource-group id for the shared dataset.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Dataset tags.
	Tags []string `json:"tags,omitempty"`

	// Type of source for the Template.
	SourceType *string `json:"source_type,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Dataset creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Name of user who created the shared dataset.
	CreatedBy *string `json:"created_by,omitempty"`

	// Dataset updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Name of user who updated the dataset.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the DatasetLite.Type property.
// Dataset types.
const (
	DatasetLite_Type_Configuration = "configuration"
	DatasetLite_Type_Credential    = "credential"
)

// Constants associated with the DatasetLite.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	DatasetLite_Location_EuDe    = "eu-de"
	DatasetLite_Location_EuGb    = "eu-gb"
	DatasetLite_Location_UsEast  = "us-east"
	DatasetLite_Location_UsSouth = "us-south"
)

// Constants associated with the DatasetLite.SourceType property.
// Type of source for the Template.
const (
	DatasetLite_SourceType_ExternalScm      = "external_scm"
	DatasetLite_SourceType_GitHub           = "git_hub"
	DatasetLite_SourceType_GitHubEnterprise = "git_hub_enterprise"
	DatasetLite_SourceType_GitLab           = "git_lab"
	DatasetLite_SourceType_IbmCloudCatalog  = "ibm_cloud_catalog"
	DatasetLite_SourceType_IbmGitLab        = "ibm_git_lab"
	DatasetLite_SourceType_Local            = "local"
)

// SetProperty allows the user to set an arbitrary property on an instance of DatasetLite
func (o *DatasetLite) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of DatasetLite
func (o *DatasetLite) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of DatasetLite
func (o *DatasetLite) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of DatasetLite
func (o *DatasetLite) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.DatasetID != nil {
		m["dataset_id"] = o.DatasetID
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.SourceType != nil {
		m["source_type"] = o.SourceType
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalDatasetLite unmarshals an instance of DatasetLite from the specified map of raw messages.
func UnmarshalDatasetLite(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DatasetLite)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "dataset_id", &obj.DatasetID)
	if err != nil {
		return
	}
	delete(m, "dataset_id")
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "source_type", &obj.SourceType)
	if err != nil {
		return
	}
	delete(m, "source_type")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Datasource : External datasource definition.
type Datasource struct {
	// External data source name (unique for an account).
	Name *string `json:"name,omitempty"`

	// data source description.
	Description *string `json:"description,omitempty"`

	// Resource-group id for the data source.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// data source tags.
	Tags []string `json:"tags,omitempty"`

	// Named connection from settings.
	Connection *string `json:"connection,omitempty"`

	DatasourceProperties []VariableData `json:"datasource_properties,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Generated datasource id.
	ID *string `json:"id,omitempty"`

	// account id.
	Account *string `json:"account,omitempty"`

	// datasource creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the datasource.
	CreatedBy *string `json:"created_by,omitempty"`

	// datasource updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the datasource.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the Datasource.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	Datasource_Location_EuDe    = "eu-de"
	Datasource_Location_EuGb    = "eu-gb"
	Datasource_Location_UsEast  = "us-east"
	Datasource_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of Datasource
func (o *Datasource) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of Datasource
func (o *Datasource) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of Datasource
func (o *Datasource) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of Datasource
func (o *Datasource) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.Connection != nil {
		m["connection"] = o.Connection
	}
	if o.DatasourceProperties != nil {
		m["datasource_properties"] = o.DatasourceProperties
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Account != nil {
		m["account"] = o.Account
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalDatasource unmarshals an instance of Datasource from the specified map of raw messages.
func UnmarshalDatasource(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Datasource)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "connection", &obj.Connection)
	if err != nil {
		return
	}
	delete(m, "connection")
	err = core.UnmarshalModel(m, "datasource_properties", &obj.DatasourceProperties, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "datasource_properties")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "account", &obj.Account)
	if err != nil {
		return
	}
	delete(m, "account")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DatasourceList : List of datasource definition.
type DatasourceList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of data source records.
	Datasources []DatasourceLite `json:"datasources,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of DatasourceList
func (o *DatasourceList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of DatasourceList
func (o *DatasourceList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of DatasourceList
func (o *DatasourceList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of DatasourceList
func (o *DatasourceList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Datasources != nil {
		m["datasources"] = o.Datasources
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalDatasourceList unmarshals an instance of DatasourceList from the specified map of raw messages.
func UnmarshalDatasourceList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DatasourceList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "datasources", &obj.Datasources, UnmarshalDatasourceLite)
	if err != nil {
		return
	}
	delete(m, "datasources")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DatasourceLite : User editable datasource details.
type DatasourceLite struct {
	// data source name (unique for an account).
	Name *string `json:"name,omitempty"`

	// data source description.
	Description *string `json:"description,omitempty"`

	// Resource-group id for the data source.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// data source tags.
	Tags []string `json:"tags,omitempty"`

	// Named connection from settings.
	Connection *string `json:"connection,omitempty"`

	// Generated datasource id.
	ID *string `json:"id,omitempty"`

	// datasource creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the datasource.
	CreatedBy *string `json:"created_by,omitempty"`

	// datasource updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the datasource.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of DatasourceLite
func (o *DatasourceLite) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of DatasourceLite
func (o *DatasourceLite) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of DatasourceLite
func (o *DatasourceLite) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of DatasourceLite
func (o *DatasourceLite) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.Connection != nil {
		m["connection"] = o.Connection
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalDatasourceLite unmarshals an instance of DatasourceLite from the specified map of raw messages.
func UnmarshalDatasourceLite(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DatasourceLite)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "connection", &obj.Connection)
	if err != nil {
		return
	}
	delete(m, "connection")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DeleteActionOptions : The DeleteAction options.
type DeleteActionOptions struct {
	// Action Id.  Use GET /actions API to look up the Action Ids in your IBM Cloud account.
	ActionID *string `validate:"required,ne="`

	// Equivalent to -force options in the command line.
	Force *bool

	// Auto propagate the chaange or deletion to the dependent resources.
	Propagate *bool

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteActionOptions : Instantiate DeleteActionOptions
func (*Schematics20ApiV2) NewDeleteActionOptions(actionID string) *DeleteActionOptions {
	return &DeleteActionOptions{
		ActionID: core.StringPtr(actionID),
	}
}

// SetActionID : Allow user to set ActionID
func (options *DeleteActionOptions) SetActionID(actionID string) *DeleteActionOptions {
	options.ActionID = core.StringPtr(actionID)
	return options
}

// SetForce : Allow user to set Force
func (options *DeleteActionOptions) SetForce(force bool) *DeleteActionOptions {
	options.Force = core.BoolPtr(force)
	return options
}

// SetPropagate : Allow user to set Propagate
func (options *DeleteActionOptions) SetPropagate(propagate bool) *DeleteActionOptions {
	options.Propagate = core.BoolPtr(propagate)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteActionOptions) SetHeaders(param map[string]string) *DeleteActionOptions {
	options.Headers = param
	return options
}

// DeleteAdapterOptions : The DeleteAdapter options.
type DeleteAdapterOptions struct {
	// Id of the Schematics Adapter.
	AdapterID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteAdapterOptions : Instantiate DeleteAdapterOptions
func (*Schematics20ApiV2) NewDeleteAdapterOptions(adapterID string) *DeleteAdapterOptions {
	return &DeleteAdapterOptions{
		AdapterID: core.StringPtr(adapterID),
	}
}

// SetAdapterID : Allow user to set AdapterID
func (options *DeleteAdapterOptions) SetAdapterID(adapterID string) *DeleteAdapterOptions {
	options.AdapterID = core.StringPtr(adapterID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteAdapterOptions) SetHeaders(param map[string]string) *DeleteAdapterOptions {
	options.Headers = param
	return options
}

// DeleteAgentOptions : The DeleteAgent options.
type DeleteAgentOptions struct {
	// Agent ID to get the details of agent.
	AgentID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteAgentOptions : Instantiate DeleteAgentOptions
func (*Schematics20ApiV2) NewDeleteAgentOptions(agentID string) *DeleteAgentOptions {
	return &DeleteAgentOptions{
		AgentID: core.StringPtr(agentID),
	}
}

// SetAgentID : Allow user to set AgentID
func (options *DeleteAgentOptions) SetAgentID(agentID string) *DeleteAgentOptions {
	options.AgentID = core.StringPtr(agentID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteAgentOptions) SetHeaders(param map[string]string) *DeleteAgentOptions {
	options.Headers = param
	return options
}

// DeleteBlueprintOptions : The DeleteBlueprint options.
type DeleteBlueprintOptions struct {
	// Environment Id.  Use `GET /v2/blueprints` API to look up the order ids in your IBM Cloud account.
	BlueprintID *string `validate:"required,ne="`

	// Level of details returned by the get method.
	Profile *string

	// Destroy the resources before deleting the blueprint.
	Destroy *bool

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the DeleteBlueprintOptions.Profile property.
// Level of details returned by the get method.
const (
	DeleteBlueprintOptions_Profile_Ids     = "ids"
	DeleteBlueprintOptions_Profile_Summary = "summary"
)

// NewDeleteBlueprintOptions : Instantiate DeleteBlueprintOptions
func (*Schematics20ApiV2) NewDeleteBlueprintOptions(blueprintID string) *DeleteBlueprintOptions {
	return &DeleteBlueprintOptions{
		BlueprintID: core.StringPtr(blueprintID),
	}
}

// SetBlueprintID : Allow user to set BlueprintID
func (options *DeleteBlueprintOptions) SetBlueprintID(blueprintID string) *DeleteBlueprintOptions {
	options.BlueprintID = core.StringPtr(blueprintID)
	return options
}

// SetProfile : Allow user to set Profile
func (options *DeleteBlueprintOptions) SetProfile(profile string) *DeleteBlueprintOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetDestroy : Allow user to set Destroy
func (options *DeleteBlueprintOptions) SetDestroy(destroy bool) *DeleteBlueprintOptions {
	options.Destroy = core.BoolPtr(destroy)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteBlueprintOptions) SetHeaders(param map[string]string) *DeleteBlueprintOptions {
	options.Headers = param
	return options
}

// DeleteCapsuleOptions : The DeleteCapsule options.
type DeleteCapsuleOptions struct {
	// Controls Id.  Use `GET /v2/controls` API to look up the Controls Ids in your IBM Cloud account.
	ControlsID *string `validate:"required,ne="`

	// Capsule Id.  Use `GET /v2/controls/<contorls_id>/capsules` API to look up the Capsules Ids  for the Controls in your
	// IBM Cloud account.
	CapsuleID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteCapsuleOptions : Instantiate DeleteCapsuleOptions
func (*Schematics20ApiV2) NewDeleteCapsuleOptions(controlsID string, capsuleID string) *DeleteCapsuleOptions {
	return &DeleteCapsuleOptions{
		ControlsID: core.StringPtr(controlsID),
		CapsuleID:  core.StringPtr(capsuleID),
	}
}

// SetControlsID : Allow user to set ControlsID
func (options *DeleteCapsuleOptions) SetControlsID(controlsID string) *DeleteCapsuleOptions {
	options.ControlsID = core.StringPtr(controlsID)
	return options
}

// SetCapsuleID : Allow user to set CapsuleID
func (options *DeleteCapsuleOptions) SetCapsuleID(capsuleID string) *DeleteCapsuleOptions {
	options.CapsuleID = core.StringPtr(capsuleID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteCapsuleOptions) SetHeaders(param map[string]string) *DeleteCapsuleOptions {
	options.Headers = param
	return options
}

// DeleteCartOrderOptions : The DeleteCartOrder options.
type DeleteCartOrderOptions struct {
	// Fulfilment job order Id.  Use `GET /v2/cart` API to look up the order ids in your IBM Cloud account.
	OrderID *string `validate:"required,ne="`

	// Destroy the resources before deleting the fulfilment job order (default=true).
	Destroy *bool

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteCartOrderOptions : Instantiate DeleteCartOrderOptions
func (*Schematics20ApiV2) NewDeleteCartOrderOptions(orderID string) *DeleteCartOrderOptions {
	return &DeleteCartOrderOptions{
		OrderID: core.StringPtr(orderID),
	}
}

// SetOrderID : Allow user to set OrderID
func (options *DeleteCartOrderOptions) SetOrderID(orderID string) *DeleteCartOrderOptions {
	options.OrderID = core.StringPtr(orderID)
	return options
}

// SetDestroy : Allow user to set Destroy
func (options *DeleteCartOrderOptions) SetDestroy(destroy bool) *DeleteCartOrderOptions {
	options.Destroy = core.BoolPtr(destroy)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteCartOrderOptions) SetHeaders(param map[string]string) *DeleteCartOrderOptions {
	options.Headers = param
	return options
}

// DeleteConnectionOptions : The DeleteConnection options.
type DeleteConnectionOptions struct {
	// The ID of the connection.  To find the connection ID, use the `GET /v2/connections` API.
	ConnectionID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteConnectionOptions : Instantiate DeleteConnectionOptions
func (*Schematics20ApiV2) NewDeleteConnectionOptions(connectionID string) *DeleteConnectionOptions {
	return &DeleteConnectionOptions{
		ConnectionID: core.StringPtr(connectionID),
	}
}

// SetConnectionID : Allow user to set ConnectionID
func (options *DeleteConnectionOptions) SetConnectionID(connectionID string) *DeleteConnectionOptions {
	options.ConnectionID = core.StringPtr(connectionID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteConnectionOptions) SetHeaders(param map[string]string) *DeleteConnectionOptions {
	options.Headers = param
	return options
}

// DeleteControlsOptions : The DeleteControls options.
type DeleteControlsOptions struct {
	// Controls Id.  Use `GET /v2/controls` API to look up the Controls Ids in your IBM Cloud account.
	ControlsID *string `validate:"required,ne="`

	// Equivalent to -force options in the command line.
	Force *bool

	// Auto propagate the chaange or deletion to the dependent resources.
	Propagate *bool

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteControlsOptions : Instantiate DeleteControlsOptions
func (*Schematics20ApiV2) NewDeleteControlsOptions(controlsID string) *DeleteControlsOptions {
	return &DeleteControlsOptions{
		ControlsID: core.StringPtr(controlsID),
	}
}

// SetControlsID : Allow user to set ControlsID
func (options *DeleteControlsOptions) SetControlsID(controlsID string) *DeleteControlsOptions {
	options.ControlsID = core.StringPtr(controlsID)
	return options
}

// SetForce : Allow user to set Force
func (options *DeleteControlsOptions) SetForce(force bool) *DeleteControlsOptions {
	options.Force = core.BoolPtr(force)
	return options
}

// SetPropagate : Allow user to set Propagate
func (options *DeleteControlsOptions) SetPropagate(propagate bool) *DeleteControlsOptions {
	options.Propagate = core.BoolPtr(propagate)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteControlsOptions) SetHeaders(param map[string]string) *DeleteControlsOptions {
	options.Headers = param
	return options
}

// DeleteDatasetOptions : The DeleteDataset options.
type DeleteDatasetOptions struct {
	// Shared dataset Id.  Use `GET /v2/datasets` API to look up the Shared dataset Ids  in your IBM Cloud account.
	DatasetID *string `validate:"required,ne="`

	// Equivalent to -force options in the command line.
	Force *bool

	// Auto propagate the chaange or deletion to the dependent resources.
	Propagate *bool

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteDatasetOptions : Instantiate DeleteDatasetOptions
func (*Schematics20ApiV2) NewDeleteDatasetOptions(datasetID string) *DeleteDatasetOptions {
	return &DeleteDatasetOptions{
		DatasetID: core.StringPtr(datasetID),
	}
}

// SetDatasetID : Allow user to set DatasetID
func (options *DeleteDatasetOptions) SetDatasetID(datasetID string) *DeleteDatasetOptions {
	options.DatasetID = core.StringPtr(datasetID)
	return options
}

// SetForce : Allow user to set Force
func (options *DeleteDatasetOptions) SetForce(force bool) *DeleteDatasetOptions {
	options.Force = core.BoolPtr(force)
	return options
}

// SetPropagate : Allow user to set Propagate
func (options *DeleteDatasetOptions) SetPropagate(propagate bool) *DeleteDatasetOptions {
	options.Propagate = core.BoolPtr(propagate)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteDatasetOptions) SetHeaders(param map[string]string) *DeleteDatasetOptions {
	options.Headers = param
	return options
}

// DeleteFlowFromWorkspaceOptions : The DeleteFlowFromWorkspace options.
type DeleteFlowFromWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Flow Id.  Use `GET /v2/workspaces/<workspace_id>/flows` API to look up the  Flow Ids in your Workspaces.
	FlowID *string `validate:"required,ne="`

	// Auto propagate the chaange or deletion to the dependent resources.
	Propagate *bool

	// Equivalent to -force options in the command line.
	Force *bool

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteFlowFromWorkspaceOptions : Instantiate DeleteFlowFromWorkspaceOptions
func (*Schematics20ApiV2) NewDeleteFlowFromWorkspaceOptions(wID string, flowID string) *DeleteFlowFromWorkspaceOptions {
	return &DeleteFlowFromWorkspaceOptions{
		WID:    core.StringPtr(wID),
		FlowID: core.StringPtr(flowID),
	}
}

// SetWID : Allow user to set WID
func (options *DeleteFlowFromWorkspaceOptions) SetWID(wID string) *DeleteFlowFromWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetFlowID : Allow user to set FlowID
func (options *DeleteFlowFromWorkspaceOptions) SetFlowID(flowID string) *DeleteFlowFromWorkspaceOptions {
	options.FlowID = core.StringPtr(flowID)
	return options
}

// SetPropagate : Allow user to set Propagate
func (options *DeleteFlowFromWorkspaceOptions) SetPropagate(propagate bool) *DeleteFlowFromWorkspaceOptions {
	options.Propagate = core.BoolPtr(propagate)
	return options
}

// SetForce : Allow user to set Force
func (options *DeleteFlowFromWorkspaceOptions) SetForce(force bool) *DeleteFlowFromWorkspaceOptions {
	options.Force = core.BoolPtr(force)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteFlowFromWorkspaceOptions) SetHeaders(param map[string]string) *DeleteFlowFromWorkspaceOptions {
	options.Headers = param
	return options
}

// DeleteInventoryOptions : The DeleteInventory options.
type DeleteInventoryOptions struct {
	// Resource Inventory Id.  Use `GET /v2/inventories` API to look up the Resource Inventory definition Ids  in your IBM
	// Cloud account.
	InventoryID *string `validate:"required,ne="`

	// Equivalent to -force options in the command line.
	Force *bool

	// Auto propagate the chaange or deletion to the dependent resources.
	Propagate *bool

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteInventoryOptions : Instantiate DeleteInventoryOptions
func (*Schematics20ApiV2) NewDeleteInventoryOptions(inventoryID string) *DeleteInventoryOptions {
	return &DeleteInventoryOptions{
		InventoryID: core.StringPtr(inventoryID),
	}
}

// SetInventoryID : Allow user to set InventoryID
func (options *DeleteInventoryOptions) SetInventoryID(inventoryID string) *DeleteInventoryOptions {
	options.InventoryID = core.StringPtr(inventoryID)
	return options
}

// SetForce : Allow user to set Force
func (options *DeleteInventoryOptions) SetForce(force bool) *DeleteInventoryOptions {
	options.Force = core.BoolPtr(force)
	return options
}

// SetPropagate : Allow user to set Propagate
func (options *DeleteInventoryOptions) SetPropagate(propagate bool) *DeleteInventoryOptions {
	options.Propagate = core.BoolPtr(propagate)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteInventoryOptions) SetHeaders(param map[string]string) *DeleteInventoryOptions {
	options.Headers = param
	return options
}

// DeleteJobOptions : The DeleteJob options.
type DeleteJobOptions struct {
	// Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
	JobID *string `validate:"required,ne="`

	// The IAM refresh token for the user or service identity.
	//
	//   **Retrieving refresh token**:
	//   * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST
	// "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d
	// "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
	//   * For more information, about creating IAM access token and API Docs, refer, [IAM access
	// token](/apidocs/iam-identity-token-api#gettoken-password) and [Create API
	// key](/apidocs/iam-identity-token-api#create-api-key).
	//
	//   **Limitation**:
	//   * If the token is expired, you can use `refresh token` to get a new IAM access token.
	//   * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
	//   * When the IAM access token is about to expire, use the API key to create a new access token.
	RefreshToken *string `validate:"required"`

	// Equivalent to -force options in the command line.
	Force *bool

	// Auto propagate the chaange or deletion to the dependent resources.
	Propagate *bool

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteJobOptions : Instantiate DeleteJobOptions
func (*Schematics20ApiV2) NewDeleteJobOptions(jobID string, refreshToken string) *DeleteJobOptions {
	return &DeleteJobOptions{
		JobID:        core.StringPtr(jobID),
		RefreshToken: core.StringPtr(refreshToken),
	}
}

// SetJobID : Allow user to set JobID
func (options *DeleteJobOptions) SetJobID(jobID string) *DeleteJobOptions {
	options.JobID = core.StringPtr(jobID)
	return options
}

// SetRefreshToken : Allow user to set RefreshToken
func (options *DeleteJobOptions) SetRefreshToken(refreshToken string) *DeleteJobOptions {
	options.RefreshToken = core.StringPtr(refreshToken)
	return options
}

// SetForce : Allow user to set Force
func (options *DeleteJobOptions) SetForce(force bool) *DeleteJobOptions {
	options.Force = core.BoolPtr(force)
	return options
}

// SetPropagate : Allow user to set Propagate
func (options *DeleteJobOptions) SetPropagate(propagate bool) *DeleteJobOptions {
	options.Propagate = core.BoolPtr(propagate)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteJobOptions) SetHeaders(param map[string]string) *DeleteJobOptions {
	options.Headers = param
	return options
}

// DeletePrivateClusterOptions : The DeletePrivateCluster options.
type DeletePrivateClusterOptions struct {

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeletePrivateClusterOptions : Instantiate DeletePrivateClusterOptions
func (*Schematics20ApiV2) NewDeletePrivateClusterOptions() *DeletePrivateClusterOptions {
	return &DeletePrivateClusterOptions{}
}

// SetHeaders : Allow user to set Headers
func (options *DeletePrivateClusterOptions) SetHeaders(param map[string]string) *DeletePrivateClusterOptions {
	options.Headers = param
	return options
}

// DeleteResourcesQueryOptions : The DeleteResourcesQuery options.
type DeleteResourcesQueryOptions struct {
	// Resource query Id.  Use `GET /v2/resource_query` API to look up the Resource query definition Ids  in your IBM Cloud
	// account.
	QueryID *string `validate:"required,ne="`

	// Equivalent to -force options in the command line.
	Force *bool

	// Auto propagate the chaange or deletion to the dependent resources.
	Propagate *bool

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteResourcesQueryOptions : Instantiate DeleteResourcesQueryOptions
func (*Schematics20ApiV2) NewDeleteResourcesQueryOptions(queryID string) *DeleteResourcesQueryOptions {
	return &DeleteResourcesQueryOptions{
		QueryID: core.StringPtr(queryID),
	}
}

// SetQueryID : Allow user to set QueryID
func (options *DeleteResourcesQueryOptions) SetQueryID(queryID string) *DeleteResourcesQueryOptions {
	options.QueryID = core.StringPtr(queryID)
	return options
}

// SetForce : Allow user to set Force
func (options *DeleteResourcesQueryOptions) SetForce(force bool) *DeleteResourcesQueryOptions {
	options.Force = core.BoolPtr(force)
	return options
}

// SetPropagate : Allow user to set Propagate
func (options *DeleteResourcesQueryOptions) SetPropagate(propagate bool) *DeleteResourcesQueryOptions {
	options.Propagate = core.BoolPtr(propagate)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteResourcesQueryOptions) SetHeaders(param map[string]string) *DeleteResourcesQueryOptions {
	options.Headers = param
	return options
}

// DeleteTemplateFromWorkspaceOptions : The DeleteTemplateFromWorkspace options.
type DeleteTemplateFromWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The ID of the Terraform template in your workspace.  When you create a workspace, the Terraform template that  your
	// workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up the workspace IDs  and template
	// IDs or `template_data.id` in your IBM Cloud account.
	TID *string `validate:"required,ne="`

	// Equivalent to -force options in the command line.
	Force *bool

	// Auto propagate the chaange or deletion to the dependent resources.
	Propagate *bool

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteTemplateFromWorkspaceOptions : Instantiate DeleteTemplateFromWorkspaceOptions
func (*Schematics20ApiV2) NewDeleteTemplateFromWorkspaceOptions(wID string, tID string) *DeleteTemplateFromWorkspaceOptions {
	return &DeleteTemplateFromWorkspaceOptions{
		WID: core.StringPtr(wID),
		TID: core.StringPtr(tID),
	}
}

// SetWID : Allow user to set WID
func (options *DeleteTemplateFromWorkspaceOptions) SetWID(wID string) *DeleteTemplateFromWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTID : Allow user to set TID
func (options *DeleteTemplateFromWorkspaceOptions) SetTID(tID string) *DeleteTemplateFromWorkspaceOptions {
	options.TID = core.StringPtr(tID)
	return options
}

// SetForce : Allow user to set Force
func (options *DeleteTemplateFromWorkspaceOptions) SetForce(force bool) *DeleteTemplateFromWorkspaceOptions {
	options.Force = core.BoolPtr(force)
	return options
}

// SetPropagate : Allow user to set Propagate
func (options *DeleteTemplateFromWorkspaceOptions) SetPropagate(propagate bool) *DeleteTemplateFromWorkspaceOptions {
	options.Propagate = core.BoolPtr(propagate)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteTemplateFromWorkspaceOptions) SetHeaders(param map[string]string) *DeleteTemplateFromWorkspaceOptions {
	options.Headers = param
	return options
}

// DeleteTriggerOptions : The DeleteTrigger options.
type DeleteTriggerOptions struct {
	// Id of the Schematics trigger.
	TriggerID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteTriggerOptions : Instantiate DeleteTriggerOptions
func (*Schematics20ApiV2) NewDeleteTriggerOptions(triggerID string) *DeleteTriggerOptions {
	return &DeleteTriggerOptions{
		TriggerID: core.StringPtr(triggerID),
	}
}

// SetTriggerID : Allow user to set TriggerID
func (options *DeleteTriggerOptions) SetTriggerID(triggerID string) *DeleteTriggerOptions {
	options.TriggerID = core.StringPtr(triggerID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteTriggerOptions) SetHeaders(param map[string]string) *DeleteTriggerOptions {
	options.Headers = param
	return options
}

// DeleteWebhookOptions : The DeleteWebhook options.
type DeleteWebhookOptions struct {
	// Id of the Schematics web-hook.
	HookID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteWebhookOptions : Instantiate DeleteWebhookOptions
func (*Schematics20ApiV2) NewDeleteWebhookOptions(hookID string) *DeleteWebhookOptions {
	return &DeleteWebhookOptions{
		HookID: core.StringPtr(hookID),
	}
}

// SetHookID : Allow user to set HookID
func (options *DeleteWebhookOptions) SetHookID(hookID string) *DeleteWebhookOptions {
	options.HookID = core.StringPtr(hookID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteWebhookOptions) SetHeaders(param map[string]string) *DeleteWebhookOptions {
	options.Headers = param
	return options
}

// DeleteWorkspaceOptions : The DeleteWorkspace options.
type DeleteWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Equivalent to -force options in the command line.
	Force *bool

	// Auto propagate the chaange or deletion to the dependent resources.
	Propagate *bool

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteWorkspaceOptions : Instantiate DeleteWorkspaceOptions
func (*Schematics20ApiV2) NewDeleteWorkspaceOptions(wID string) *DeleteWorkspaceOptions {
	return &DeleteWorkspaceOptions{
		WID: core.StringPtr(wID),
	}
}

// SetWID : Allow user to set WID
func (options *DeleteWorkspaceOptions) SetWID(wID string) *DeleteWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetForce : Allow user to set Force
func (options *DeleteWorkspaceOptions) SetForce(force bool) *DeleteWorkspaceOptions {
	options.Force = core.BoolPtr(force)
	return options
}

// SetPropagate : Allow user to set Propagate
func (options *DeleteWorkspaceOptions) SetPropagate(propagate bool) *DeleteWorkspaceOptions {
	options.Propagate = core.BoolPtr(propagate)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteWorkspaceOptions) SetHeaders(param map[string]string) *DeleteWorkspaceOptions {
	options.Headers = param
	return options
}

// ExecuteResourceQueryOptions : The ExecuteResourceQuery options.
type ExecuteResourceQueryOptions struct {
	// Resource query Id.  Use `GET /v2/resource_query` API to look up the Resource query definition Ids  in your IBM Cloud
	// account.
	QueryID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewExecuteResourceQueryOptions : Instantiate ExecuteResourceQueryOptions
func (*Schematics20ApiV2) NewExecuteResourceQueryOptions(queryID string) *ExecuteResourceQueryOptions {
	return &ExecuteResourceQueryOptions{
		QueryID: core.StringPtr(queryID),
	}
}

// SetQueryID : Allow user to set QueryID
func (options *ExecuteResourceQueryOptions) SetQueryID(queryID string) *ExecuteResourceQueryOptions {
	options.QueryID = core.StringPtr(queryID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ExecuteResourceQueryOptions) SetHeaders(param map[string]string) *ExecuteResourceQueryOptions {
	options.Headers = param
	return options
}

// ExternalSource : Source of templates, playbooks, or controls.
type ExternalSource struct {
	// Type of source for the Template.
	SourceType *string `json:"source_type" validate:"required"`

	// The connection details to the Git source repository.
	Git *ExternalSourceGit `json:"git,omitempty"`

	// The connection details to the IBM Cloud Catalog source.
	Catalog *ExternalSourceCatalog `json:"catalog,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the ExternalSource.SourceType property.
// Type of source for the Template.
const (
	ExternalSource_SourceType_ExternalScm      = "external_scm"
	ExternalSource_SourceType_GitHub           = "git_hub"
	ExternalSource_SourceType_GitHubEnterprise = "git_hub_enterprise"
	ExternalSource_SourceType_GitLab           = "git_lab"
	ExternalSource_SourceType_IbmCloudCatalog  = "ibm_cloud_catalog"
	ExternalSource_SourceType_IbmGitLab        = "ibm_git_lab"
	ExternalSource_SourceType_Local            = "local"
)

// NewExternalSource : Instantiate ExternalSource (Generic Model Constructor)
func (*Schematics20ApiV2) NewExternalSource(sourceType string) (model *ExternalSource, err error) {
	model = &ExternalSource{
		SourceType: core.StringPtr(sourceType),
	}
	err = core.ValidateStruct(model, "required parameters")
	return
}

// SetProperty allows the user to set an arbitrary property on an instance of ExternalSource
func (o *ExternalSource) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ExternalSource
func (o *ExternalSource) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ExternalSource
func (o *ExternalSource) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ExternalSource
func (o *ExternalSource) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.SourceType != nil {
		m["source_type"] = o.SourceType
	}
	if o.Git != nil {
		m["git"] = o.Git
	}
	if o.Catalog != nil {
		m["catalog"] = o.Catalog
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalExternalSource unmarshals an instance of ExternalSource from the specified map of raw messages.
func UnmarshalExternalSource(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ExternalSource)
	err = core.UnmarshalPrimitive(m, "source_type", &obj.SourceType)
	if err != nil {
		return
	}
	delete(m, "source_type")
	err = core.UnmarshalModel(m, "git", &obj.Git, UnmarshalExternalSourceGit)
	if err != nil {
		return
	}
	delete(m, "git")
	err = core.UnmarshalModel(m, "catalog", &obj.Catalog, UnmarshalExternalSourceCatalog)
	if err != nil {
		return
	}
	delete(m, "catalog")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ExternalSourceCatalog : The connection details to the IBM Cloud Catalog source.
type ExternalSourceCatalog struct {
	// The name of the private catalog.
	CatalogName *string `json:"catalog_name,omitempty"`

	// The name of an offering in the IBM Cloud Catalog.
	OfferingName *string `json:"offering_name,omitempty"`

	// The version string of an offering in the IBM Cloud Catalog.
	OfferingVersion *string `json:"offering_version,omitempty"`

	// The type of an offering, in the IBM Cloud Catalog.
	OfferingKind *string `json:"offering_kind,omitempty"`

	// The ID of an offering in the IBM Cloud Catalog.
	OfferingID *string `json:"offering_id,omitempty"`

	// The ID of an offering version the IBM Cloud Catalog.
	OfferingVersionID *string `json:"offering_version_id,omitempty"`

	// The repository URL of an offering, in the IBM Cloud Catalog.
	OfferingRepoURL *string `json:"offering_repo_url,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ExternalSourceCatalog
func (o *ExternalSourceCatalog) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ExternalSourceCatalog
func (o *ExternalSourceCatalog) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ExternalSourceCatalog
func (o *ExternalSourceCatalog) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ExternalSourceCatalog
func (o *ExternalSourceCatalog) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.CatalogName != nil {
		m["catalog_name"] = o.CatalogName
	}
	if o.OfferingName != nil {
		m["offering_name"] = o.OfferingName
	}
	if o.OfferingVersion != nil {
		m["offering_version"] = o.OfferingVersion
	}
	if o.OfferingKind != nil {
		m["offering_kind"] = o.OfferingKind
	}
	if o.OfferingID != nil {
		m["offering_id"] = o.OfferingID
	}
	if o.OfferingVersionID != nil {
		m["offering_version_id"] = o.OfferingVersionID
	}
	if o.OfferingRepoURL != nil {
		m["offering_repo_url"] = o.OfferingRepoURL
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalExternalSourceCatalog unmarshals an instance of ExternalSourceCatalog from the specified map of raw messages.
func UnmarshalExternalSourceCatalog(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ExternalSourceCatalog)
	err = core.UnmarshalPrimitive(m, "catalog_name", &obj.CatalogName)
	if err != nil {
		return
	}
	delete(m, "catalog_name")
	err = core.UnmarshalPrimitive(m, "offering_name", &obj.OfferingName)
	if err != nil {
		return
	}
	delete(m, "offering_name")
	err = core.UnmarshalPrimitive(m, "offering_version", &obj.OfferingVersion)
	if err != nil {
		return
	}
	delete(m, "offering_version")
	err = core.UnmarshalPrimitive(m, "offering_kind", &obj.OfferingKind)
	if err != nil {
		return
	}
	delete(m, "offering_kind")
	err = core.UnmarshalPrimitive(m, "offering_id", &obj.OfferingID)
	if err != nil {
		return
	}
	delete(m, "offering_id")
	err = core.UnmarshalPrimitive(m, "offering_version_id", &obj.OfferingVersionID)
	if err != nil {
		return
	}
	delete(m, "offering_version_id")
	err = core.UnmarshalPrimitive(m, "offering_repo_url", &obj.OfferingRepoURL)
	if err != nil {
		return
	}
	delete(m, "offering_repo_url")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ExternalSourceGit : The connection details to the Git source repository.
type ExternalSourceGit struct {
	// The complete URL which is computed by the **git_repo_url**, **git_repo_folder**, and **branch**.
	ComputedGitRepoURL *string `json:"computed_git_repo_url,omitempty"`

	// The URL to the Git repository that can be used to clone the template.
	GitRepoURL *string `json:"git_repo_url,omitempty"`

	// The Personal Access Token (PAT) to connect to the Git URLs.
	GitToken *string `json:"git_token,omitempty"`

	// The name of the folder in the Git repository, that contains the template.
	GitRepoFolder *string `json:"git_repo_folder,omitempty"`

	// The name of the release tag that are used to fetch the Git repository.
	GitRelease *string `json:"git_release,omitempty"`

	// The name of the branch that are used to fetch the Git repository.
	GitBranch *string `json:"git_branch,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ExternalSourceGit
func (o *ExternalSourceGit) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ExternalSourceGit
func (o *ExternalSourceGit) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ExternalSourceGit
func (o *ExternalSourceGit) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ExternalSourceGit
func (o *ExternalSourceGit) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ComputedGitRepoURL != nil {
		m["computed_git_repo_url"] = o.ComputedGitRepoURL
	}
	if o.GitRepoURL != nil {
		m["git_repo_url"] = o.GitRepoURL
	}
	if o.GitToken != nil {
		m["git_token"] = o.GitToken
	}
	if o.GitRepoFolder != nil {
		m["git_repo_folder"] = o.GitRepoFolder
	}
	if o.GitRelease != nil {
		m["git_release"] = o.GitRelease
	}
	if o.GitBranch != nil {
		m["git_branch"] = o.GitBranch
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalExternalSourceGit unmarshals an instance of ExternalSourceGit from the specified map of raw messages.
func UnmarshalExternalSourceGit(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ExternalSourceGit)
	err = core.UnmarshalPrimitive(m, "computed_git_repo_url", &obj.ComputedGitRepoURL)
	if err != nil {
		return
	}
	delete(m, "computed_git_repo_url")
	err = core.UnmarshalPrimitive(m, "git_repo_url", &obj.GitRepoURL)
	if err != nil {
		return
	}
	delete(m, "git_repo_url")
	err = core.UnmarshalPrimitive(m, "git_token", &obj.GitToken)
	if err != nil {
		return
	}
	delete(m, "git_token")
	err = core.UnmarshalPrimitive(m, "git_repo_folder", &obj.GitRepoFolder)
	if err != nil {
		return
	}
	delete(m, "git_repo_folder")
	err = core.UnmarshalPrimitive(m, "git_release", &obj.GitRelease)
	if err != nil {
		return
	}
	delete(m, "git_release")
	err = core.UnmarshalPrimitive(m, "git_branch", &obj.GitBranch)
	if err != nil {
		return
	}
	delete(m, "git_branch")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// GetActionOptions : The GetAction options.
type GetActionOptions struct {
	// Action Id.  Use GET /actions API to look up the Action Ids in your IBM Cloud account.
	ActionID *string `validate:"required,ne="`

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetActionOptions.Profile property.
// Level of details returned by the get method.
const (
	GetActionOptions_Profile_Detailed = "detailed"
	GetActionOptions_Profile_Ids      = "ids"
	GetActionOptions_Profile_Summary  = "summary"
)

// NewGetActionOptions : Instantiate GetActionOptions
func (*Schematics20ApiV2) NewGetActionOptions(actionID string) *GetActionOptions {
	return &GetActionOptions{
		ActionID: core.StringPtr(actionID),
	}
}

// SetActionID : Allow user to set ActionID
func (options *GetActionOptions) SetActionID(actionID string) *GetActionOptions {
	options.ActionID = core.StringPtr(actionID)
	return options
}

// SetProfile : Allow user to set Profile
func (options *GetActionOptions) SetProfile(profile string) *GetActionOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetActionOptions) SetHeaders(param map[string]string) *GetActionOptions {
	options.Headers = param
	return options
}

// GetAdapterOptions : The GetAdapter options.
type GetAdapterOptions struct {
	// Id of the Schematics Adapter.
	AdapterID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetAdapterOptions : Instantiate GetAdapterOptions
func (*Schematics20ApiV2) NewGetAdapterOptions(adapterID string) *GetAdapterOptions {
	return &GetAdapterOptions{
		AdapterID: core.StringPtr(adapterID),
	}
}

// SetAdapterID : Allow user to set AdapterID
func (options *GetAdapterOptions) SetAdapterID(adapterID string) *GetAdapterOptions {
	options.AdapterID = core.StringPtr(adapterID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetAdapterOptions) SetHeaders(param map[string]string) *GetAdapterOptions {
	options.Headers = param
	return options
}

// GetAgentOptions : The GetAgent options.
type GetAgentOptions struct {
	// Agent ID to get the details of agent.
	AgentID *string `validate:"required,ne="`

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetAgentOptions.Profile property.
// Level of details returned by the get method.
const (
	GetAgentOptions_Profile_Detailed = "detailed"
	GetAgentOptions_Profile_Ids      = "ids"
	GetAgentOptions_Profile_Summary  = "summary"
)

// NewGetAgentOptions : Instantiate GetAgentOptions
func (*Schematics20ApiV2) NewGetAgentOptions(agentID string) *GetAgentOptions {
	return &GetAgentOptions{
		AgentID: core.StringPtr(agentID),
	}
}

// SetAgentID : Allow user to set AgentID
func (options *GetAgentOptions) SetAgentID(agentID string) *GetAgentOptions {
	options.AgentID = core.StringPtr(agentID)
	return options
}

// SetProfile : Allow user to set Profile
func (options *GetAgentOptions) SetProfile(profile string) *GetAgentOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetAgentOptions) SetHeaders(param map[string]string) *GetAgentOptions {
	options.Headers = param
	return options
}

// GetBlueprintOptions : The GetBlueprint options.
type GetBlueprintOptions struct {
	// Environment Id.  Use `GET /v2/blueprints` API to look up the order ids in your IBM Cloud account.
	BlueprintID *string `validate:"required,ne="`

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetBlueprintOptions.Profile property.
// Level of details returned by the get method.
const (
	GetBlueprintOptions_Profile_Ids     = "ids"
	GetBlueprintOptions_Profile_Summary = "summary"
)

// NewGetBlueprintOptions : Instantiate GetBlueprintOptions
func (*Schematics20ApiV2) NewGetBlueprintOptions(blueprintID string) *GetBlueprintOptions {
	return &GetBlueprintOptions{
		BlueprintID: core.StringPtr(blueprintID),
	}
}

// SetBlueprintID : Allow user to set BlueprintID
func (options *GetBlueprintOptions) SetBlueprintID(blueprintID string) *GetBlueprintOptions {
	options.BlueprintID = core.StringPtr(blueprintID)
	return options
}

// SetProfile : Allow user to set Profile
func (options *GetBlueprintOptions) SetProfile(profile string) *GetBlueprintOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetBlueprintOptions) SetHeaders(param map[string]string) *GetBlueprintOptions {
	options.Headers = param
	return options
}

// GetCapsuleOptions : The GetCapsule options.
type GetCapsuleOptions struct {
	// Controls Id.  Use `GET /v2/controls` API to look up the Controls Ids in your IBM Cloud account.
	ControlsID *string `validate:"required,ne="`

	// Capsule Id.  Use `GET /v2/controls/<contorls_id>/capsules` API to look up the Capsules Ids  for the Controls in your
	// IBM Cloud account.
	CapsuleID *string `validate:"required,ne="`

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetCapsuleOptions.Profile property.
// Level of details returned by the get method.
const (
	GetCapsuleOptions_Profile_Detailed = "detailed"
	GetCapsuleOptions_Profile_Ids      = "ids"
	GetCapsuleOptions_Profile_Summary  = "summary"
)

// NewGetCapsuleOptions : Instantiate GetCapsuleOptions
func (*Schematics20ApiV2) NewGetCapsuleOptions(controlsID string, capsuleID string) *GetCapsuleOptions {
	return &GetCapsuleOptions{
		ControlsID: core.StringPtr(controlsID),
		CapsuleID:  core.StringPtr(capsuleID),
	}
}

// SetControlsID : Allow user to set ControlsID
func (options *GetCapsuleOptions) SetControlsID(controlsID string) *GetCapsuleOptions {
	options.ControlsID = core.StringPtr(controlsID)
	return options
}

// SetCapsuleID : Allow user to set CapsuleID
func (options *GetCapsuleOptions) SetCapsuleID(capsuleID string) *GetCapsuleOptions {
	options.CapsuleID = core.StringPtr(capsuleID)
	return options
}

// SetProfile : Allow user to set Profile
func (options *GetCapsuleOptions) SetProfile(profile string) *GetCapsuleOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetCapsuleOptions) SetHeaders(param map[string]string) *GetCapsuleOptions {
	options.Headers = param
	return options
}

// GetCartMetadataOptions : The GetCartMetadata options.
type GetCartMetadataOptions struct {
	// Fulfilment job order Id.  Use `GET /v2/cart` API to look up the order ids in your IBM Cloud account.
	OrderID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetCartMetadataOptions : Instantiate GetCartMetadataOptions
func (*Schematics20ApiV2) NewGetCartMetadataOptions(orderID string) *GetCartMetadataOptions {
	return &GetCartMetadataOptions{
		OrderID: core.StringPtr(orderID),
	}
}

// SetOrderID : Allow user to set OrderID
func (options *GetCartMetadataOptions) SetOrderID(orderID string) *GetCartMetadataOptions {
	options.OrderID = core.StringPtr(orderID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetCartMetadataOptions) SetHeaders(param map[string]string) *GetCartMetadataOptions {
	options.Headers = param
	return options
}

// GetCartOrderJobLogOptions : The GetCartOrderJobLog options.
type GetCartOrderJobLogOptions struct {
	// Fulfilment job order Id.  Use `GET /v2/cart` API to look up the order ids in your IBM Cloud account.
	OrderID *string `validate:"required,ne="`

	// Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
	JobID *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetCartOrderJobLogOptions : Instantiate GetCartOrderJobLogOptions
func (*Schematics20ApiV2) NewGetCartOrderJobLogOptions(orderID string, jobID string) *GetCartOrderJobLogOptions {
	return &GetCartOrderJobLogOptions{
		OrderID: core.StringPtr(orderID),
		JobID:   core.StringPtr(jobID),
	}
}

// SetOrderID : Allow user to set OrderID
func (options *GetCartOrderJobLogOptions) SetOrderID(orderID string) *GetCartOrderJobLogOptions {
	options.OrderID = core.StringPtr(orderID)
	return options
}

// SetJobID : Allow user to set JobID
func (options *GetCartOrderJobLogOptions) SetJobID(jobID string) *GetCartOrderJobLogOptions {
	options.JobID = core.StringPtr(jobID)
	return options
}

// SetOffset : Allow user to set Offset
func (options *GetCartOrderJobLogOptions) SetOffset(offset int64) *GetCartOrderJobLogOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *GetCartOrderJobLogOptions) SetLimit(limit int64) *GetCartOrderJobLogOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetCartOrderJobLogOptions) SetHeaders(param map[string]string) *GetCartOrderJobLogOptions {
	options.Headers = param
	return options
}

// GetCartOrderJobOptions : The GetCartOrderJob options.
type GetCartOrderJobOptions struct {
	// Fulfilment job order Id.  Use `GET /v2/cart` API to look up the order ids in your IBM Cloud account.
	OrderID *string `validate:"required,ne="`

	// Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
	JobID *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetCartOrderJobOptions : Instantiate GetCartOrderJobOptions
func (*Schematics20ApiV2) NewGetCartOrderJobOptions(orderID string, jobID string) *GetCartOrderJobOptions {
	return &GetCartOrderJobOptions{
		OrderID: core.StringPtr(orderID),
		JobID:   core.StringPtr(jobID),
	}
}

// SetOrderID : Allow user to set OrderID
func (options *GetCartOrderJobOptions) SetOrderID(orderID string) *GetCartOrderJobOptions {
	options.OrderID = core.StringPtr(orderID)
	return options
}

// SetJobID : Allow user to set JobID
func (options *GetCartOrderJobOptions) SetJobID(jobID string) *GetCartOrderJobOptions {
	options.JobID = core.StringPtr(jobID)
	return options
}

// SetOffset : Allow user to set Offset
func (options *GetCartOrderJobOptions) SetOffset(offset int64) *GetCartOrderJobOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *GetCartOrderJobOptions) SetLimit(limit int64) *GetCartOrderJobOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetCartOrderJobOptions) SetHeaders(param map[string]string) *GetCartOrderJobOptions {
	options.Headers = param
	return options
}

// GetCartOrderJobResourcesOptions : The GetCartOrderJobResources options.
type GetCartOrderJobResourcesOptions struct {
	// Fulfilment job order Id.  Use `GET /v2/cart` API to look up the order ids in your IBM Cloud account.
	OrderID *string `validate:"required,ne="`

	// Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
	JobID *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetCartOrderJobResourcesOptions : Instantiate GetCartOrderJobResourcesOptions
func (*Schematics20ApiV2) NewGetCartOrderJobResourcesOptions(orderID string, jobID string) *GetCartOrderJobResourcesOptions {
	return &GetCartOrderJobResourcesOptions{
		OrderID: core.StringPtr(orderID),
		JobID:   core.StringPtr(jobID),
	}
}

// SetOrderID : Allow user to set OrderID
func (options *GetCartOrderJobResourcesOptions) SetOrderID(orderID string) *GetCartOrderJobResourcesOptions {
	options.OrderID = core.StringPtr(orderID)
	return options
}

// SetJobID : Allow user to set JobID
func (options *GetCartOrderJobResourcesOptions) SetJobID(jobID string) *GetCartOrderJobResourcesOptions {
	options.JobID = core.StringPtr(jobID)
	return options
}

// SetOffset : Allow user to set Offset
func (options *GetCartOrderJobResourcesOptions) SetOffset(offset int64) *GetCartOrderJobResourcesOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *GetCartOrderJobResourcesOptions) SetLimit(limit int64) *GetCartOrderJobResourcesOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetCartOrderJobResourcesOptions) SetHeaders(param map[string]string) *GetCartOrderJobResourcesOptions {
	options.Headers = param
	return options
}

// GetCartOrderOptions : The GetCartOrder options.
type GetCartOrderOptions struct {
	// Fulfilment job order Id.  Use `GET /v2/cart` API to look up the order ids in your IBM Cloud account.
	OrderID *string `validate:"required,ne="`

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetCartOrderOptions.Profile property.
// Level of details returned by the get method.
const (
	GetCartOrderOptions_Profile_Detailed = "detailed"
	GetCartOrderOptions_Profile_Ids      = "ids"
	GetCartOrderOptions_Profile_Summary  = "summary"
)

// NewGetCartOrderOptions : Instantiate GetCartOrderOptions
func (*Schematics20ApiV2) NewGetCartOrderOptions(orderID string) *GetCartOrderOptions {
	return &GetCartOrderOptions{
		OrderID: core.StringPtr(orderID),
	}
}

// SetOrderID : Allow user to set OrderID
func (options *GetCartOrderOptions) SetOrderID(orderID string) *GetCartOrderOptions {
	options.OrderID = core.StringPtr(orderID)
	return options
}

// SetProfile : Allow user to set Profile
func (options *GetCartOrderOptions) SetProfile(profile string) *GetCartOrderOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetCartOrderOptions) SetHeaders(param map[string]string) *GetCartOrderOptions {
	options.Headers = param
	return options
}

// GetCatalogItemOptions : The GetCatalogItem options.
type GetCatalogItemOptions struct {
	// Catalog ID to get the list of environments defined as part of offerings.
	OfferingID *string `validate:"required,ne="`

	// Catalog ID to get the list of environments defined as part of offerings.
	CatalogID *string

	// Catalog Name to get the list of environments defined as part of offerings.
	CatalogName *string

	// Offering Name to get the list of environments defined as part of offerings.
	OfferingName *string

	// Version of the offering.
	OfferingVersion *string

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetCatalogItemOptions : Instantiate GetCatalogItemOptions
func (*Schematics20ApiV2) NewGetCatalogItemOptions(offeringID string) *GetCatalogItemOptions {
	return &GetCatalogItemOptions{
		OfferingID: core.StringPtr(offeringID),
	}
}

// SetOfferingID : Allow user to set OfferingID
func (options *GetCatalogItemOptions) SetOfferingID(offeringID string) *GetCatalogItemOptions {
	options.OfferingID = core.StringPtr(offeringID)
	return options
}

// SetCatalogID : Allow user to set CatalogID
func (options *GetCatalogItemOptions) SetCatalogID(catalogID string) *GetCatalogItemOptions {
	options.CatalogID = core.StringPtr(catalogID)
	return options
}

// SetCatalogName : Allow user to set CatalogName
func (options *GetCatalogItemOptions) SetCatalogName(catalogName string) *GetCatalogItemOptions {
	options.CatalogName = core.StringPtr(catalogName)
	return options
}

// SetOfferingName : Allow user to set OfferingName
func (options *GetCatalogItemOptions) SetOfferingName(offeringName string) *GetCatalogItemOptions {
	options.OfferingName = core.StringPtr(offeringName)
	return options
}

// SetOfferingVersion : Allow user to set OfferingVersion
func (options *GetCatalogItemOptions) SetOfferingVersion(offeringVersion string) *GetCatalogItemOptions {
	options.OfferingVersion = core.StringPtr(offeringVersion)
	return options
}

// SetOffset : Allow user to set Offset
func (options *GetCatalogItemOptions) SetOffset(offset int64) *GetCatalogItemOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *GetCatalogItemOptions) SetLimit(limit int64) *GetCatalogItemOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetCatalogItemOptions) SetHeaders(param map[string]string) *GetCatalogItemOptions {
	options.Headers = param
	return options
}

// GetConnectionOptions : The GetConnection options.
type GetConnectionOptions struct {
	// The ID of the connection.  To find the connection ID, use the `GET /v2/connections` API.
	ConnectionID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetConnectionOptions : Instantiate GetConnectionOptions
func (*Schematics20ApiV2) NewGetConnectionOptions(connectionID string) *GetConnectionOptions {
	return &GetConnectionOptions{
		ConnectionID: core.StringPtr(connectionID),
	}
}

// SetConnectionID : Allow user to set ConnectionID
func (options *GetConnectionOptions) SetConnectionID(connectionID string) *GetConnectionOptions {
	options.ConnectionID = core.StringPtr(connectionID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetConnectionOptions) SetHeaders(param map[string]string) *GetConnectionOptions {
	options.Headers = param
	return options
}

// GetControlsOptions : The GetControls options.
type GetControlsOptions struct {
	// Controls Id.  Use `GET /v2/controls` API to look up the Controls Ids in your IBM Cloud account.
	ControlsID *string `validate:"required,ne="`

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetControlsOptions.Profile property.
// Level of details returned by the get method.
const (
	GetControlsOptions_Profile_Detailed = "detailed"
	GetControlsOptions_Profile_Ids      = "ids"
	GetControlsOptions_Profile_Summary  = "summary"
)

// NewGetControlsOptions : Instantiate GetControlsOptions
func (*Schematics20ApiV2) NewGetControlsOptions(controlsID string) *GetControlsOptions {
	return &GetControlsOptions{
		ControlsID: core.StringPtr(controlsID),
	}
}

// SetControlsID : Allow user to set ControlsID
func (options *GetControlsOptions) SetControlsID(controlsID string) *GetControlsOptions {
	options.ControlsID = core.StringPtr(controlsID)
	return options
}

// SetProfile : Allow user to set Profile
func (options *GetControlsOptions) SetProfile(profile string) *GetControlsOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetControlsOptions) SetHeaders(param map[string]string) *GetControlsOptions {
	options.Headers = param
	return options
}

// GetCredentialVariableValueOptions : The GetCredentialVariableValue options.
type GetCredentialVariableValueOptions struct {
	// Credentials Id.  Use `GET /v2/credentials` API to look up the Credentials Ids  in your IBM Cloud account.
	CredsID *string `validate:"required,ne="`

	// Name of the variable.
	VarName *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetCredentialVariableValueOptions : Instantiate GetCredentialVariableValueOptions
func (*Schematics20ApiV2) NewGetCredentialVariableValueOptions(credsID string, varName string) *GetCredentialVariableValueOptions {
	return &GetCredentialVariableValueOptions{
		CredsID: core.StringPtr(credsID),
		VarName: core.StringPtr(varName),
	}
}

// SetCredsID : Allow user to set CredsID
func (options *GetCredentialVariableValueOptions) SetCredsID(credsID string) *GetCredentialVariableValueOptions {
	options.CredsID = core.StringPtr(credsID)
	return options
}

// SetVarName : Allow user to set VarName
func (options *GetCredentialVariableValueOptions) SetVarName(varName string) *GetCredentialVariableValueOptions {
	options.VarName = core.StringPtr(varName)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetCredentialVariableValueOptions) SetHeaders(param map[string]string) *GetCredentialVariableValueOptions {
	options.Headers = param
	return options
}

// GetDataOptions : The GetData options.
type GetDataOptions struct {
	// The ID of the datasource created.
	DatasourceID *string `validate:"required,ne="`

	// Preview the data from the datasource.
	Preview *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetDataOptions.Preview property.
// Preview the data from the datasource.
const (
	GetDataOptions_Preview_All  = "all"
	GetDataOptions_Preview_Keys = "keys"
)

// NewGetDataOptions : Instantiate GetDataOptions
func (*Schematics20ApiV2) NewGetDataOptions(datasourceID string) *GetDataOptions {
	return &GetDataOptions{
		DatasourceID: core.StringPtr(datasourceID),
	}
}

// SetDatasourceID : Allow user to set DatasourceID
func (options *GetDataOptions) SetDatasourceID(datasourceID string) *GetDataOptions {
	options.DatasourceID = core.StringPtr(datasourceID)
	return options
}

// SetPreview : Allow user to set Preview
func (options *GetDataOptions) SetPreview(preview string) *GetDataOptions {
	options.Preview = core.StringPtr(preview)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetDataOptions) SetHeaders(param map[string]string) *GetDataOptions {
	options.Headers = param
	return options
}

// GetDatasetOptions : The GetDataset options.
type GetDatasetOptions struct {
	// Shared dataset Id.  Use `GET /v2/datasets` API to look up the Shared dataset Ids  in your IBM Cloud account.
	DatasetID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetDatasetOptions : Instantiate GetDatasetOptions
func (*Schematics20ApiV2) NewGetDatasetOptions(datasetID string) *GetDatasetOptions {
	return &GetDatasetOptions{
		DatasetID: core.StringPtr(datasetID),
	}
}

// SetDatasetID : Allow user to set DatasetID
func (options *GetDatasetOptions) SetDatasetID(datasetID string) *GetDatasetOptions {
	options.DatasetID = core.StringPtr(datasetID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetDatasetOptions) SetHeaders(param map[string]string) *GetDatasetOptions {
	options.Headers = param
	return options
}

// GetDatasetVariableOptions : The GetDatasetVariable options.
type GetDatasetVariableOptions struct {
	// Shared dataset Id.  Use `GET /v2/datasets` API to look up the Shared dataset Ids  in your IBM Cloud account.
	DatasetID *string `validate:"required,ne="`

	// Name of the variable.
	VarName *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetDatasetVariableOptions : Instantiate GetDatasetVariableOptions
func (*Schematics20ApiV2) NewGetDatasetVariableOptions(datasetID string, varName string) *GetDatasetVariableOptions {
	return &GetDatasetVariableOptions{
		DatasetID: core.StringPtr(datasetID),
		VarName:   core.StringPtr(varName),
	}
}

// SetDatasetID : Allow user to set DatasetID
func (options *GetDatasetVariableOptions) SetDatasetID(datasetID string) *GetDatasetVariableOptions {
	options.DatasetID = core.StringPtr(datasetID)
	return options
}

// SetVarName : Allow user to set VarName
func (options *GetDatasetVariableOptions) SetVarName(varName string) *GetDatasetVariableOptions {
	options.VarName = core.StringPtr(varName)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetDatasetVariableOptions) SetHeaders(param map[string]string) *GetDatasetVariableOptions {
	options.Headers = param
	return options
}

// GetDatasetVariableValueOptions : The GetDatasetVariableValue options.
type GetDatasetVariableValueOptions struct {
	// Shared dataset Id.  Use `GET /v2/datasets` API to look up the Shared dataset Ids  in your IBM Cloud account.
	DatasetID *string `validate:"required,ne="`

	// Name of the variable.
	VarName *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetDatasetVariableValueOptions : Instantiate GetDatasetVariableValueOptions
func (*Schematics20ApiV2) NewGetDatasetVariableValueOptions(datasetID string, varName string) *GetDatasetVariableValueOptions {
	return &GetDatasetVariableValueOptions{
		DatasetID: core.StringPtr(datasetID),
		VarName:   core.StringPtr(varName),
	}
}

// SetDatasetID : Allow user to set DatasetID
func (options *GetDatasetVariableValueOptions) SetDatasetID(datasetID string) *GetDatasetVariableValueOptions {
	options.DatasetID = core.StringPtr(datasetID)
	return options
}

// SetVarName : Allow user to set VarName
func (options *GetDatasetVariableValueOptions) SetVarName(varName string) *GetDatasetVariableValueOptions {
	options.VarName = core.StringPtr(varName)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetDatasetVariableValueOptions) SetHeaders(param map[string]string) *GetDatasetVariableValueOptions {
	options.Headers = param
	return options
}

// GetFlowInWorkspaceOptions : The GetFlowInWorkspace options.
type GetFlowInWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Flow Id.  Use `GET /v2/workspaces/<workspace_id>/flows` API to look up the  Flow Ids in your Workspaces.
	FlowID *string `validate:"required,ne="`

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetFlowInWorkspaceOptions.Profile property.
// Level of details returned by the get method.
const (
	GetFlowInWorkspaceOptions_Profile_Detailed = "detailed"
	GetFlowInWorkspaceOptions_Profile_Ids      = "ids"
	GetFlowInWorkspaceOptions_Profile_Summary  = "summary"
)

// NewGetFlowInWorkspaceOptions : Instantiate GetFlowInWorkspaceOptions
func (*Schematics20ApiV2) NewGetFlowInWorkspaceOptions(wID string, flowID string) *GetFlowInWorkspaceOptions {
	return &GetFlowInWorkspaceOptions{
		WID:    core.StringPtr(wID),
		FlowID: core.StringPtr(flowID),
	}
}

// SetWID : Allow user to set WID
func (options *GetFlowInWorkspaceOptions) SetWID(wID string) *GetFlowInWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetFlowID : Allow user to set FlowID
func (options *GetFlowInWorkspaceOptions) SetFlowID(flowID string) *GetFlowInWorkspaceOptions {
	options.FlowID = core.StringPtr(flowID)
	return options
}

// SetProfile : Allow user to set Profile
func (options *GetFlowInWorkspaceOptions) SetProfile(profile string) *GetFlowInWorkspaceOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetFlowInWorkspaceOptions) SetHeaders(param map[string]string) *GetFlowInWorkspaceOptions {
	options.Headers = param
	return options
}

// GetInventoryOptions : The GetInventory options.
type GetInventoryOptions struct {
	// Resource Inventory Id.  Use `GET /v2/inventories` API to look up the Resource Inventory definition Ids  in your IBM
	// Cloud account.
	InventoryID *string `validate:"required,ne="`

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetInventoryOptions.Profile property.
// Level of details returned by the get method.
const (
	GetInventoryOptions_Profile_Detailed = "detailed"
	GetInventoryOptions_Profile_Ids      = "ids"
	GetInventoryOptions_Profile_Summary  = "summary"
)

// NewGetInventoryOptions : Instantiate GetInventoryOptions
func (*Schematics20ApiV2) NewGetInventoryOptions(inventoryID string) *GetInventoryOptions {
	return &GetInventoryOptions{
		InventoryID: core.StringPtr(inventoryID),
	}
}

// SetInventoryID : Allow user to set InventoryID
func (options *GetInventoryOptions) SetInventoryID(inventoryID string) *GetInventoryOptions {
	options.InventoryID = core.StringPtr(inventoryID)
	return options
}

// SetProfile : Allow user to set Profile
func (options *GetInventoryOptions) SetProfile(profile string) *GetInventoryOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetInventoryOptions) SetHeaders(param map[string]string) *GetInventoryOptions {
	options.Headers = param
	return options
}

// GetInventoryVariableValueOptions : The GetInventoryVariableValue options.
type GetInventoryVariableValueOptions struct {
	// Resource Inventory Id.  Use `GET /v2/inventories` API to look up the Resource Inventory definition Ids  in your IBM
	// Cloud account.
	InventoryID *string `validate:"required,ne="`

	// Name of the variable.
	VarName *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetInventoryVariableValueOptions : Instantiate GetInventoryVariableValueOptions
func (*Schematics20ApiV2) NewGetInventoryVariableValueOptions(inventoryID string, varName string) *GetInventoryVariableValueOptions {
	return &GetInventoryVariableValueOptions{
		InventoryID: core.StringPtr(inventoryID),
		VarName:     core.StringPtr(varName),
	}
}

// SetInventoryID : Allow user to set InventoryID
func (options *GetInventoryVariableValueOptions) SetInventoryID(inventoryID string) *GetInventoryVariableValueOptions {
	options.InventoryID = core.StringPtr(inventoryID)
	return options
}

// SetVarName : Allow user to set VarName
func (options *GetInventoryVariableValueOptions) SetVarName(varName string) *GetInventoryVariableValueOptions {
	options.VarName = core.StringPtr(varName)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetInventoryVariableValueOptions) SetHeaders(param map[string]string) *GetInventoryVariableValueOptions {
	options.Headers = param
	return options
}

// GetJobFilesOptions : The GetJobFiles options.
type GetJobFilesOptions struct {
	// Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
	JobID *string `validate:"required,ne="`

	// The type of file you want to download eg.state_file, plan_json.
	FileType *string `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetJobFilesOptions.FileType property.
// The type of file you want to download eg.state_file, plan_json.
const (
	GetJobFilesOptions_FileType_PlanJSON  = "plan_json"
	GetJobFilesOptions_FileType_StateFile = "state_file"
)

// NewGetJobFilesOptions : Instantiate GetJobFilesOptions
func (*Schematics20ApiV2) NewGetJobFilesOptions(jobID string, fileType string) *GetJobFilesOptions {
	return &GetJobFilesOptions{
		JobID:    core.StringPtr(jobID),
		FileType: core.StringPtr(fileType),
	}
}

// SetJobID : Allow user to set JobID
func (options *GetJobFilesOptions) SetJobID(jobID string) *GetJobFilesOptions {
	options.JobID = core.StringPtr(jobID)
	return options
}

// SetFileType : Allow user to set FileType
func (options *GetJobFilesOptions) SetFileType(fileType string) *GetJobFilesOptions {
	options.FileType = core.StringPtr(fileType)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetJobFilesOptions) SetHeaders(param map[string]string) *GetJobFilesOptions {
	options.Headers = param
	return options
}

// GetJobOptions : The GetJob options.
type GetJobOptions struct {
	// Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
	JobID *string `validate:"required,ne="`

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetJobOptions.Profile property.
// Level of details returned by the get method.
const (
	GetJobOptions_Profile_Detailed = "detailed"
	GetJobOptions_Profile_Ids      = "ids"
	GetJobOptions_Profile_Summary  = "summary"
)

// NewGetJobOptions : Instantiate GetJobOptions
func (*Schematics20ApiV2) NewGetJobOptions(jobID string) *GetJobOptions {
	return &GetJobOptions{
		JobID: core.StringPtr(jobID),
	}
}

// SetJobID : Allow user to set JobID
func (options *GetJobOptions) SetJobID(jobID string) *GetJobOptions {
	options.JobID = core.StringPtr(jobID)
	return options
}

// SetProfile : Allow user to set Profile
func (options *GetJobOptions) SetProfile(profile string) *GetJobOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetJobOptions) SetHeaders(param map[string]string) *GetJobOptions {
	options.Headers = param
	return options
}

// GetJobWorkspaceInputValueOptions : The GetJobWorkspaceInputValue options.
type GetJobWorkspaceInputValueOptions struct {
	// Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
	JobID *string `validate:"required,ne="`

	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Name of the variable.
	VarName *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetJobWorkspaceInputValueOptions : Instantiate GetJobWorkspaceInputValueOptions
func (*Schematics20ApiV2) NewGetJobWorkspaceInputValueOptions(jobID string, wID string, varName string) *GetJobWorkspaceInputValueOptions {
	return &GetJobWorkspaceInputValueOptions{
		JobID:   core.StringPtr(jobID),
		WID:     core.StringPtr(wID),
		VarName: core.StringPtr(varName),
	}
}

// SetJobID : Allow user to set JobID
func (options *GetJobWorkspaceInputValueOptions) SetJobID(jobID string) *GetJobWorkspaceInputValueOptions {
	options.JobID = core.StringPtr(jobID)
	return options
}

// SetWID : Allow user to set WID
func (options *GetJobWorkspaceInputValueOptions) SetWID(wID string) *GetJobWorkspaceInputValueOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetVarName : Allow user to set VarName
func (options *GetJobWorkspaceInputValueOptions) SetVarName(varName string) *GetJobWorkspaceInputValueOptions {
	options.VarName = core.StringPtr(varName)
	return options
}

// SetOffset : Allow user to set Offset
func (options *GetJobWorkspaceInputValueOptions) SetOffset(offset int64) *GetJobWorkspaceInputValueOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *GetJobWorkspaceInputValueOptions) SetLimit(limit int64) *GetJobWorkspaceInputValueOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetJobWorkspaceInputValueOptions) SetHeaders(param map[string]string) *GetJobWorkspaceInputValueOptions {
	options.Headers = param
	return options
}

// GetJobWorkspaceOutputValueOptions : The GetJobWorkspaceOutputValue options.
type GetJobWorkspaceOutputValueOptions struct {
	// Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
	JobID *string `validate:"required,ne="`

	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Name of the variable.
	VarName *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetJobWorkspaceOutputValueOptions : Instantiate GetJobWorkspaceOutputValueOptions
func (*Schematics20ApiV2) NewGetJobWorkspaceOutputValueOptions(jobID string, wID string, varName string) *GetJobWorkspaceOutputValueOptions {
	return &GetJobWorkspaceOutputValueOptions{
		JobID:   core.StringPtr(jobID),
		WID:     core.StringPtr(wID),
		VarName: core.StringPtr(varName),
	}
}

// SetJobID : Allow user to set JobID
func (options *GetJobWorkspaceOutputValueOptions) SetJobID(jobID string) *GetJobWorkspaceOutputValueOptions {
	options.JobID = core.StringPtr(jobID)
	return options
}

// SetWID : Allow user to set WID
func (options *GetJobWorkspaceOutputValueOptions) SetWID(wID string) *GetJobWorkspaceOutputValueOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetVarName : Allow user to set VarName
func (options *GetJobWorkspaceOutputValueOptions) SetVarName(varName string) *GetJobWorkspaceOutputValueOptions {
	options.VarName = core.StringPtr(varName)
	return options
}

// SetOffset : Allow user to set Offset
func (options *GetJobWorkspaceOutputValueOptions) SetOffset(offset int64) *GetJobWorkspaceOutputValueOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *GetJobWorkspaceOutputValueOptions) SetLimit(limit int64) *GetJobWorkspaceOutputValueOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetJobWorkspaceOutputValueOptions) SetHeaders(param map[string]string) *GetJobWorkspaceOutputValueOptions {
	options.Headers = param
	return options
}

// GetJobWorkspaceSettingValueOptions : The GetJobWorkspaceSettingValue options.
type GetJobWorkspaceSettingValueOptions struct {
	// Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
	JobID *string `validate:"required,ne="`

	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Name of the variable.
	VarName *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetJobWorkspaceSettingValueOptions : Instantiate GetJobWorkspaceSettingValueOptions
func (*Schematics20ApiV2) NewGetJobWorkspaceSettingValueOptions(jobID string, wID string, varName string) *GetJobWorkspaceSettingValueOptions {
	return &GetJobWorkspaceSettingValueOptions{
		JobID:   core.StringPtr(jobID),
		WID:     core.StringPtr(wID),
		VarName: core.StringPtr(varName),
	}
}

// SetJobID : Allow user to set JobID
func (options *GetJobWorkspaceSettingValueOptions) SetJobID(jobID string) *GetJobWorkspaceSettingValueOptions {
	options.JobID = core.StringPtr(jobID)
	return options
}

// SetWID : Allow user to set WID
func (options *GetJobWorkspaceSettingValueOptions) SetWID(wID string) *GetJobWorkspaceSettingValueOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetVarName : Allow user to set VarName
func (options *GetJobWorkspaceSettingValueOptions) SetVarName(varName string) *GetJobWorkspaceSettingValueOptions {
	options.VarName = core.StringPtr(varName)
	return options
}

// SetOffset : Allow user to set Offset
func (options *GetJobWorkspaceSettingValueOptions) SetOffset(offset int64) *GetJobWorkspaceSettingValueOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *GetJobWorkspaceSettingValueOptions) SetLimit(limit int64) *GetJobWorkspaceSettingValueOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetJobWorkspaceSettingValueOptions) SetHeaders(param map[string]string) *GetJobWorkspaceSettingValueOptions {
	options.Headers = param
	return options
}

// GetKmsSettingsOptions : The GetKmsSettings options.
type GetKmsSettingsOptions struct {
	// The location of the Resource.
	Location *string `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetKmsSettingsOptions : Instantiate GetKmsSettingsOptions
func (*Schematics20ApiV2) NewGetKmsSettingsOptions(location string) *GetKmsSettingsOptions {
	return &GetKmsSettingsOptions{
		Location: core.StringPtr(location),
	}
}

// SetLocation : Allow user to set Location
func (options *GetKmsSettingsOptions) SetLocation(location string) *GetKmsSettingsOptions {
	options.Location = core.StringPtr(location)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetKmsSettingsOptions) SetHeaders(param map[string]string) *GetKmsSettingsOptions {
	options.Headers = param
	return options
}

// GetPrivateClusterOptions : The GetPrivateCluster options.
type GetPrivateClusterOptions struct {

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetPrivateClusterOptions : Instantiate GetPrivateClusterOptions
func (*Schematics20ApiV2) NewGetPrivateClusterOptions() *GetPrivateClusterOptions {
	return &GetPrivateClusterOptions{}
}

// SetHeaders : Allow user to set Headers
func (options *GetPrivateClusterOptions) SetHeaders(param map[string]string) *GetPrivateClusterOptions {
	options.Headers = param
	return options
}

// GetResourcesQueryOptions : The GetResourcesQuery options.
type GetResourcesQueryOptions struct {
	// Resource query Id.  Use `GET /v2/resource_query` API to look up the Resource query definition Ids  in your IBM Cloud
	// account.
	QueryID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetResourcesQueryOptions : Instantiate GetResourcesQueryOptions
func (*Schematics20ApiV2) NewGetResourcesQueryOptions(queryID string) *GetResourcesQueryOptions {
	return &GetResourcesQueryOptions{
		QueryID: core.StringPtr(queryID),
	}
}

// SetQueryID : Allow user to set QueryID
func (options *GetResourcesQueryOptions) SetQueryID(queryID string) *GetResourcesQueryOptions {
	options.QueryID = core.StringPtr(queryID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetResourcesQueryOptions) SetHeaders(param map[string]string) *GetResourcesQueryOptions {
	options.Headers = param
	return options
}

// GetSchematicsAccessRulesForResourceOptions : The GetSchematicsAccessRulesForResource options.
type GetSchematicsAccessRulesForResourceOptions struct {
	// Name of the schematics resource.
	ResourceName *string `validate:"required,ne="`

	// Job command name.
	CommandName *string

	// Schematics job command parameter (playbook-name, capsule-name or flow-name).
	CommandParameter *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetSchematicsAccessRulesForResourceOptions : Instantiate GetSchematicsAccessRulesForResourceOptions
func (*Schematics20ApiV2) NewGetSchematicsAccessRulesForResourceOptions(resourceName string) *GetSchematicsAccessRulesForResourceOptions {
	return &GetSchematicsAccessRulesForResourceOptions{
		ResourceName: core.StringPtr(resourceName),
	}
}

// SetResourceName : Allow user to set ResourceName
func (options *GetSchematicsAccessRulesForResourceOptions) SetResourceName(resourceName string) *GetSchematicsAccessRulesForResourceOptions {
	options.ResourceName = core.StringPtr(resourceName)
	return options
}

// SetCommandName : Allow user to set CommandName
func (options *GetSchematicsAccessRulesForResourceOptions) SetCommandName(commandName string) *GetSchematicsAccessRulesForResourceOptions {
	options.CommandName = core.StringPtr(commandName)
	return options
}

// SetCommandParameter : Allow user to set CommandParameter
func (options *GetSchematicsAccessRulesForResourceOptions) SetCommandParameter(commandParameter string) *GetSchematicsAccessRulesForResourceOptions {
	options.CommandParameter = core.StringPtr(commandParameter)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetSchematicsAccessRulesForResourceOptions) SetHeaders(param map[string]string) *GetSchematicsAccessRulesForResourceOptions {
	options.Headers = param
	return options
}

// GetSchematicsCommandNamesOptions : The GetSchematicsCommandNames options.
type GetSchematicsCommandNamesOptions struct {
	// Name of the schematics resource.
	ResourceName *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetSchematicsCommandNamesOptions : Instantiate GetSchematicsCommandNamesOptions
func (*Schematics20ApiV2) NewGetSchematicsCommandNamesOptions(resourceName string) *GetSchematicsCommandNamesOptions {
	return &GetSchematicsCommandNamesOptions{
		ResourceName: core.StringPtr(resourceName),
	}
}

// SetResourceName : Allow user to set ResourceName
func (options *GetSchematicsCommandNamesOptions) SetResourceName(resourceName string) *GetSchematicsCommandNamesOptions {
	options.ResourceName = core.StringPtr(resourceName)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetSchematicsCommandNamesOptions) SetHeaders(param map[string]string) *GetSchematicsCommandNamesOptions {
	options.Headers = param
	return options
}

// GetSchematicsInfoOptions : The GetSchematicsInfo options.
type GetSchematicsInfoOptions struct {

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetSchematicsInfoOptions : Instantiate GetSchematicsInfoOptions
func (*Schematics20ApiV2) NewGetSchematicsInfoOptions() *GetSchematicsInfoOptions {
	return &GetSchematicsInfoOptions{}
}

// SetHeaders : Allow user to set Headers
func (options *GetSchematicsInfoOptions) SetHeaders(param map[string]string) *GetSchematicsInfoOptions {
	options.Headers = param
	return options
}

// GetTemplateInWorkspaceOptions : The GetTemplateInWorkspace options.
type GetTemplateInWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The ID of the Terraform template in your workspace.  When you create a workspace, the Terraform template that  your
	// workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up the workspace IDs  and template
	// IDs or `template_data.id` in your IBM Cloud account.
	TID *string `validate:"required,ne="`

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetTemplateInWorkspaceOptions.Profile property.
// Level of details returned by the get method.
const (
	GetTemplateInWorkspaceOptions_Profile_Detailed = "detailed"
	GetTemplateInWorkspaceOptions_Profile_Ids      = "ids"
	GetTemplateInWorkspaceOptions_Profile_Summary  = "summary"
)

// NewGetTemplateInWorkspaceOptions : Instantiate GetTemplateInWorkspaceOptions
func (*Schematics20ApiV2) NewGetTemplateInWorkspaceOptions(wID string, tID string) *GetTemplateInWorkspaceOptions {
	return &GetTemplateInWorkspaceOptions{
		WID: core.StringPtr(wID),
		TID: core.StringPtr(tID),
	}
}

// SetWID : Allow user to set WID
func (options *GetTemplateInWorkspaceOptions) SetWID(wID string) *GetTemplateInWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTID : Allow user to set TID
func (options *GetTemplateInWorkspaceOptions) SetTID(tID string) *GetTemplateInWorkspaceOptions {
	options.TID = core.StringPtr(tID)
	return options
}

// SetProfile : Allow user to set Profile
func (options *GetTemplateInWorkspaceOptions) SetProfile(profile string) *GetTemplateInWorkspaceOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetTemplateInWorkspaceOptions) SetHeaders(param map[string]string) *GetTemplateInWorkspaceOptions {
	options.Headers = param
	return options
}

// GetTemplateReadmeOptions : The GetTemplateReadme options.
type GetTemplateReadmeOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The ID of the Terraform template in your workspace.  When you create a workspace, the Terraform template that  your
	// workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up the workspace IDs  and template
	// IDs or `template_data.id` in your IBM Cloud account.
	TID *string `validate:"required,ne="`

	// The type of the response: text/markdown or text/html. A character encoding can be specified by including a `charset`
	// parameter. For example, 'text/markdown;charset=utf-8'.
	Accept *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetTemplateReadmeOptions : Instantiate GetTemplateReadmeOptions
func (*Schematics20ApiV2) NewGetTemplateReadmeOptions(wID string, tID string) *GetTemplateReadmeOptions {
	return &GetTemplateReadmeOptions{
		WID: core.StringPtr(wID),
		TID: core.StringPtr(tID),
	}
}

// SetWID : Allow user to set WID
func (options *GetTemplateReadmeOptions) SetWID(wID string) *GetTemplateReadmeOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTID : Allow user to set TID
func (options *GetTemplateReadmeOptions) SetTID(tID string) *GetTemplateReadmeOptions {
	options.TID = core.StringPtr(tID)
	return options
}

// SetAccept : Allow user to set Accept
func (options *GetTemplateReadmeOptions) SetAccept(accept string) *GetTemplateReadmeOptions {
	options.Accept = core.StringPtr(accept)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetTemplateReadmeOptions) SetHeaders(param map[string]string) *GetTemplateReadmeOptions {
	options.Headers = param
	return options
}

// GetTemplateSourceOptions : The GetTemplateSource options.
type GetTemplateSourceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The ID of the Terraform template in your workspace.  When you create a workspace, the Terraform template that  your
	// workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up the workspace IDs  and template
	// IDs or `template_data.id` in your IBM Cloud account.
	TID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetTemplateSourceOptions : Instantiate GetTemplateSourceOptions
func (*Schematics20ApiV2) NewGetTemplateSourceOptions(wID string, tID string) *GetTemplateSourceOptions {
	return &GetTemplateSourceOptions{
		WID: core.StringPtr(wID),
		TID: core.StringPtr(tID),
	}
}

// SetWID : Allow user to set WID
func (options *GetTemplateSourceOptions) SetWID(wID string) *GetTemplateSourceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTID : Allow user to set TID
func (options *GetTemplateSourceOptions) SetTID(tID string) *GetTemplateSourceOptions {
	options.TID = core.StringPtr(tID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetTemplateSourceOptions) SetHeaders(param map[string]string) *GetTemplateSourceOptions {
	options.Headers = param
	return options
}

// GetTriggerOptions : The GetTrigger options.
type GetTriggerOptions struct {
	// Id of the Schematics trigger.
	TriggerID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetTriggerOptions : Instantiate GetTriggerOptions
func (*Schematics20ApiV2) NewGetTriggerOptions(triggerID string) *GetTriggerOptions {
	return &GetTriggerOptions{
		TriggerID: core.StringPtr(triggerID),
	}
}

// SetTriggerID : Allow user to set TriggerID
func (options *GetTriggerOptions) SetTriggerID(triggerID string) *GetTriggerOptions {
	options.TriggerID = core.StringPtr(triggerID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetTriggerOptions) SetHeaders(param map[string]string) *GetTriggerOptions {
	options.Headers = param
	return options
}

// GetWebhookOptions : The GetWebhook options.
type GetWebhookOptions struct {
	// Id of the Schematics web-hook.
	HookID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetWebhookOptions : Instantiate GetWebhookOptions
func (*Schematics20ApiV2) NewGetWebhookOptions(hookID string) *GetWebhookOptions {
	return &GetWebhookOptions{
		HookID: core.StringPtr(hookID),
	}
}

// SetHookID : Allow user to set HookID
func (options *GetWebhookOptions) SetHookID(hookID string) *GetWebhookOptions {
	options.HookID = core.StringPtr(hookID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetWebhookOptions) SetHeaders(param map[string]string) *GetWebhookOptions {
	options.Headers = param
	return options
}

// GetWorkspaceInputValueOptions : The GetWorkspaceInputValue options.
type GetWorkspaceInputValueOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Name of the variable.
	VarName *string `validate:"required,ne="`

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetWorkspaceInputValueOptions : Instantiate GetWorkspaceInputValueOptions
func (*Schematics20ApiV2) NewGetWorkspaceInputValueOptions(wID string, varName string) *GetWorkspaceInputValueOptions {
	return &GetWorkspaceInputValueOptions{
		WID:     core.StringPtr(wID),
		VarName: core.StringPtr(varName),
	}
}

// SetWID : Allow user to set WID
func (options *GetWorkspaceInputValueOptions) SetWID(wID string) *GetWorkspaceInputValueOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetVarName : Allow user to set VarName
func (options *GetWorkspaceInputValueOptions) SetVarName(varName string) *GetWorkspaceInputValueOptions {
	options.VarName = core.StringPtr(varName)
	return options
}

// SetLimit : Allow user to set Limit
func (options *GetWorkspaceInputValueOptions) SetLimit(limit int64) *GetWorkspaceInputValueOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetOffset : Allow user to set Offset
func (options *GetWorkspaceInputValueOptions) SetOffset(offset int64) *GetWorkspaceInputValueOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetWorkspaceInputValueOptions) SetHeaders(param map[string]string) *GetWorkspaceInputValueOptions {
	options.Headers = param
	return options
}

// GetWorkspaceOptions : The GetWorkspace options.
type GetWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetWorkspaceOptions.Profile property.
// Level of details returned by the get method.
const (
	GetWorkspaceOptions_Profile_Detailed = "detailed"
	GetWorkspaceOptions_Profile_Ids      = "ids"
	GetWorkspaceOptions_Profile_Summary  = "summary"
)

// NewGetWorkspaceOptions : Instantiate GetWorkspaceOptions
func (*Schematics20ApiV2) NewGetWorkspaceOptions(wID string) *GetWorkspaceOptions {
	return &GetWorkspaceOptions{
		WID: core.StringPtr(wID),
	}
}

// SetWID : Allow user to set WID
func (options *GetWorkspaceOptions) SetWID(wID string) *GetWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetProfile : Allow user to set Profile
func (options *GetWorkspaceOptions) SetProfile(profile string) *GetWorkspaceOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetWorkspaceOptions) SetHeaders(param map[string]string) *GetWorkspaceOptions {
	options.Headers = param
	return options
}

// GetWorkspaceOutputValueOptions : The GetWorkspaceOutputValue options.
type GetWorkspaceOutputValueOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Name of the variable.
	VarName *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetWorkspaceOutputValueOptions : Instantiate GetWorkspaceOutputValueOptions
func (*Schematics20ApiV2) NewGetWorkspaceOutputValueOptions(wID string, varName string) *GetWorkspaceOutputValueOptions {
	return &GetWorkspaceOutputValueOptions{
		WID:     core.StringPtr(wID),
		VarName: core.StringPtr(varName),
	}
}

// SetWID : Allow user to set WID
func (options *GetWorkspaceOutputValueOptions) SetWID(wID string) *GetWorkspaceOutputValueOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetVarName : Allow user to set VarName
func (options *GetWorkspaceOutputValueOptions) SetVarName(varName string) *GetWorkspaceOutputValueOptions {
	options.VarName = core.StringPtr(varName)
	return options
}

// SetOffset : Allow user to set Offset
func (options *GetWorkspaceOutputValueOptions) SetOffset(offset int64) *GetWorkspaceOutputValueOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *GetWorkspaceOutputValueOptions) SetLimit(limit int64) *GetWorkspaceOutputValueOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetWorkspaceOutputValueOptions) SetHeaders(param map[string]string) *GetWorkspaceOutputValueOptions {
	options.Headers = param
	return options
}

// GetWorkspaceSettingsValueOptions : The GetWorkspaceSettingsValue options.
type GetWorkspaceSettingsValueOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Name of the variable.
	VarName *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetWorkspaceSettingsValueOptions : Instantiate GetWorkspaceSettingsValueOptions
func (*Schematics20ApiV2) NewGetWorkspaceSettingsValueOptions(wID string, varName string) *GetWorkspaceSettingsValueOptions {
	return &GetWorkspaceSettingsValueOptions{
		WID:     core.StringPtr(wID),
		VarName: core.StringPtr(varName),
	}
}

// SetWID : Allow user to set WID
func (options *GetWorkspaceSettingsValueOptions) SetWID(wID string) *GetWorkspaceSettingsValueOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetVarName : Allow user to set VarName
func (options *GetWorkspaceSettingsValueOptions) SetVarName(varName string) *GetWorkspaceSettingsValueOptions {
	options.VarName = core.StringPtr(varName)
	return options
}

// SetOffset : Allow user to set Offset
func (options *GetWorkspaceSettingsValueOptions) SetOffset(offset int64) *GetWorkspaceSettingsValueOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *GetWorkspaceSettingsValueOptions) SetLimit(limit int64) *GetWorkspaceSettingsValueOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetWorkspaceSettingsValueOptions) SetHeaders(param map[string]string) *GetWorkspaceSettingsValueOptions {
	options.Headers = param
	return options
}

// GetWorkspaceTemplateInputValueOptions : The GetWorkspaceTemplateInputValue options.
type GetWorkspaceTemplateInputValueOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The ID of the Terraform template in your workspace.  When you create a workspace, the Terraform template that  your
	// workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up the workspace IDs  and template
	// IDs or `template_data.id` in your IBM Cloud account.
	TID *string `validate:"required,ne="`

	// Name of the variable.
	VarName *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetWorkspaceTemplateInputValueOptions : Instantiate GetWorkspaceTemplateInputValueOptions
func (*Schematics20ApiV2) NewGetWorkspaceTemplateInputValueOptions(wID string, tID string, varName string) *GetWorkspaceTemplateInputValueOptions {
	return &GetWorkspaceTemplateInputValueOptions{
		WID:     core.StringPtr(wID),
		TID:     core.StringPtr(tID),
		VarName: core.StringPtr(varName),
	}
}

// SetWID : Allow user to set WID
func (options *GetWorkspaceTemplateInputValueOptions) SetWID(wID string) *GetWorkspaceTemplateInputValueOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTID : Allow user to set TID
func (options *GetWorkspaceTemplateInputValueOptions) SetTID(tID string) *GetWorkspaceTemplateInputValueOptions {
	options.TID = core.StringPtr(tID)
	return options
}

// SetVarName : Allow user to set VarName
func (options *GetWorkspaceTemplateInputValueOptions) SetVarName(varName string) *GetWorkspaceTemplateInputValueOptions {
	options.VarName = core.StringPtr(varName)
	return options
}

// SetOffset : Allow user to set Offset
func (options *GetWorkspaceTemplateInputValueOptions) SetOffset(offset int64) *GetWorkspaceTemplateInputValueOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *GetWorkspaceTemplateInputValueOptions) SetLimit(limit int64) *GetWorkspaceTemplateInputValueOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetWorkspaceTemplateInputValueOptions) SetHeaders(param map[string]string) *GetWorkspaceTemplateInputValueOptions {
	options.Headers = param
	return options
}

// GetWorkspaceTemplateOutputValueOptions : The GetWorkspaceTemplateOutputValue options.
type GetWorkspaceTemplateOutputValueOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The ID of the Terraform template in your workspace.  When you create a workspace, the Terraform template that  your
	// workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up the workspace IDs  and template
	// IDs or `template_data.id` in your IBM Cloud account.
	TID *string `validate:"required,ne="`

	// Name of the variable.
	VarName *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetWorkspaceTemplateOutputValueOptions : Instantiate GetWorkspaceTemplateOutputValueOptions
func (*Schematics20ApiV2) NewGetWorkspaceTemplateOutputValueOptions(wID string, tID string, varName string) *GetWorkspaceTemplateOutputValueOptions {
	return &GetWorkspaceTemplateOutputValueOptions{
		WID:     core.StringPtr(wID),
		TID:     core.StringPtr(tID),
		VarName: core.StringPtr(varName),
	}
}

// SetWID : Allow user to set WID
func (options *GetWorkspaceTemplateOutputValueOptions) SetWID(wID string) *GetWorkspaceTemplateOutputValueOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTID : Allow user to set TID
func (options *GetWorkspaceTemplateOutputValueOptions) SetTID(tID string) *GetWorkspaceTemplateOutputValueOptions {
	options.TID = core.StringPtr(tID)
	return options
}

// SetVarName : Allow user to set VarName
func (options *GetWorkspaceTemplateOutputValueOptions) SetVarName(varName string) *GetWorkspaceTemplateOutputValueOptions {
	options.VarName = core.StringPtr(varName)
	return options
}

// SetOffset : Allow user to set Offset
func (options *GetWorkspaceTemplateOutputValueOptions) SetOffset(offset int64) *GetWorkspaceTemplateOutputValueOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *GetWorkspaceTemplateOutputValueOptions) SetLimit(limit int64) *GetWorkspaceTemplateOutputValueOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetWorkspaceTemplateOutputValueOptions) SetHeaders(param map[string]string) *GetWorkspaceTemplateOutputValueOptions {
	options.Headers = param
	return options
}

// GetWorkspaceTemplateSettingValueOptions : The GetWorkspaceTemplateSettingValue options.
type GetWorkspaceTemplateSettingValueOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The ID of the Terraform template in your workspace.  When you create a workspace, the Terraform template that  your
	// workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up the workspace IDs  and template
	// IDs or `template_data.id` in your IBM Cloud account.
	TID *string `validate:"required,ne="`

	// Name of the variable.
	VarName *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetWorkspaceTemplateSettingValueOptions : Instantiate GetWorkspaceTemplateSettingValueOptions
func (*Schematics20ApiV2) NewGetWorkspaceTemplateSettingValueOptions(wID string, tID string, varName string) *GetWorkspaceTemplateSettingValueOptions {
	return &GetWorkspaceTemplateSettingValueOptions{
		WID:     core.StringPtr(wID),
		TID:     core.StringPtr(tID),
		VarName: core.StringPtr(varName),
	}
}

// SetWID : Allow user to set WID
func (options *GetWorkspaceTemplateSettingValueOptions) SetWID(wID string) *GetWorkspaceTemplateSettingValueOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTID : Allow user to set TID
func (options *GetWorkspaceTemplateSettingValueOptions) SetTID(tID string) *GetWorkspaceTemplateSettingValueOptions {
	options.TID = core.StringPtr(tID)
	return options
}

// SetVarName : Allow user to set VarName
func (options *GetWorkspaceTemplateSettingValueOptions) SetVarName(varName string) *GetWorkspaceTemplateSettingValueOptions {
	options.VarName = core.StringPtr(varName)
	return options
}

// SetOffset : Allow user to set Offset
func (options *GetWorkspaceTemplateSettingValueOptions) SetOffset(offset int64) *GetWorkspaceTemplateSettingValueOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *GetWorkspaceTemplateSettingValueOptions) SetLimit(limit int64) *GetWorkspaceTemplateSettingValueOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *GetWorkspaceTemplateSettingValueOptions) SetHeaders(param map[string]string) *GetWorkspaceTemplateSettingValueOptions {
	options.Headers = param
	return options
}

// InjectTerraformTemplateInnerTftParametersItem : InjectTerraformTemplateInnerTftParametersItem struct
type InjectTerraformTemplateInnerTftParametersItem struct {
	// Key name to replace.
	Name *string `json:"name,omitempty"`

	// Value to replace.
	Value *string `json:"value,omitempty"`
}

// UnmarshalInjectTerraformTemplateInnerTftParametersItem unmarshals an instance of InjectTerraformTemplateInnerTftParametersItem from the specified map of raw messages.
func UnmarshalInjectTerraformTemplateInnerTftParametersItem(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(InjectTerraformTemplateInnerTftParametersItem)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// InjectTerraformTemplateInner : InjectTerraformTemplateInner struct
type InjectTerraformTemplateInner struct {
	// Git repo url hosting terraform template files.
	TftGitURL *string `json:"tft_git_url,omitempty"`

	// Token to access the git repository (Optional).
	TftGitToken *string `json:"tft_git_token,omitempty"`

	// Optional prefix word to append to files (Optional).
	TftPrefix *string `json:"tft_prefix,omitempty"`

	// Injection type. Default is 'override'.
	InjectionType *string `json:"injection_type,omitempty"`

	// Terraform template name. Maps to folder name in git repo.
	TftName *string `json:"tft_name,omitempty"`

	TftParameters []InjectTerraformTemplateInnerTftParametersItem `json:"tft_parameters,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of InjectTerraformTemplateInner
func (o *InjectTerraformTemplateInner) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of InjectTerraformTemplateInner
func (o *InjectTerraformTemplateInner) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of InjectTerraformTemplateInner
func (o *InjectTerraformTemplateInner) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of InjectTerraformTemplateInner
func (o *InjectTerraformTemplateInner) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TftGitURL != nil {
		m["tft_git_url"] = o.TftGitURL
	}
	if o.TftGitToken != nil {
		m["tft_git_token"] = o.TftGitToken
	}
	if o.TftPrefix != nil {
		m["tft_prefix"] = o.TftPrefix
	}
	if o.InjectionType != nil {
		m["injection_type"] = o.InjectionType
	}
	if o.TftName != nil {
		m["tft_name"] = o.TftName
	}
	if o.TftParameters != nil {
		m["tft_parameters"] = o.TftParameters
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalInjectTerraformTemplateInner unmarshals an instance of InjectTerraformTemplateInner from the specified map of raw messages.
func UnmarshalInjectTerraformTemplateInner(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(InjectTerraformTemplateInner)
	err = core.UnmarshalPrimitive(m, "tft_git_url", &obj.TftGitURL)
	if err != nil {
		return
	}
	delete(m, "tft_git_url")
	err = core.UnmarshalPrimitive(m, "tft_git_token", &obj.TftGitToken)
	if err != nil {
		return
	}
	delete(m, "tft_git_token")
	err = core.UnmarshalPrimitive(m, "tft_prefix", &obj.TftPrefix)
	if err != nil {
		return
	}
	delete(m, "tft_prefix")
	err = core.UnmarshalPrimitive(m, "injection_type", &obj.InjectionType)
	if err != nil {
		return
	}
	delete(m, "injection_type")
	err = core.UnmarshalPrimitive(m, "tft_name", &obj.TftName)
	if err != nil {
		return
	}
	delete(m, "tft_name")
	err = core.UnmarshalModel(m, "tft_parameters", &obj.TftParameters, UnmarshalInjectTerraformTemplateInnerTftParametersItem)
	if err != nil {
		return
	}
	delete(m, "tft_parameters")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// InputVariableDataList : List of Input variable data record response.
type InputVariableDataList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of input variables and values.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of InputVariableDataList
func (o *InputVariableDataList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of InputVariableDataList
func (o *InputVariableDataList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of InputVariableDataList
func (o *InputVariableDataList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of InputVariableDataList
func (o *InputVariableDataList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalInputVariableDataList unmarshals an instance of InputVariableDataList from the specified map of raw messages.
func UnmarshalInputVariableDataList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(InputVariableDataList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// InventoryResourceDefinition : Inventory definition.
type InventoryResourceDefinition struct {
	// The unique name of your Inventory definition. The name can be up to 128 characters long and can include alphanumeric
	// characters, spaces, dashes, and underscores.
	Name *string `json:"name,omitempty"`

	// The description of your Inventory definition. The description can be up to 2048 characters long in size.
	Description *string `json:"description,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Resource-group name for the Inventory definition.   By default, Inventory definition will be created in Default
	// Resource Group.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Input inventory of host and host group for the playbook, in the `.ini` file format.
	InventoriesIni *string `json:"inventories_ini,omitempty"`

	// Input resource query definitions that is used to dynamically generate the inventory of host and host group for the
	// playbook.
	ResourceQueries []string `json:"resource_queries,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the InventoryResourceDefinition.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	InventoryResourceDefinition_Location_EuDe    = "eu-de"
	InventoryResourceDefinition_Location_EuGb    = "eu-gb"
	InventoryResourceDefinition_Location_UsEast  = "us-east"
	InventoryResourceDefinition_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of InventoryResourceDefinition
func (o *InventoryResourceDefinition) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of InventoryResourceDefinition
func (o *InventoryResourceDefinition) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of InventoryResourceDefinition
func (o *InventoryResourceDefinition) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of InventoryResourceDefinition
func (o *InventoryResourceDefinition) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.InventoriesIni != nil {
		m["inventories_ini"] = o.InventoriesIni
	}
	if o.ResourceQueries != nil {
		m["resource_queries"] = o.ResourceQueries
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalInventoryResourceDefinition unmarshals an instance of InventoryResourceDefinition from the specified map of raw messages.
func UnmarshalInventoryResourceDefinition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(InventoryResourceDefinition)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "inventories_ini", &obj.InventoriesIni)
	if err != nil {
		return
	}
	delete(m, "inventories_ini")
	err = core.UnmarshalPrimitive(m, "resource_queries", &obj.ResourceQueries)
	if err != nil {
		return
	}
	delete(m, "resource_queries")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// InventoryResourceRecord : Complete inventory definition details.
type InventoryResourceRecord struct {
	// The unique name of your Inventory.  The name can be up to 128 characters long and can include alphanumeric
	// characters, spaces, dashes, and underscores.
	Name *string `json:"name,omitempty"`

	// Inventory id.
	ID *string `json:"id,omitempty"`

	// The description of your Inventory.  The description can be up to 2048 characters long in size.
	Description *string `json:"description,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Resource-group name for the Inventory definition.  By default, Inventory will be created in Default Resource Group.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Inventory creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the Inventory.
	CreatedBy *string `json:"created_by,omitempty"`

	// Inventory updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the Inventory.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Input inventory of host and host group for the playbook,  in the .ini file format.
	InventoriesIni *string `json:"inventories_ini,omitempty"`

	// Input resource queries that is used to dynamically generate  the inventory of host and host group for the playbook.
	ResourceQueries []string `json:"resource_queries,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the InventoryResourceRecord.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	InventoryResourceRecord_Location_EuDe    = "eu-de"
	InventoryResourceRecord_Location_EuGb    = "eu-gb"
	InventoryResourceRecord_Location_UsEast  = "us-east"
	InventoryResourceRecord_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of InventoryResourceRecord
func (o *InventoryResourceRecord) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of InventoryResourceRecord
func (o *InventoryResourceRecord) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of InventoryResourceRecord
func (o *InventoryResourceRecord) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of InventoryResourceRecord
func (o *InventoryResourceRecord) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.InventoriesIni != nil {
		m["inventories_ini"] = o.InventoriesIni
	}
	if o.ResourceQueries != nil {
		m["resource_queries"] = o.ResourceQueries
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalInventoryResourceRecord unmarshals an instance of InventoryResourceRecord from the specified map of raw messages.
func UnmarshalInventoryResourceRecord(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(InventoryResourceRecord)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalPrimitive(m, "inventories_ini", &obj.InventoriesIni)
	if err != nil {
		return
	}
	delete(m, "inventories_ini")
	err = core.UnmarshalPrimitive(m, "resource_queries", &obj.ResourceQueries)
	if err != nil {
		return
	}
	delete(m, "resource_queries")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// InventoryResourceRecordList : List of Inventory definition records.
type InventoryResourceRecordList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of inventory definition records.
	Inventories []InventoryResourceRecord `json:"inventories,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of InventoryResourceRecordList
func (o *InventoryResourceRecordList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of InventoryResourceRecordList
func (o *InventoryResourceRecordList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of InventoryResourceRecordList
func (o *InventoryResourceRecordList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of InventoryResourceRecordList
func (o *InventoryResourceRecordList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Inventories != nil {
		m["inventories"] = o.Inventories
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalInventoryResourceRecordList unmarshals an instance of InventoryResourceRecordList from the specified map of raw messages.
func UnmarshalInventoryResourceRecordList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(InventoryResourceRecordList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "inventories", &obj.Inventories, UnmarshalInventoryResourceRecord)
	if err != nil {
		return
	}
	delete(m, "inventories")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ItemMetadata : Variables and operations metadata of the catalog item.  Variable metadata will be fetched from the template in the
// repo. Operations metadata will be fetched from metadataFileName in the repo.
type ItemMetadata struct {
	// Catalog item Id.
	ItemID *string `json:"item_id,omitempty"`

	// offering Id.
	OfferingID *string `json:"offering_id" validate:"required"`

	// Offering kind id.
	OfferingKindID *string `json:"offering_kind_id,omitempty"`

	// Offering version id.
	OfferingVersionID *string `json:"offering_version_id" validate:"required"`

	// Catalog item name.
	Name *string `json:"name,omitempty"`

	// Catalog item description.
	Description *string `json:"description,omitempty"`

	// List of supported operation.
	Operations []string `json:"operations,omitempty"`

	// Input variables metadata.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Input environment variables metadata.
	Settings []VariableData `json:"settings,omitempty"`

	// Output variables metadata.
	Outputs []VariableData `json:"outputs,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the ItemMetadata.Operations property.
// Name of the fulfilment job operations.
const (
	ItemMetadata_Operations_Configure = "configure"
	ItemMetadata_Operations_Destroy   = "destroy"
	ItemMetadata_Operations_Dryrun    = "dryrun"
	ItemMetadata_Operations_Install   = "install"
	ItemMetadata_Operations_Operate   = "operate"
	ItemMetadata_Operations_Preview   = "preview"
	ItemMetadata_Operations_Uninstall = "uninstall"
	ItemMetadata_Operations_Update    = "update"
)

// SetProperty allows the user to set an arbitrary property on an instance of ItemMetadata
func (o *ItemMetadata) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ItemMetadata
func (o *ItemMetadata) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ItemMetadata
func (o *ItemMetadata) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ItemMetadata
func (o *ItemMetadata) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ItemID != nil {
		m["item_id"] = o.ItemID
	}
	if o.OfferingID != nil {
		m["offering_id"] = o.OfferingID
	}
	if o.OfferingKindID != nil {
		m["offering_kind_id"] = o.OfferingKindID
	}
	if o.OfferingVersionID != nil {
		m["offering_version_id"] = o.OfferingVersionID
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.Operations != nil {
		m["operations"] = o.Operations
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Settings != nil {
		m["settings"] = o.Settings
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalItemMetadata unmarshals an instance of ItemMetadata from the specified map of raw messages.
func UnmarshalItemMetadata(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ItemMetadata)
	err = core.UnmarshalPrimitive(m, "item_id", &obj.ItemID)
	if err != nil {
		return
	}
	delete(m, "item_id")
	err = core.UnmarshalPrimitive(m, "offering_id", &obj.OfferingID)
	if err != nil {
		return
	}
	delete(m, "offering_id")
	err = core.UnmarshalPrimitive(m, "offering_kind_id", &obj.OfferingKindID)
	if err != nil {
		return
	}
	delete(m, "offering_kind_id")
	err = core.UnmarshalPrimitive(m, "offering_version_id", &obj.OfferingVersionID)
	if err != nil {
		return
	}
	delete(m, "offering_version_id")
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "operations", &obj.Operations)
	if err != nil {
		return
	}
	delete(m, "operations")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "settings", &obj.Settings, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "settings")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "outputs")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ItemSKU : Store Keeping Unit for the Item in the Cart order.
type ItemSKU struct {
	// The ID of the underlying SKU object.
	SkuID *string `json:"sku_id" validate:"required"`

	// SKU Type - Workspace / Ansible.
	SkuType *string `json:"sku_type" validate:"required"`

	// System lock status.
	SkuSysLock *SystemLock `json:"sku_sys_lock,omitempty"`

	// Status of the underlying schematics objects used to fullfil CartOrder.
	SkuUserState *SKUUserState `json:"sku_user_state,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// NewItemSKU : Instantiate ItemSKU (Generic Model Constructor)
func (*Schematics20ApiV2) NewItemSKU(skuID string, skuType string) (model *ItemSKU, err error) {
	model = &ItemSKU{
		SkuID:   core.StringPtr(skuID),
		SkuType: core.StringPtr(skuType),
	}
	err = core.ValidateStruct(model, "required parameters")
	return
}

// SetProperty allows the user to set an arbitrary property on an instance of ItemSKU
func (o *ItemSKU) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ItemSKU
func (o *ItemSKU) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ItemSKU
func (o *ItemSKU) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ItemSKU
func (o *ItemSKU) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.SkuID != nil {
		m["sku_id"] = o.SkuID
	}
	if o.SkuType != nil {
		m["sku_type"] = o.SkuType
	}
	if o.SkuSysLock != nil {
		m["sku_sys_lock"] = o.SkuSysLock
	}
	if o.SkuUserState != nil {
		m["sku_user_state"] = o.SkuUserState
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalItemSKU unmarshals an instance of ItemSKU from the specified map of raw messages.
func UnmarshalItemSKU(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ItemSKU)
	err = core.UnmarshalPrimitive(m, "sku_id", &obj.SkuID)
	if err != nil {
		return
	}
	delete(m, "sku_id")
	err = core.UnmarshalPrimitive(m, "sku_type", &obj.SkuType)
	if err != nil {
		return
	}
	delete(m, "sku_type")
	err = core.UnmarshalModel(m, "sku_sys_lock", &obj.SkuSysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sku_sys_lock")
	err = core.UnmarshalModel(m, "sku_user_state", &obj.SkuUserState, UnmarshalSKUUserState)
	if err != nil {
		return
	}
	delete(m, "sku_user_state")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Job : Complete Job with user inputs and system generated data.
type Job struct {
	// Name of the Schematics automation resource.
	CommandObject *string `json:"command_object,omitempty"`

	// Job command object id (workspace-id, action-id).
	CommandObjectID *string `json:"command_object_id,omitempty"`

	// Schematics job command name.
	CommandName *string `json:"command_name,omitempty"`

	// Schematics job command parameter (playbook-name).
	CommandParameter *string `json:"command_parameter,omitempty"`

	// Command line options for the command.
	CommandOptions []string `json:"command_options,omitempty"`

	// Job inputs used by Action or Workspace.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Environment variables used by the Job while performing Action or Workspace.
	Settings []VariableData `json:"settings,omitempty"`

	// User defined tags, while running the job.
	Tags []string `json:"tags,omitempty"`

	// Job ID.
	ID *string `json:"id,omitempty"`

	// Job name, uniquely derived from the related Workspace or Action.
	Name *string `json:"name,omitempty"`

	// The description of your job is derived from the related action or workspace.  The description can be up to 2048
	// characters long in size.
	Description *string `json:"description,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Resource-group name derived from the related Workspace or Action.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Job submission time.
	SubmittedAt *strfmt.DateTime `json:"submitted_at,omitempty"`

	// Email address of user who submitted the job.
	SubmittedBy *string `json:"submitted_by,omitempty"`

	// Job start time.
	StartAt *strfmt.DateTime `json:"start_at,omitempty"`

	// Job end time.
	EndAt *strfmt.DateTime `json:"end_at,omitempty"`

	// Duration of job execution; example 40 sec.
	Duration *string `json:"duration,omitempty"`

	// Job Status.
	Status *JobStatus `json:"status,omitempty"`

	// Job data.
	Data *JobData `json:"data,omitempty"`

	// Describes a bastion resource.
	Bastion *BastionResourceDefinition `json:"bastion,omitempty"`

	// Job log summary record.
	LogSummary *JobLogSummary `json:"log_summary,omitempty"`

	// Job log store URL.
	LogStoreURL *string `json:"log_store_url,omitempty"`

	// Job state store URL.
	StateStoreURL *string `json:"state_store_url,omitempty"`

	// Job results store URL.
	ResultsURL *string `json:"results_url,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// ID of the Job Runner.
	JobRunnerID *string `json:"job_runner_id,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the Job.CommandObject property.
// Name of the Schematics automation resource.
const (
	Job_CommandObject_Action      = "action"
	Job_CommandObject_Environment = "environment"
	Job_CommandObject_System      = "system"
	Job_CommandObject_Workspace   = "workspace"
)

// Constants associated with the Job.CommandName property.
// Schematics job command name.
const (
	Job_CommandName_AnsiblePlaybookCheck = "ansible_playbook_check"
	Job_CommandName_AnsiblePlaybookRun   = "ansible_playbook_run"
	Job_CommandName_CreateAction         = "create_action"
	Job_CommandName_CreateCart           = "create_cart"
	Job_CommandName_CreateEnvironment    = "create_environment"
	Job_CommandName_CreateWorkspace      = "create_workspace"
	Job_CommandName_DeleteAction         = "delete_action"
	Job_CommandName_DeleteEnvironment    = "delete_environment"
	Job_CommandName_DeleteWorkspace      = "delete_workspace"
	Job_CommandName_EnvironmentInit      = "environment_init"
	Job_CommandName_EnvironmentInstall   = "environment_install"
	Job_CommandName_EnvironmentUninstall = "environment_uninstall"
	Job_CommandName_PatchAction          = "patch_action"
	Job_CommandName_PatchWorkspace       = "patch_workspace"
	Job_CommandName_PutAction            = "put_action"
	Job_CommandName_PutEnvironment       = "put_environment"
	Job_CommandName_PutWorkspace         = "put_workspace"
	Job_CommandName_RepositoryProcess    = "repository_process"
	Job_CommandName_SystemKeyDelete      = "system_key_delete"
	Job_CommandName_SystemKeyDisable     = "system_key_disable"
	Job_CommandName_SystemKeyEnable      = "system_key_enable"
	Job_CommandName_SystemKeyRestore     = "system_key_restore"
	Job_CommandName_SystemKeyRotate      = "system_key_rotate"
	Job_CommandName_TerraformCommands    = "terraform_commands"
	Job_CommandName_WorkspaceApply       = "workspace_apply"
	Job_CommandName_WorkspaceDestroy     = "workspace_destroy"
	Job_CommandName_WorkspacePlan        = "workspace_plan"
	Job_CommandName_WorkspaceRefresh     = "workspace_refresh"
)

// Constants associated with the Job.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	Job_Location_EuDe    = "eu-de"
	Job_Location_EuGb    = "eu-gb"
	Job_Location_UsEast  = "us-east"
	Job_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of Job
func (o *Job) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of Job
func (o *Job) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of Job
func (o *Job) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of Job
func (o *Job) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.CommandObject != nil {
		m["command_object"] = o.CommandObject
	}
	if o.CommandObjectID != nil {
		m["command_object_id"] = o.CommandObjectID
	}
	if o.CommandName != nil {
		m["command_name"] = o.CommandName
	}
	if o.CommandParameter != nil {
		m["command_parameter"] = o.CommandParameter
	}
	if o.CommandOptions != nil {
		m["command_options"] = o.CommandOptions
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Settings != nil {
		m["settings"] = o.Settings
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.SubmittedAt != nil {
		m["submitted_at"] = o.SubmittedAt
	}
	if o.SubmittedBy != nil {
		m["submitted_by"] = o.SubmittedBy
	}
	if o.StartAt != nil {
		m["start_at"] = o.StartAt
	}
	if o.EndAt != nil {
		m["end_at"] = o.EndAt
	}
	if o.Duration != nil {
		m["duration"] = o.Duration
	}
	if o.Status != nil {
		m["status"] = o.Status
	}
	if o.Data != nil {
		m["data"] = o.Data
	}
	if o.Bastion != nil {
		m["bastion"] = o.Bastion
	}
	if o.LogSummary != nil {
		m["log_summary"] = o.LogSummary
	}
	if o.LogStoreURL != nil {
		m["log_store_url"] = o.LogStoreURL
	}
	if o.StateStoreURL != nil {
		m["state_store_url"] = o.StateStoreURL
	}
	if o.ResultsURL != nil {
		m["results_url"] = o.ResultsURL
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.JobRunnerID != nil {
		m["job_runner_id"] = o.JobRunnerID
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJob unmarshals an instance of Job from the specified map of raw messages.
func UnmarshalJob(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Job)
	err = core.UnmarshalPrimitive(m, "command_object", &obj.CommandObject)
	if err != nil {
		return
	}
	delete(m, "command_object")
	err = core.UnmarshalPrimitive(m, "command_object_id", &obj.CommandObjectID)
	if err != nil {
		return
	}
	delete(m, "command_object_id")
	err = core.UnmarshalPrimitive(m, "command_name", &obj.CommandName)
	if err != nil {
		return
	}
	delete(m, "command_name")
	err = core.UnmarshalPrimitive(m, "command_parameter", &obj.CommandParameter)
	if err != nil {
		return
	}
	delete(m, "command_parameter")
	err = core.UnmarshalPrimitive(m, "command_options", &obj.CommandOptions)
	if err != nil {
		return
	}
	delete(m, "command_options")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "settings", &obj.Settings, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "settings")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "submitted_at", &obj.SubmittedAt)
	if err != nil {
		return
	}
	delete(m, "submitted_at")
	err = core.UnmarshalPrimitive(m, "submitted_by", &obj.SubmittedBy)
	if err != nil {
		return
	}
	delete(m, "submitted_by")
	err = core.UnmarshalPrimitive(m, "start_at", &obj.StartAt)
	if err != nil {
		return
	}
	delete(m, "start_at")
	err = core.UnmarshalPrimitive(m, "end_at", &obj.EndAt)
	if err != nil {
		return
	}
	delete(m, "end_at")
	err = core.UnmarshalPrimitive(m, "duration", &obj.Duration)
	if err != nil {
		return
	}
	delete(m, "duration")
	err = core.UnmarshalModel(m, "status", &obj.Status, UnmarshalJobStatus)
	if err != nil {
		return
	}
	delete(m, "status")
	err = core.UnmarshalModel(m, "data", &obj.Data, UnmarshalJobData)
	if err != nil {
		return
	}
	delete(m, "data")
	err = core.UnmarshalModel(m, "bastion", &obj.Bastion, UnmarshalBastionResourceDefinition)
	if err != nil {
		return
	}
	delete(m, "bastion")
	err = core.UnmarshalModel(m, "log_summary", &obj.LogSummary, UnmarshalJobLogSummary)
	if err != nil {
		return
	}
	delete(m, "log_summary")
	err = core.UnmarshalPrimitive(m, "log_store_url", &obj.LogStoreURL)
	if err != nil {
		return
	}
	delete(m, "log_store_url")
	err = core.UnmarshalPrimitive(m, "state_store_url", &obj.StateStoreURL)
	if err != nil {
		return
	}
	delete(m, "state_store_url")
	err = core.UnmarshalPrimitive(m, "results_url", &obj.ResultsURL)
	if err != nil {
		return
	}
	delete(m, "results_url")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "job_runner_id", &obj.JobRunnerID)
	if err != nil {
		return
	}
	delete(m, "job_runner_id")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobData : Job data.
type JobData struct {
	// Type of Job.
	JobType *string `json:"job_type" validate:"required"`

	// Workspace Job data.
	WorkspaceJobData *JobDataWorkspace `json:"workspace_job_data,omitempty"`

	// Action Job data.
	ActionJobData *JobDataAction `json:"action_job_data,omitempty"`

	// Controls Job data.
	SystemJobData *JobDataSystem `json:"system_job_data,omitempty"`

	// Flow Job data.
	FlowJobData *JobDataFlow `json:"flow_job_data,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobData.JobType property.
// Type of Job.
const (
	JobData_JobType_ActionJob       = "action_job"
	JobData_JobType_FlowJob         = "flow-job"
	JobData_JobType_RepoDownloadJob = "repo_download_job"
	JobData_JobType_SystemJob       = "system_job"
	JobData_JobType_WorkspaceJob    = "workspace_job"
)

// NewJobData : Instantiate JobData (Generic Model Constructor)
func (*Schematics20ApiV2) NewJobData(jobType string) (model *JobData, err error) {
	model = &JobData{
		JobType: core.StringPtr(jobType),
	}
	err = core.ValidateStruct(model, "required parameters")
	return
}

// SetProperty allows the user to set an arbitrary property on an instance of JobData
func (o *JobData) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobData
func (o *JobData) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobData
func (o *JobData) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobData
func (o *JobData) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.JobType != nil {
		m["job_type"] = o.JobType
	}
	if o.WorkspaceJobData != nil {
		m["workspace_job_data"] = o.WorkspaceJobData
	}
	if o.ActionJobData != nil {
		m["action_job_data"] = o.ActionJobData
	}
	if o.SystemJobData != nil {
		m["system_job_data"] = o.SystemJobData
	}
	if o.FlowJobData != nil {
		m["flow_job_data"] = o.FlowJobData
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobData unmarshals an instance of JobData from the specified map of raw messages.
func UnmarshalJobData(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobData)
	err = core.UnmarshalPrimitive(m, "job_type", &obj.JobType)
	if err != nil {
		return
	}
	delete(m, "job_type")
	err = core.UnmarshalModel(m, "workspace_job_data", &obj.WorkspaceJobData, UnmarshalJobDataWorkspace)
	if err != nil {
		return
	}
	delete(m, "workspace_job_data")
	err = core.UnmarshalModel(m, "action_job_data", &obj.ActionJobData, UnmarshalJobDataAction)
	if err != nil {
		return
	}
	delete(m, "action_job_data")
	err = core.UnmarshalModel(m, "system_job_data", &obj.SystemJobData, UnmarshalJobDataSystem)
	if err != nil {
		return
	}
	delete(m, "system_job_data")
	err = core.UnmarshalModel(m, "flow_job_data", &obj.FlowJobData, UnmarshalJobDataFlow)
	if err != nil {
		return
	}
	delete(m, "flow_job_data")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobDataAction : Action Job data.
type JobDataAction struct {
	// Flow name.
	ActionName *string `json:"action_name,omitempty"`

	// Input variables data used by the Action Job.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Output variables data from the Action Job.
	Outputs []VariableData `json:"outputs,omitempty"`

	// Environment variables used by all the templates in the Action.
	Settings []VariableData `json:"settings,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Complete inventory definition details.
	InventoryRecord *InventoryResourceRecord `json:"inventory_record,omitempty"`

	// Materialized inventory details used by the Action Job, in .ini format.
	MaterializedInventory *string `json:"materialized_inventory,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobDataAction
func (o *JobDataAction) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobDataAction
func (o *JobDataAction) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobDataAction
func (o *JobDataAction) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobDataAction
func (o *JobDataAction) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ActionName != nil {
		m["action_name"] = o.ActionName
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	if o.Settings != nil {
		m["settings"] = o.Settings
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.InventoryRecord != nil {
		m["inventory_record"] = o.InventoryRecord
	}
	if o.MaterializedInventory != nil {
		m["materialized_inventory"] = o.MaterializedInventory
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobDataAction unmarshals an instance of JobDataAction from the specified map of raw messages.
func UnmarshalJobDataAction(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobDataAction)
	err = core.UnmarshalPrimitive(m, "action_name", &obj.ActionName)
	if err != nil {
		return
	}
	delete(m, "action_name")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "outputs")
	err = core.UnmarshalModel(m, "settings", &obj.Settings, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "settings")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalModel(m, "inventory_record", &obj.InventoryRecord, UnmarshalInventoryResourceRecord)
	if err != nil {
		return
	}
	delete(m, "inventory_record")
	err = core.UnmarshalPrimitive(m, "materialized_inventory", &obj.MaterializedInventory)
	if err != nil {
		return
	}
	delete(m, "materialized_inventory")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobDataCapsule : Capsule Job data.
type JobDataCapsule struct {
	// Capsule Id.
	CapsuleID *string `json:"capsule_id,omitempty"`

	// Capsule name.
	CalsuleName *string `json:"calsule_name,omitempty"`

	// Input variables data used by the Controls Job.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Results from the Capsules Job.
	Results []JobResultCapsule `json:"results,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobDataCapsule
func (o *JobDataCapsule) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobDataCapsule
func (o *JobDataCapsule) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobDataCapsule
func (o *JobDataCapsule) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobDataCapsule
func (o *JobDataCapsule) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.CapsuleID != nil {
		m["capsule_id"] = o.CapsuleID
	}
	if o.CalsuleName != nil {
		m["calsule_name"] = o.CalsuleName
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Results != nil {
		m["results"] = o.Results
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobDataCapsule unmarshals an instance of JobDataCapsule from the specified map of raw messages.
func UnmarshalJobDataCapsule(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobDataCapsule)
	err = core.UnmarshalPrimitive(m, "capsule_id", &obj.CapsuleID)
	if err != nil {
		return
	}
	delete(m, "capsule_id")
	err = core.UnmarshalPrimitive(m, "calsule_name", &obj.CalsuleName)
	if err != nil {
		return
	}
	delete(m, "calsule_name")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "results", &obj.Results, UnmarshalJobResultCapsule)
	if err != nil {
		return
	}
	delete(m, "results")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobDataFlow : Flow Job data.
type JobDataFlow struct {
	// Flow ID.
	FlowID *string `json:"flow_id,omitempty"`

	// Flow Name.
	FlowName *string `json:"flow_name,omitempty"`

	// Job data used by each workitem Job.
	Workitems []JobDataWorkItem `json:"workitems,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobDataFlow
func (o *JobDataFlow) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobDataFlow
func (o *JobDataFlow) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobDataFlow
func (o *JobDataFlow) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobDataFlow
func (o *JobDataFlow) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.FlowID != nil {
		m["flow_id"] = o.FlowID
	}
	if o.FlowName != nil {
		m["flow_name"] = o.FlowName
	}
	if o.Workitems != nil {
		m["workitems"] = o.Workitems
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobDataFlow unmarshals an instance of JobDataFlow from the specified map of raw messages.
func UnmarshalJobDataFlow(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobDataFlow)
	err = core.UnmarshalPrimitive(m, "flow_id", &obj.FlowID)
	if err != nil {
		return
	}
	delete(m, "flow_id")
	err = core.UnmarshalPrimitive(m, "flow_name", &obj.FlowName)
	if err != nil {
		return
	}
	delete(m, "flow_name")
	err = core.UnmarshalModel(m, "workitems", &obj.Workitems, UnmarshalJobDataWorkItem)
	if err != nil {
		return
	}
	delete(m, "workitems")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobDataSystem : Controls Job data.
type JobDataSystem struct {
	// Key ID for which key event is generated.
	KeyID *string `json:"key_id,omitempty"`

	// List of the schematics resource id.
	SchematicsResourceID []string `json:"schematics_resource_id,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobDataSystem
func (o *JobDataSystem) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobDataSystem
func (o *JobDataSystem) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobDataSystem
func (o *JobDataSystem) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobDataSystem
func (o *JobDataSystem) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.KeyID != nil {
		m["key_id"] = o.KeyID
	}
	if o.SchematicsResourceID != nil {
		m["schematics_resource_id"] = o.SchematicsResourceID
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobDataSystem unmarshals an instance of JobDataSystem from the specified map of raw messages.
func UnmarshalJobDataSystem(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobDataSystem)
	err = core.UnmarshalPrimitive(m, "key_id", &obj.KeyID)
	if err != nil {
		return
	}
	delete(m, "key_id")
	err = core.UnmarshalPrimitive(m, "schematics_resource_id", &obj.SchematicsResourceID)
	if err != nil {
		return
	}
	delete(m, "schematics_resource_id")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobDataTemplate : Template Job data.
type JobDataTemplate struct {
	// Template Id.
	TemplateID *string `json:"template_id,omitempty"`

	// Template name.
	TemplateName *string `json:"template_name,omitempty"`

	// Index of the template in the Flow.
	FlowIndex *int64 `json:"flow_index,omitempty"`

	// Job inputs used by the Templates.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Job output from the Templates.
	Outputs []VariableData `json:"outputs,omitempty"`

	// Environment variables used by the template.
	Settings []VariableData `json:"settings,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobDataTemplate
func (o *JobDataTemplate) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobDataTemplate
func (o *JobDataTemplate) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobDataTemplate
func (o *JobDataTemplate) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobDataTemplate
func (o *JobDataTemplate) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TemplateID != nil {
		m["template_id"] = o.TemplateID
	}
	if o.TemplateName != nil {
		m["template_name"] = o.TemplateName
	}
	if o.FlowIndex != nil {
		m["flow_index"] = o.FlowIndex
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	if o.Settings != nil {
		m["settings"] = o.Settings
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobDataTemplate unmarshals an instance of JobDataTemplate from the specified map of raw messages.
func UnmarshalJobDataTemplate(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobDataTemplate)
	err = core.UnmarshalPrimitive(m, "template_id", &obj.TemplateID)
	if err != nil {
		return
	}
	delete(m, "template_id")
	err = core.UnmarshalPrimitive(m, "template_name", &obj.TemplateName)
	if err != nil {
		return
	}
	delete(m, "template_name")
	err = core.UnmarshalPrimitive(m, "flow_index", &obj.FlowIndex)
	if err != nil {
		return
	}
	delete(m, "flow_index")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "outputs")
	err = core.UnmarshalModel(m, "settings", &obj.Settings, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "settings")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobDataWorkItem : Environment work items.
type JobDataWorkItem struct {
	// command object id.
	CommandObjectID *string `json:"command_object_id,omitempty"`

	// command object name.
	CommandObjectName *string `json:"command_object_name,omitempty"`

	// layer name.
	Layers *string `json:"layers,omitempty"`

	// Type of source for the Template.
	SourceType *string `json:"source_type,omitempty"`

	// Source of templates, playbooks, or controls.
	Source *ExternalSource `json:"source,omitempty"`

	// Input variables data for the workItem used in FlowJob.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Output variables for the workItem.
	Outputs []VariableData `json:"outputs,omitempty"`

	// Environment variables for the workItem.
	Settings []VariableData `json:"settings,omitempty"`

	// Status of the last job executed by the workitem.
	LastJob *JobDataWorkItemLastJob `json:"last_job,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobDataWorkItem.SourceType property.
// Type of source for the Template.
const (
	JobDataWorkItem_SourceType_ExternalScm      = "external_scm"
	JobDataWorkItem_SourceType_GitHub           = "git_hub"
	JobDataWorkItem_SourceType_GitHubEnterprise = "git_hub_enterprise"
	JobDataWorkItem_SourceType_GitLab           = "git_lab"
	JobDataWorkItem_SourceType_IbmCloudCatalog  = "ibm_cloud_catalog"
	JobDataWorkItem_SourceType_IbmGitLab        = "ibm_git_lab"
	JobDataWorkItem_SourceType_Local            = "local"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobDataWorkItem
func (o *JobDataWorkItem) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobDataWorkItem
func (o *JobDataWorkItem) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobDataWorkItem
func (o *JobDataWorkItem) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobDataWorkItem
func (o *JobDataWorkItem) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.CommandObjectID != nil {
		m["command_object_id"] = o.CommandObjectID
	}
	if o.CommandObjectName != nil {
		m["command_object_name"] = o.CommandObjectName
	}
	if o.Layers != nil {
		m["layers"] = o.Layers
	}
	if o.SourceType != nil {
		m["source_type"] = o.SourceType
	}
	if o.Source != nil {
		m["source"] = o.Source
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	if o.Settings != nil {
		m["settings"] = o.Settings
	}
	if o.LastJob != nil {
		m["last_job"] = o.LastJob
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobDataWorkItem unmarshals an instance of JobDataWorkItem from the specified map of raw messages.
func UnmarshalJobDataWorkItem(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobDataWorkItem)
	err = core.UnmarshalPrimitive(m, "command_object_id", &obj.CommandObjectID)
	if err != nil {
		return
	}
	delete(m, "command_object_id")
	err = core.UnmarshalPrimitive(m, "command_object_name", &obj.CommandObjectName)
	if err != nil {
		return
	}
	delete(m, "command_object_name")
	err = core.UnmarshalPrimitive(m, "layers", &obj.Layers)
	if err != nil {
		return
	}
	delete(m, "layers")
	err = core.UnmarshalPrimitive(m, "source_type", &obj.SourceType)
	if err != nil {
		return
	}
	delete(m, "source_type")
	err = core.UnmarshalModel(m, "source", &obj.Source, UnmarshalExternalSource)
	if err != nil {
		return
	}
	delete(m, "source")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "outputs")
	err = core.UnmarshalModel(m, "settings", &obj.Settings, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "settings")
	err = core.UnmarshalModel(m, "last_job", &obj.LastJob, UnmarshalJobDataWorkItemLastJob)
	if err != nil {
		return
	}
	delete(m, "last_job")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobDataWorkItemLastJob : Status of the last job executed by the workitem.
type JobDataWorkItemLastJob struct {
	// Name of the Schematics automation resource.
	CommandObject *string `json:"command_object,omitempty"`

	// command object name (workspace_name/action_name).
	CommandObjectName *string `json:"command_object_name,omitempty"`

	// Workitem command object id, maps to workspace_id or action_id.
	CommandObjectID *string `json:"command_object_id,omitempty"`

	// Schematics job command name.
	CommandName *string `json:"command_name,omitempty"`

	// Workspace job id.
	JobID *string `json:"job_id,omitempty"`

	// Status of Jobs.
	JobStatus *string `json:"job_status,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobDataWorkItemLastJob.CommandObject property.
// Name of the Schematics automation resource.
const (
	JobDataWorkItemLastJob_CommandObject_Action      = "action"
	JobDataWorkItemLastJob_CommandObject_Environment = "environment"
	JobDataWorkItemLastJob_CommandObject_System      = "system"
	JobDataWorkItemLastJob_CommandObject_Workspace   = "workspace"
)

// Constants associated with the JobDataWorkItemLastJob.CommandName property.
// Schematics job command name.
const (
	JobDataWorkItemLastJob_CommandName_AnsiblePlaybookCheck = "ansible_playbook_check"
	JobDataWorkItemLastJob_CommandName_AnsiblePlaybookRun   = "ansible_playbook_run"
	JobDataWorkItemLastJob_CommandName_CreateAction         = "create_action"
	JobDataWorkItemLastJob_CommandName_CreateCart           = "create_cart"
	JobDataWorkItemLastJob_CommandName_CreateEnvironment    = "create_environment"
	JobDataWorkItemLastJob_CommandName_CreateWorkspace      = "create_workspace"
	JobDataWorkItemLastJob_CommandName_DeleteAction         = "delete_action"
	JobDataWorkItemLastJob_CommandName_DeleteEnvironment    = "delete_environment"
	JobDataWorkItemLastJob_CommandName_DeleteWorkspace      = "delete_workspace"
	JobDataWorkItemLastJob_CommandName_EnvironmentInit      = "environment_init"
	JobDataWorkItemLastJob_CommandName_EnvironmentInstall   = "environment_install"
	JobDataWorkItemLastJob_CommandName_EnvironmentUninstall = "environment_uninstall"
	JobDataWorkItemLastJob_CommandName_PatchAction          = "patch_action"
	JobDataWorkItemLastJob_CommandName_PatchWorkspace       = "patch_workspace"
	JobDataWorkItemLastJob_CommandName_PutAction            = "put_action"
	JobDataWorkItemLastJob_CommandName_PutEnvironment       = "put_environment"
	JobDataWorkItemLastJob_CommandName_PutWorkspace         = "put_workspace"
	JobDataWorkItemLastJob_CommandName_RepositoryProcess    = "repository_process"
	JobDataWorkItemLastJob_CommandName_SystemKeyDelete      = "system_key_delete"
	JobDataWorkItemLastJob_CommandName_SystemKeyDisable     = "system_key_disable"
	JobDataWorkItemLastJob_CommandName_SystemKeyEnable      = "system_key_enable"
	JobDataWorkItemLastJob_CommandName_SystemKeyRestore     = "system_key_restore"
	JobDataWorkItemLastJob_CommandName_SystemKeyRotate      = "system_key_rotate"
	JobDataWorkItemLastJob_CommandName_TerraformCommands    = "terraform_commands"
	JobDataWorkItemLastJob_CommandName_WorkspaceApply       = "workspace_apply"
	JobDataWorkItemLastJob_CommandName_WorkspaceDestroy     = "workspace_destroy"
	JobDataWorkItemLastJob_CommandName_WorkspacePlan        = "workspace_plan"
	JobDataWorkItemLastJob_CommandName_WorkspaceRefresh     = "workspace_refresh"
)

// Constants associated with the JobDataWorkItemLastJob.JobStatus property.
// Status of Jobs.
const (
	JobDataWorkItemLastJob_JobStatus_JobCancelled  = "job_cancelled"
	JobDataWorkItemLastJob_JobStatus_JobFailed     = "job_failed"
	JobDataWorkItemLastJob_JobStatus_JobFinished   = "job_finished"
	JobDataWorkItemLastJob_JobStatus_JobInProgress = "job_in_progress"
	JobDataWorkItemLastJob_JobStatus_JobPending    = "job_pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobDataWorkItemLastJob
func (o *JobDataWorkItemLastJob) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobDataWorkItemLastJob
func (o *JobDataWorkItemLastJob) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobDataWorkItemLastJob
func (o *JobDataWorkItemLastJob) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobDataWorkItemLastJob
func (o *JobDataWorkItemLastJob) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.CommandObject != nil {
		m["command_object"] = o.CommandObject
	}
	if o.CommandObjectName != nil {
		m["command_object_name"] = o.CommandObjectName
	}
	if o.CommandObjectID != nil {
		m["command_object_id"] = o.CommandObjectID
	}
	if o.CommandName != nil {
		m["command_name"] = o.CommandName
	}
	if o.JobID != nil {
		m["job_id"] = o.JobID
	}
	if o.JobStatus != nil {
		m["job_status"] = o.JobStatus
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobDataWorkItemLastJob unmarshals an instance of JobDataWorkItemLastJob from the specified map of raw messages.
func UnmarshalJobDataWorkItemLastJob(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobDataWorkItemLastJob)
	err = core.UnmarshalPrimitive(m, "command_object", &obj.CommandObject)
	if err != nil {
		return
	}
	delete(m, "command_object")
	err = core.UnmarshalPrimitive(m, "command_object_name", &obj.CommandObjectName)
	if err != nil {
		return
	}
	delete(m, "command_object_name")
	err = core.UnmarshalPrimitive(m, "command_object_id", &obj.CommandObjectID)
	if err != nil {
		return
	}
	delete(m, "command_object_id")
	err = core.UnmarshalPrimitive(m, "command_name", &obj.CommandName)
	if err != nil {
		return
	}
	delete(m, "command_name")
	err = core.UnmarshalPrimitive(m, "job_id", &obj.JobID)
	if err != nil {
		return
	}
	delete(m, "job_id")
	err = core.UnmarshalPrimitive(m, "job_status", &obj.JobStatus)
	if err != nil {
		return
	}
	delete(m, "job_status")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobDataWorkspace : Workspace Job data.
type JobDataWorkspace struct {
	// Workspace name.
	WorkspaceName *string `json:"workspace_name,omitempty"`

	// Flow Id.
	FlowID *string `json:"flow_id,omitempty"`

	// Flow name.
	FlowName *string `json:"flow_name,omitempty"`

	// Input variables data used by the Workspace Job.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Output variables data from the Workspace Job.
	Outputs []VariableData `json:"outputs,omitempty"`

	// Environment variables used by all the templates in the Workspace.
	Settings []VariableData `json:"settings,omitempty"`

	// Input / output data of the Template in the Workspace Job.
	TemplateData []JobDataTemplate `json:"template_data,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobDataWorkspace
func (o *JobDataWorkspace) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobDataWorkspace
func (o *JobDataWorkspace) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobDataWorkspace
func (o *JobDataWorkspace) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobDataWorkspace
func (o *JobDataWorkspace) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.WorkspaceName != nil {
		m["workspace_name"] = o.WorkspaceName
	}
	if o.FlowID != nil {
		m["flow_id"] = o.FlowID
	}
	if o.FlowName != nil {
		m["flow_name"] = o.FlowName
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	if o.Settings != nil {
		m["settings"] = o.Settings
	}
	if o.TemplateData != nil {
		m["template_data"] = o.TemplateData
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobDataWorkspace unmarshals an instance of JobDataWorkspace from the specified map of raw messages.
func UnmarshalJobDataWorkspace(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobDataWorkspace)
	err = core.UnmarshalPrimitive(m, "workspace_name", &obj.WorkspaceName)
	if err != nil {
		return
	}
	delete(m, "workspace_name")
	err = core.UnmarshalPrimitive(m, "flow_id", &obj.FlowID)
	if err != nil {
		return
	}
	delete(m, "flow_id")
	err = core.UnmarshalPrimitive(m, "flow_name", &obj.FlowName)
	if err != nil {
		return
	}
	delete(m, "flow_name")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "outputs")
	err = core.UnmarshalModel(m, "settings", &obj.Settings, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "settings")
	err = core.UnmarshalModel(m, "template_data", &obj.TemplateData, UnmarshalJobDataTemplate)
	if err != nil {
		return
	}
	delete(m, "template_data")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobFileData : Output files from the Job record.
type JobFileData struct {
	// Job Id.
	JobID *string `json:"job_id,omitempty"`

	// Job name, uniquely derived from the related Workspace and Action.
	JobName *string `json:"job_name,omitempty"`

	// Summary metadata in the output files.
	Summary []JobFileDataSummary `json:"summary,omitempty"`

	// The type of output file generated by the Job.
	FileType *string `json:"file_type,omitempty"`

	// Content of the file, generated by the job.
	FileContent *string `json:"file_content,omitempty"`

	// Job file updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobFileData.FileType property.
// The type of output file generated by the Job.
const (
	JobFileData_FileType_PlanJSON  = "plan_json"
	JobFileData_FileType_StateFile = "state_file"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobFileData
func (o *JobFileData) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobFileData
func (o *JobFileData) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobFileData
func (o *JobFileData) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobFileData
func (o *JobFileData) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.JobID != nil {
		m["job_id"] = o.JobID
	}
	if o.JobName != nil {
		m["job_name"] = o.JobName
	}
	if o.Summary != nil {
		m["summary"] = o.Summary
	}
	if o.FileType != nil {
		m["file_type"] = o.FileType
	}
	if o.FileContent != nil {
		m["file_content"] = o.FileContent
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobFileData unmarshals an instance of JobFileData from the specified map of raw messages.
func UnmarshalJobFileData(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobFileData)
	err = core.UnmarshalPrimitive(m, "job_id", &obj.JobID)
	if err != nil {
		return
	}
	delete(m, "job_id")
	err = core.UnmarshalPrimitive(m, "job_name", &obj.JobName)
	if err != nil {
		return
	}
	delete(m, "job_name")
	err = core.UnmarshalModel(m, "summary", &obj.Summary, UnmarshalJobFileDataSummary)
	if err != nil {
		return
	}
	delete(m, "summary")
	err = core.UnmarshalPrimitive(m, "file_type", &obj.FileType)
	if err != nil {
		return
	}
	delete(m, "file_type")
	err = core.UnmarshalPrimitive(m, "file_content", &obj.FileContent)
	if err != nil {
		return
	}
	delete(m, "file_content")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobFileDataSummary : JobFileDataSummary struct
type JobFileDataSummary struct {
	// Summary feature name.
	Name *string `json:"name,omitempty"`

	// Summary feature type.
	Type *string `json:"type,omitempty"`

	// Summary feature value.
	Value *string `json:"value,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobFileDataSummary.Type property.
// Summary feature type.
const (
	JobFileDataSummary_Type_Number = "number"
	JobFileDataSummary_Type_String = "string"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobFileDataSummary
func (o *JobFileDataSummary) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobFileDataSummary
func (o *JobFileDataSummary) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobFileDataSummary
func (o *JobFileDataSummary) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobFileDataSummary
func (o *JobFileDataSummary) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.Value != nil {
		m["value"] = o.Value
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobFileDataSummary unmarshals an instance of JobFileDataSummary from the specified map of raw messages.
func UnmarshalJobFileDataSummary(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobFileDataSummary)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		return
	}
	delete(m, "value")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobList : List of Job details.
type JobList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of job records.
	Jobs []JobLite `json:"jobs,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobList
func (o *JobList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobList
func (o *JobList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobList
func (o *JobList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobList
func (o *JobList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Jobs != nil {
		m["jobs"] = o.Jobs
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobList unmarshals an instance of JobList from the specified map of raw messages.
func UnmarshalJobList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "jobs", &obj.Jobs, UnmarshalJobLite)
	if err != nil {
		return
	}
	delete(m, "jobs")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobLite : Job summary profile with system generated data.
type JobLite struct {
	// Job ID.
	ID *string `json:"id,omitempty"`

	// Job name, uniquely derived from the related Workspace or Action.
	Name *string `json:"name,omitempty"`

	// Job description derived from the related Workspace or Action.
	Description *string `json:"description,omitempty"`

	// Name of the Schematics automation resource.
	CommandObject *string `json:"command_object,omitempty"`

	// Job command object id (workspace-id, action-id).
	CommandObjectID *string `json:"command_object_id,omitempty"`

	// Schematics job command name.
	CommandName *string `json:"command_name,omitempty"`

	// User defined tags, while running the job.
	Tags []string `json:"tags,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Resource-group name derived from the related Workspace or Action.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Job submission time.
	SubmittedAt *strfmt.DateTime `json:"submitted_at,omitempty"`

	// Email address of user who submitted the job.
	SubmittedBy *string `json:"submitted_by,omitempty"`

	// Duration of job execution; example 40 sec.
	Duration *string `json:"duration,omitempty"`

	// Job start time.
	StartAt *strfmt.DateTime `json:"start_at,omitempty"`

	// Job end time.
	EndAt *strfmt.DateTime `json:"end_at,omitempty"`

	// Job Status.
	Status *JobStatus `json:"status,omitempty"`

	// Job log summary record.
	LogSummary *JobLogSummary `json:"log_summary,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// ID of the Job Runner.
	JobRunnerID *string `json:"job_runner_id,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobLite.CommandObject property.
// Name of the Schematics automation resource.
const (
	JobLite_CommandObject_Action      = "action"
	JobLite_CommandObject_Environment = "environment"
	JobLite_CommandObject_System      = "system"
	JobLite_CommandObject_Workspace   = "workspace"
)

// Constants associated with the JobLite.CommandName property.
// Schematics job command name.
const (
	JobLite_CommandName_AnsiblePlaybookCheck = "ansible_playbook_check"
	JobLite_CommandName_AnsiblePlaybookRun   = "ansible_playbook_run"
	JobLite_CommandName_CreateAction         = "create_action"
	JobLite_CommandName_CreateCart           = "create_cart"
	JobLite_CommandName_CreateEnvironment    = "create_environment"
	JobLite_CommandName_CreateWorkspace      = "create_workspace"
	JobLite_CommandName_DeleteAction         = "delete_action"
	JobLite_CommandName_DeleteEnvironment    = "delete_environment"
	JobLite_CommandName_DeleteWorkspace      = "delete_workspace"
	JobLite_CommandName_EnvironmentInit      = "environment_init"
	JobLite_CommandName_EnvironmentInstall   = "environment_install"
	JobLite_CommandName_EnvironmentUninstall = "environment_uninstall"
	JobLite_CommandName_PatchAction          = "patch_action"
	JobLite_CommandName_PatchWorkspace       = "patch_workspace"
	JobLite_CommandName_PutAction            = "put_action"
	JobLite_CommandName_PutEnvironment       = "put_environment"
	JobLite_CommandName_PutWorkspace         = "put_workspace"
	JobLite_CommandName_RepositoryProcess    = "repository_process"
	JobLite_CommandName_SystemKeyDelete      = "system_key_delete"
	JobLite_CommandName_SystemKeyDisable     = "system_key_disable"
	JobLite_CommandName_SystemKeyEnable      = "system_key_enable"
	JobLite_CommandName_SystemKeyRestore     = "system_key_restore"
	JobLite_CommandName_SystemKeyRotate      = "system_key_rotate"
	JobLite_CommandName_TerraformCommands    = "terraform_commands"
	JobLite_CommandName_WorkspaceApply       = "workspace_apply"
	JobLite_CommandName_WorkspaceDestroy     = "workspace_destroy"
	JobLite_CommandName_WorkspacePlan        = "workspace_plan"
	JobLite_CommandName_WorkspaceRefresh     = "workspace_refresh"
)

// Constants associated with the JobLite.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	JobLite_Location_EuDe    = "eu-de"
	JobLite_Location_EuGb    = "eu-gb"
	JobLite_Location_UsEast  = "us-east"
	JobLite_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobLite
func (o *JobLite) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobLite
func (o *JobLite) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobLite
func (o *JobLite) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobLite
func (o *JobLite) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.CommandObject != nil {
		m["command_object"] = o.CommandObject
	}
	if o.CommandObjectID != nil {
		m["command_object_id"] = o.CommandObjectID
	}
	if o.CommandName != nil {
		m["command_name"] = o.CommandName
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.SubmittedAt != nil {
		m["submitted_at"] = o.SubmittedAt
	}
	if o.SubmittedBy != nil {
		m["submitted_by"] = o.SubmittedBy
	}
	if o.Duration != nil {
		m["duration"] = o.Duration
	}
	if o.StartAt != nil {
		m["start_at"] = o.StartAt
	}
	if o.EndAt != nil {
		m["end_at"] = o.EndAt
	}
	if o.Status != nil {
		m["status"] = o.Status
	}
	if o.LogSummary != nil {
		m["log_summary"] = o.LogSummary
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.JobRunnerID != nil {
		m["job_runner_id"] = o.JobRunnerID
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobLite unmarshals an instance of JobLite from the specified map of raw messages.
func UnmarshalJobLite(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobLite)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "command_object", &obj.CommandObject)
	if err != nil {
		return
	}
	delete(m, "command_object")
	err = core.UnmarshalPrimitive(m, "command_object_id", &obj.CommandObjectID)
	if err != nil {
		return
	}
	delete(m, "command_object_id")
	err = core.UnmarshalPrimitive(m, "command_name", &obj.CommandName)
	if err != nil {
		return
	}
	delete(m, "command_name")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "submitted_at", &obj.SubmittedAt)
	if err != nil {
		return
	}
	delete(m, "submitted_at")
	err = core.UnmarshalPrimitive(m, "submitted_by", &obj.SubmittedBy)
	if err != nil {
		return
	}
	delete(m, "submitted_by")
	err = core.UnmarshalPrimitive(m, "duration", &obj.Duration)
	if err != nil {
		return
	}
	delete(m, "duration")
	err = core.UnmarshalPrimitive(m, "start_at", &obj.StartAt)
	if err != nil {
		return
	}
	delete(m, "start_at")
	err = core.UnmarshalPrimitive(m, "end_at", &obj.EndAt)
	if err != nil {
		return
	}
	delete(m, "end_at")
	err = core.UnmarshalModel(m, "status", &obj.Status, UnmarshalJobStatus)
	if err != nil {
		return
	}
	delete(m, "status")
	err = core.UnmarshalModel(m, "log_summary", &obj.LogSummary, UnmarshalJobLogSummary)
	if err != nil {
		return
	}
	delete(m, "log_summary")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "job_runner_id", &obj.JobRunnerID)
	if err != nil {
		return
	}
	delete(m, "job_runner_id")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobLog : Job Log details.
type JobLog struct {
	// Job Id.
	JobID *string `json:"job_id,omitempty"`

	// Job name, uniquely derived from the related Workspace, Action or Controls.
	JobName *string `json:"job_name,omitempty"`

	// Job log summary record.
	LogSummary *JobLogSummary `json:"log_summary,omitempty"`

	// Format of the Log text.
	Format *string `json:"format,omitempty"`

	// Log text, generated by the Job.
	Details *[]byte `json:"details,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobLog.Format property.
// Format of the Log text.
const (
	JobLog_Format_HTML     = "html"
	JobLog_Format_JSON     = "json"
	JobLog_Format_Markdown = "markdown"
	JobLog_Format_Rtf      = "rtf"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobLog
func (o *JobLog) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobLog
func (o *JobLog) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobLog
func (o *JobLog) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobLog
func (o *JobLog) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.JobID != nil {
		m["job_id"] = o.JobID
	}
	if o.JobName != nil {
		m["job_name"] = o.JobName
	}
	if o.LogSummary != nil {
		m["log_summary"] = o.LogSummary
	}
	if o.Format != nil {
		m["format"] = o.Format
	}
	if o.Details != nil {
		m["details"] = o.Details
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobLog unmarshals an instance of JobLog from the specified map of raw messages.
func UnmarshalJobLog(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobLog)
	err = core.UnmarshalPrimitive(m, "job_id", &obj.JobID)
	if err != nil {
		return
	}
	delete(m, "job_id")
	err = core.UnmarshalPrimitive(m, "job_name", &obj.JobName)
	if err != nil {
		return
	}
	delete(m, "job_name")
	err = core.UnmarshalModel(m, "log_summary", &obj.LogSummary, UnmarshalJobLogSummary)
	if err != nil {
		return
	}
	delete(m, "log_summary")
	err = core.UnmarshalPrimitive(m, "format", &obj.Format)
	if err != nil {
		return
	}
	delete(m, "format")
	err = core.UnmarshalPrimitive(m, "details", &obj.Details)
	if err != nil {
		return
	}
	delete(m, "details")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobLogSummary : Job log summary record.
type JobLogSummary struct {
	// Workspace Id.
	JobID *string `json:"job_id,omitempty"`

	// Type of Job.
	JobType *string `json:"job_type,omitempty"`

	// Job log start timestamp.
	LogStartAt *strfmt.DateTime `json:"log_start_at,omitempty"`

	// Job log update timestamp.
	LogAnalyzedTill *strfmt.DateTime `json:"log_analyzed_till,omitempty"`

	// Job log elapsed time (log_analyzed_till - log_start_at).
	ElapsedTime *float64 `json:"elapsed_time,omitempty"`

	// Job log errors.
	LogErrors []JobLogSummaryLogErrors `json:"log_errors,omitempty"`

	// Repo download Job log summary.
	RepoDownloadJob *JobLogSummaryRepoDownloadJob `json:"repo_download_job,omitempty"`

	// Workspace Job log summary.
	WorkspaceJob *JobLogSummaryWorkspaceJob `json:"workspace_job,omitempty"`

	// Flow Job log summary.
	FlowJob *JobLogSummaryFlowJob `json:"flow_job,omitempty"`

	// Flow Job log summary.
	ActionJob *JobLogSummaryActionJob `json:"action_job,omitempty"`

	// System Job log summary.
	SystemJob *JobLogSummarySystemJob `json:"system_job,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobLogSummary.JobType property.
// Type of Job.
const (
	JobLogSummary_JobType_ActionJob       = "action_job"
	JobLogSummary_JobType_FlowJob         = "flow_job"
	JobLogSummary_JobType_RepoDownloadJob = "repo_download_job"
	JobLogSummary_JobType_SystemJob       = "system_job"
	JobLogSummary_JobType_WorkspaceJob    = "workspace_job"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobLogSummary
func (o *JobLogSummary) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobLogSummary
func (o *JobLogSummary) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobLogSummary
func (o *JobLogSummary) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobLogSummary
func (o *JobLogSummary) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.JobID != nil {
		m["job_id"] = o.JobID
	}
	if o.JobType != nil {
		m["job_type"] = o.JobType
	}
	if o.LogStartAt != nil {
		m["log_start_at"] = o.LogStartAt
	}
	if o.LogAnalyzedTill != nil {
		m["log_analyzed_till"] = o.LogAnalyzedTill
	}
	if o.ElapsedTime != nil {
		m["elapsed_time"] = o.ElapsedTime
	}
	if o.LogErrors != nil {
		m["log_errors"] = o.LogErrors
	}
	if o.RepoDownloadJob != nil {
		m["repo_download_job"] = o.RepoDownloadJob
	}
	if o.WorkspaceJob != nil {
		m["workspace_job"] = o.WorkspaceJob
	}
	if o.FlowJob != nil {
		m["flow_job"] = o.FlowJob
	}
	if o.ActionJob != nil {
		m["action_job"] = o.ActionJob
	}
	if o.SystemJob != nil {
		m["system_job"] = o.SystemJob
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobLogSummary unmarshals an instance of JobLogSummary from the specified map of raw messages.
func UnmarshalJobLogSummary(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobLogSummary)
	err = core.UnmarshalPrimitive(m, "job_id", &obj.JobID)
	if err != nil {
		return
	}
	delete(m, "job_id")
	err = core.UnmarshalPrimitive(m, "job_type", &obj.JobType)
	if err != nil {
		return
	}
	delete(m, "job_type")
	err = core.UnmarshalPrimitive(m, "log_start_at", &obj.LogStartAt)
	if err != nil {
		return
	}
	delete(m, "log_start_at")
	err = core.UnmarshalPrimitive(m, "log_analyzed_till", &obj.LogAnalyzedTill)
	if err != nil {
		return
	}
	delete(m, "log_analyzed_till")
	err = core.UnmarshalPrimitive(m, "elapsed_time", &obj.ElapsedTime)
	if err != nil {
		return
	}
	delete(m, "elapsed_time")
	err = core.UnmarshalModel(m, "log_errors", &obj.LogErrors, UnmarshalJobLogSummaryLogErrors)
	if err != nil {
		return
	}
	delete(m, "log_errors")
	err = core.UnmarshalModel(m, "repo_download_job", &obj.RepoDownloadJob, UnmarshalJobLogSummaryRepoDownloadJob)
	if err != nil {
		return
	}
	delete(m, "repo_download_job")
	err = core.UnmarshalModel(m, "workspace_job", &obj.WorkspaceJob, UnmarshalJobLogSummaryWorkspaceJob)
	if err != nil {
		return
	}
	delete(m, "workspace_job")
	err = core.UnmarshalModel(m, "flow_job", &obj.FlowJob, UnmarshalJobLogSummaryFlowJob)
	if err != nil {
		return
	}
	delete(m, "flow_job")
	err = core.UnmarshalModel(m, "action_job", &obj.ActionJob, UnmarshalJobLogSummaryActionJob)
	if err != nil {
		return
	}
	delete(m, "action_job")
	err = core.UnmarshalModel(m, "system_job", &obj.SystemJob, UnmarshalJobLogSummarySystemJob)
	if err != nil {
		return
	}
	delete(m, "system_job")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobLogSummaryWorkitems : Job log summary of the flow workitem.
type JobLogSummaryWorkitems struct {
	// workspace ID.
	WorkspaceID *string `json:"workspace_id,omitempty"`

	// workspace JOB ID.
	JobID *string `json:"job_id,omitempty"`

	// Number of resources add.
	ResourcesAdd *float64 `json:"resources_add,omitempty"`

	// Number of resources modify.
	ResourcesModify *float64 `json:"resources_modify,omitempty"`

	// Number of resources destroy.
	ResourcesDestroy *float64 `json:"resources_destroy,omitempty"`

	// Log url for job.
	LogURL *string `json:"log_url,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobLogSummaryWorkitems
func (o *JobLogSummaryWorkitems) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobLogSummaryWorkitems
func (o *JobLogSummaryWorkitems) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobLogSummaryWorkitems
func (o *JobLogSummaryWorkitems) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobLogSummaryWorkitems
func (o *JobLogSummaryWorkitems) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.WorkspaceID != nil {
		m["workspace_id"] = o.WorkspaceID
	}
	if o.JobID != nil {
		m["job_id"] = o.JobID
	}
	if o.ResourcesAdd != nil {
		m["resources_add"] = o.ResourcesAdd
	}
	if o.ResourcesModify != nil {
		m["resources_modify"] = o.ResourcesModify
	}
	if o.ResourcesDestroy != nil {
		m["resources_destroy"] = o.ResourcesDestroy
	}
	if o.LogURL != nil {
		m["log_url"] = o.LogURL
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobLogSummaryWorkitems unmarshals an instance of JobLogSummaryWorkitems from the specified map of raw messages.
func UnmarshalJobLogSummaryWorkitems(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobLogSummaryWorkitems)
	err = core.UnmarshalPrimitive(m, "workspace_id", &obj.WorkspaceID)
	if err != nil {
		return
	}
	delete(m, "workspace_id")
	err = core.UnmarshalPrimitive(m, "job_id", &obj.JobID)
	if err != nil {
		return
	}
	delete(m, "job_id")
	err = core.UnmarshalPrimitive(m, "resources_add", &obj.ResourcesAdd)
	if err != nil {
		return
	}
	delete(m, "resources_add")
	err = core.UnmarshalPrimitive(m, "resources_modify", &obj.ResourcesModify)
	if err != nil {
		return
	}
	delete(m, "resources_modify")
	err = core.UnmarshalPrimitive(m, "resources_destroy", &obj.ResourcesDestroy)
	if err != nil {
		return
	}
	delete(m, "resources_destroy")
	err = core.UnmarshalPrimitive(m, "log_url", &obj.LogURL)
	if err != nil {
		return
	}
	delete(m, "log_url")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobLogSummaryActionJob : Flow Job log summary.
type JobLogSummaryActionJob struct {
	// number of targets or hosts.
	TargetCount *float64 `json:"target_count,omitempty"`

	// number of tasks in playbook.
	TaskCount *float64 `json:"task_count,omitempty"`

	// number of plays in playbook.
	PlayCount *float64 `json:"play_count,omitempty"`

	// Recap records.
	Recap *JobLogSummaryActionJobRecap `json:"recap,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobLogSummaryActionJob
func (o *JobLogSummaryActionJob) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobLogSummaryActionJob
func (o *JobLogSummaryActionJob) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobLogSummaryActionJob
func (o *JobLogSummaryActionJob) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobLogSummaryActionJob
func (o *JobLogSummaryActionJob) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TargetCount != nil {
		m["target_count"] = o.TargetCount
	}
	if o.TaskCount != nil {
		m["task_count"] = o.TaskCount
	}
	if o.PlayCount != nil {
		m["play_count"] = o.PlayCount
	}
	if o.Recap != nil {
		m["recap"] = o.Recap
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobLogSummaryActionJob unmarshals an instance of JobLogSummaryActionJob from the specified map of raw messages.
func UnmarshalJobLogSummaryActionJob(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobLogSummaryActionJob)
	err = core.UnmarshalPrimitive(m, "target_count", &obj.TargetCount)
	if err != nil {
		return
	}
	delete(m, "target_count")
	err = core.UnmarshalPrimitive(m, "task_count", &obj.TaskCount)
	if err != nil {
		return
	}
	delete(m, "task_count")
	err = core.UnmarshalPrimitive(m, "play_count", &obj.PlayCount)
	if err != nil {
		return
	}
	delete(m, "play_count")
	err = core.UnmarshalModel(m, "recap", &obj.Recap, UnmarshalJobLogSummaryActionJobRecap)
	if err != nil {
		return
	}
	delete(m, "recap")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobLogSummaryActionJobRecap : Recap records.
type JobLogSummaryActionJobRecap struct {
	// List of target or host name.
	Target []string `json:"target,omitempty"`

	// Number of OK.
	Ok *float64 `json:"ok,omitempty"`

	// Number of changed.
	Changed *float64 `json:"changed,omitempty"`

	// Number of failed.
	Failed *float64 `json:"failed,omitempty"`

	// Number of skipped.
	Skipped *float64 `json:"skipped,omitempty"`

	// Number of unreachable.
	Unreachable *float64 `json:"unreachable,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobLogSummaryActionJobRecap
func (o *JobLogSummaryActionJobRecap) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobLogSummaryActionJobRecap
func (o *JobLogSummaryActionJobRecap) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobLogSummaryActionJobRecap
func (o *JobLogSummaryActionJobRecap) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobLogSummaryActionJobRecap
func (o *JobLogSummaryActionJobRecap) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Target != nil {
		m["target"] = o.Target
	}
	if o.Ok != nil {
		m["ok"] = o.Ok
	}
	if o.Changed != nil {
		m["changed"] = o.Changed
	}
	if o.Failed != nil {
		m["failed"] = o.Failed
	}
	if o.Skipped != nil {
		m["skipped"] = o.Skipped
	}
	if o.Unreachable != nil {
		m["unreachable"] = o.Unreachable
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobLogSummaryActionJobRecap unmarshals an instance of JobLogSummaryActionJobRecap from the specified map of raw messages.
func UnmarshalJobLogSummaryActionJobRecap(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobLogSummaryActionJobRecap)
	err = core.UnmarshalPrimitive(m, "target", &obj.Target)
	if err != nil {
		return
	}
	delete(m, "target")
	err = core.UnmarshalPrimitive(m, "ok", &obj.Ok)
	if err != nil {
		return
	}
	delete(m, "ok")
	err = core.UnmarshalPrimitive(m, "changed", &obj.Changed)
	if err != nil {
		return
	}
	delete(m, "changed")
	err = core.UnmarshalPrimitive(m, "failed", &obj.Failed)
	if err != nil {
		return
	}
	delete(m, "failed")
	err = core.UnmarshalPrimitive(m, "skipped", &obj.Skipped)
	if err != nil {
		return
	}
	delete(m, "skipped")
	err = core.UnmarshalPrimitive(m, "unreachable", &obj.Unreachable)
	if err != nil {
		return
	}
	delete(m, "unreachable")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobLogSummaryFlowJob : Flow Job log summary.
type JobLogSummaryFlowJob struct {
	// Number of workitems completed successfully.
	WorkitemsCompleted *float64 `json:"workitems_completed,omitempty"`

	// Number of workitems pending in the flow.
	WorkitemsPending *float64 `json:"workitems_pending,omitempty"`

	// Number of workitems failed.
	WorkitemsFailed *float64 `json:"workitems_failed,omitempty"`

	Workitems []JobLogSummaryWorkitems `json:"workitems,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobLogSummaryFlowJob
func (o *JobLogSummaryFlowJob) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobLogSummaryFlowJob
func (o *JobLogSummaryFlowJob) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobLogSummaryFlowJob
func (o *JobLogSummaryFlowJob) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobLogSummaryFlowJob
func (o *JobLogSummaryFlowJob) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.WorkitemsCompleted != nil {
		m["workitems_completed"] = o.WorkitemsCompleted
	}
	if o.WorkitemsPending != nil {
		m["workitems_pending"] = o.WorkitemsPending
	}
	if o.WorkitemsFailed != nil {
		m["workitems_failed"] = o.WorkitemsFailed
	}
	if o.Workitems != nil {
		m["workitems"] = o.Workitems
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobLogSummaryFlowJob unmarshals an instance of JobLogSummaryFlowJob from the specified map of raw messages.
func UnmarshalJobLogSummaryFlowJob(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobLogSummaryFlowJob)
	err = core.UnmarshalPrimitive(m, "workitems_completed", &obj.WorkitemsCompleted)
	if err != nil {
		return
	}
	delete(m, "workitems_completed")
	err = core.UnmarshalPrimitive(m, "workitems_pending", &obj.WorkitemsPending)
	if err != nil {
		return
	}
	delete(m, "workitems_pending")
	err = core.UnmarshalPrimitive(m, "workitems_failed", &obj.WorkitemsFailed)
	if err != nil {
		return
	}
	delete(m, "workitems_failed")
	err = core.UnmarshalModel(m, "workitems", &obj.Workitems, UnmarshalJobLogSummaryWorkitems)
	if err != nil {
		return
	}
	delete(m, "workitems")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobLogSummaryLogErrors : JobLogSummaryLogErrors struct
type JobLogSummaryLogErrors struct {
	// Error code in the Log.
	ErrorCode *string `json:"error_code,omitempty"`

	// Summary error message in the log.
	ErrorMsg *string `json:"error_msg,omitempty"`

	// Number of occurrence.
	ErrorCount *float64 `json:"error_count,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobLogSummaryLogErrors
func (o *JobLogSummaryLogErrors) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobLogSummaryLogErrors
func (o *JobLogSummaryLogErrors) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobLogSummaryLogErrors
func (o *JobLogSummaryLogErrors) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobLogSummaryLogErrors
func (o *JobLogSummaryLogErrors) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ErrorCode != nil {
		m["error_code"] = o.ErrorCode
	}
	if o.ErrorMsg != nil {
		m["error_msg"] = o.ErrorMsg
	}
	if o.ErrorCount != nil {
		m["error_count"] = o.ErrorCount
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobLogSummaryLogErrors unmarshals an instance of JobLogSummaryLogErrors from the specified map of raw messages.
func UnmarshalJobLogSummaryLogErrors(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobLogSummaryLogErrors)
	err = core.UnmarshalPrimitive(m, "error_code", &obj.ErrorCode)
	if err != nil {
		return
	}
	delete(m, "error_code")
	err = core.UnmarshalPrimitive(m, "error_msg", &obj.ErrorMsg)
	if err != nil {
		return
	}
	delete(m, "error_msg")
	err = core.UnmarshalPrimitive(m, "error_count", &obj.ErrorCount)
	if err != nil {
		return
	}
	delete(m, "error_count")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobLogSummaryRepoDownloadJob : Repo download Job log summary.
type JobLogSummaryRepoDownloadJob struct {
	// Number of files scanned.
	ScannedFileCount *float64 `json:"scanned_file_count,omitempty"`

	// Number of files quarantined.
	QuarantinedFileCount *float64 `json:"quarantined_file_count,omitempty"`

	// Detected template or data file type.
	DetectedFiletype *string `json:"detected_filetype,omitempty"`

	// Number of inputs detected.
	InputsCount *string `json:"inputs_count,omitempty"`

	// Number of outputs detected.
	OutputsCount *string `json:"outputs_count,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobLogSummaryRepoDownloadJob
func (o *JobLogSummaryRepoDownloadJob) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobLogSummaryRepoDownloadJob
func (o *JobLogSummaryRepoDownloadJob) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobLogSummaryRepoDownloadJob
func (o *JobLogSummaryRepoDownloadJob) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobLogSummaryRepoDownloadJob
func (o *JobLogSummaryRepoDownloadJob) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ScannedFileCount != nil {
		m["scanned_file_count"] = o.ScannedFileCount
	}
	if o.QuarantinedFileCount != nil {
		m["quarantined_file_count"] = o.QuarantinedFileCount
	}
	if o.DetectedFiletype != nil {
		m["detected_filetype"] = o.DetectedFiletype
	}
	if o.InputsCount != nil {
		m["inputs_count"] = o.InputsCount
	}
	if o.OutputsCount != nil {
		m["outputs_count"] = o.OutputsCount
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobLogSummaryRepoDownloadJob unmarshals an instance of JobLogSummaryRepoDownloadJob from the specified map of raw messages.
func UnmarshalJobLogSummaryRepoDownloadJob(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobLogSummaryRepoDownloadJob)
	err = core.UnmarshalPrimitive(m, "scanned_file_count", &obj.ScannedFileCount)
	if err != nil {
		return
	}
	delete(m, "scanned_file_count")
	err = core.UnmarshalPrimitive(m, "quarantined_file_count", &obj.QuarantinedFileCount)
	if err != nil {
		return
	}
	delete(m, "quarantined_file_count")
	err = core.UnmarshalPrimitive(m, "detected_filetype", &obj.DetectedFiletype)
	if err != nil {
		return
	}
	delete(m, "detected_filetype")
	err = core.UnmarshalPrimitive(m, "inputs_count", &obj.InputsCount)
	if err != nil {
		return
	}
	delete(m, "inputs_count")
	err = core.UnmarshalPrimitive(m, "outputs_count", &obj.OutputsCount)
	if err != nil {
		return
	}
	delete(m, "outputs_count")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobLogSummarySystemJob : System Job log summary.
type JobLogSummarySystemJob struct {
	// number of targets or hosts.
	TargetCount *float64 `json:"target_count,omitempty"`

	// Number of passed.
	Success *float64 `json:"success,omitempty"`

	// Number of failed.
	Failed *float64 `json:"failed,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobLogSummarySystemJob
func (o *JobLogSummarySystemJob) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobLogSummarySystemJob
func (o *JobLogSummarySystemJob) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobLogSummarySystemJob
func (o *JobLogSummarySystemJob) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobLogSummarySystemJob
func (o *JobLogSummarySystemJob) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TargetCount != nil {
		m["target_count"] = o.TargetCount
	}
	if o.Success != nil {
		m["success"] = o.Success
	}
	if o.Failed != nil {
		m["failed"] = o.Failed
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobLogSummarySystemJob unmarshals an instance of JobLogSummarySystemJob from the specified map of raw messages.
func UnmarshalJobLogSummarySystemJob(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobLogSummarySystemJob)
	err = core.UnmarshalPrimitive(m, "target_count", &obj.TargetCount)
	if err != nil {
		return
	}
	delete(m, "target_count")
	err = core.UnmarshalPrimitive(m, "success", &obj.Success)
	if err != nil {
		return
	}
	delete(m, "success")
	err = core.UnmarshalPrimitive(m, "failed", &obj.Failed)
	if err != nil {
		return
	}
	delete(m, "failed")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobLogSummaryWorkspaceJob : Workspace Job log summary.
type JobLogSummaryWorkspaceJob struct {
	// Number of resources add.
	ResourcesAdd *float64 `json:"resources_add,omitempty"`

	// Number of resources modify.
	ResourcesModify *float64 `json:"resources_modify,omitempty"`

	// Number of resources destroy.
	ResourcesDestroy *float64 `json:"resources_destroy,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobLogSummaryWorkspaceJob
func (o *JobLogSummaryWorkspaceJob) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobLogSummaryWorkspaceJob
func (o *JobLogSummaryWorkspaceJob) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobLogSummaryWorkspaceJob
func (o *JobLogSummaryWorkspaceJob) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobLogSummaryWorkspaceJob
func (o *JobLogSummaryWorkspaceJob) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ResourcesAdd != nil {
		m["resources_add"] = o.ResourcesAdd
	}
	if o.ResourcesModify != nil {
		m["resources_modify"] = o.ResourcesModify
	}
	if o.ResourcesDestroy != nil {
		m["resources_destroy"] = o.ResourcesDestroy
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobLogSummaryWorkspaceJob unmarshals an instance of JobLogSummaryWorkspaceJob from the specified map of raw messages.
func UnmarshalJobLogSummaryWorkspaceJob(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobLogSummaryWorkspaceJob)
	err = core.UnmarshalPrimitive(m, "resources_add", &obj.ResourcesAdd)
	if err != nil {
		return
	}
	delete(m, "resources_add")
	err = core.UnmarshalPrimitive(m, "resources_modify", &obj.ResourcesModify)
	if err != nil {
		return
	}
	delete(m, "resources_modify")
	err = core.UnmarshalPrimitive(m, "resources_destroy", &obj.ResourcesDestroy)
	if err != nil {
		return
	}
	delete(m, "resources_destroy")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobResultCapsule : Capsule Job Results.
type JobResultCapsule struct {
	// Job Id.
	JobID *string `json:"job_id,omitempty"`

	// Job name, uniquely derived from the related Workspace, Action or Controls.
	JobName *string `json:"job_name,omitempty"`

	// Policy name.
	Policy *string `json:"policy,omitempty"`

	// Severity.
	Severity *int64 `json:"severity,omitempty"`

	// Job state.
	JobState *string `json:"job_state,omitempty"`

	// Job failures.
	Failures []string `json:"failures,omitempty"`

	// Job passed.
	Passed []string `json:"passed,omitempty"`

	// Capsule evidences.
	Evidences []CapsuleResultEvidences `json:"evidences,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobResultCapsule.JobState property.
// Job state.
const (
	JobResultCapsule_JobState_Failed     = "failed"
	JobResultCapsule_JobState_Success    = "success"
	JobResultCapsule_JobState_Terminated = "terminated"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobResultCapsule
func (o *JobResultCapsule) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobResultCapsule
func (o *JobResultCapsule) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobResultCapsule
func (o *JobResultCapsule) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobResultCapsule
func (o *JobResultCapsule) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.JobID != nil {
		m["job_id"] = o.JobID
	}
	if o.JobName != nil {
		m["job_name"] = o.JobName
	}
	if o.Policy != nil {
		m["policy"] = o.Policy
	}
	if o.Severity != nil {
		m["severity"] = o.Severity
	}
	if o.JobState != nil {
		m["job_state"] = o.JobState
	}
	if o.Failures != nil {
		m["failures"] = o.Failures
	}
	if o.Passed != nil {
		m["passed"] = o.Passed
	}
	if o.Evidences != nil {
		m["evidences"] = o.Evidences
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobResultCapsule unmarshals an instance of JobResultCapsule from the specified map of raw messages.
func UnmarshalJobResultCapsule(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobResultCapsule)
	err = core.UnmarshalPrimitive(m, "job_id", &obj.JobID)
	if err != nil {
		return
	}
	delete(m, "job_id")
	err = core.UnmarshalPrimitive(m, "job_name", &obj.JobName)
	if err != nil {
		return
	}
	delete(m, "job_name")
	err = core.UnmarshalPrimitive(m, "policy", &obj.Policy)
	if err != nil {
		return
	}
	delete(m, "policy")
	err = core.UnmarshalPrimitive(m, "severity", &obj.Severity)
	if err != nil {
		return
	}
	delete(m, "severity")
	err = core.UnmarshalPrimitive(m, "job_state", &obj.JobState)
	if err != nil {
		return
	}
	delete(m, "job_state")
	err = core.UnmarshalPrimitive(m, "failures", &obj.Failures)
	if err != nil {
		return
	}
	delete(m, "failures")
	err = core.UnmarshalPrimitive(m, "passed", &obj.Passed)
	if err != nil {
		return
	}
	delete(m, "passed")
	err = core.UnmarshalModel(m, "evidences", &obj.Evidences, UnmarshalCapsuleResultEvidences)
	if err != nil {
		return
	}
	delete(m, "evidences")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobStatus : Job Status.
type JobStatus struct {
	// Position of job in pending queue.
	PositionInQueue *float64 `json:"position_in_queue,omitempty"`

	// Total no. of jobs in pending queue.
	TotalInQueue *float64 `json:"total_in_queue,omitempty"`

	// Workspace Job Status.
	WorkspaceJobStatus *JobStatusWorkspace `json:"workspace_job_status,omitempty"`

	// Action Job Status.
	ActionJobStatus *JobStatusAction `json:"action_job_status,omitempty"`

	// System Job Status.
	SystemJobStatus *JobStatusSystem `json:"system_job_status,omitempty"`

	// Environment Flow JOB Status.
	FlowJobStatus *JobStatusFlow `json:"flow_job_status,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of JobStatus
func (o *JobStatus) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobStatus
func (o *JobStatus) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobStatus
func (o *JobStatus) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobStatus
func (o *JobStatus) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.PositionInQueue != nil {
		m["position_in_queue"] = o.PositionInQueue
	}
	if o.TotalInQueue != nil {
		m["total_in_queue"] = o.TotalInQueue
	}
	if o.WorkspaceJobStatus != nil {
		m["workspace_job_status"] = o.WorkspaceJobStatus
	}
	if o.ActionJobStatus != nil {
		m["action_job_status"] = o.ActionJobStatus
	}
	if o.SystemJobStatus != nil {
		m["system_job_status"] = o.SystemJobStatus
	}
	if o.FlowJobStatus != nil {
		m["flow_job_status"] = o.FlowJobStatus
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobStatus unmarshals an instance of JobStatus from the specified map of raw messages.
func UnmarshalJobStatus(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobStatus)
	err = core.UnmarshalPrimitive(m, "position_in_queue", &obj.PositionInQueue)
	if err != nil {
		return
	}
	delete(m, "position_in_queue")
	err = core.UnmarshalPrimitive(m, "total_in_queue", &obj.TotalInQueue)
	if err != nil {
		return
	}
	delete(m, "total_in_queue")
	err = core.UnmarshalModel(m, "workspace_job_status", &obj.WorkspaceJobStatus, UnmarshalJobStatusWorkspace)
	if err != nil {
		return
	}
	delete(m, "workspace_job_status")
	err = core.UnmarshalModel(m, "action_job_status", &obj.ActionJobStatus, UnmarshalJobStatusAction)
	if err != nil {
		return
	}
	delete(m, "action_job_status")
	err = core.UnmarshalModel(m, "system_job_status", &obj.SystemJobStatus, UnmarshalJobStatusSystem)
	if err != nil {
		return
	}
	delete(m, "system_job_status")
	err = core.UnmarshalModel(m, "flow_job_status", &obj.FlowJobStatus, UnmarshalJobStatusFlow)
	if err != nil {
		return
	}
	delete(m, "flow_job_status")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobStatusAction : Action Job Status.
type JobStatusAction struct {
	// Action name.
	ActionName *string `json:"action_name,omitempty"`

	// Status of Jobs.
	StatusCode *string `json:"status_code,omitempty"`

	// Action Job status message - to be displayed along with the action_status_code.
	StatusMessage *string `json:"status_message,omitempty"`

	// Status of Resources.
	BastionStatusCode *string `json:"bastion_status_code,omitempty"`

	// Bastion status message - to be displayed along with the bastion_status_code;.
	BastionStatusMessage *string `json:"bastion_status_message,omitempty"`

	// Status of Resources.
	TargetsStatusCode *string `json:"targets_status_code,omitempty"`

	// Aggregated status message for all target resources,  to be displayed along with the targets_status_code;.
	TargetsStatusMessage *string `json:"targets_status_message,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobStatusAction.StatusCode property.
// Status of Jobs.
const (
	JobStatusAction_StatusCode_JobCancelled  = "job_cancelled"
	JobStatusAction_StatusCode_JobFailed     = "job_failed"
	JobStatusAction_StatusCode_JobFinished   = "job_finished"
	JobStatusAction_StatusCode_JobInProgress = "job_in_progress"
	JobStatusAction_StatusCode_JobPending    = "job_pending"
)

// Constants associated with the JobStatusAction.BastionStatusCode property.
// Status of Resources.
const (
	JobStatusAction_BastionStatusCode_Error      = "error"
	JobStatusAction_BastionStatusCode_None       = "none"
	JobStatusAction_BastionStatusCode_Processing = "processing"
	JobStatusAction_BastionStatusCode_Ready      = "ready"
)

// Constants associated with the JobStatusAction.TargetsStatusCode property.
// Status of Resources.
const (
	JobStatusAction_TargetsStatusCode_Error      = "error"
	JobStatusAction_TargetsStatusCode_None       = "none"
	JobStatusAction_TargetsStatusCode_Processing = "processing"
	JobStatusAction_TargetsStatusCode_Ready      = "ready"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobStatusAction
func (o *JobStatusAction) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobStatusAction
func (o *JobStatusAction) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobStatusAction
func (o *JobStatusAction) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobStatusAction
func (o *JobStatusAction) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ActionName != nil {
		m["action_name"] = o.ActionName
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	if o.BastionStatusCode != nil {
		m["bastion_status_code"] = o.BastionStatusCode
	}
	if o.BastionStatusMessage != nil {
		m["bastion_status_message"] = o.BastionStatusMessage
	}
	if o.TargetsStatusCode != nil {
		m["targets_status_code"] = o.TargetsStatusCode
	}
	if o.TargetsStatusMessage != nil {
		m["targets_status_message"] = o.TargetsStatusMessage
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobStatusAction unmarshals an instance of JobStatusAction from the specified map of raw messages.
func UnmarshalJobStatusAction(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobStatusAction)
	err = core.UnmarshalPrimitive(m, "action_name", &obj.ActionName)
	if err != nil {
		return
	}
	delete(m, "action_name")
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	err = core.UnmarshalPrimitive(m, "bastion_status_code", &obj.BastionStatusCode)
	if err != nil {
		return
	}
	delete(m, "bastion_status_code")
	err = core.UnmarshalPrimitive(m, "bastion_status_message", &obj.BastionStatusMessage)
	if err != nil {
		return
	}
	delete(m, "bastion_status_message")
	err = core.UnmarshalPrimitive(m, "targets_status_code", &obj.TargetsStatusCode)
	if err != nil {
		return
	}
	delete(m, "targets_status_code")
	err = core.UnmarshalPrimitive(m, "targets_status_message", &obj.TargetsStatusMessage)
	if err != nil {
		return
	}
	delete(m, "targets_status_message")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobStatusFlow : Environment Flow JOB Status.
type JobStatusFlow struct {
	// flow id.
	FlowID *string `json:"flow_id,omitempty"`

	// flow name.
	FlowName *string `json:"flow_name,omitempty"`

	// Status of Jobs.
	StatusCode *string `json:"status_code,omitempty"`

	// Flow Job status message - to be displayed along with the status_code;.
	StatusMessage *string `json:"status_message,omitempty"`

	// Environment's individual workItem status details;.
	Workitems []JobStatusWorkitem `json:"workitems,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobStatusFlow.StatusCode property.
// Status of Jobs.
const (
	JobStatusFlow_StatusCode_JobCancelled  = "job_cancelled"
	JobStatusFlow_StatusCode_JobFailed     = "job_failed"
	JobStatusFlow_StatusCode_JobFinished   = "job_finished"
	JobStatusFlow_StatusCode_JobInProgress = "job_in_progress"
	JobStatusFlow_StatusCode_JobPending    = "job_pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobStatusFlow
func (o *JobStatusFlow) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobStatusFlow
func (o *JobStatusFlow) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobStatusFlow
func (o *JobStatusFlow) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobStatusFlow
func (o *JobStatusFlow) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.FlowID != nil {
		m["flow_id"] = o.FlowID
	}
	if o.FlowName != nil {
		m["flow_name"] = o.FlowName
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	if o.Workitems != nil {
		m["workitems"] = o.Workitems
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobStatusFlow unmarshals an instance of JobStatusFlow from the specified map of raw messages.
func UnmarshalJobStatusFlow(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobStatusFlow)
	err = core.UnmarshalPrimitive(m, "flow_id", &obj.FlowID)
	if err != nil {
		return
	}
	delete(m, "flow_id")
	err = core.UnmarshalPrimitive(m, "flow_name", &obj.FlowName)
	if err != nil {
		return
	}
	delete(m, "flow_name")
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	err = core.UnmarshalModel(m, "workitems", &obj.Workitems, UnmarshalJobStatusWorkitem)
	if err != nil {
		return
	}
	delete(m, "workitems")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobStatusSchematicsResources : schematics Resources Job Status.
type JobStatusSchematicsResources struct {
	// Status of Jobs.
	StatusCode *string `json:"status_code,omitempty"`

	// system job status message.
	StatusMessage *string `json:"status_message,omitempty"`

	// id for each resource which is targeted as a part of system job.
	SchematicsResourceID *string `json:"schematics_resource_id,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobStatusSchematicsResources.StatusCode property.
// Status of Jobs.
const (
	JobStatusSchematicsResources_StatusCode_JobCancelled  = "job_cancelled"
	JobStatusSchematicsResources_StatusCode_JobFailed     = "job_failed"
	JobStatusSchematicsResources_StatusCode_JobFinished   = "job_finished"
	JobStatusSchematicsResources_StatusCode_JobInProgress = "job_in_progress"
	JobStatusSchematicsResources_StatusCode_JobPending    = "job_pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobStatusSchematicsResources
func (o *JobStatusSchematicsResources) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobStatusSchematicsResources
func (o *JobStatusSchematicsResources) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobStatusSchematicsResources
func (o *JobStatusSchematicsResources) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobStatusSchematicsResources
func (o *JobStatusSchematicsResources) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	if o.SchematicsResourceID != nil {
		m["schematics_resource_id"] = o.SchematicsResourceID
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobStatusSchematicsResources unmarshals an instance of JobStatusSchematicsResources from the specified map of raw messages.
func UnmarshalJobStatusSchematicsResources(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobStatusSchematicsResources)
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	err = core.UnmarshalPrimitive(m, "schematics_resource_id", &obj.SchematicsResourceID)
	if err != nil {
		return
	}
	delete(m, "schematics_resource_id")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobStatusSystem : System Job Status.
type JobStatusSystem struct {
	// System job message.
	SystemStatusMessage *string `json:"system_status_message,omitempty"`

	// Status of Jobs.
	SystemStatusCode *string `json:"system_status_code,omitempty"`

	// job staus for each schematics resource.
	SchematicsResourceStatus []JobStatusSchematicsResources `json:"schematics_resource_status,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobStatusSystem.SystemStatusCode property.
// Status of Jobs.
const (
	JobStatusSystem_SystemStatusCode_JobCancelled  = "job_cancelled"
	JobStatusSystem_SystemStatusCode_JobFailed     = "job_failed"
	JobStatusSystem_SystemStatusCode_JobFinished   = "job_finished"
	JobStatusSystem_SystemStatusCode_JobInProgress = "job_in_progress"
	JobStatusSystem_SystemStatusCode_JobPending    = "job_pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobStatusSystem
func (o *JobStatusSystem) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobStatusSystem
func (o *JobStatusSystem) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobStatusSystem
func (o *JobStatusSystem) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobStatusSystem
func (o *JobStatusSystem) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.SystemStatusMessage != nil {
		m["system_status_message"] = o.SystemStatusMessage
	}
	if o.SystemStatusCode != nil {
		m["system_status_code"] = o.SystemStatusCode
	}
	if o.SchematicsResourceStatus != nil {
		m["schematics_resource_status"] = o.SchematicsResourceStatus
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobStatusSystem unmarshals an instance of JobStatusSystem from the specified map of raw messages.
func UnmarshalJobStatusSystem(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobStatusSystem)
	err = core.UnmarshalPrimitive(m, "system_status_message", &obj.SystemStatusMessage)
	if err != nil {
		return
	}
	delete(m, "system_status_message")
	err = core.UnmarshalPrimitive(m, "system_status_code", &obj.SystemStatusCode)
	if err != nil {
		return
	}
	delete(m, "system_status_code")
	err = core.UnmarshalModel(m, "schematics_resource_status", &obj.SchematicsResourceStatus, UnmarshalJobStatusSchematicsResources)
	if err != nil {
		return
	}
	delete(m, "schematics_resource_status")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobStatusTemplate : Template Job Status.
type JobStatusTemplate struct {
	// Template Id.
	TemplateID *string `json:"template_id,omitempty"`

	// Template name.
	TemplateName *string `json:"template_name,omitempty"`

	// Index of the template in the Flow.
	FlowIndex *int64 `json:"flow_index,omitempty"`

	// Status of Jobs.
	StatusCode *string `json:"status_code,omitempty"`

	// Template job status message (eg. VPCt1_Apply_Pending, for a 'VPCt1' Template).
	StatusMessage *string `json:"status_message,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobStatusTemplate.StatusCode property.
// Status of Jobs.
const (
	JobStatusTemplate_StatusCode_JobCancelled  = "job_cancelled"
	JobStatusTemplate_StatusCode_JobFailed     = "job_failed"
	JobStatusTemplate_StatusCode_JobFinished   = "job_finished"
	JobStatusTemplate_StatusCode_JobInProgress = "job_in_progress"
	JobStatusTemplate_StatusCode_JobPending    = "job_pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobStatusTemplate
func (o *JobStatusTemplate) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobStatusTemplate
func (o *JobStatusTemplate) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobStatusTemplate
func (o *JobStatusTemplate) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobStatusTemplate
func (o *JobStatusTemplate) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TemplateID != nil {
		m["template_id"] = o.TemplateID
	}
	if o.TemplateName != nil {
		m["template_name"] = o.TemplateName
	}
	if o.FlowIndex != nil {
		m["flow_index"] = o.FlowIndex
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobStatusTemplate unmarshals an instance of JobStatusTemplate from the specified map of raw messages.
func UnmarshalJobStatusTemplate(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobStatusTemplate)
	err = core.UnmarshalPrimitive(m, "template_id", &obj.TemplateID)
	if err != nil {
		return
	}
	delete(m, "template_id")
	err = core.UnmarshalPrimitive(m, "template_name", &obj.TemplateName)
	if err != nil {
		return
	}
	delete(m, "template_name")
	err = core.UnmarshalPrimitive(m, "flow_index", &obj.FlowIndex)
	if err != nil {
		return
	}
	delete(m, "flow_index")
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobStatusWorkitem : Individual workitem status info.
type JobStatusWorkitem struct {
	// Workspace id.
	WorkspaceID *string `json:"workspace_id,omitempty"`

	// workspace name.
	WorkspaceName *string `json:"workspace_name,omitempty"`

	// workspace job id.
	JobID *string `json:"job_id,omitempty"`

	// Status of Jobs.
	StatusCode *string `json:"status_code,omitempty"`

	// workitem job status message;.
	StatusMessage *string `json:"status_message,omitempty"`

	// workitem job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobStatusWorkitem.StatusCode property.
// Status of Jobs.
const (
	JobStatusWorkitem_StatusCode_JobCancelled  = "job_cancelled"
	JobStatusWorkitem_StatusCode_JobFailed     = "job_failed"
	JobStatusWorkitem_StatusCode_JobFinished   = "job_finished"
	JobStatusWorkitem_StatusCode_JobInProgress = "job_in_progress"
	JobStatusWorkitem_StatusCode_JobPending    = "job_pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobStatusWorkitem
func (o *JobStatusWorkitem) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobStatusWorkitem
func (o *JobStatusWorkitem) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobStatusWorkitem
func (o *JobStatusWorkitem) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobStatusWorkitem
func (o *JobStatusWorkitem) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.WorkspaceID != nil {
		m["workspace_id"] = o.WorkspaceID
	}
	if o.WorkspaceName != nil {
		m["workspace_name"] = o.WorkspaceName
	}
	if o.JobID != nil {
		m["job_id"] = o.JobID
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobStatusWorkitem unmarshals an instance of JobStatusWorkitem from the specified map of raw messages.
func UnmarshalJobStatusWorkitem(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobStatusWorkitem)
	err = core.UnmarshalPrimitive(m, "workspace_id", &obj.WorkspaceID)
	if err != nil {
		return
	}
	delete(m, "workspace_id")
	err = core.UnmarshalPrimitive(m, "workspace_name", &obj.WorkspaceName)
	if err != nil {
		return
	}
	delete(m, "workspace_name")
	err = core.UnmarshalPrimitive(m, "job_id", &obj.JobID)
	if err != nil {
		return
	}
	delete(m, "job_id")
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobStatusWorkspace : Workspace Job Status.
type JobStatusWorkspace struct {
	// Workspace name.
	WorkspaceName *string `json:"workspace_name,omitempty"`

	// Status of Jobs.
	StatusCode *string `json:"status_code,omitempty"`

	// Workspace job status message (eg. App1_Setup_Pending, for a 'Setup' flow in the 'App1' Workspace).
	StatusMessage *string `json:"status_message,omitempty"`

	// Environment Flow JOB Status.
	FlowStatus *JobStatusFlow `json:"flow_status,omitempty"`

	// Workspace Flow Template job status.
	TemplateStatus []JobStatusTemplate `json:"template_status,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// List of terraform commands executed and their status.
	Commands []CommandsInfo `json:"commands,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobStatusWorkspace.StatusCode property.
// Status of Jobs.
const (
	JobStatusWorkspace_StatusCode_JobCancelled  = "job_cancelled"
	JobStatusWorkspace_StatusCode_JobFailed     = "job_failed"
	JobStatusWorkspace_StatusCode_JobFinished   = "job_finished"
	JobStatusWorkspace_StatusCode_JobInProgress = "job_in_progress"
	JobStatusWorkspace_StatusCode_JobPending    = "job_pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobStatusWorkspace
func (o *JobStatusWorkspace) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobStatusWorkspace
func (o *JobStatusWorkspace) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobStatusWorkspace
func (o *JobStatusWorkspace) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobStatusWorkspace
func (o *JobStatusWorkspace) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.WorkspaceName != nil {
		m["workspace_name"] = o.WorkspaceName
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	if o.FlowStatus != nil {
		m["flow_status"] = o.FlowStatus
	}
	if o.TemplateStatus != nil {
		m["template_status"] = o.TemplateStatus
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.Commands != nil {
		m["commands"] = o.Commands
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobStatusWorkspace unmarshals an instance of JobStatusWorkspace from the specified map of raw messages.
func UnmarshalJobStatusWorkspace(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobStatusWorkspace)
	err = core.UnmarshalPrimitive(m, "workspace_name", &obj.WorkspaceName)
	if err != nil {
		return
	}
	delete(m, "workspace_name")
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	err = core.UnmarshalModel(m, "flow_status", &obj.FlowStatus, UnmarshalJobStatusFlow)
	if err != nil {
		return
	}
	delete(m, "flow_status")
	err = core.UnmarshalModel(m, "template_status", &obj.TemplateStatus, UnmarshalJobStatusTemplate)
	if err != nil {
		return
	}
	delete(m, "template_status")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalModel(m, "commands", &obj.Commands, UnmarshalCommandsInfo)
	if err != nil {
		return
	}
	delete(m, "commands")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// JobStatusWorkspaceTemplateFlow : Flow Job Status.
type JobStatusWorkspaceTemplateFlow struct {
	// Flow Id.
	FlowID *string `json:"flow_id,omitempty"`

	// Flow name.
	FlowName *string `json:"flow_name,omitempty"`

	// Status of Jobs.
	StatusCode *string `json:"status_code,omitempty"`

	// Workspace Flow job status message (eg. Setup_Apply_Pending, for a 'Setup' Flow).
	StatusMessage *string `json:"status_message,omitempty"`

	// Job status updation timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the JobStatusWorkspaceTemplateFlow.StatusCode property.
// Status of Jobs.
const (
	JobStatusWorkspaceTemplateFlow_StatusCode_JobCancelled  = "job_cancelled"
	JobStatusWorkspaceTemplateFlow_StatusCode_JobFailed     = "job_failed"
	JobStatusWorkspaceTemplateFlow_StatusCode_JobFinished   = "job_finished"
	JobStatusWorkspaceTemplateFlow_StatusCode_JobInProgress = "job_in_progress"
	JobStatusWorkspaceTemplateFlow_StatusCode_JobPending    = "job_pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of JobStatusWorkspaceTemplateFlow
func (o *JobStatusWorkspaceTemplateFlow) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of JobStatusWorkspaceTemplateFlow
func (o *JobStatusWorkspaceTemplateFlow) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of JobStatusWorkspaceTemplateFlow
func (o *JobStatusWorkspaceTemplateFlow) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of JobStatusWorkspaceTemplateFlow
func (o *JobStatusWorkspaceTemplateFlow) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.FlowID != nil {
		m["flow_id"] = o.FlowID
	}
	if o.FlowName != nil {
		m["flow_name"] = o.FlowName
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalJobStatusWorkspaceTemplateFlow unmarshals an instance of JobStatusWorkspaceTemplateFlow from the specified map of raw messages.
func UnmarshalJobStatusWorkspaceTemplateFlow(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(JobStatusWorkspaceTemplateFlow)
	err = core.UnmarshalPrimitive(m, "flow_id", &obj.FlowID)
	if err != nil {
		return
	}
	delete(m, "flow_id")
	err = core.UnmarshalPrimitive(m, "flow_name", &obj.FlowName)
	if err != nil {
		return
	}
	delete(m, "flow_name")
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// KMSDiscovery : Discover kms instances in the account based on location.
type KMSDiscovery struct {
	// The total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// The number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// The skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// The list of kms instances.
	KmsInstances []KMSInstances `json:"kms_instances,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of KMSDiscovery
func (o *KMSDiscovery) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of KMSDiscovery
func (o *KMSDiscovery) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of KMSDiscovery
func (o *KMSDiscovery) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of KMSDiscovery
func (o *KMSDiscovery) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.KmsInstances != nil {
		m["kms_instances"] = o.KmsInstances
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalKMSDiscovery unmarshals an instance of KMSDiscovery from the specified map of raw messages.
func UnmarshalKMSDiscovery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(KMSDiscovery)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "kms_instances", &obj.KmsInstances, UnmarshalKMSInstances)
	if err != nil {
		return
	}
	delete(m, "kms_instances")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// KMSInstances : User defined kms instances.
type KMSInstances struct {
	// The location to integrate kms instance. For example, location can be `US` and `EU`.
	Location *string `json:"location,omitempty"`

	// The encryption scheme values. **Allowable values** [`byok`,`kyok`].
	EncryptionScheme *string `json:"encryption_scheme,omitempty"`

	// The kms instance resource group to integrate.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// The primary kms CRN information.
	KmsCrn *string `json:"kms_crn,omitempty"`

	// The kms instance name.
	KmsName *string `json:"kms_name,omitempty"`

	// The kms instance private endpoints.
	KmsPrivateEndpoint *string `json:"kms_private_endpoint,omitempty"`

	// The kms instance public endpoints.
	KmsPublicEndpoint *string `json:"kms_public_endpoint,omitempty"`

	// Detailed list of keys.
	Keys []KMSInstancesKeys `json:"keys,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of KMSInstances
func (o *KMSInstances) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of KMSInstances
func (o *KMSInstances) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of KMSInstances
func (o *KMSInstances) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of KMSInstances
func (o *KMSInstances) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.EncryptionScheme != nil {
		m["encryption_scheme"] = o.EncryptionScheme
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.KmsCrn != nil {
		m["kms_crn"] = o.KmsCrn
	}
	if o.KmsName != nil {
		m["kms_name"] = o.KmsName
	}
	if o.KmsPrivateEndpoint != nil {
		m["kms_private_endpoint"] = o.KmsPrivateEndpoint
	}
	if o.KmsPublicEndpoint != nil {
		m["kms_public_endpoint"] = o.KmsPublicEndpoint
	}
	if o.Keys != nil {
		m["keys"] = o.Keys
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalKMSInstances unmarshals an instance of KMSInstances from the specified map of raw messages.
func UnmarshalKMSInstances(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(KMSInstances)
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "encryption_scheme", &obj.EncryptionScheme)
	if err != nil {
		return
	}
	delete(m, "encryption_scheme")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "kms_crn", &obj.KmsCrn)
	if err != nil {
		return
	}
	delete(m, "kms_crn")
	err = core.UnmarshalPrimitive(m, "kms_name", &obj.KmsName)
	if err != nil {
		return
	}
	delete(m, "kms_name")
	err = core.UnmarshalPrimitive(m, "kms_private_endpoint", &obj.KmsPrivateEndpoint)
	if err != nil {
		return
	}
	delete(m, "kms_private_endpoint")
	err = core.UnmarshalPrimitive(m, "kms_public_endpoint", &obj.KmsPublicEndpoint)
	if err != nil {
		return
	}
	delete(m, "kms_public_endpoint")
	err = core.UnmarshalModel(m, "keys", &obj.Keys, UnmarshalKMSInstancesKeys)
	if err != nil {
		return
	}
	delete(m, "keys")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// KMSInstancesKeys : KMSInstancesKeys struct
type KMSInstancesKeys struct {
	// The name of the root key.
	Name *string `json:"name,omitempty"`

	// The kms CRN of the root key.
	Crn *string `json:"crn,omitempty"`

	// The error message details.
	Error *string `json:"error,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of KMSInstancesKeys
func (o *KMSInstancesKeys) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of KMSInstancesKeys
func (o *KMSInstancesKeys) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of KMSInstancesKeys
func (o *KMSInstancesKeys) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of KMSInstancesKeys
func (o *KMSInstancesKeys) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.Error != nil {
		m["error"] = o.Error
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalKMSInstancesKeys unmarshals an instance of KMSInstancesKeys from the specified map of raw messages.
func UnmarshalKMSInstancesKeys(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(KMSInstancesKeys)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "error", &obj.Error)
	if err != nil {
		return
	}
	delete(m, "error")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// KMSSettings : User defined kms settings information.
type KMSSettings struct {
	// The location to integrate kms instance. For example, location can be `US` and `EU`.
	Location *string `json:"location,omitempty"`

	// The encryption scheme values. **Allowable values** [`byok`,`kyok`].
	EncryptionScheme *string `json:"encryption_scheme,omitempty"`

	// The kms instance resource group to integrate.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// The primary kms instance details.
	PrimaryCrk *KMSSettingsPrimaryCrk `json:"primary_crk,omitempty"`

	// The secondary kms instance details.
	SecondaryCrk *KMSSettingsSecondaryCrk `json:"secondary_crk,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of KMSSettings
func (o *KMSSettings) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of KMSSettings
func (o *KMSSettings) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of KMSSettings
func (o *KMSSettings) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of KMSSettings
func (o *KMSSettings) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.EncryptionScheme != nil {
		m["encryption_scheme"] = o.EncryptionScheme
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.PrimaryCrk != nil {
		m["primary_crk"] = o.PrimaryCrk
	}
	if o.SecondaryCrk != nil {
		m["secondary_crk"] = o.SecondaryCrk
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalKMSSettings unmarshals an instance of KMSSettings from the specified map of raw messages.
func UnmarshalKMSSettings(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(KMSSettings)
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "encryption_scheme", &obj.EncryptionScheme)
	if err != nil {
		return
	}
	delete(m, "encryption_scheme")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalModel(m, "primary_crk", &obj.PrimaryCrk, UnmarshalKMSSettingsPrimaryCrk)
	if err != nil {
		return
	}
	delete(m, "primary_crk")
	err = core.UnmarshalModel(m, "secondary_crk", &obj.SecondaryCrk, UnmarshalKMSSettingsSecondaryCrk)
	if err != nil {
		return
	}
	delete(m, "secondary_crk")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// KMSSettingsPrimaryCrk : The primary kms instance details.
type KMSSettingsPrimaryCrk struct {
	// The primary kms instance name.
	KmsName *string `json:"kms_name,omitempty"`

	// The primary kms instance private endpoint.
	KmsPrivateEndpoint *string `json:"kms_private_endpoint,omitempty"`

	// The CRN of the primary root key.
	KeyCrn *string `json:"key_crn,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of KMSSettingsPrimaryCrk
func (o *KMSSettingsPrimaryCrk) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of KMSSettingsPrimaryCrk
func (o *KMSSettingsPrimaryCrk) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of KMSSettingsPrimaryCrk
func (o *KMSSettingsPrimaryCrk) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of KMSSettingsPrimaryCrk
func (o *KMSSettingsPrimaryCrk) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.KmsName != nil {
		m["kms_name"] = o.KmsName
	}
	if o.KmsPrivateEndpoint != nil {
		m["kms_private_endpoint"] = o.KmsPrivateEndpoint
	}
	if o.KeyCrn != nil {
		m["key_crn"] = o.KeyCrn
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalKMSSettingsPrimaryCrk unmarshals an instance of KMSSettingsPrimaryCrk from the specified map of raw messages.
func UnmarshalKMSSettingsPrimaryCrk(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(KMSSettingsPrimaryCrk)
	err = core.UnmarshalPrimitive(m, "kms_name", &obj.KmsName)
	if err != nil {
		return
	}
	delete(m, "kms_name")
	err = core.UnmarshalPrimitive(m, "kms_private_endpoint", &obj.KmsPrivateEndpoint)
	if err != nil {
		return
	}
	delete(m, "kms_private_endpoint")
	err = core.UnmarshalPrimitive(m, "key_crn", &obj.KeyCrn)
	if err != nil {
		return
	}
	delete(m, "key_crn")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// KMSSettingsSecondaryCrk : The secondary kms instance details.
type KMSSettingsSecondaryCrk struct {
	// The secondary kms instance name.
	KmsName *string `json:"kms_name,omitempty"`

	// The secondary kms instance private endpoint.
	KmsPrivateEndpoint *string `json:"kms_private_endpoint,omitempty"`

	// The CRN of the secondary key.
	KeyCrn *string `json:"key_crn,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of KMSSettingsSecondaryCrk
func (o *KMSSettingsSecondaryCrk) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of KMSSettingsSecondaryCrk
func (o *KMSSettingsSecondaryCrk) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of KMSSettingsSecondaryCrk
func (o *KMSSettingsSecondaryCrk) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of KMSSettingsSecondaryCrk
func (o *KMSSettingsSecondaryCrk) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.KmsName != nil {
		m["kms_name"] = o.KmsName
	}
	if o.KmsPrivateEndpoint != nil {
		m["kms_private_endpoint"] = o.KmsPrivateEndpoint
	}
	if o.KeyCrn != nil {
		m["key_crn"] = o.KeyCrn
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalKMSSettingsSecondaryCrk unmarshals an instance of KMSSettingsSecondaryCrk from the specified map of raw messages.
func UnmarshalKMSSettingsSecondaryCrk(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(KMSSettingsSecondaryCrk)
	err = core.UnmarshalPrimitive(m, "kms_name", &obj.KmsName)
	if err != nil {
		return
	}
	delete(m, "kms_name")
	err = core.UnmarshalPrimitive(m, "kms_private_endpoint", &obj.KmsPrivateEndpoint)
	if err != nil {
		return
	}
	delete(m, "kms_private_endpoint")
	err = core.UnmarshalPrimitive(m, "key_crn", &obj.KeyCrn)
	if err != nil {
		return
	}
	delete(m, "key_crn")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ListActionsOptions : The ListActions options.
type ListActionsOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ListActionsOptions.Profile property.
// Level of details returned by the get method.
const (
	ListActionsOptions_Profile_Ids     = "ids"
	ListActionsOptions_Profile_Summary = "summary"
)

// NewListActionsOptions : Instantiate ListActionsOptions
func (*Schematics20ApiV2) NewListActionsOptions() *ListActionsOptions {
	return &ListActionsOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListActionsOptions) SetOffset(offset int64) *ListActionsOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListActionsOptions) SetLimit(limit int64) *ListActionsOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListActionsOptions) SetSort(sort string) *ListActionsOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetProfile : Allow user to set Profile
func (options *ListActionsOptions) SetProfile(profile string) *ListActionsOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListActionsOptions) SetHeaders(param map[string]string) *ListActionsOptions {
	options.Headers = param
	return options
}

// ListAdapterOptions : The ListAdapter options.
type ListAdapterOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ListAdapterOptions.Profile property.
// Level of details returned by the get method.
const (
	ListAdapterOptions_Profile_Ids     = "ids"
	ListAdapterOptions_Profile_Summary = "summary"
)

// NewListAdapterOptions : Instantiate ListAdapterOptions
func (*Schematics20ApiV2) NewListAdapterOptions() *ListAdapterOptions {
	return &ListAdapterOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListAdapterOptions) SetOffset(offset int64) *ListAdapterOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListAdapterOptions) SetLimit(limit int64) *ListAdapterOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListAdapterOptions) SetSort(sort string) *ListAdapterOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetProfile : Allow user to set Profile
func (options *ListAdapterOptions) SetProfile(profile string) *ListAdapterOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListAdapterOptions) SetHeaders(param map[string]string) *ListAdapterOptions {
	options.Headers = param
	return options
}

// ListAgentOptions : The ListAgent options.
type ListAgentOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ListAgentOptions.Profile property.
// Level of details returned by the get method.
const (
	ListAgentOptions_Profile_Detailed = "detailed"
	ListAgentOptions_Profile_Ids      = "ids"
	ListAgentOptions_Profile_Summary  = "summary"
)

// NewListAgentOptions : Instantiate ListAgentOptions
func (*Schematics20ApiV2) NewListAgentOptions() *ListAgentOptions {
	return &ListAgentOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListAgentOptions) SetOffset(offset int64) *ListAgentOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListAgentOptions) SetLimit(limit int64) *ListAgentOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetProfile : Allow user to set Profile
func (options *ListAgentOptions) SetProfile(profile string) *ListAgentOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListAgentOptions) SetHeaders(param map[string]string) *ListAgentOptions {
	options.Headers = param
	return options
}

// ListBlueprintOptions : The ListBlueprint options.
type ListBlueprintOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListBlueprintOptions : Instantiate ListBlueprintOptions
func (*Schematics20ApiV2) NewListBlueprintOptions() *ListBlueprintOptions {
	return &ListBlueprintOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListBlueprintOptions) SetOffset(offset int64) *ListBlueprintOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListBlueprintOptions) SetLimit(limit int64) *ListBlueprintOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListBlueprintOptions) SetHeaders(param map[string]string) *ListBlueprintOptions {
	options.Headers = param
	return options
}

// ListCapsulesOptions : The ListCapsules options.
type ListCapsulesOptions struct {
	// Controls Id.  Use `GET /v2/controls` API to look up the Controls Ids in your IBM Cloud account.
	ControlsID *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ListCapsulesOptions.Profile property.
// Level of details returned by the get method.
const (
	ListCapsulesOptions_Profile_Ids     = "ids"
	ListCapsulesOptions_Profile_Summary = "summary"
)

// NewListCapsulesOptions : Instantiate ListCapsulesOptions
func (*Schematics20ApiV2) NewListCapsulesOptions(controlsID string) *ListCapsulesOptions {
	return &ListCapsulesOptions{
		ControlsID: core.StringPtr(controlsID),
	}
}

// SetControlsID : Allow user to set ControlsID
func (options *ListCapsulesOptions) SetControlsID(controlsID string) *ListCapsulesOptions {
	options.ControlsID = core.StringPtr(controlsID)
	return options
}

// SetOffset : Allow user to set Offset
func (options *ListCapsulesOptions) SetOffset(offset int64) *ListCapsulesOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListCapsulesOptions) SetLimit(limit int64) *ListCapsulesOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListCapsulesOptions) SetSort(sort string) *ListCapsulesOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetProfile : Allow user to set Profile
func (options *ListCapsulesOptions) SetProfile(profile string) *ListCapsulesOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListCapsulesOptions) SetHeaders(param map[string]string) *ListCapsulesOptions {
	options.Headers = param
	return options
}

// ListCartOptions : The ListCart options.
type ListCartOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Short name of the IBM Cloud service.
	ServiceName *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListCartOptions : Instantiate ListCartOptions
func (*Schematics20ApiV2) NewListCartOptions() *ListCartOptions {
	return &ListCartOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListCartOptions) SetOffset(offset int64) *ListCartOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListCartOptions) SetLimit(limit int64) *ListCartOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetServiceName : Allow user to set ServiceName
func (options *ListCartOptions) SetServiceName(serviceName string) *ListCartOptions {
	options.ServiceName = core.StringPtr(serviceName)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListCartOptions) SetHeaders(param map[string]string) *ListCartOptions {
	options.Headers = param
	return options
}

// ListCartOrderJobsOptions : The ListCartOrderJobs options.
type ListCartOrderJobsOptions struct {
	// Fulfilment job order Id.  Use `GET /v2/cart` API to look up the order ids in your IBM Cloud account.
	OrderID *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListCartOrderJobsOptions : Instantiate ListCartOrderJobsOptions
func (*Schematics20ApiV2) NewListCartOrderJobsOptions(orderID string) *ListCartOrderJobsOptions {
	return &ListCartOrderJobsOptions{
		OrderID: core.StringPtr(orderID),
	}
}

// SetOrderID : Allow user to set OrderID
func (options *ListCartOrderJobsOptions) SetOrderID(orderID string) *ListCartOrderJobsOptions {
	options.OrderID = core.StringPtr(orderID)
	return options
}

// SetOffset : Allow user to set Offset
func (options *ListCartOrderJobsOptions) SetOffset(offset int64) *ListCartOrderJobsOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListCartOrderJobsOptions) SetLimit(limit int64) *ListCartOrderJobsOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListCartOrderJobsOptions) SetHeaders(param map[string]string) *ListCartOrderJobsOptions {
	options.Headers = param
	return options
}

// ListCartResourcesOptions : The ListCartResources options.
type ListCartResourcesOptions struct {
	// Fulfilment job order Id.  Use `GET /v2/cart` API to look up the order ids in your IBM Cloud account.
	OrderID *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListCartResourcesOptions : Instantiate ListCartResourcesOptions
func (*Schematics20ApiV2) NewListCartResourcesOptions(orderID string) *ListCartResourcesOptions {
	return &ListCartResourcesOptions{
		OrderID: core.StringPtr(orderID),
	}
}

// SetOrderID : Allow user to set OrderID
func (options *ListCartResourcesOptions) SetOrderID(orderID string) *ListCartResourcesOptions {
	options.OrderID = core.StringPtr(orderID)
	return options
}

// SetOffset : Allow user to set Offset
func (options *ListCartResourcesOptions) SetOffset(offset int64) *ListCartResourcesOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListCartResourcesOptions) SetLimit(limit int64) *ListCartResourcesOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListCartResourcesOptions) SetHeaders(param map[string]string) *ListCartResourcesOptions {
	options.Headers = param
	return options
}

// ListCatalogItemsOptions : The ListCatalogItems options.
type ListCatalogItemsOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Catalog ID to get the list of environments defined as part of offerings.
	CatalogID *string

	// Catalog Name to get the list of environments defined as part of offerings.
	CatalogName *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListCatalogItemsOptions : Instantiate ListCatalogItemsOptions
func (*Schematics20ApiV2) NewListCatalogItemsOptions() *ListCatalogItemsOptions {
	return &ListCatalogItemsOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListCatalogItemsOptions) SetOffset(offset int64) *ListCatalogItemsOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListCatalogItemsOptions) SetLimit(limit int64) *ListCatalogItemsOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetCatalogID : Allow user to set CatalogID
func (options *ListCatalogItemsOptions) SetCatalogID(catalogID string) *ListCatalogItemsOptions {
	options.CatalogID = core.StringPtr(catalogID)
	return options
}

// SetCatalogName : Allow user to set CatalogName
func (options *ListCatalogItemsOptions) SetCatalogName(catalogName string) *ListCatalogItemsOptions {
	options.CatalogName = core.StringPtr(catalogName)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListCatalogItemsOptions) SetHeaders(param map[string]string) *ListCatalogItemsOptions {
	options.Headers = param
	return options
}

// ListConnectionOptions : The ListConnection options.
type ListConnectionOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListConnectionOptions : Instantiate ListConnectionOptions
func (*Schematics20ApiV2) NewListConnectionOptions() *ListConnectionOptions {
	return &ListConnectionOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListConnectionOptions) SetOffset(offset int64) *ListConnectionOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListConnectionOptions) SetLimit(limit int64) *ListConnectionOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListConnectionOptions) SetSort(sort string) *ListConnectionOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListConnectionOptions) SetHeaders(param map[string]string) *ListConnectionOptions {
	options.Headers = param
	return options
}

// ListControlsOptions : The ListControls options.
type ListControlsOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ListControlsOptions.Profile property.
// Level of details returned by the get method.
const (
	ListControlsOptions_Profile_Ids     = "ids"
	ListControlsOptions_Profile_Summary = "summary"
)

// NewListControlsOptions : Instantiate ListControlsOptions
func (*Schematics20ApiV2) NewListControlsOptions() *ListControlsOptions {
	return &ListControlsOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListControlsOptions) SetOffset(offset int64) *ListControlsOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListControlsOptions) SetLimit(limit int64) *ListControlsOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListControlsOptions) SetSort(sort string) *ListControlsOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetProfile : Allow user to set Profile
func (options *ListControlsOptions) SetProfile(profile string) *ListControlsOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListControlsOptions) SetHeaders(param map[string]string) *ListControlsOptions {
	options.Headers = param
	return options
}

// ListDatasetVariablesOptions : The ListDatasetVariables options.
type ListDatasetVariablesOptions struct {
	// Shared dataset Id.  Use `GET /v2/datasets` API to look up the Shared dataset Ids  in your IBM Cloud account.
	DatasetID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListDatasetVariablesOptions : Instantiate ListDatasetVariablesOptions
func (*Schematics20ApiV2) NewListDatasetVariablesOptions(datasetID string) *ListDatasetVariablesOptions {
	return &ListDatasetVariablesOptions{
		DatasetID: core.StringPtr(datasetID),
	}
}

// SetDatasetID : Allow user to set DatasetID
func (options *ListDatasetVariablesOptions) SetDatasetID(datasetID string) *ListDatasetVariablesOptions {
	options.DatasetID = core.StringPtr(datasetID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListDatasetVariablesOptions) SetHeaders(param map[string]string) *ListDatasetVariablesOptions {
	options.Headers = param
	return options
}

// ListDatasetsOptions : The ListDatasets options.
type ListDatasetsOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ListDatasetsOptions.Profile property.
// Level of details returned by the get method.
const (
	ListDatasetsOptions_Profile_Ids     = "ids"
	ListDatasetsOptions_Profile_Summary = "summary"
)

// NewListDatasetsOptions : Instantiate ListDatasetsOptions
func (*Schematics20ApiV2) NewListDatasetsOptions() *ListDatasetsOptions {
	return &ListDatasetsOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListDatasetsOptions) SetOffset(offset int64) *ListDatasetsOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListDatasetsOptions) SetLimit(limit int64) *ListDatasetsOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListDatasetsOptions) SetSort(sort string) *ListDatasetsOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetProfile : Allow user to set Profile
func (options *ListDatasetsOptions) SetProfile(profile string) *ListDatasetsOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListDatasetsOptions) SetHeaders(param map[string]string) *ListDatasetsOptions {
	options.Headers = param
	return options
}

// ListDatasourcesOptions : The ListDatasources options.
type ListDatasourcesOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListDatasourcesOptions : Instantiate ListDatasourcesOptions
func (*Schematics20ApiV2) NewListDatasourcesOptions() *ListDatasourcesOptions {
	return &ListDatasourcesOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListDatasourcesOptions) SetOffset(offset int64) *ListDatasourcesOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListDatasourcesOptions) SetLimit(limit int64) *ListDatasourcesOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListDatasourcesOptions) SetSort(sort string) *ListDatasourcesOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListDatasourcesOptions) SetHeaders(param map[string]string) *ListDatasourcesOptions {
	options.Headers = param
	return options
}

// ListFlowsInWorkspaceOptions : The ListFlowsInWorkspace options.
type ListFlowsInWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ListFlowsInWorkspaceOptions.Profile property.
// Level of details returned by the get method.
const (
	ListFlowsInWorkspaceOptions_Profile_Ids     = "ids"
	ListFlowsInWorkspaceOptions_Profile_Summary = "summary"
)

// NewListFlowsInWorkspaceOptions : Instantiate ListFlowsInWorkspaceOptions
func (*Schematics20ApiV2) NewListFlowsInWorkspaceOptions(wID string) *ListFlowsInWorkspaceOptions {
	return &ListFlowsInWorkspaceOptions{
		WID: core.StringPtr(wID),
	}
}

// SetWID : Allow user to set WID
func (options *ListFlowsInWorkspaceOptions) SetWID(wID string) *ListFlowsInWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetOffset : Allow user to set Offset
func (options *ListFlowsInWorkspaceOptions) SetOffset(offset int64) *ListFlowsInWorkspaceOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListFlowsInWorkspaceOptions) SetLimit(limit int64) *ListFlowsInWorkspaceOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListFlowsInWorkspaceOptions) SetSort(sort string) *ListFlowsInWorkspaceOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetProfile : Allow user to set Profile
func (options *ListFlowsInWorkspaceOptions) SetProfile(profile string) *ListFlowsInWorkspaceOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListFlowsInWorkspaceOptions) SetHeaders(param map[string]string) *ListFlowsInWorkspaceOptions {
	options.Headers = param
	return options
}

// ListInventoriesOptions : The ListInventories options.
type ListInventoriesOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ListInventoriesOptions.Profile property.
// Level of details returned by the get method.
const (
	ListInventoriesOptions_Profile_Ids     = "ids"
	ListInventoriesOptions_Profile_Summary = "summary"
)

// NewListInventoriesOptions : Instantiate ListInventoriesOptions
func (*Schematics20ApiV2) NewListInventoriesOptions() *ListInventoriesOptions {
	return &ListInventoriesOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListInventoriesOptions) SetOffset(offset int64) *ListInventoriesOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListInventoriesOptions) SetLimit(limit int64) *ListInventoriesOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListInventoriesOptions) SetSort(sort string) *ListInventoriesOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetProfile : Allow user to set Profile
func (options *ListInventoriesOptions) SetProfile(profile string) *ListInventoriesOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListInventoriesOptions) SetHeaders(param map[string]string) *ListInventoriesOptions {
	options.Headers = param
	return options
}

// ListJobLogsOptions : The ListJobLogs options.
type ListJobLogsOptions struct {
	// Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
	JobID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListJobLogsOptions : Instantiate ListJobLogsOptions
func (*Schematics20ApiV2) NewListJobLogsOptions(jobID string) *ListJobLogsOptions {
	return &ListJobLogsOptions{
		JobID: core.StringPtr(jobID),
	}
}

// SetJobID : Allow user to set JobID
func (options *ListJobLogsOptions) SetJobID(jobID string) *ListJobLogsOptions {
	options.JobID = core.StringPtr(jobID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListJobLogsOptions) SetHeaders(param map[string]string) *ListJobLogsOptions {
	options.Headers = param
	return options
}

// ListJobsOptions : The ListJobs options.
type ListJobsOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Level of details returned by the get method.
	Profile *string

	// Name of the resource (workspace, actions or controls).
	Resource *string

	// The Resource Id. It could be an Action-id or Workspace-id.
	ResourceID *string

	// Action Id.
	ActionID *string

	// list jobs.
	List *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ListJobsOptions.Profile property.
// Level of details returned by the get method.
const (
	ListJobsOptions_Profile_Ids     = "ids"
	ListJobsOptions_Profile_Summary = "summary"
)

// Constants associated with the ListJobsOptions.Resource property.
// Name of the resource (workspace, actions or controls).
const (
	ListJobsOptions_Resource_Action    = "action"
	ListJobsOptions_Resource_Workspace = "workspace"
)

// Constants associated with the ListJobsOptions.List property.
// list jobs.
const (
	ListJobsOptions_List_All = "all"
)

// NewListJobsOptions : Instantiate ListJobsOptions
func (*Schematics20ApiV2) NewListJobsOptions() *ListJobsOptions {
	return &ListJobsOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListJobsOptions) SetOffset(offset int64) *ListJobsOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListJobsOptions) SetLimit(limit int64) *ListJobsOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListJobsOptions) SetSort(sort string) *ListJobsOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetProfile : Allow user to set Profile
func (options *ListJobsOptions) SetProfile(profile string) *ListJobsOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetResource : Allow user to set Resource
func (options *ListJobsOptions) SetResource(resource string) *ListJobsOptions {
	options.Resource = core.StringPtr(resource)
	return options
}

// SetResourceID : Allow user to set ResourceID
func (options *ListJobsOptions) SetResourceID(resourceID string) *ListJobsOptions {
	options.ResourceID = core.StringPtr(resourceID)
	return options
}

// SetActionID : Allow user to set ActionID
func (options *ListJobsOptions) SetActionID(actionID string) *ListJobsOptions {
	options.ActionID = core.StringPtr(actionID)
	return options
}

// SetList : Allow user to set List
func (options *ListJobsOptions) SetList(list string) *ListJobsOptions {
	options.List = core.StringPtr(list)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListJobsOptions) SetHeaders(param map[string]string) *ListJobsOptions {
	options.Headers = param
	return options
}

// ListKmsOptions : The ListKms options.
type ListKmsOptions struct {
	// The encryption scheme to be used.
	EncryptionScheme *string `validate:"required"`

	// The location of the Resource.
	Location *string `validate:"required"`

	// The resource group (by default, fetch from all resource groups).
	ResourceGroup *string

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListKmsOptions : Instantiate ListKmsOptions
func (*Schematics20ApiV2) NewListKmsOptions(encryptionScheme string, location string) *ListKmsOptions {
	return &ListKmsOptions{
		EncryptionScheme: core.StringPtr(encryptionScheme),
		Location:         core.StringPtr(location),
	}
}

// SetEncryptionScheme : Allow user to set EncryptionScheme
func (options *ListKmsOptions) SetEncryptionScheme(encryptionScheme string) *ListKmsOptions {
	options.EncryptionScheme = core.StringPtr(encryptionScheme)
	return options
}

// SetLocation : Allow user to set Location
func (options *ListKmsOptions) SetLocation(location string) *ListKmsOptions {
	options.Location = core.StringPtr(location)
	return options
}

// SetResourceGroup : Allow user to set ResourceGroup
func (options *ListKmsOptions) SetResourceGroup(resourceGroup string) *ListKmsOptions {
	options.ResourceGroup = core.StringPtr(resourceGroup)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListKmsOptions) SetLimit(limit int64) *ListKmsOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListKmsOptions) SetSort(sort string) *ListKmsOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListKmsOptions) SetHeaders(param map[string]string) *ListKmsOptions {
	options.Headers = param
	return options
}

// ListLocationsOptions : The ListLocations options.
type ListLocationsOptions struct {

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListLocationsOptions : Instantiate ListLocationsOptions
func (*Schematics20ApiV2) NewListLocationsOptions() *ListLocationsOptions {
	return &ListLocationsOptions{}
}

// SetHeaders : Allow user to set Headers
func (options *ListLocationsOptions) SetHeaders(param map[string]string) *ListLocationsOptions {
	options.Headers = param
	return options
}

// ListResourceQueryOptions : The ListResourceQuery options.
type ListResourceQueryOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ListResourceQueryOptions.Profile property.
// Level of details returned by the get method.
const (
	ListResourceQueryOptions_Profile_Ids     = "ids"
	ListResourceQueryOptions_Profile_Summary = "summary"
)

// NewListResourceQueryOptions : Instantiate ListResourceQueryOptions
func (*Schematics20ApiV2) NewListResourceQueryOptions() *ListResourceQueryOptions {
	return &ListResourceQueryOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListResourceQueryOptions) SetOffset(offset int64) *ListResourceQueryOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListResourceQueryOptions) SetLimit(limit int64) *ListResourceQueryOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListResourceQueryOptions) SetSort(sort string) *ListResourceQueryOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetProfile : Allow user to set Profile
func (options *ListResourceQueryOptions) SetProfile(profile string) *ListResourceQueryOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListResourceQueryOptions) SetHeaders(param map[string]string) *ListResourceQueryOptions {
	options.Headers = param
	return options
}

// ListSchematicsAccessRulesOptions : The ListSchematicsAccessRules options.
type ListSchematicsAccessRulesOptions struct {

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListSchematicsAccessRulesOptions : Instantiate ListSchematicsAccessRulesOptions
func (*Schematics20ApiV2) NewListSchematicsAccessRulesOptions() *ListSchematicsAccessRulesOptions {
	return &ListSchematicsAccessRulesOptions{}
}

// SetHeaders : Allow user to set Headers
func (options *ListSchematicsAccessRulesOptions) SetHeaders(param map[string]string) *ListSchematicsAccessRulesOptions {
	options.Headers = param
	return options
}

// ListTemplateInputsOptions : The ListTemplateInputs options.
type ListTemplateInputsOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The ID of the Terraform template in your workspace.  When you create a workspace, the Terraform template that  your
	// workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up the workspace IDs  and template
	// IDs or `template_data.id` in your IBM Cloud account.
	TID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListTemplateInputsOptions : Instantiate ListTemplateInputsOptions
func (*Schematics20ApiV2) NewListTemplateInputsOptions(wID string, tID string) *ListTemplateInputsOptions {
	return &ListTemplateInputsOptions{
		WID: core.StringPtr(wID),
		TID: core.StringPtr(tID),
	}
}

// SetWID : Allow user to set WID
func (options *ListTemplateInputsOptions) SetWID(wID string) *ListTemplateInputsOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTID : Allow user to set TID
func (options *ListTemplateInputsOptions) SetTID(tID string) *ListTemplateInputsOptions {
	options.TID = core.StringPtr(tID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListTemplateInputsOptions) SetHeaders(param map[string]string) *ListTemplateInputsOptions {
	options.Headers = param
	return options
}

// ListTemplateOutputsOptions : The ListTemplateOutputs options.
type ListTemplateOutputsOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The ID of the Terraform template in your workspace.  When you create a workspace, the Terraform template that  your
	// workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up the workspace IDs  and template
	// IDs or `template_data.id` in your IBM Cloud account.
	TID *string `validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListTemplateOutputsOptions : Instantiate ListTemplateOutputsOptions
func (*Schematics20ApiV2) NewListTemplateOutputsOptions(wID string, tID string) *ListTemplateOutputsOptions {
	return &ListTemplateOutputsOptions{
		WID: core.StringPtr(wID),
		TID: core.StringPtr(tID),
	}
}

// SetWID : Allow user to set WID
func (options *ListTemplateOutputsOptions) SetWID(wID string) *ListTemplateOutputsOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTID : Allow user to set TID
func (options *ListTemplateOutputsOptions) SetTID(tID string) *ListTemplateOutputsOptions {
	options.TID = core.StringPtr(tID)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListTemplateOutputsOptions) SetHeaders(param map[string]string) *ListTemplateOutputsOptions {
	options.Headers = param
	return options
}

// ListTemplatesInWorkspaceOptions : The ListTemplatesInWorkspace options.
type ListTemplatesInWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ListTemplatesInWorkspaceOptions.Profile property.
// Level of details returned by the get method.
const (
	ListTemplatesInWorkspaceOptions_Profile_Ids     = "ids"
	ListTemplatesInWorkspaceOptions_Profile_Summary = "summary"
)

// NewListTemplatesInWorkspaceOptions : Instantiate ListTemplatesInWorkspaceOptions
func (*Schematics20ApiV2) NewListTemplatesInWorkspaceOptions(wID string) *ListTemplatesInWorkspaceOptions {
	return &ListTemplatesInWorkspaceOptions{
		WID: core.StringPtr(wID),
	}
}

// SetWID : Allow user to set WID
func (options *ListTemplatesInWorkspaceOptions) SetWID(wID string) *ListTemplatesInWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetOffset : Allow user to set Offset
func (options *ListTemplatesInWorkspaceOptions) SetOffset(offset int64) *ListTemplatesInWorkspaceOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListTemplatesInWorkspaceOptions) SetLimit(limit int64) *ListTemplatesInWorkspaceOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListTemplatesInWorkspaceOptions) SetSort(sort string) *ListTemplatesInWorkspaceOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetProfile : Allow user to set Profile
func (options *ListTemplatesInWorkspaceOptions) SetProfile(profile string) *ListTemplatesInWorkspaceOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListTemplatesInWorkspaceOptions) SetHeaders(param map[string]string) *ListTemplatesInWorkspaceOptions {
	options.Headers = param
	return options
}

// ListTriggersOptions : The ListTriggers options.
type ListTriggersOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListTriggersOptions : Instantiate ListTriggersOptions
func (*Schematics20ApiV2) NewListTriggersOptions() *ListTriggersOptions {
	return &ListTriggersOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListTriggersOptions) SetOffset(offset int64) *ListTriggersOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListTriggersOptions) SetLimit(limit int64) *ListTriggersOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListTriggersOptions) SetSort(sort string) *ListTriggersOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListTriggersOptions) SetHeaders(param map[string]string) *ListTriggersOptions {
	options.Headers = param
	return options
}

// ListWebhookOptions : The ListWebhook options.
type ListWebhookOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListWebhookOptions : Instantiate ListWebhookOptions
func (*Schematics20ApiV2) NewListWebhookOptions() *ListWebhookOptions {
	return &ListWebhookOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListWebhookOptions) SetOffset(offset int64) *ListWebhookOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListWebhookOptions) SetLimit(limit int64) *ListWebhookOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListWebhookOptions) SetSort(sort string) *ListWebhookOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListWebhookOptions) SetHeaders(param map[string]string) *ListWebhookOptions {
	options.Headers = param
	return options
}

// ListWorkspaceInputsOptions : The ListWorkspaceInputs options.
type ListWorkspaceInputsOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListWorkspaceInputsOptions : Instantiate ListWorkspaceInputsOptions
func (*Schematics20ApiV2) NewListWorkspaceInputsOptions(wID string) *ListWorkspaceInputsOptions {
	return &ListWorkspaceInputsOptions{
		WID: core.StringPtr(wID),
	}
}

// SetWID : Allow user to set WID
func (options *ListWorkspaceInputsOptions) SetWID(wID string) *ListWorkspaceInputsOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetOffset : Allow user to set Offset
func (options *ListWorkspaceInputsOptions) SetOffset(offset int64) *ListWorkspaceInputsOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListWorkspaceInputsOptions) SetLimit(limit int64) *ListWorkspaceInputsOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListWorkspaceInputsOptions) SetHeaders(param map[string]string) *ListWorkspaceInputsOptions {
	options.Headers = param
	return options
}

// ListWorkspaceOutputsOptions : The ListWorkspaceOutputs options.
type ListWorkspaceOutputsOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListWorkspaceOutputsOptions : Instantiate ListWorkspaceOutputsOptions
func (*Schematics20ApiV2) NewListWorkspaceOutputsOptions(wID string) *ListWorkspaceOutputsOptions {
	return &ListWorkspaceOutputsOptions{
		WID: core.StringPtr(wID),
	}
}

// SetWID : Allow user to set WID
func (options *ListWorkspaceOutputsOptions) SetWID(wID string) *ListWorkspaceOutputsOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetOffset : Allow user to set Offset
func (options *ListWorkspaceOutputsOptions) SetOffset(offset int64) *ListWorkspaceOutputsOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListWorkspaceOutputsOptions) SetLimit(limit int64) *ListWorkspaceOutputsOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListWorkspaceOutputsOptions) SetHeaders(param map[string]string) *ListWorkspaceOutputsOptions {
	options.Headers = param
	return options
}

// ListWorkspacesOptions : The ListWorkspaces options.
type ListWorkspacesOptions struct {
	// The starting position of the item in the list of items. For example, if you have three workspaces in your account,
	// the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth.
	// If you have 6 workspaces and you want to list the details for workspaces `2-6`, enter 1. To limit the number of
	// workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not
	// supported and are ignored.
	Offset *int64

	// The maximum number of items that you want to list. The number must be a positive integer between 1 and 2000. If no
	// value is provided, 100 is used by default.
	Limit *int64

	// Name of the field to sort-by;  Use the '.' character to delineate sub-resources and sub-fields (eg.
	// owner.last_name). Prepend the field with '+' or '-', indicating 'ascending' or 'descending' (default is ascending)
	// Ignore unrecognized or unsupported sort field.
	Sort *string

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ListWorkspacesOptions.Profile property.
// Level of details returned by the get method.
const (
	ListWorkspacesOptions_Profile_Ids     = "ids"
	ListWorkspacesOptions_Profile_Summary = "summary"
)

// NewListWorkspacesOptions : Instantiate ListWorkspacesOptions
func (*Schematics20ApiV2) NewListWorkspacesOptions() *ListWorkspacesOptions {
	return &ListWorkspacesOptions{}
}

// SetOffset : Allow user to set Offset
func (options *ListWorkspacesOptions) SetOffset(offset int64) *ListWorkspacesOptions {
	options.Offset = core.Int64Ptr(offset)
	return options
}

// SetLimit : Allow user to set Limit
func (options *ListWorkspacesOptions) SetLimit(limit int64) *ListWorkspacesOptions {
	options.Limit = core.Int64Ptr(limit)
	return options
}

// SetSort : Allow user to set Sort
func (options *ListWorkspacesOptions) SetSort(sort string) *ListWorkspacesOptions {
	options.Sort = core.StringPtr(sort)
	return options
}

// SetProfile : Allow user to set Profile
func (options *ListWorkspacesOptions) SetProfile(profile string) *ListWorkspacesOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ListWorkspacesOptions) SetHeaders(param map[string]string) *ListWorkspacesOptions {
	options.Headers = param
	return options
}

// OrderItemConfiguration : Catalog item configuration in the Cart order.
type OrderItemConfiguration struct {
	// Catalog item name.
	Name *string `json:"name,omitempty"`

	// Catalog item description.
	Description *string `json:"description,omitempty"`

	// Input configuration for the order.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Input environment variables used by order.
	Settings []VariableData `json:"settings,omitempty"`

	// Output configuration of the order.
	Outputs []VariableData `json:"outputs,omitempty"`

	// Target cluster details to perform POC operation.
	Target *TargetRequest `json:"target,omitempty"`

	// Name of the fulfilment job operations.
	Operation *string `json:"operation,omitempty"`

	// Additional service input data (for extensibility).
	ServiceData []ServiceVariableData `json:"service_data,omitempty"`

	// Catalog Id.
	CatalogID *string `json:"catalog_id" validate:"required"`

	// offering Id.
	OfferingID *string `json:"offering_id" validate:"required"`

	// Account ID where catalog is created.
	OwningAccount *string `json:"owning_account,omitempty"`

	// CRN of account where catalog is created.
	OwningAccountCrn *string `json:"owning_account_crn,omitempty"`

	// Offering kind id.
	OfferingKindID *string `json:"offering_kind_id,omitempty"`

	// Offering Target Kind.
	OfferingTargetKind *string `json:"offering_target_kind,omitempty"`

	// Offering version id.
	OfferingVersionID *string `json:"offering_version_id,omitempty"`

	// Offering kind.
	OfferingKind *string `json:"offering_kind,omitempty"`

	// Offering fulfilment kind.
	OfferingFulfilmentKind *string `json:"offering_fulfilment_kind,omitempty"`

	// Offering version.
	OfferingVersion *string `json:"offering_version,omitempty"`

	// Repo URL where the provisioner can be found.
	OfferingProvisionerURL *string `json:"offering_provisioner_url,omitempty"`

	// SHA value of Repo URL.
	OfferingProvisionerSsh *string `json:"offering_provisioner_ssh,omitempty"`

	// Root folder name in .tgz file.
	OfferingProvisionerWorkingDirectory *string `json:"offering_provisioner_working_directory,omitempty"`

	// Store Keeping Unit for the Item in the Cart order.
	ItemSku *ItemSKU `json:"item_sku,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the OrderItemConfiguration.Operation property.
// Name of the fulfilment job operations.
const (
	OrderItemConfiguration_Operation_Configure = "configure"
	OrderItemConfiguration_Operation_Destroy   = "destroy"
	OrderItemConfiguration_Operation_Dryrun    = "dryrun"
	OrderItemConfiguration_Operation_Install   = "install"
	OrderItemConfiguration_Operation_Operate   = "operate"
	OrderItemConfiguration_Operation_Preview   = "preview"
	OrderItemConfiguration_Operation_Uninstall = "uninstall"
	OrderItemConfiguration_Operation_Update    = "update"
)

// NewOrderItemConfiguration : Instantiate OrderItemConfiguration (Generic Model Constructor)
func (*Schematics20ApiV2) NewOrderItemConfiguration(catalogID string, offeringID string) (model *OrderItemConfiguration, err error) {
	model = &OrderItemConfiguration{
		CatalogID:  core.StringPtr(catalogID),
		OfferingID: core.StringPtr(offeringID),
	}
	err = core.ValidateStruct(model, "required parameters")
	return
}

// SetProperty allows the user to set an arbitrary property on an instance of OrderItemConfiguration
func (o *OrderItemConfiguration) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of OrderItemConfiguration
func (o *OrderItemConfiguration) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of OrderItemConfiguration
func (o *OrderItemConfiguration) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of OrderItemConfiguration
func (o *OrderItemConfiguration) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Settings != nil {
		m["settings"] = o.Settings
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	if o.Target != nil {
		m["target"] = o.Target
	}
	if o.Operation != nil {
		m["operation"] = o.Operation
	}
	if o.ServiceData != nil {
		m["service_data"] = o.ServiceData
	}
	if o.CatalogID != nil {
		m["catalog_id"] = o.CatalogID
	}
	if o.OfferingID != nil {
		m["offering_id"] = o.OfferingID
	}
	if o.OwningAccount != nil {
		m["owning_account"] = o.OwningAccount
	}
	if o.OwningAccountCrn != nil {
		m["owning_account_crn"] = o.OwningAccountCrn
	}
	if o.OfferingKindID != nil {
		m["offering_kind_id"] = o.OfferingKindID
	}
	if o.OfferingTargetKind != nil {
		m["offering_target_kind"] = o.OfferingTargetKind
	}
	if o.OfferingVersionID != nil {
		m["offering_version_id"] = o.OfferingVersionID
	}
	if o.OfferingKind != nil {
		m["offering_kind"] = o.OfferingKind
	}
	if o.OfferingFulfilmentKind != nil {
		m["offering_fulfilment_kind"] = o.OfferingFulfilmentKind
	}
	if o.OfferingVersion != nil {
		m["offering_version"] = o.OfferingVersion
	}
	if o.OfferingProvisionerURL != nil {
		m["offering_provisioner_url"] = o.OfferingProvisionerURL
	}
	if o.OfferingProvisionerSsh != nil {
		m["offering_provisioner_ssh"] = o.OfferingProvisionerSsh
	}
	if o.OfferingProvisionerWorkingDirectory != nil {
		m["offering_provisioner_working_directory"] = o.OfferingProvisionerWorkingDirectory
	}
	if o.ItemSku != nil {
		m["item_sku"] = o.ItemSku
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalOrderItemConfiguration unmarshals an instance of OrderItemConfiguration from the specified map of raw messages.
func UnmarshalOrderItemConfiguration(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(OrderItemConfiguration)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "settings", &obj.Settings, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "settings")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "outputs")
	err = core.UnmarshalModel(m, "target", &obj.Target, UnmarshalTargetRequest)
	if err != nil {
		return
	}
	delete(m, "target")
	err = core.UnmarshalPrimitive(m, "operation", &obj.Operation)
	if err != nil {
		return
	}
	delete(m, "operation")
	err = core.UnmarshalModel(m, "service_data", &obj.ServiceData, UnmarshalServiceVariableData)
	if err != nil {
		return
	}
	delete(m, "service_data")
	err = core.UnmarshalPrimitive(m, "catalog_id", &obj.CatalogID)
	if err != nil {
		return
	}
	delete(m, "catalog_id")
	err = core.UnmarshalPrimitive(m, "offering_id", &obj.OfferingID)
	if err != nil {
		return
	}
	delete(m, "offering_id")
	err = core.UnmarshalPrimitive(m, "owning_account", &obj.OwningAccount)
	if err != nil {
		return
	}
	delete(m, "owning_account")
	err = core.UnmarshalPrimitive(m, "owning_account_crn", &obj.OwningAccountCrn)
	if err != nil {
		return
	}
	delete(m, "owning_account_crn")
	err = core.UnmarshalPrimitive(m, "offering_kind_id", &obj.OfferingKindID)
	if err != nil {
		return
	}
	delete(m, "offering_kind_id")
	err = core.UnmarshalPrimitive(m, "offering_target_kind", &obj.OfferingTargetKind)
	if err != nil {
		return
	}
	delete(m, "offering_target_kind")
	err = core.UnmarshalPrimitive(m, "offering_version_id", &obj.OfferingVersionID)
	if err != nil {
		return
	}
	delete(m, "offering_version_id")
	err = core.UnmarshalPrimitive(m, "offering_kind", &obj.OfferingKind)
	if err != nil {
		return
	}
	delete(m, "offering_kind")
	err = core.UnmarshalPrimitive(m, "offering_fulfilment_kind", &obj.OfferingFulfilmentKind)
	if err != nil {
		return
	}
	delete(m, "offering_fulfilment_kind")
	err = core.UnmarshalPrimitive(m, "offering_version", &obj.OfferingVersion)
	if err != nil {
		return
	}
	delete(m, "offering_version")
	err = core.UnmarshalPrimitive(m, "offering_provisioner_url", &obj.OfferingProvisionerURL)
	if err != nil {
		return
	}
	delete(m, "offering_provisioner_url")
	err = core.UnmarshalPrimitive(m, "offering_provisioner_ssh", &obj.OfferingProvisionerSsh)
	if err != nil {
		return
	}
	delete(m, "offering_provisioner_ssh")
	err = core.UnmarshalPrimitive(m, "offering_provisioner_working_directory", &obj.OfferingProvisionerWorkingDirectory)
	if err != nil {
		return
	}
	delete(m, "offering_provisioner_working_directory")
	err = core.UnmarshalModel(m, "item_sku", &obj.ItemSku, UnmarshalItemSKU)
	if err != nil {
		return
	}
	delete(m, "item_sku")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// OutputVariableDataList : List of Output variable data record response.
type OutputVariableDataList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of output variables and values.
	Outputs []VariableData `json:"outputs,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of OutputVariableDataList
func (o *OutputVariableDataList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of OutputVariableDataList
func (o *OutputVariableDataList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of OutputVariableDataList
func (o *OutputVariableDataList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of OutputVariableDataList
func (o *OutputVariableDataList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalOutputVariableDataList unmarshals an instance of OutputVariableDataList from the specified map of raw messages.
func UnmarshalOutputVariableDataList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(OutputVariableDataList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "outputs")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// PreviewData : Preview of the data from the external datastore.
type PreviewData struct {
	// Type of the data; keys only or key-values.
	Type *string `json:"type,omitempty"`

	// Name of the connection used to fetch the data.
	Connection *string `json:"connection,omitempty"`

	Data []VariableData `json:"data,omitempty"`

	// Version of the data fetched from the external store.
	Version *string `json:"version,omitempty"`

	// Error or warning message while fetching data from the external store.
	Message *string `json:"message,omitempty"`

	// Preview the data at timestamp.
	ViewedAt *strfmt.DateTime `json:"viewed_at,omitempty"`

	// Email address of user who previewed the data.
	ViewedBy *string `json:"viewed_by,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the PreviewData.Type property.
// Type of the data; keys only or key-values.
const (
	PreviewData_Type_All  = "all"
	PreviewData_Type_Keys = "keys"
)

// SetProperty allows the user to set an arbitrary property on an instance of PreviewData
func (o *PreviewData) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of PreviewData
func (o *PreviewData) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of PreviewData
func (o *PreviewData) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of PreviewData
func (o *PreviewData) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.Connection != nil {
		m["connection"] = o.Connection
	}
	if o.Data != nil {
		m["data"] = o.Data
	}
	if o.Version != nil {
		m["version"] = o.Version
	}
	if o.Message != nil {
		m["message"] = o.Message
	}
	if o.ViewedAt != nil {
		m["viewed_at"] = o.ViewedAt
	}
	if o.ViewedBy != nil {
		m["viewed_by"] = o.ViewedBy
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalPreviewData unmarshals an instance of PreviewData from the specified map of raw messages.
func UnmarshalPreviewData(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(PreviewData)
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalPrimitive(m, "connection", &obj.Connection)
	if err != nil {
		return
	}
	delete(m, "connection")
	err = core.UnmarshalModel(m, "data", &obj.Data, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "data")
	err = core.UnmarshalPrimitive(m, "version", &obj.Version)
	if err != nil {
		return
	}
	delete(m, "version")
	err = core.UnmarshalPrimitive(m, "message", &obj.Message)
	if err != nil {
		return
	}
	delete(m, "message")
	err = core.UnmarshalPrimitive(m, "viewed_at", &obj.ViewedAt)
	if err != nil {
		return
	}
	delete(m, "viewed_at")
	err = core.UnmarshalPrimitive(m, "viewed_by", &obj.ViewedBy)
	if err != nil {
		return
	}
	delete(m, "viewed_by")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// PrivateCluster : Complete Private cluster details provided by user and system generated.
type PrivateCluster struct {
	// Id of the remote K8s Cluster to run the Schematics Jobs.
	ClusterID *string `json:"cluster_id,omitempty"`

	// Kube Config to connect to the Cluster.
	KubeConfig *string `json:"kube_config,omitempty"`

	// SchematicsJobCluster definition tags.
	Tags []string `json:"tags,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Name of the user who registered the remote K8s cluster.
	RegisteredBy *string `json:"registered_by,omitempty"`

	// Timestamp of SchematicsJobCluster registration.
	RegisteredAt *strfmt.DateTime `json:"registered_at,omitempty"`

	// SchematicsJobCluster updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Name of user who updated the SchematicsJobCluster definitio.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Health of the remote Cluster.
	ClusterHealth *string `json:"cluster_health,omitempty"`

	// Timestamp of the last health check.
	LastHealthCheckedAt *strfmt.DateTime `json:"last_health_checked_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the PrivateCluster.ClusterHealth property.
// Health of the remote Cluster.
const (
	PrivateCluster_ClusterHealth_Active   = "active"
	PrivateCluster_ClusterHealth_Inactive = "inactive"
)

// SetProperty allows the user to set an arbitrary property on an instance of PrivateCluster
func (o *PrivateCluster) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of PrivateCluster
func (o *PrivateCluster) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of PrivateCluster
func (o *PrivateCluster) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of PrivateCluster
func (o *PrivateCluster) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ClusterID != nil {
		m["cluster_id"] = o.ClusterID
	}
	if o.KubeConfig != nil {
		m["kube_config"] = o.KubeConfig
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.RegisteredBy != nil {
		m["registered_by"] = o.RegisteredBy
	}
	if o.RegisteredAt != nil {
		m["registered_at"] = o.RegisteredAt
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.ClusterHealth != nil {
		m["cluster_health"] = o.ClusterHealth
	}
	if o.LastHealthCheckedAt != nil {
		m["last_health_checked_at"] = o.LastHealthCheckedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalPrivateCluster unmarshals an instance of PrivateCluster from the specified map of raw messages.
func UnmarshalPrivateCluster(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(PrivateCluster)
	err = core.UnmarshalPrimitive(m, "cluster_id", &obj.ClusterID)
	if err != nil {
		return
	}
	delete(m, "cluster_id")
	err = core.UnmarshalPrimitive(m, "kube_config", &obj.KubeConfig)
	if err != nil {
		return
	}
	delete(m, "kube_config")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalPrimitive(m, "registered_by", &obj.RegisteredBy)
	if err != nil {
		return
	}
	delete(m, "registered_by")
	err = core.UnmarshalPrimitive(m, "registered_at", &obj.RegisteredAt)
	if err != nil {
		return
	}
	delete(m, "registered_at")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalPrimitive(m, "cluster_health", &obj.ClusterHealth)
	if err != nil {
		return
	}
	delete(m, "cluster_health")
	err = core.UnmarshalPrimitive(m, "last_health_checked_at", &obj.LastHealthCheckedAt)
	if err != nil {
		return
	}
	delete(m, "last_health_checked_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// PrivateClusterList : Private Cluster details response.
type PrivateClusterList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of private clusters.
	Clusters []PrivateCluster `json:"clusters,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of PrivateClusterList
func (o *PrivateClusterList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of PrivateClusterList
func (o *PrivateClusterList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of PrivateClusterList
func (o *PrivateClusterList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of PrivateClusterList
func (o *PrivateClusterList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Clusters != nil {
		m["clusters"] = o.Clusters
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalPrivateClusterList unmarshals an instance of PrivateClusterList from the specified map of raw messages.
func UnmarshalPrivateClusterList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(PrivateClusterList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "clusters", &obj.Clusters, UnmarshalPrivateCluster)
	if err != nil {
		return
	}
	delete(m, "clusters")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RegisterAgentOptions : The RegisterAgent options.
type RegisterAgentOptions struct {
	// Register the agent with schematics.
	Agent *Agent `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewRegisterAgentOptions : Instantiate RegisterAgentOptions
func (*Schematics20ApiV2) NewRegisterAgentOptions(agent *Agent) *RegisterAgentOptions {
	return &RegisterAgentOptions{
		Agent: agent,
	}
}

// SetAgent : Allow user to set Agent
func (options *RegisterAgentOptions) SetAgent(agent *Agent) *RegisterAgentOptions {
	options.Agent = agent
	return options
}

// SetHeaders : Allow user to set Headers
func (options *RegisterAgentOptions) SetHeaders(param map[string]string) *RegisterAgentOptions {
	options.Headers = param
	return options
}

// ReplaceAdapterOptions : The ReplaceAdapter options.
type ReplaceAdapterOptions struct {
	// Id of the Schematics Adapter.
	AdapterID *string `validate:"required,ne="`

	// Replace the Schematics Adapter definition.
	Adapter *Adapter `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceAdapterOptions : Instantiate ReplaceAdapterOptions
func (*Schematics20ApiV2) NewReplaceAdapterOptions(adapterID string, adapter *Adapter) *ReplaceAdapterOptions {
	return &ReplaceAdapterOptions{
		AdapterID: core.StringPtr(adapterID),
		Adapter:   adapter,
	}
}

// SetAdapterID : Allow user to set AdapterID
func (options *ReplaceAdapterOptions) SetAdapterID(adapterID string) *ReplaceAdapterOptions {
	options.AdapterID = core.StringPtr(adapterID)
	return options
}

// SetAdapter : Allow user to set Adapter
func (options *ReplaceAdapterOptions) SetAdapter(adapter *Adapter) *ReplaceAdapterOptions {
	options.Adapter = adapter
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceAdapterOptions) SetHeaders(param map[string]string) *ReplaceAdapterOptions {
	options.Headers = param
	return options
}

// ReplaceBlueprintOptions : The ReplaceBlueprint options.
type ReplaceBlueprintOptions struct {
	// Environment Id.  Use `GET /v2/blueprints` API to look up the order ids in your IBM Cloud account.
	BlueprintID *string `validate:"required,ne="`

	// Update the blueprint details.
	Blueprint *Blueprint `validate:"required"`

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ReplaceBlueprintOptions.Profile property.
// Level of details returned by the get method.
const (
	ReplaceBlueprintOptions_Profile_Ids     = "ids"
	ReplaceBlueprintOptions_Profile_Summary = "summary"
)

// NewReplaceBlueprintOptions : Instantiate ReplaceBlueprintOptions
func (*Schematics20ApiV2) NewReplaceBlueprintOptions(blueprintID string, blueprint *Blueprint) *ReplaceBlueprintOptions {
	return &ReplaceBlueprintOptions{
		BlueprintID: core.StringPtr(blueprintID),
		Blueprint:   blueprint,
	}
}

// SetBlueprintID : Allow user to set BlueprintID
func (options *ReplaceBlueprintOptions) SetBlueprintID(blueprintID string) *ReplaceBlueprintOptions {
	options.BlueprintID = core.StringPtr(blueprintID)
	return options
}

// SetBlueprint : Allow user to set Blueprint
func (options *ReplaceBlueprintOptions) SetBlueprint(blueprint *Blueprint) *ReplaceBlueprintOptions {
	options.Blueprint = blueprint
	return options
}

// SetProfile : Allow user to set Profile
func (options *ReplaceBlueprintOptions) SetProfile(profile string) *ReplaceBlueprintOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceBlueprintOptions) SetHeaders(param map[string]string) *ReplaceBlueprintOptions {
	options.Headers = param
	return options
}

// ReplaceCartOrderOptions : The ReplaceCartOrder options.
type ReplaceCartOrderOptions struct {
	// Fulfilment job order Id.  Use `GET /v2/cart` API to look up the order ids in your IBM Cloud account.
	OrderID *string `validate:"required,ne="`

	// The name of fulfilment job operation (install, uninstall, configure, operate, dryrun, update, destroy).
	Operation *string `validate:"required"`

	// Update the fulfilment job order and run the job.
	CartOrder *CartOrder `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceCartOrderOptions : Instantiate ReplaceCartOrderOptions
func (*Schematics20ApiV2) NewReplaceCartOrderOptions(orderID string, operation string, cartOrder *CartOrder) *ReplaceCartOrderOptions {
	return &ReplaceCartOrderOptions{
		OrderID:   core.StringPtr(orderID),
		Operation: core.StringPtr(operation),
		CartOrder: cartOrder,
	}
}

// SetOrderID : Allow user to set OrderID
func (options *ReplaceCartOrderOptions) SetOrderID(orderID string) *ReplaceCartOrderOptions {
	options.OrderID = core.StringPtr(orderID)
	return options
}

// SetOperation : Allow user to set Operation
func (options *ReplaceCartOrderOptions) SetOperation(operation string) *ReplaceCartOrderOptions {
	options.Operation = core.StringPtr(operation)
	return options
}

// SetCartOrder : Allow user to set CartOrder
func (options *ReplaceCartOrderOptions) SetCartOrder(cartOrder *CartOrder) *ReplaceCartOrderOptions {
	options.CartOrder = cartOrder
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceCartOrderOptions) SetHeaders(param map[string]string) *ReplaceCartOrderOptions {
	options.Headers = param
	return options
}

// ReplaceDatasetOptions : The ReplaceDataset options.
type ReplaceDatasetOptions struct {
	// Shared dataset Id.  Use `GET /v2/datasets` API to look up the Shared dataset Ids  in your IBM Cloud account.
	DatasetID *string `validate:"required,ne="`

	// Replace the shared datasets.
	Dataset *Dataset `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceDatasetOptions : Instantiate ReplaceDatasetOptions
func (*Schematics20ApiV2) NewReplaceDatasetOptions(datasetID string, dataset *Dataset) *ReplaceDatasetOptions {
	return &ReplaceDatasetOptions{
		DatasetID: core.StringPtr(datasetID),
		Dataset:   dataset,
	}
}

// SetDatasetID : Allow user to set DatasetID
func (options *ReplaceDatasetOptions) SetDatasetID(datasetID string) *ReplaceDatasetOptions {
	options.DatasetID = core.StringPtr(datasetID)
	return options
}

// SetDataset : Allow user to set Dataset
func (options *ReplaceDatasetOptions) SetDataset(dataset *Dataset) *ReplaceDatasetOptions {
	options.Dataset = dataset
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceDatasetOptions) SetHeaders(param map[string]string) *ReplaceDatasetOptions {
	options.Headers = param
	return options
}

// ReplaceFlowInWorkspaceOptions : The ReplaceFlowInWorkspace options.
type ReplaceFlowInWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Flow Id.  Use `GET /v2/workspaces/<workspace_id>/flows` API to look up the  Flow Ids in your Workspaces.
	FlowID *string `validate:"required,ne="`

	// Replace the entire Flow in the Workspace.
	TemplateFlow *TemplateFlow

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceFlowInWorkspaceOptions : Instantiate ReplaceFlowInWorkspaceOptions
func (*Schematics20ApiV2) NewReplaceFlowInWorkspaceOptions(wID string, flowID string) *ReplaceFlowInWorkspaceOptions {
	return &ReplaceFlowInWorkspaceOptions{
		WID:    core.StringPtr(wID),
		FlowID: core.StringPtr(flowID),
	}
}

// SetWID : Allow user to set WID
func (options *ReplaceFlowInWorkspaceOptions) SetWID(wID string) *ReplaceFlowInWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetFlowID : Allow user to set FlowID
func (options *ReplaceFlowInWorkspaceOptions) SetFlowID(flowID string) *ReplaceFlowInWorkspaceOptions {
	options.FlowID = core.StringPtr(flowID)
	return options
}

// SetTemplateFlow : Allow user to set TemplateFlow
func (options *ReplaceFlowInWorkspaceOptions) SetTemplateFlow(templateFlow *TemplateFlow) *ReplaceFlowInWorkspaceOptions {
	options.TemplateFlow = templateFlow
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceFlowInWorkspaceOptions) SetHeaders(param map[string]string) *ReplaceFlowInWorkspaceOptions {
	options.Headers = param
	return options
}

// ReplaceInventoryOptions : The ReplaceInventory options.
type ReplaceInventoryOptions struct {
	// Resource Inventory Id.  Use `GET /v2/inventories` API to look up the Resource Inventory definition Ids  in your IBM
	// Cloud account.
	InventoryID *string `validate:"required,ne="`

	// Update the inventory definition resource.
	InventoryResourceDefinition *InventoryResourceDefinition `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceInventoryOptions : Instantiate ReplaceInventoryOptions
func (*Schematics20ApiV2) NewReplaceInventoryOptions(inventoryID string, inventoryResourceDefinition *InventoryResourceDefinition) *ReplaceInventoryOptions {
	return &ReplaceInventoryOptions{
		InventoryID:                 core.StringPtr(inventoryID),
		InventoryResourceDefinition: inventoryResourceDefinition,
	}
}

// SetInventoryID : Allow user to set InventoryID
func (options *ReplaceInventoryOptions) SetInventoryID(inventoryID string) *ReplaceInventoryOptions {
	options.InventoryID = core.StringPtr(inventoryID)
	return options
}

// SetInventoryResourceDefinition : Allow user to set InventoryResourceDefinition
func (options *ReplaceInventoryOptions) SetInventoryResourceDefinition(inventoryResourceDefinition *InventoryResourceDefinition) *ReplaceInventoryOptions {
	options.InventoryResourceDefinition = inventoryResourceDefinition
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceInventoryOptions) SetHeaders(param map[string]string) *ReplaceInventoryOptions {
	options.Headers = param
	return options
}

// ReplaceResourcesQueryOptions : The ReplaceResourcesQuery options.
type ReplaceResourcesQueryOptions struct {
	// Resource query Id.  Use `GET /v2/resource_query` API to look up the Resource query definition Ids  in your IBM Cloud
	// account.
	QueryID *string `validate:"required,ne="`

	// Replace the resources query definition.
	ResourceQueryDefinition *ResourceQueryDefinition `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceResourcesQueryOptions : Instantiate ReplaceResourcesQueryOptions
func (*Schematics20ApiV2) NewReplaceResourcesQueryOptions(queryID string, resourceQueryDefinition *ResourceQueryDefinition) *ReplaceResourcesQueryOptions {
	return &ReplaceResourcesQueryOptions{
		QueryID:                 core.StringPtr(queryID),
		ResourceQueryDefinition: resourceQueryDefinition,
	}
}

// SetQueryID : Allow user to set QueryID
func (options *ReplaceResourcesQueryOptions) SetQueryID(queryID string) *ReplaceResourcesQueryOptions {
	options.QueryID = core.StringPtr(queryID)
	return options
}

// SetResourceQueryDefinition : Allow user to set ResourceQueryDefinition
func (options *ReplaceResourcesQueryOptions) SetResourceQueryDefinition(resourceQueryDefinition *ResourceQueryDefinition) *ReplaceResourcesQueryOptions {
	options.ResourceQueryDefinition = resourceQueryDefinition
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceResourcesQueryOptions) SetHeaders(param map[string]string) *ReplaceResourcesQueryOptions {
	options.Headers = param
	return options
}

// ReplaceTemplateInWorkspaceOptions : The ReplaceTemplateInWorkspace options.
type ReplaceTemplateInWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The ID of the Terraform template in your workspace.  When you create a workspace, the Terraform template that  your
	// workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up the workspace IDs  and template
	// IDs or `template_data.id` in your IBM Cloud account.
	TID *string `validate:"required,ne="`

	// Replace the entire Template in the Workspace.
	Template *Template

	// The personal access token to authenticate with your private GitHub or GitLab repository and access your Terraform
	// template.
	XGithubToken *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceTemplateInWorkspaceOptions : Instantiate ReplaceTemplateInWorkspaceOptions
func (*Schematics20ApiV2) NewReplaceTemplateInWorkspaceOptions(wID string, tID string) *ReplaceTemplateInWorkspaceOptions {
	return &ReplaceTemplateInWorkspaceOptions{
		WID: core.StringPtr(wID),
		TID: core.StringPtr(tID),
	}
}

// SetWID : Allow user to set WID
func (options *ReplaceTemplateInWorkspaceOptions) SetWID(wID string) *ReplaceTemplateInWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTID : Allow user to set TID
func (options *ReplaceTemplateInWorkspaceOptions) SetTID(tID string) *ReplaceTemplateInWorkspaceOptions {
	options.TID = core.StringPtr(tID)
	return options
}

// SetTemplate : Allow user to set Template
func (options *ReplaceTemplateInWorkspaceOptions) SetTemplate(template *Template) *ReplaceTemplateInWorkspaceOptions {
	options.Template = template
	return options
}

// SetXGithubToken : Allow user to set XGithubToken
func (options *ReplaceTemplateInWorkspaceOptions) SetXGithubToken(xGithubToken string) *ReplaceTemplateInWorkspaceOptions {
	options.XGithubToken = core.StringPtr(xGithubToken)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceTemplateInWorkspaceOptions) SetHeaders(param map[string]string) *ReplaceTemplateInWorkspaceOptions {
	options.Headers = param
	return options
}

// ReplaceTriggerOptions : The ReplaceTrigger options.
type ReplaceTriggerOptions struct {
	// Id of the Schematics trigger.
	TriggerID *string `validate:"required,ne="`

	// Replace the Schematics trigger.
	Trigger *Trigger `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceTriggerOptions : Instantiate ReplaceTriggerOptions
func (*Schematics20ApiV2) NewReplaceTriggerOptions(triggerID string, trigger *Trigger) *ReplaceTriggerOptions {
	return &ReplaceTriggerOptions{
		TriggerID: core.StringPtr(triggerID),
		Trigger:   trigger,
	}
}

// SetTriggerID : Allow user to set TriggerID
func (options *ReplaceTriggerOptions) SetTriggerID(triggerID string) *ReplaceTriggerOptions {
	options.TriggerID = core.StringPtr(triggerID)
	return options
}

// SetTrigger : Allow user to set Trigger
func (options *ReplaceTriggerOptions) SetTrigger(trigger *Trigger) *ReplaceTriggerOptions {
	options.Trigger = trigger
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceTriggerOptions) SetHeaders(param map[string]string) *ReplaceTriggerOptions {
	options.Headers = param
	return options
}

// ReplaceWebhookOptions : The ReplaceWebhook options.
type ReplaceWebhookOptions struct {
	// Id of the Schematics web-hook.
	HookID *string `validate:"required,ne="`

	// Replace the Schematics web-hook.
	WebHook *WebHook `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceWebhookOptions : Instantiate ReplaceWebhookOptions
func (*Schematics20ApiV2) NewReplaceWebhookOptions(hookID string, webHook *WebHook) *ReplaceWebhookOptions {
	return &ReplaceWebhookOptions{
		HookID:  core.StringPtr(hookID),
		WebHook: webHook,
	}
}

// SetHookID : Allow user to set HookID
func (options *ReplaceWebhookOptions) SetHookID(hookID string) *ReplaceWebhookOptions {
	options.HookID = core.StringPtr(hookID)
	return options
}

// SetWebHook : Allow user to set WebHook
func (options *ReplaceWebhookOptions) SetWebHook(webHook *WebHook) *ReplaceWebhookOptions {
	options.WebHook = webHook
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceWebhookOptions) SetHeaders(param map[string]string) *ReplaceWebhookOptions {
	options.Headers = param
	return options
}

// ReplaceWorkspaceOptions : The ReplaceWorkspace options.
type ReplaceWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Replace the entire Workspace definition.
	Workspace *Workspace `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceWorkspaceOptions : Instantiate ReplaceWorkspaceOptions
func (*Schematics20ApiV2) NewReplaceWorkspaceOptions(wID string, workspace *Workspace) *ReplaceWorkspaceOptions {
	return &ReplaceWorkspaceOptions{
		WID:       core.StringPtr(wID),
		Workspace: workspace,
	}
}

// SetWID : Allow user to set WID
func (options *ReplaceWorkspaceOptions) SetWID(wID string) *ReplaceWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetWorkspace : Allow user to set Workspace
func (options *ReplaceWorkspaceOptions) SetWorkspace(workspace *Workspace) *ReplaceWorkspaceOptions {
	options.Workspace = workspace
	return options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceWorkspaceOptions) SetHeaders(param map[string]string) *ReplaceWorkspaceOptions {
	options.Headers = param
	return options
}

// ResourceQuery : Describe resource query.
type ResourceQuery struct {
	// Type of the query(workspaces).
	QueryType *string `json:"query_type,omitempty"`

	QueryCondition []ResourceQueryParam `json:"query_condition,omitempty"`

	// List of query selection parameters.
	QuerySelect []string `json:"query_select,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the ResourceQuery.QueryType property.
// Type of the query(workspaces).
const (
	ResourceQuery_QueryType_Workspaces = "workspaces"
)

// SetProperty allows the user to set an arbitrary property on an instance of ResourceQuery
func (o *ResourceQuery) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ResourceQuery
func (o *ResourceQuery) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ResourceQuery
func (o *ResourceQuery) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ResourceQuery
func (o *ResourceQuery) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.QueryType != nil {
		m["query_type"] = o.QueryType
	}
	if o.QueryCondition != nil {
		m["query_condition"] = o.QueryCondition
	}
	if o.QuerySelect != nil {
		m["query_select"] = o.QuerySelect
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalResourceQuery unmarshals an instance of ResourceQuery from the specified map of raw messages.
func UnmarshalResourceQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ResourceQuery)
	err = core.UnmarshalPrimitive(m, "query_type", &obj.QueryType)
	if err != nil {
		return
	}
	delete(m, "query_type")
	err = core.UnmarshalModel(m, "query_condition", &obj.QueryCondition, UnmarshalResourceQueryParam)
	if err != nil {
		return
	}
	delete(m, "query_condition")
	err = core.UnmarshalPrimitive(m, "query_select", &obj.QuerySelect)
	if err != nil {
		return
	}
	delete(m, "query_select")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ResourceQueryDefinition : Describe resource query definition.
type ResourceQueryDefinition struct {
	// Resource type (cluster, vsi, icd, vpc).
	Type *string `json:"type,omitempty"`

	// Resource query name.
	Name *string `json:"name,omitempty"`

	Queries []ResourceQuery `json:"queries,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the ResourceQueryDefinition.Type property.
// Resource type (cluster, vsi, icd, vpc).
const (
	ResourceQueryDefinition_Type_Vsi = "vsi"
)

// SetProperty allows the user to set an arbitrary property on an instance of ResourceQueryDefinition
func (o *ResourceQueryDefinition) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ResourceQueryDefinition
func (o *ResourceQueryDefinition) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ResourceQueryDefinition
func (o *ResourceQueryDefinition) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ResourceQueryDefinition
func (o *ResourceQueryDefinition) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Queries != nil {
		m["queries"] = o.Queries
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalResourceQueryDefinition unmarshals an instance of ResourceQueryDefinition from the specified map of raw messages.
func UnmarshalResourceQueryDefinition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ResourceQueryDefinition)
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalModel(m, "queries", &obj.Queries, UnmarshalResourceQuery)
	if err != nil {
		return
	}
	delete(m, "queries")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ResourceQueryParam : Describe resource query param.
type ResourceQueryParam struct {
	// Name of the resource query param.
	Name *string `json:"name,omitempty"`

	// Value of the resource query param.
	Value *string `json:"value,omitempty"`

	// Description of resource query param variable.
	Description *string `json:"description,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ResourceQueryParam
func (o *ResourceQueryParam) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ResourceQueryParam
func (o *ResourceQueryParam) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ResourceQueryParam
func (o *ResourceQueryParam) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ResourceQueryParam
func (o *ResourceQueryParam) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Value != nil {
		m["value"] = o.Value
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalResourceQueryParam unmarshals an instance of ResourceQueryParam from the specified map of raw messages.
func UnmarshalResourceQueryParam(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ResourceQueryParam)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		return
	}
	delete(m, "value")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ResourceQueryRecord : Describe resource query record.
type ResourceQueryRecord struct {
	// Resource type (cluster, vsi, icd, vpc).
	Type *string `json:"type,omitempty"`

	// Resource query name.
	Name *string `json:"name,omitempty"`

	// Resource Query id.
	ID *string `json:"id,omitempty"`

	// Resource query creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the Resource query.
	CreatedBy *string `json:"created_by,omitempty"`

	// Resource query updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the Resource query.
	UpdatedBy *string `json:"updated_by,omitempty"`

	Queries []ResourceQuery `json:"queries,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the ResourceQueryRecord.Type property.
// Resource type (cluster, vsi, icd, vpc).
const (
	ResourceQueryRecord_Type_Vsi = "vsi"
)

// SetProperty allows the user to set an arbitrary property on an instance of ResourceQueryRecord
func (o *ResourceQueryRecord) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ResourceQueryRecord
func (o *ResourceQueryRecord) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ResourceQueryRecord
func (o *ResourceQueryRecord) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ResourceQueryRecord
func (o *ResourceQueryRecord) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.Queries != nil {
		m["queries"] = o.Queries
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalResourceQueryRecord unmarshals an instance of ResourceQueryRecord from the specified map of raw messages.
func UnmarshalResourceQueryRecord(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ResourceQueryRecord)
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "queries", &obj.Queries, UnmarshalResourceQuery)
	if err != nil {
		return
	}
	delete(m, "queries")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ResourceQueryRecordList : List of Resource query records.
type ResourceQueryRecordList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of resource query records. (Deprecated ResourceQueries. Instead, use resource_queries.).
	ResourceQueries []ResourceQueryRecord `json:"resource_queries,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ResourceQueryRecordList
func (o *ResourceQueryRecordList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ResourceQueryRecordList
func (o *ResourceQueryRecordList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ResourceQueryRecordList
func (o *ResourceQueryRecordList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ResourceQueryRecordList
func (o *ResourceQueryRecordList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.ResourceQueries != nil {
		m["resource_queries"] = o.ResourceQueries
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalResourceQueryRecordList unmarshals an instance of ResourceQueryRecordList from the specified map of raw messages.
func UnmarshalResourceQueryRecordList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ResourceQueryRecordList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "resource_queries", &obj.ResourceQueries, UnmarshalResourceQueryRecord)
	if err != nil {
		return
	}
	delete(m, "resource_queries")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ResourceQueryResponseRecord : Describe resource query.
type ResourceQueryResponseRecord struct {
	Response []ResourceQueryResponseRecordResponse `json:"response,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ResourceQueryResponseRecord
func (o *ResourceQueryResponseRecord) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ResourceQueryResponseRecord
func (o *ResourceQueryResponseRecord) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ResourceQueryResponseRecord
func (o *ResourceQueryResponseRecord) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ResourceQueryResponseRecord
func (o *ResourceQueryResponseRecord) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Response != nil {
		m["response"] = o.Response
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalResourceQueryResponseRecord unmarshals an instance of ResourceQueryResponseRecord from the specified map of raw messages.
func UnmarshalResourceQueryResponseRecord(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ResourceQueryResponseRecord)
	err = core.UnmarshalModel(m, "response", &obj.Response, UnmarshalResourceQueryResponseRecordResponse)
	if err != nil {
		return
	}
	delete(m, "response")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ResourceQueryResponseRecordQueryOutput : List of query output values.
type ResourceQueryResponseRecordQueryOutput struct {
	// Name of the output param.
	Name *string `json:"name,omitempty"`

	// value of the output param.
	Value *string `json:"value,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ResourceQueryResponseRecordQueryOutput
func (o *ResourceQueryResponseRecordQueryOutput) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ResourceQueryResponseRecordQueryOutput
func (o *ResourceQueryResponseRecordQueryOutput) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ResourceQueryResponseRecordQueryOutput
func (o *ResourceQueryResponseRecordQueryOutput) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ResourceQueryResponseRecordQueryOutput
func (o *ResourceQueryResponseRecordQueryOutput) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Value != nil {
		m["value"] = o.Value
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalResourceQueryResponseRecordQueryOutput unmarshals an instance of ResourceQueryResponseRecordQueryOutput from the specified map of raw messages.
func UnmarshalResourceQueryResponseRecordQueryOutput(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ResourceQueryResponseRecordQueryOutput)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		return
	}
	delete(m, "value")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ResourceQueryResponseRecordResponse : ResourceQueryResponseRecordResponse struct
type ResourceQueryResponseRecordResponse struct {
	// Type of the query(workspaces).
	QueryType *string `json:"query_type,omitempty"`

	QueryCondition []ResourceQueryParam `json:"query_condition,omitempty"`

	// List of query selection parameters.
	QuerySelect []string `json:"query_select,omitempty"`

	QueryOutput []ResourceQueryResponseRecordQueryOutput `json:"query_output,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the ResourceQueryResponseRecordResponse.QueryType property.
// Type of the query(workspaces).
const (
	ResourceQueryResponseRecordResponse_QueryType_Workspaces = "workspaces"
)

// SetProperty allows the user to set an arbitrary property on an instance of ResourceQueryResponseRecordResponse
func (o *ResourceQueryResponseRecordResponse) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ResourceQueryResponseRecordResponse
func (o *ResourceQueryResponseRecordResponse) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ResourceQueryResponseRecordResponse
func (o *ResourceQueryResponseRecordResponse) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ResourceQueryResponseRecordResponse
func (o *ResourceQueryResponseRecordResponse) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.QueryType != nil {
		m["query_type"] = o.QueryType
	}
	if o.QueryCondition != nil {
		m["query_condition"] = o.QueryCondition
	}
	if o.QuerySelect != nil {
		m["query_select"] = o.QuerySelect
	}
	if o.QueryOutput != nil {
		m["query_output"] = o.QueryOutput
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalResourceQueryResponseRecordResponse unmarshals an instance of ResourceQueryResponseRecordResponse from the specified map of raw messages.
func UnmarshalResourceQueryResponseRecordResponse(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ResourceQueryResponseRecordResponse)
	err = core.UnmarshalPrimitive(m, "query_type", &obj.QueryType)
	if err != nil {
		return
	}
	delete(m, "query_type")
	err = core.UnmarshalModel(m, "query_condition", &obj.QueryCondition, UnmarshalResourceQueryParam)
	if err != nil {
		return
	}
	delete(m, "query_condition")
	err = core.UnmarshalPrimitive(m, "query_select", &obj.QuerySelect)
	if err != nil {
		return
	}
	delete(m, "query_select")
	err = core.UnmarshalModel(m, "query_output", &obj.QueryOutput, UnmarshalResourceQueryResponseRecordQueryOutput)
	if err != nil {
		return
	}
	delete(m, "query_output")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RunFulfilmentOperationOptions : The RunFulfilmentOperation options.
type RunFulfilmentOperationOptions struct {
	// Fulfilment job order Id.  Use `GET /v2/cart` API to look up the order ids in your IBM Cloud account.
	OrderID *string `validate:"required,ne="`

	// The name of fulfilment job operation (install, uninstall, configure, operate, dryrun, update, destroy).
	Operation *string `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewRunFulfilmentOperationOptions : Instantiate RunFulfilmentOperationOptions
func (*Schematics20ApiV2) NewRunFulfilmentOperationOptions(orderID string, operation string) *RunFulfilmentOperationOptions {
	return &RunFulfilmentOperationOptions{
		OrderID:   core.StringPtr(orderID),
		Operation: core.StringPtr(operation),
	}
}

// SetOrderID : Allow user to set OrderID
func (options *RunFulfilmentOperationOptions) SetOrderID(orderID string) *RunFulfilmentOperationOptions {
	options.OrderID = core.StringPtr(orderID)
	return options
}

// SetOperation : Allow user to set Operation
func (options *RunFulfilmentOperationOptions) SetOperation(operation string) *RunFulfilmentOperationOptions {
	options.Operation = core.StringPtr(operation)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *RunFulfilmentOperationOptions) SetHeaders(param map[string]string) *RunFulfilmentOperationOptions {
	options.Headers = param
	return options
}

// SKUUserState : Status of the underlying schematics objects used to fullfil CartOrder.
type SKUUserState struct {
	// State of the object.
	State *string `json:"state,omitempty"`

	// Name of the User who set the state of the Object.
	SetBy *string `json:"set_by,omitempty"`

	// When the User who set the state of the Object.
	SetAt *strfmt.DateTime `json:"set_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of SKUUserState
func (o *SKUUserState) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of SKUUserState
func (o *SKUUserState) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of SKUUserState
func (o *SKUUserState) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of SKUUserState
func (o *SKUUserState) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.State != nil {
		m["state"] = o.State
	}
	if o.SetBy != nil {
		m["set_by"] = o.SetBy
	}
	if o.SetAt != nil {
		m["set_at"] = o.SetAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalSKUUserState unmarshals an instance of SKUUserState from the specified map of raw messages.
func UnmarshalSKUUserState(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(SKUUserState)
	err = core.UnmarshalPrimitive(m, "state", &obj.State)
	if err != nil {
		return
	}
	delete(m, "state")
	err = core.UnmarshalPrimitive(m, "set_by", &obj.SetBy)
	if err != nil {
		return
	}
	delete(m, "set_by")
	err = core.UnmarshalPrimitive(m, "set_at", &obj.SetAt)
	if err != nil {
		return
	}
	delete(m, "set_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// SchematicsAccessRule : Schematics access rule details.
type SchematicsAccessRule struct {
	// Outcome of the access rule evaluation.
	Effect *string `json:"effect,omitempty"`

	// Schematics job command name.
	CommandName *string `json:"command_name,omitempty"`

	// Schematics job command parameter (playbook-name, capsule-name or flow-name).
	CommandParameter *string `json:"command_parameter,omitempty"`

	// Name of the user who is trying to perform the command.
	Principal *string `json:"principal,omitempty"`

	// Origin of the schematics action event.
	Origin *string `json:"origin,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the SchematicsAccessRule.Effect property.
// Outcome of the access rule evaluation.
const (
	SchematicsAccessRule_Effect_Allow = "allow"
	SchematicsAccessRule_Effect_Deny  = "deny"
)

// Constants associated with the SchematicsAccessRule.CommandName property.
// Schematics job command name.
const (
	SchematicsAccessRule_CommandName_AnsiblePlaybookCheck = "ansible_playbook_check"
	SchematicsAccessRule_CommandName_AnsiblePlaybookRun   = "ansible_playbook_run"
	SchematicsAccessRule_CommandName_CreateAction         = "create_action"
	SchematicsAccessRule_CommandName_CreateCart           = "create_cart"
	SchematicsAccessRule_CommandName_CreateEnvironment    = "create_environment"
	SchematicsAccessRule_CommandName_CreateWorkspace      = "create_workspace"
	SchematicsAccessRule_CommandName_DeleteAction         = "delete_action"
	SchematicsAccessRule_CommandName_DeleteEnvironment    = "delete_environment"
	SchematicsAccessRule_CommandName_DeleteWorkspace      = "delete_workspace"
	SchematicsAccessRule_CommandName_EnvironmentInit      = "environment_init"
	SchematicsAccessRule_CommandName_EnvironmentInstall   = "environment_install"
	SchematicsAccessRule_CommandName_EnvironmentUninstall = "environment_uninstall"
	SchematicsAccessRule_CommandName_PatchAction          = "patch_action"
	SchematicsAccessRule_CommandName_PatchWorkspace       = "patch_workspace"
	SchematicsAccessRule_CommandName_PutAction            = "put_action"
	SchematicsAccessRule_CommandName_PutEnvironment       = "put_environment"
	SchematicsAccessRule_CommandName_PutWorkspace         = "put_workspace"
	SchematicsAccessRule_CommandName_RepositoryProcess    = "repository_process"
	SchematicsAccessRule_CommandName_SystemKeyDelete      = "system_key_delete"
	SchematicsAccessRule_CommandName_SystemKeyDisable     = "system_key_disable"
	SchematicsAccessRule_CommandName_SystemKeyEnable      = "system_key_enable"
	SchematicsAccessRule_CommandName_SystemKeyRestore     = "system_key_restore"
	SchematicsAccessRule_CommandName_SystemKeyRotate      = "system_key_rotate"
	SchematicsAccessRule_CommandName_TerraformCommands    = "terraform_commands"
	SchematicsAccessRule_CommandName_WorkspaceApply       = "workspace_apply"
	SchematicsAccessRule_CommandName_WorkspaceDestroy     = "workspace_destroy"
	SchematicsAccessRule_CommandName_WorkspacePlan        = "workspace_plan"
	SchematicsAccessRule_CommandName_WorkspaceRefresh     = "workspace_refresh"
)

// Constants associated with the SchematicsAccessRule.Origin property.
// Origin of the schematics action event.
const (
	SchematicsAccessRule_Origin_Actions    = "actions"
	SchematicsAccessRule_Origin_Controls   = "controls"
	SchematicsAccessRule_Origin_Datasets   = "datasets"
	SchematicsAccessRule_Origin_Settings   = "settings"
	SchematicsAccessRule_Origin_Workspaces = "workspaces"
)

// SetProperty allows the user to set an arbitrary property on an instance of SchematicsAccessRule
func (o *SchematicsAccessRule) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of SchematicsAccessRule
func (o *SchematicsAccessRule) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of SchematicsAccessRule
func (o *SchematicsAccessRule) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of SchematicsAccessRule
func (o *SchematicsAccessRule) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Effect != nil {
		m["effect"] = o.Effect
	}
	if o.CommandName != nil {
		m["command_name"] = o.CommandName
	}
	if o.CommandParameter != nil {
		m["command_parameter"] = o.CommandParameter
	}
	if o.Principal != nil {
		m["principal"] = o.Principal
	}
	if o.Origin != nil {
		m["origin"] = o.Origin
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalSchematicsAccessRule unmarshals an instance of SchematicsAccessRule from the specified map of raw messages.
func UnmarshalSchematicsAccessRule(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(SchematicsAccessRule)
	err = core.UnmarshalPrimitive(m, "effect", &obj.Effect)
	if err != nil {
		return
	}
	delete(m, "effect")
	err = core.UnmarshalPrimitive(m, "command_name", &obj.CommandName)
	if err != nil {
		return
	}
	delete(m, "command_name")
	err = core.UnmarshalPrimitive(m, "command_parameter", &obj.CommandParameter)
	if err != nil {
		return
	}
	delete(m, "command_parameter")
	err = core.UnmarshalPrimitive(m, "principal", &obj.Principal)
	if err != nil {
		return
	}
	delete(m, "principal")
	err = core.UnmarshalPrimitive(m, "origin", &obj.Origin)
	if err != nil {
		return
	}
	delete(m, "origin")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// SchematicsAccessRuleList : List of Schematics access rule details.
type SchematicsAccessRuleList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of access-rules.
	AccessRules []SchematicsAccessRule `json:"access_rules,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of SchematicsAccessRuleList
func (o *SchematicsAccessRuleList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of SchematicsAccessRuleList
func (o *SchematicsAccessRuleList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of SchematicsAccessRuleList
func (o *SchematicsAccessRuleList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of SchematicsAccessRuleList
func (o *SchematicsAccessRuleList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.AccessRules != nil {
		m["access_rules"] = o.AccessRules
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalSchematicsAccessRuleList unmarshals an instance of SchematicsAccessRuleList from the specified map of raw messages.
func UnmarshalSchematicsAccessRuleList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(SchematicsAccessRuleList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "access_rules", &obj.AccessRules, UnmarshalSchematicsAccessRule)
	if err != nil {
		return
	}
	delete(m, "access_rules")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// SchematicsInfo : Details about IBM Cloud Schematics service supported template types and versions, and the supported locations.
type SchematicsInfo struct {
	// Schematics version.
	SchematicsVersion *string `json:"schematics_version,omitempty"`

	// Schematics build number.
	SchematicsBuild *string `json:"schematics_build,omitempty"`

	// Supported locations for IBM Cloud Schematics.
	SupportedLocations []string `json:"supported_locations,omitempty"`

	// Support template-types in IBM Cloud Schematics.
	SupportedTemplates map[string][]string `json:"supported_templates,omitempty"`

	// Supported runtime components for each template-types in Schematics.
	SupportedRuntimes map[string][]SchematicsRuntimeInfo `json:"supported_runtimes,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the SchematicsInfo.SupportedLocations property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	SchematicsInfo_SupportedLocations_EuDe    = "eu-de"
	SchematicsInfo_SupportedLocations_EuGb    = "eu-gb"
	SchematicsInfo_SupportedLocations_UsEast  = "us-east"
	SchematicsInfo_SupportedLocations_UsSouth = "us-south"
)

// Constants associated with the SchematicsInfo.SupportedTemplates property.
// Support template-types in IBM Cloud Schematics.
const (
	SchematicsInfo_SupportedTemplates_AnsibleV22     = "ansible_v2_2"
	SchematicsInfo_SupportedTemplates_AnsibleV23     = "ansible_v2_3"
	SchematicsInfo_SupportedTemplates_HelmV215       = "helm_v2_15"
	SchematicsInfo_SupportedTemplates_HelmV216       = "helm_v2_16"
	SchematicsInfo_SupportedTemplates_IbmCloudPakV31 = "ibm_cloud_pak_v3_1"
	SchematicsInfo_SupportedTemplates_TerraformV011  = "terraform_v0_11"
	SchematicsInfo_SupportedTemplates_TerraformV012  = "terraform_v0_12"
)

// SetProperty allows the user to set an arbitrary property on an instance of SchematicsInfo
func (o *SchematicsInfo) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of SchematicsInfo
func (o *SchematicsInfo) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of SchematicsInfo
func (o *SchematicsInfo) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of SchematicsInfo
func (o *SchematicsInfo) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.SchematicsVersion != nil {
		m["schematics_version"] = o.SchematicsVersion
	}
	if o.SchematicsBuild != nil {
		m["schematics_build"] = o.SchematicsBuild
	}
	if o.SupportedLocations != nil {
		m["supported_locations"] = o.SupportedLocations
	}
	if o.SupportedTemplates != nil {
		m["supported_templates"] = o.SupportedTemplates
	}
	if o.SupportedRuntimes != nil {
		m["supported_runtimes"] = o.SupportedRuntimes
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalSchematicsInfo unmarshals an instance of SchematicsInfo from the specified map of raw messages.
func UnmarshalSchematicsInfo(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(SchematicsInfo)
	err = core.UnmarshalPrimitive(m, "schematics_version", &obj.SchematicsVersion)
	if err != nil {
		return
	}
	delete(m, "schematics_version")
	err = core.UnmarshalPrimitive(m, "schematics_build", &obj.SchematicsBuild)
	if err != nil {
		return
	}
	delete(m, "schematics_build")
	err = core.UnmarshalPrimitive(m, "supported_locations", &obj.SupportedLocations)
	if err != nil {
		return
	}
	delete(m, "supported_locations")
	err = core.UnmarshalPrimitive(m, "supported_templates", &obj.SupportedTemplates)
	if err != nil {
		return
	}
	delete(m, "supported_templates")
	err = core.UnmarshalModel(m, "supported_runtimes", &obj.SupportedRuntimes, UnmarshalSchematicsRuntimeInfo)
	if err != nil {
		return
	}
	delete(m, "supported_runtimes")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// SchematicsLocationsList : The list of locations details.
type SchematicsLocationsList struct {
	// The list of locations.
	Locations []SchematicsLocationsLite `json:"locations,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of SchematicsLocationsList
func (o *SchematicsLocationsList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of SchematicsLocationsList
func (o *SchematicsLocationsList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of SchematicsLocationsList
func (o *SchematicsLocationsList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of SchematicsLocationsList
func (o *SchematicsLocationsList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Locations != nil {
		m["locations"] = o.Locations
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalSchematicsLocationsList unmarshals an instance of SchematicsLocationsList from the specified map of raw messages.
func UnmarshalSchematicsLocationsList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(SchematicsLocationsList)
	err = core.UnmarshalModel(m, "locations", &obj.Locations, UnmarshalSchematicsLocationsLite)
	if err != nil {
		return
	}
	delete(m, "locations")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// SchematicsLocationsLite : An individual location details.
type SchematicsLocationsLite struct {
	// The Geographical region code having the data centres of the IBM Cloud Schematics service.
	Region *string `json:"region,omitempty"`

	// The Geographical city locations having the data centres of the IBM Cloud Schematics service.
	Metro *string `json:"metro,omitempty"`

	// The Geographical continent locations code having the data centres of the IBM Cloud Schematics service.
	GeographyCode *string `json:"geography_code,omitempty"`

	// The Geographical continent locations having the data centres of the IBM Cloud Schematics service.
	Geography *string `json:"geography,omitempty"`

	// The Country locations having the data centres of the IBM Cloud Schematics service.
	Country *string `json:"country,omitempty"`

	// The kind of location.
	Kind *string `json:"kind,omitempty"`

	// The list of paired regions used by the Schematics.
	PairedRegion []string `json:"paired_region,omitempty"`

	// The restricted region.
	Restricted *bool `json:"restricted,omitempty"`

	// Display name for the region.
	DisplayName *string `json:"display_name,omitempty"`

	// Schematics public endpoint for the region.
	SchematicsRegionalPublicEndpoint *string `json:"schematics_regional_public_endpoint,omitempty"`

	// Schematics private endpoint for the region.
	SchematicsRegionalPrivateEndpoint *string `json:"schematics_regional_private_endpoint,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of SchematicsLocationsLite
func (o *SchematicsLocationsLite) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of SchematicsLocationsLite
func (o *SchematicsLocationsLite) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of SchematicsLocationsLite
func (o *SchematicsLocationsLite) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of SchematicsLocationsLite
func (o *SchematicsLocationsLite) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Region != nil {
		m["region"] = o.Region
	}
	if o.Metro != nil {
		m["metro"] = o.Metro
	}
	if o.GeographyCode != nil {
		m["geography_code"] = o.GeographyCode
	}
	if o.Geography != nil {
		m["geography"] = o.Geography
	}
	if o.Country != nil {
		m["country"] = o.Country
	}
	if o.Kind != nil {
		m["kind"] = o.Kind
	}
	if o.PairedRegion != nil {
		m["paired_region"] = o.PairedRegion
	}
	if o.Restricted != nil {
		m["restricted"] = o.Restricted
	}
	if o.DisplayName != nil {
		m["display_name"] = o.DisplayName
	}
	if o.SchematicsRegionalPublicEndpoint != nil {
		m["schematics_regional_public_endpoint"] = o.SchematicsRegionalPublicEndpoint
	}
	if o.SchematicsRegionalPrivateEndpoint != nil {
		m["schematics_regional_private_endpoint"] = o.SchematicsRegionalPrivateEndpoint
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalSchematicsLocationsLite unmarshals an instance of SchematicsLocationsLite from the specified map of raw messages.
func UnmarshalSchematicsLocationsLite(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(SchematicsLocationsLite)
	err = core.UnmarshalPrimitive(m, "region", &obj.Region)
	if err != nil {
		return
	}
	delete(m, "region")
	err = core.UnmarshalPrimitive(m, "metro", &obj.Metro)
	if err != nil {
		return
	}
	delete(m, "metro")
	err = core.UnmarshalPrimitive(m, "geography_code", &obj.GeographyCode)
	if err != nil {
		return
	}
	delete(m, "geography_code")
	err = core.UnmarshalPrimitive(m, "geography", &obj.Geography)
	if err != nil {
		return
	}
	delete(m, "geography")
	err = core.UnmarshalPrimitive(m, "country", &obj.Country)
	if err != nil {
		return
	}
	delete(m, "country")
	err = core.UnmarshalPrimitive(m, "kind", &obj.Kind)
	if err != nil {
		return
	}
	delete(m, "kind")
	err = core.UnmarshalPrimitive(m, "paired_region", &obj.PairedRegion)
	if err != nil {
		return
	}
	delete(m, "paired_region")
	err = core.UnmarshalPrimitive(m, "restricted", &obj.Restricted)
	if err != nil {
		return
	}
	delete(m, "restricted")
	err = core.UnmarshalPrimitive(m, "display_name", &obj.DisplayName)
	if err != nil {
		return
	}
	delete(m, "display_name")
	err = core.UnmarshalPrimitive(m, "schematics_regional_public_endpoint", &obj.SchematicsRegionalPublicEndpoint)
	if err != nil {
		return
	}
	delete(m, "schematics_regional_public_endpoint")
	err = core.UnmarshalPrimitive(m, "schematics_regional_private_endpoint", &obj.SchematicsRegionalPrivateEndpoint)
	if err != nil {
		return
	}
	delete(m, "schematics_regional_private_endpoint")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// SchematicsRuntimeInfo : Runtime components for each template-types in Schematics.
type SchematicsRuntimeInfo struct {
	// Runtime image name.
	RuntimeImage *string `json:"runtime_image,omitempty"`

	// Properties of the Runtime image.
	RuntimeProperties map[string][]string `json:"runtime_properties,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of SchematicsRuntimeInfo
func (o *SchematicsRuntimeInfo) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of SchematicsRuntimeInfo
func (o *SchematicsRuntimeInfo) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of SchematicsRuntimeInfo
func (o *SchematicsRuntimeInfo) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of SchematicsRuntimeInfo
func (o *SchematicsRuntimeInfo) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.RuntimeImage != nil {
		m["runtime_image"] = o.RuntimeImage
	}
	if o.RuntimeProperties != nil {
		m["runtime_properties"] = o.RuntimeProperties
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalSchematicsRuntimeInfo unmarshals an instance of SchematicsRuntimeInfo from the specified map of raw messages.
func UnmarshalSchematicsRuntimeInfo(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(SchematicsRuntimeInfo)
	err = core.UnmarshalPrimitive(m, "runtime_image", &obj.RuntimeImage)
	if err != nil {
		return
	}
	delete(m, "runtime_image")
	err = core.UnmarshalPrimitive(m, "runtime_properties", &obj.RuntimeProperties)
	if err != nil {
		return
	}
	delete(m, "runtime_properties")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ServiceMappingRule : Rule to map input param_name to output_param.
type ServiceMappingRule struct {
	// Type of mapping.
	Type *string `json:"type,omitempty"`

	// Input parameter name which acts as source for mapping.
	InputParamName *string `json:"input_param_name,omitempty"`

	// Output parameter name which acts as destination for mapping.
	OutputParamName *string `json:"output_param_name,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ServiceMappingRule
func (o *ServiceMappingRule) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ServiceMappingRule
func (o *ServiceMappingRule) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ServiceMappingRule
func (o *ServiceMappingRule) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ServiceMappingRule
func (o *ServiceMappingRule) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.InputParamName != nil {
		m["input_param_name"] = o.InputParamName
	}
	if o.OutputParamName != nil {
		m["output_param_name"] = o.OutputParamName
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalServiceMappingRule unmarshals an instance of ServiceMappingRule from the specified map of raw messages.
func UnmarshalServiceMappingRule(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ServiceMappingRule)
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalPrimitive(m, "input_param_name", &obj.InputParamName)
	if err != nil {
		return
	}
	delete(m, "input_param_name")
	err = core.UnmarshalPrimitive(m, "output_param_name", &obj.OutputParamName)
	if err != nil {
		return
	}
	delete(m, "output_param_name")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ServiceVariableData : User editable service variable data & system generated reference to value.
type ServiceVariableData struct {
	// Name of the variable.
	Name *string `json:"name,omitempty"`

	// Value for the variable or reference to the value.
	Value *string `json:"value,omitempty"`

	// An user editable metadata for the variables.
	Metadata *VariableMetadata `json:"metadata,omitempty"`

	// Service Mapping Rule.
	Mapping []ServiceMappingRule `json:"mapping,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ServiceVariableData
func (o *ServiceVariableData) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ServiceVariableData
func (o *ServiceVariableData) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ServiceVariableData
func (o *ServiceVariableData) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ServiceVariableData
func (o *ServiceVariableData) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Value != nil {
		m["value"] = o.Value
	}
	if o.Metadata != nil {
		m["metadata"] = o.Metadata
	}
	if o.Mapping != nil {
		m["mapping"] = o.Mapping
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalServiceVariableData unmarshals an instance of ServiceVariableData from the specified map of raw messages.
func UnmarshalServiceVariableData(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ServiceVariableData)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		return
	}
	delete(m, "value")
	err = core.UnmarshalModel(m, "metadata", &obj.Metadata, UnmarshalVariableMetadata)
	if err != nil {
		return
	}
	delete(m, "metadata")
	err = core.UnmarshalModel(m, "mapping", &obj.Mapping, UnmarshalServiceMappingRule)
	if err != nil {
		return
	}
	delete(m, "mapping")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// SystemLock : System lock status.
type SystemLock struct {
	// Is the automation locked by a Schematic job ?.
	SysLocked *bool `json:"sys_locked,omitempty"`

	// Name of the User who performed the job, that lead to the locking of the automation.
	SysLockedBy *string `json:"sys_locked_by,omitempty"`

	// When the User performed the job that lead to locking of the automation ?.
	SysLockedAt *strfmt.DateTime `json:"sys_locked_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of SystemLock
func (o *SystemLock) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of SystemLock
func (o *SystemLock) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of SystemLock
func (o *SystemLock) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of SystemLock
func (o *SystemLock) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.SysLocked != nil {
		m["sys_locked"] = o.SysLocked
	}
	if o.SysLockedBy != nil {
		m["sys_locked_by"] = o.SysLockedBy
	}
	if o.SysLockedAt != nil {
		m["sys_locked_at"] = o.SysLockedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalSystemLock unmarshals an instance of SystemLock from the specified map of raw messages.
func UnmarshalSystemLock(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(SystemLock)
	err = core.UnmarshalPrimitive(m, "sys_locked", &obj.SysLocked)
	if err != nil {
		return
	}
	delete(m, "sys_locked")
	err = core.UnmarshalPrimitive(m, "sys_locked_by", &obj.SysLockedBy)
	if err != nil {
		return
	}
	delete(m, "sys_locked_by")
	err = core.UnmarshalPrimitive(m, "sys_locked_at", &obj.SysLockedAt)
	if err != nil {
		return
	}
	delete(m, "sys_locked_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TargetRequest : Target cluster details to perform POC operation.
type TargetRequest struct {
	// Cluster Id.
	ClusterID *string `json:"cluster_id,omitempty"`

	// Cluster name.
	ClusterName *string `json:"cluster_name,omitempty"`

	// Entitlement key.
	EntitlementKey interface{} `json:"entitlement_key,omitempty"`

	// K8s namespace.
	Namespace *string `json:"namespace,omitempty"`

	// Cluster region.
	Region *string `json:"region,omitempty"`

	// Resource group id.
	ResourceGroupID *string `json:"resource_group_id,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of TargetRequest
func (o *TargetRequest) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TargetRequest
func (o *TargetRequest) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TargetRequest
func (o *TargetRequest) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TargetRequest
func (o *TargetRequest) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ClusterID != nil {
		m["cluster_id"] = o.ClusterID
	}
	if o.ClusterName != nil {
		m["cluster_name"] = o.ClusterName
	}
	if o.EntitlementKey != nil {
		m["entitlement_key"] = o.EntitlementKey
	}
	if o.Namespace != nil {
		m["namespace"] = o.Namespace
	}
	if o.Region != nil {
		m["region"] = o.Region
	}
	if o.ResourceGroupID != nil {
		m["resource_group_id"] = o.ResourceGroupID
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTargetRequest unmarshals an instance of TargetRequest from the specified map of raw messages.
func UnmarshalTargetRequest(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TargetRequest)
	err = core.UnmarshalPrimitive(m, "cluster_id", &obj.ClusterID)
	if err != nil {
		return
	}
	delete(m, "cluster_id")
	err = core.UnmarshalPrimitive(m, "cluster_name", &obj.ClusterName)
	if err != nil {
		return
	}
	delete(m, "cluster_name")
	err = core.UnmarshalPrimitive(m, "entitlement_key", &obj.EntitlementKey)
	if err != nil {
		return
	}
	delete(m, "entitlement_key")
	err = core.UnmarshalPrimitive(m, "namespace", &obj.Namespace)
	if err != nil {
		return
	}
	delete(m, "namespace")
	err = core.UnmarshalPrimitive(m, "region", &obj.Region)
	if err != nil {
		return
	}
	delete(m, "region")
	err = core.UnmarshalPrimitive(m, "resource_group_id", &obj.ResourceGroupID)
	if err != nil {
		return
	}
	delete(m, "resource_group_id")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Template : Complete Template definition with user inputs and system generated data.
type Template struct {
	// Name of the template. Should be unique within a workspace.
	Name *string `json:"name,omitempty"`

	// Template description.
	Description *string `json:"description,omitempty"`

	// Template type.  Ex: terraform_v0.11, terraform_v0.12, ansible.
	Type *string `json:"type,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Type of source for the Template.
	SourceType *string `json:"source_type,omitempty"`

	// Source of templates, playbooks, or controls.
	Source *ExternalSource `json:"source,omitempty"`

	// URL of the README file, for the source.
	SourceReadmeURL *string `json:"source_readme_url,omitempty"`

	// Input variables for the Template.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Output variables from the Template.
	Outputs []VariableData `json:"outputs,omitempty"`

	// Environment variables used by the template.
	Settings []VariableData `json:"settings,omitempty"`

	// Target inventory record ID used by the template to deploy the resources.
	Inventory *string `json:"inventory,omitempty"`

	// template ID generated by the system.
	ID *string `json:"id,omitempty"`

	// Template Source creation time.
	SourceCreatedAt *strfmt.DateTime `json:"source_created_at,omitempty"`

	// Email address of user who created the Template Source.
	SourceCreatedBy *string `json:"source_created_by,omitempty"`

	// Template Source updation time.
	SourceUpdatedAt *strfmt.DateTime `json:"source_updated_at,omitempty"`

	// Email address of user who updated the Template Source.
	SourceUpdatedBy *string `json:"source_updated_by,omitempty"`

	// Template creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the template.
	CreatedBy *string `json:"created_by,omitempty"`

	// Template updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the template.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Template Job Status.
	Status *JobStatusTemplate `json:"status,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the Template.SourceType property.
// Type of source for the Template.
const (
	Template_SourceType_ExternalScm      = "external_scm"
	Template_SourceType_GitHub           = "git_hub"
	Template_SourceType_GitHubEnterprise = "git_hub_enterprise"
	Template_SourceType_GitLab           = "git_lab"
	Template_SourceType_IbmCloudCatalog  = "ibm_cloud_catalog"
	Template_SourceType_IbmGitLab        = "ibm_git_lab"
	Template_SourceType_Local            = "local"
)

// SetProperty allows the user to set an arbitrary property on an instance of Template
func (o *Template) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of Template
func (o *Template) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of Template
func (o *Template) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of Template
func (o *Template) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.SourceType != nil {
		m["source_type"] = o.SourceType
	}
	if o.Source != nil {
		m["source"] = o.Source
	}
	if o.SourceReadmeURL != nil {
		m["source_readme_url"] = o.SourceReadmeURL
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	if o.Settings != nil {
		m["settings"] = o.Settings
	}
	if o.Inventory != nil {
		m["inventory"] = o.Inventory
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.SourceCreatedAt != nil {
		m["source_created_at"] = o.SourceCreatedAt
	}
	if o.SourceCreatedBy != nil {
		m["source_created_by"] = o.SourceCreatedBy
	}
	if o.SourceUpdatedAt != nil {
		m["source_updated_at"] = o.SourceUpdatedAt
	}
	if o.SourceUpdatedBy != nil {
		m["source_updated_by"] = o.SourceUpdatedBy
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.Status != nil {
		m["status"] = o.Status
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplate unmarshals an instance of Template from the specified map of raw messages.
func UnmarshalTemplate(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Template)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalPrimitive(m, "source_type", &obj.SourceType)
	if err != nil {
		return
	}
	delete(m, "source_type")
	err = core.UnmarshalModel(m, "source", &obj.Source, UnmarshalExternalSource)
	if err != nil {
		return
	}
	delete(m, "source")
	err = core.UnmarshalPrimitive(m, "source_readme_url", &obj.SourceReadmeURL)
	if err != nil {
		return
	}
	delete(m, "source_readme_url")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "outputs")
	err = core.UnmarshalModel(m, "settings", &obj.Settings, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "settings")
	err = core.UnmarshalPrimitive(m, "inventory", &obj.Inventory)
	if err != nil {
		return
	}
	delete(m, "inventory")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "source_created_at", &obj.SourceCreatedAt)
	if err != nil {
		return
	}
	delete(m, "source_created_at")
	err = core.UnmarshalPrimitive(m, "source_created_by", &obj.SourceCreatedBy)
	if err != nil {
		return
	}
	delete(m, "source_created_by")
	err = core.UnmarshalPrimitive(m, "source_updated_at", &obj.SourceUpdatedAt)
	if err != nil {
		return
	}
	delete(m, "source_updated_at")
	err = core.UnmarshalPrimitive(m, "source_updated_by", &obj.SourceUpdatedBy)
	if err != nil {
		return
	}
	delete(m, "source_updated_by")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "status", &obj.Status, UnmarshalJobStatusTemplate)
	if err != nil {
		return
	}
	delete(m, "status")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateCommand : Name of the template-specific command.
type TemplateCommand struct {
	// Schematics job command name.
	Command *string `json:"command,omitempty"`

	// Options supported by the Template Command - it will be used as command line options for Terraform, Helm, Operator
	// engine Eg -parallelism=n  -var-file=myvarfile.
	CommandOptions []string `json:"command_options,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the TemplateCommand.Command property.
// Schematics job command name.
const (
	TemplateCommand_Command_AnsiblePlaybookCheck = "ansible_playbook_check"
	TemplateCommand_Command_AnsiblePlaybookRun   = "ansible_playbook_run"
	TemplateCommand_Command_CreateAction         = "create_action"
	TemplateCommand_Command_CreateCart           = "create_cart"
	TemplateCommand_Command_CreateEnvironment    = "create_environment"
	TemplateCommand_Command_CreateWorkspace      = "create_workspace"
	TemplateCommand_Command_DeleteAction         = "delete_action"
	TemplateCommand_Command_DeleteEnvironment    = "delete_environment"
	TemplateCommand_Command_DeleteWorkspace      = "delete_workspace"
	TemplateCommand_Command_EnvironmentInit      = "environment_init"
	TemplateCommand_Command_EnvironmentInstall   = "environment_install"
	TemplateCommand_Command_EnvironmentUninstall = "environment_uninstall"
	TemplateCommand_Command_PatchAction          = "patch_action"
	TemplateCommand_Command_PatchWorkspace       = "patch_workspace"
	TemplateCommand_Command_PutAction            = "put_action"
	TemplateCommand_Command_PutEnvironment       = "put_environment"
	TemplateCommand_Command_PutWorkspace         = "put_workspace"
	TemplateCommand_Command_RepositoryProcess    = "repository_process"
	TemplateCommand_Command_SystemKeyDelete      = "system_key_delete"
	TemplateCommand_Command_SystemKeyDisable     = "system_key_disable"
	TemplateCommand_Command_SystemKeyEnable      = "system_key_enable"
	TemplateCommand_Command_SystemKeyRestore     = "system_key_restore"
	TemplateCommand_Command_SystemKeyRotate      = "system_key_rotate"
	TemplateCommand_Command_TerraformCommands    = "terraform_commands"
	TemplateCommand_Command_WorkspaceApply       = "workspace_apply"
	TemplateCommand_Command_WorkspaceDestroy     = "workspace_destroy"
	TemplateCommand_Command_WorkspacePlan        = "workspace_plan"
	TemplateCommand_Command_WorkspaceRefresh     = "workspace_refresh"
)

// SetProperty allows the user to set an arbitrary property on an instance of TemplateCommand
func (o *TemplateCommand) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateCommand
func (o *TemplateCommand) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateCommand
func (o *TemplateCommand) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateCommand
func (o *TemplateCommand) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Command != nil {
		m["command"] = o.Command
	}
	if o.CommandOptions != nil {
		m["command_options"] = o.CommandOptions
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateCommand unmarshals an instance of TemplateCommand from the specified map of raw messages.
func UnmarshalTemplateCommand(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateCommand)
	err = core.UnmarshalPrimitive(m, "command", &obj.Command)
	if err != nil {
		return
	}
	delete(m, "command")
	err = core.UnmarshalPrimitive(m, "command_options", &obj.CommandOptions)
	if err != nil {
		return
	}
	delete(m, "command_options")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateFlow : Complete Flow details with user inputs and system generated data.
type TemplateFlow struct {
	// Name of the Flow.
	Name *string `json:"name,omitempty"`

	// Version of the flow definition. Only value 'V1' is accepted.
	Version *string `json:"version,omitempty"`

	// Type of flow.
	Type *string `json:"type,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Flow definition.
	Definition *TemplateFlowDefinition `json:"definition,omitempty"`

	// Id of the Flow.
	ID *string `json:"id,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Flow creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the flow.
	CreatedBy *string `json:"created_by,omitempty"`

	// Flow updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the flow.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Flow Job Status.
	Status *JobStatusWorkspaceTemplateFlow `json:"status,omitempty"`

	// Validation summary.
	ValidationSummary *TemplateFlowValidationSummary `json:"validation_summary,omitempty"`

	// Validation details.
	ValidationLogs []TemplateFlowValidationLogs `json:"validation_logs,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the TemplateFlow.Type property.
// Type of flow.
const (
	TemplateFlow_Type_NodeRedFlow = "node_red_flow"
	TemplateFlow_Type_SimpleFlow  = "simple_flow"
)

// SetProperty allows the user to set an arbitrary property on an instance of TemplateFlow
func (o *TemplateFlow) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateFlow
func (o *TemplateFlow) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateFlow
func (o *TemplateFlow) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateFlow
func (o *TemplateFlow) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Version != nil {
		m["version"] = o.Version
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.Definition != nil {
		m["definition"] = o.Definition
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.Status != nil {
		m["status"] = o.Status
	}
	if o.ValidationSummary != nil {
		m["validation_summary"] = o.ValidationSummary
	}
	if o.ValidationLogs != nil {
		m["validation_logs"] = o.ValidationLogs
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateFlow unmarshals an instance of TemplateFlow from the specified map of raw messages.
func UnmarshalTemplateFlow(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateFlow)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "version", &obj.Version)
	if err != nil {
		return
	}
	delete(m, "version")
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalModel(m, "definition", &obj.Definition, UnmarshalTemplateFlowDefinition)
	if err != nil {
		return
	}
	delete(m, "definition")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "status", &obj.Status, UnmarshalJobStatusWorkspaceTemplateFlow)
	if err != nil {
		return
	}
	delete(m, "status")
	err = core.UnmarshalModel(m, "validation_summary", &obj.ValidationSummary, UnmarshalTemplateFlowValidationSummary)
	if err != nil {
		return
	}
	delete(m, "validation_summary")
	err = core.UnmarshalModel(m, "validation_logs", &obj.ValidationLogs, UnmarshalTemplateFlowValidationLogs)
	if err != nil {
		return
	}
	delete(m, "validation_logs")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateFlowDataValidationStatus : Flow data-flow validation status.
type TemplateFlowDataValidationStatus struct {
	// Validation status of the template variable.
	LogLevel *string `json:"log_level,omitempty"`

	// Input variable name.
	VarName *string `json:"var_name,omitempty"`

	// Validation log message related to the template variable.
	VarStatus *string `json:"var_status,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the TemplateFlowDataValidationStatus.LogLevel property.
// Validation status of the template variable.
const (
	TemplateFlowDataValidationStatus_LogLevel_Error   = "error"
	TemplateFlowDataValidationStatus_LogLevel_Info    = "info"
	TemplateFlowDataValidationStatus_LogLevel_Warning = "warning"
)

// SetProperty allows the user to set an arbitrary property on an instance of TemplateFlowDataValidationStatus
func (o *TemplateFlowDataValidationStatus) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateFlowDataValidationStatus
func (o *TemplateFlowDataValidationStatus) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateFlowDataValidationStatus
func (o *TemplateFlowDataValidationStatus) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateFlowDataValidationStatus
func (o *TemplateFlowDataValidationStatus) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.LogLevel != nil {
		m["log_level"] = o.LogLevel
	}
	if o.VarName != nil {
		m["var_name"] = o.VarName
	}
	if o.VarStatus != nil {
		m["var_status"] = o.VarStatus
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateFlowDataValidationStatus unmarshals an instance of TemplateFlowDataValidationStatus from the specified map of raw messages.
func UnmarshalTemplateFlowDataValidationStatus(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateFlowDataValidationStatus)
	err = core.UnmarshalPrimitive(m, "log_level", &obj.LogLevel)
	if err != nil {
		return
	}
	delete(m, "log_level")
	err = core.UnmarshalPrimitive(m, "var_name", &obj.VarName)
	if err != nil {
		return
	}
	delete(m, "var_name")
	err = core.UnmarshalPrimitive(m, "var_status", &obj.VarStatus)
	if err != nil {
		return
	}
	delete(m, "var_status")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateFlowDefinition : Flow definition.
type TemplateFlowDefinition struct {
	// Type of flow definition.
	FlowType *string `json:"flow_type,omitempty"`

	// Flow definition id.
	ID *string `json:"id,omitempty"`

	// Simple inbuilt flow defined using a list of template operations.
	SimpleFlow []TemplateFlowDefinitionSimpleFlow `json:"simple_flow,omitempty"`

	// flow definition string used by an external engine (eg. NodeRed).
	CustomFlow *[]byte `json:"custom_flow,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the TemplateFlowDefinition.FlowType property.
// Type of flow definition.
const (
	TemplateFlowDefinition_FlowType_Custom = "custom"
	TemplateFlowDefinition_FlowType_Simple = "simple"
)

// SetProperty allows the user to set an arbitrary property on an instance of TemplateFlowDefinition
func (o *TemplateFlowDefinition) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateFlowDefinition
func (o *TemplateFlowDefinition) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateFlowDefinition
func (o *TemplateFlowDefinition) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateFlowDefinition
func (o *TemplateFlowDefinition) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.FlowType != nil {
		m["flow_type"] = o.FlowType
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.SimpleFlow != nil {
		m["simple_flow"] = o.SimpleFlow
	}
	if o.CustomFlow != nil {
		m["custom_flow"] = o.CustomFlow
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateFlowDefinition unmarshals an instance of TemplateFlowDefinition from the specified map of raw messages.
func UnmarshalTemplateFlowDefinition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateFlowDefinition)
	err = core.UnmarshalPrimitive(m, "flow_type", &obj.FlowType)
	if err != nil {
		return
	}
	delete(m, "flow_type")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalModel(m, "simple_flow", &obj.SimpleFlow, UnmarshalTemplateFlowDefinitionSimpleFlow)
	if err != nil {
		return
	}
	delete(m, "simple_flow")
	err = core.UnmarshalPrimitive(m, "custom_flow", &obj.CustomFlow)
	if err != nil {
		return
	}
	delete(m, "custom_flow")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateFlowDefinitionSimpleFlow : TemplateFlowDefinitionSimpleFlow struct
type TemplateFlowDefinitionSimpleFlow struct {
	// Line number of the template-operation.
	Index *int64 `json:"index,omitempty"`

	// Control action in the flow.
	Control *string `json:"control,omitempty"`

	// Template operation in the flow.
	TemplateOperation *TemplateFlowDefinitionTemplateOperation `json:"template_operation,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the TemplateFlowDefinitionSimpleFlow.Control property.
// Control action in the flow.
const (
	TemplateFlowDefinitionSimpleFlow_Control_BranchIf    = "branch_if"
	TemplateFlowDefinitionSimpleFlow_Control_Do          = "do"
	TemplateFlowDefinitionSimpleFlow_Control_RepeatUntil = "repeat_until"
	TemplateFlowDefinitionSimpleFlow_Control_Switch      = "switch"
	TemplateFlowDefinitionSimpleFlow_Control_WaitUntil   = "wait_until"
)

// SetProperty allows the user to set an arbitrary property on an instance of TemplateFlowDefinitionSimpleFlow
func (o *TemplateFlowDefinitionSimpleFlow) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateFlowDefinitionSimpleFlow
func (o *TemplateFlowDefinitionSimpleFlow) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateFlowDefinitionSimpleFlow
func (o *TemplateFlowDefinitionSimpleFlow) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateFlowDefinitionSimpleFlow
func (o *TemplateFlowDefinitionSimpleFlow) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Index != nil {
		m["index"] = o.Index
	}
	if o.Control != nil {
		m["control"] = o.Control
	}
	if o.TemplateOperation != nil {
		m["template_operation"] = o.TemplateOperation
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateFlowDefinitionSimpleFlow unmarshals an instance of TemplateFlowDefinitionSimpleFlow from the specified map of raw messages.
func UnmarshalTemplateFlowDefinitionSimpleFlow(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateFlowDefinitionSimpleFlow)
	err = core.UnmarshalPrimitive(m, "index", &obj.Index)
	if err != nil {
		return
	}
	delete(m, "index")
	err = core.UnmarshalPrimitive(m, "control", &obj.Control)
	if err != nil {
		return
	}
	delete(m, "control")
	err = core.UnmarshalModel(m, "template_operation", &obj.TemplateOperation, UnmarshalTemplateFlowDefinitionTemplateOperation)
	if err != nil {
		return
	}
	delete(m, "template_operation")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateFlowDefinitionTemplateOperation : Template operation in the flow.
type TemplateFlowDefinitionTemplateOperation struct {
	// Condition expression that will be evaluated before performing the template command; if false, this template action
	// is skipped to the next.
	PreCondition *string `json:"pre_condition,omitempty"`

	// Id of the Template picked for performing the workspace command.
	TemplateID *string `json:"template_id,omitempty"`

	// Name of the template-specific command.
	OverrideCommand *TemplateCommand `json:"override_command,omitempty"`

	// Condition expression that will be evaluated after performing the template command; if false, the workspace command
	// will be reported as Failed, and error event is triggered".
	PostCondition *string `json:"post_condition,omitempty"`

	// On encountering error in the workspace command - ignore (and continue to next step), or break (to stop execution),
	// or retry (the template action, for a configurable retry count).
	OnError *string `json:"on_error,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of TemplateFlowDefinitionTemplateOperation
func (o *TemplateFlowDefinitionTemplateOperation) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateFlowDefinitionTemplateOperation
func (o *TemplateFlowDefinitionTemplateOperation) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateFlowDefinitionTemplateOperation
func (o *TemplateFlowDefinitionTemplateOperation) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateFlowDefinitionTemplateOperation
func (o *TemplateFlowDefinitionTemplateOperation) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.PreCondition != nil {
		m["pre_condition"] = o.PreCondition
	}
	if o.TemplateID != nil {
		m["template_id"] = o.TemplateID
	}
	if o.OverrideCommand != nil {
		m["override_command"] = o.OverrideCommand
	}
	if o.PostCondition != nil {
		m["post_condition"] = o.PostCondition
	}
	if o.OnError != nil {
		m["on_error"] = o.OnError
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateFlowDefinitionTemplateOperation unmarshals an instance of TemplateFlowDefinitionTemplateOperation from the specified map of raw messages.
func UnmarshalTemplateFlowDefinitionTemplateOperation(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateFlowDefinitionTemplateOperation)
	err = core.UnmarshalPrimitive(m, "pre_condition", &obj.PreCondition)
	if err != nil {
		return
	}
	delete(m, "pre_condition")
	err = core.UnmarshalPrimitive(m, "template_id", &obj.TemplateID)
	if err != nil {
		return
	}
	delete(m, "template_id")
	err = core.UnmarshalModel(m, "override_command", &obj.OverrideCommand, UnmarshalTemplateCommand)
	if err != nil {
		return
	}
	delete(m, "override_command")
	err = core.UnmarshalPrimitive(m, "post_condition", &obj.PostCondition)
	if err != nil {
		return
	}
	delete(m, "post_condition")
	err = core.UnmarshalPrimitive(m, "on_error", &obj.OnError)
	if err != nil {
		return
	}
	delete(m, "on_error")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateFlowList : List of Flow definitions response.
type TemplateFlowList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of flow records.
	Flows []TemplateFlowLite `json:"flows,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of TemplateFlowList
func (o *TemplateFlowList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateFlowList
func (o *TemplateFlowList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateFlowList
func (o *TemplateFlowList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateFlowList
func (o *TemplateFlowList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Flows != nil {
		m["flows"] = o.Flows
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateFlowList unmarshals an instance of TemplateFlowList from the specified map of raw messages.
func UnmarshalTemplateFlowList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateFlowList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "flows", &obj.Flows, UnmarshalTemplateFlowLite)
	if err != nil {
		return
	}
	delete(m, "flows")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateFlowLite : Flow summary profile with system generated data.
type TemplateFlowLite struct {
	// Id of the Flow.
	ID *string `json:"id,omitempty"`

	// Name of the Flow.
	Name *string `json:"name,omitempty"`

	// Version of the flow definition. Only value 'V1' is accepted.
	Version *string `json:"version,omitempty"`

	// Type of flow.
	Type *string `json:"type,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Flow Job Status.
	Status *JobStatusWorkspaceTemplateFlow `json:"status,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Flow creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the flow.
	CreatedBy *string `json:"created_by,omitempty"`

	// TemplateFlow updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the flow.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the TemplateFlowLite.Type property.
// Type of flow.
const (
	TemplateFlowLite_Type_NodeRedFlow = "node_red_flow"
	TemplateFlowLite_Type_SimpleFlow  = "simple_flow"
)

// SetProperty allows the user to set an arbitrary property on an instance of TemplateFlowLite
func (o *TemplateFlowLite) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateFlowLite
func (o *TemplateFlowLite) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateFlowLite
func (o *TemplateFlowLite) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateFlowLite
func (o *TemplateFlowLite) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Version != nil {
		m["version"] = o.Version
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.Status != nil {
		m["status"] = o.Status
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateFlowLite unmarshals an instance of TemplateFlowLite from the specified map of raw messages.
func UnmarshalTemplateFlowLite(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateFlowLite)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "version", &obj.Version)
	if err != nil {
		return
	}
	delete(m, "version")
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalModel(m, "status", &obj.Status, UnmarshalJobStatusWorkspaceTemplateFlow)
	if err != nil {
		return
	}
	delete(m, "status")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateFlowValidationLogs : TemplateFlowValidationLogs struct
type TemplateFlowValidationLogs struct {
	// Line number of the flow-item.
	FlowIndex *int64 `json:"flow_index,omitempty"`

	// Validation status of input data for the flow-item.
	InputsStatus []TemplateFlowDataValidationStatus `json:"inputs_status,omitempty"`

	// Validation status of output data for the flow-item.
	OutputsStatus []TemplateFlowDataValidationStatus `json:"outputs_status,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of TemplateFlowValidationLogs
func (o *TemplateFlowValidationLogs) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateFlowValidationLogs
func (o *TemplateFlowValidationLogs) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateFlowValidationLogs
func (o *TemplateFlowValidationLogs) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateFlowValidationLogs
func (o *TemplateFlowValidationLogs) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.FlowIndex != nil {
		m["flow_index"] = o.FlowIndex
	}
	if o.InputsStatus != nil {
		m["inputs_status"] = o.InputsStatus
	}
	if o.OutputsStatus != nil {
		m["outputs_status"] = o.OutputsStatus
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateFlowValidationLogs unmarshals an instance of TemplateFlowValidationLogs from the specified map of raw messages.
func UnmarshalTemplateFlowValidationLogs(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateFlowValidationLogs)
	err = core.UnmarshalPrimitive(m, "flow_index", &obj.FlowIndex)
	if err != nil {
		return
	}
	delete(m, "flow_index")
	err = core.UnmarshalModel(m, "inputs_status", &obj.InputsStatus, UnmarshalTemplateFlowDataValidationStatus)
	if err != nil {
		return
	}
	delete(m, "inputs_status")
	err = core.UnmarshalModel(m, "outputs_status", &obj.OutputsStatus, UnmarshalTemplateFlowDataValidationStatus)
	if err != nil {
		return
	}
	delete(m, "outputs_status")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateFlowValidationSummary : Validation summary.
type TemplateFlowValidationSummary struct {
	// Number of warnings in the flow.
	WarningCount *float64 `json:"warning_count,omitempty"`

	// Number of errors in the flow.
	ErrorCount *float64 `json:"error_count,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of TemplateFlowValidationSummary
func (o *TemplateFlowValidationSummary) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateFlowValidationSummary
func (o *TemplateFlowValidationSummary) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateFlowValidationSummary
func (o *TemplateFlowValidationSummary) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateFlowValidationSummary
func (o *TemplateFlowValidationSummary) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.WarningCount != nil {
		m["warning_count"] = o.WarningCount
	}
	if o.ErrorCount != nil {
		m["error_count"] = o.ErrorCount
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateFlowValidationSummary unmarshals an instance of TemplateFlowValidationSummary from the specified map of raw messages.
func UnmarshalTemplateFlowValidationSummary(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateFlowValidationSummary)
	err = core.UnmarshalPrimitive(m, "warning_count", &obj.WarningCount)
	if err != nil {
		return
	}
	delete(m, "warning_count")
	err = core.UnmarshalPrimitive(m, "error_count", &obj.ErrorCount)
	if err != nil {
		return
	}
	delete(m, "error_count")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateList : List of Templates in a Workspace.
type TemplateList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of template records.
	Templates []TemplateLite `json:"templates,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of TemplateList
func (o *TemplateList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateList
func (o *TemplateList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateList
func (o *TemplateList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateList
func (o *TemplateList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Templates != nil {
		m["templates"] = o.Templates
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateList unmarshals an instance of TemplateList from the specified map of raw messages.
func UnmarshalTemplateList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "templates", &obj.Templates, UnmarshalTemplateLite)
	if err != nil {
		return
	}
	delete(m, "templates")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateListRequest : List of user-defined Template definitions.
type TemplateListRequest struct {
	// List of Template definitions.
	Templates []Template `json:"templates,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of TemplateListRequest
func (o *TemplateListRequest) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateListRequest
func (o *TemplateListRequest) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateListRequest
func (o *TemplateListRequest) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateListRequest
func (o *TemplateListRequest) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Templates != nil {
		m["templates"] = o.Templates
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateListRequest unmarshals an instance of TemplateListRequest from the specified map of raw messages.
func UnmarshalTemplateListRequest(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateListRequest)
	err = core.UnmarshalModel(m, "templates", &obj.Templates, UnmarshalTemplate)
	if err != nil {
		return
	}
	delete(m, "templates")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateLite : Template summary profile with user inputs and system generated data.
type TemplateLite struct {
	// Template ID generated by the system.
	ID *string `json:"id,omitempty"`

	// Name of the template. Should be unique within a workspace.
	Name *string `json:"name,omitempty"`

	// Template description.
	Description *string `json:"description,omitempty"`

	// Template type.  Ex: terraform_v0.11, terraform_v0.12, ansible.
	Type *string `json:"type,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Type of source for the Template.
	SourceType *string `json:"source_type,omitempty"`

	// Template Job Status.
	Status *JobStatusTemplate `json:"status,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Template creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the template.
	CreatedBy *string `json:"created_by,omitempty"`

	// Template updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the template.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the TemplateLite.SourceType property.
// Type of source for the Template.
const (
	TemplateLite_SourceType_ExternalScm      = "external_scm"
	TemplateLite_SourceType_GitHub           = "git_hub"
	TemplateLite_SourceType_GitHubEnterprise = "git_hub_enterprise"
	TemplateLite_SourceType_GitLab           = "git_lab"
	TemplateLite_SourceType_IbmCloudCatalog  = "ibm_cloud_catalog"
	TemplateLite_SourceType_IbmGitLab        = "ibm_git_lab"
	TemplateLite_SourceType_Local            = "local"
)

// SetProperty allows the user to set an arbitrary property on an instance of TemplateLite
func (o *TemplateLite) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateLite
func (o *TemplateLite) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateLite
func (o *TemplateLite) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateLite
func (o *TemplateLite) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.SourceType != nil {
		m["source_type"] = o.SourceType
	}
	if o.Status != nil {
		m["status"] = o.Status
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateLite unmarshals an instance of TemplateLite from the specified map of raw messages.
func UnmarshalTemplateLite(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateLite)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalPrimitive(m, "source_type", &obj.SourceType)
	if err != nil {
		return
	}
	delete(m, "source_type")
	err = core.UnmarshalModel(m, "status", &obj.Status, UnmarshalJobStatusTemplate)
	if err != nil {
		return
	}
	delete(m, "status")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TemplateRepoTarUploadResponse : TemplateRepoTarUploadResponse -.
type TemplateRepoTarUploadResponse struct {
	// Tar file value.
	FileValue *string `json:"file_value,omitempty"`

	// Has received tar file?.
	HasReceivedFile *bool `json:"has_received_file,omitempty"`

	// Template ID.
	ID *string `json:"id,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of TemplateRepoTarUploadResponse
func (o *TemplateRepoTarUploadResponse) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TemplateRepoTarUploadResponse
func (o *TemplateRepoTarUploadResponse) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TemplateRepoTarUploadResponse
func (o *TemplateRepoTarUploadResponse) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TemplateRepoTarUploadResponse
func (o *TemplateRepoTarUploadResponse) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.FileValue != nil {
		m["file_value"] = o.FileValue
	}
	if o.HasReceivedFile != nil {
		m["has_received_file"] = o.HasReceivedFile
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTemplateRepoTarUploadResponse unmarshals an instance of TemplateRepoTarUploadResponse from the specified map of raw messages.
func UnmarshalTemplateRepoTarUploadResponse(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TemplateRepoTarUploadResponse)
	err = core.UnmarshalPrimitive(m, "file_value", &obj.FileValue)
	if err != nil {
		return
	}
	delete(m, "file_value")
	err = core.UnmarshalPrimitive(m, "has_received_file", &obj.HasReceivedFile)
	if err != nil {
		return
	}
	delete(m, "has_received_file")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Trigger : Complete Trigger details provided by user and system generated.
type Trigger struct {
	// Name of the trigger.
	Name *string `json:"name,omitempty"`

	// Type of the trigger.
	Type *string `json:"type,omitempty"`

	// Trigger description.
	Description *string `json:"description,omitempty"`

	// Resource-group id for the Trigger.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// The id of service ID to be associated with this Trigger.
	ServiceID *[]byte `json:"service_id,omitempty"`

	// API Key for the Service ID.
	Apikey *[]byte `json:"apikey,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Schematics trigger tags.
	Tags []string `json:"tags,omitempty"`

	// List of Job Triggers.
	JobTriggers []TriggerJob `json:"job_triggers,omitempty"`

	// List of Scheduled Triggers.
	ScheduledTriggers []TriggerScheduled `json:"scheduled_triggers,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Id of the Schematics trigger.
	TriggerID *string `json:"trigger_id,omitempty"`

	// Name of the user who registered the Schematics trigger.
	RegisteredBy *string `json:"registered_by,omitempty"`

	// Timestamp of Schematics trigger registration.
	RegisteredAt *strfmt.DateTime `json:"registered_at,omitempty"`

	// Schematics trigger updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Name of user who updated the Schematics trigger definition.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Timestamp of the last health check.
	LastHealthCheckedAt *strfmt.DateTime `json:"last_health_checked_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the Trigger.Type property.
// Type of the trigger.
const (
	Trigger_Type_Action    = "action"
	Trigger_Type_Scheduled = "scheduled"
)

// Constants associated with the Trigger.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	Trigger_Location_EuDe    = "eu-de"
	Trigger_Location_EuGb    = "eu-gb"
	Trigger_Location_UsEast  = "us-east"
	Trigger_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of Trigger
func (o *Trigger) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of Trigger
func (o *Trigger) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of Trigger
func (o *Trigger) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of Trigger
func (o *Trigger) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.ServiceID != nil {
		m["service_id"] = o.ServiceID
	}
	if o.Apikey != nil {
		m["apikey"] = o.Apikey
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.JobTriggers != nil {
		m["job_triggers"] = o.JobTriggers
	}
	if o.ScheduledTriggers != nil {
		m["scheduled_triggers"] = o.ScheduledTriggers
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.TriggerID != nil {
		m["trigger_id"] = o.TriggerID
	}
	if o.RegisteredBy != nil {
		m["registered_by"] = o.RegisteredBy
	}
	if o.RegisteredAt != nil {
		m["registered_at"] = o.RegisteredAt
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.LastHealthCheckedAt != nil {
		m["last_health_checked_at"] = o.LastHealthCheckedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTrigger unmarshals an instance of Trigger from the specified map of raw messages.
func UnmarshalTrigger(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Trigger)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "service_id", &obj.ServiceID)
	if err != nil {
		return
	}
	delete(m, "service_id")
	err = core.UnmarshalPrimitive(m, "apikey", &obj.Apikey)
	if err != nil {
		return
	}
	delete(m, "apikey")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalModel(m, "job_triggers", &obj.JobTriggers, UnmarshalTriggerJob)
	if err != nil {
		return
	}
	delete(m, "job_triggers")
	err = core.UnmarshalModel(m, "scheduled_triggers", &obj.ScheduledTriggers, UnmarshalTriggerScheduled)
	if err != nil {
		return
	}
	delete(m, "scheduled_triggers")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalPrimitive(m, "trigger_id", &obj.TriggerID)
	if err != nil {
		return
	}
	delete(m, "trigger_id")
	err = core.UnmarshalPrimitive(m, "registered_by", &obj.RegisteredBy)
	if err != nil {
		return
	}
	delete(m, "registered_by")
	err = core.UnmarshalPrimitive(m, "registered_at", &obj.RegisteredAt)
	if err != nil {
		return
	}
	delete(m, "registered_at")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalPrimitive(m, "last_health_checked_at", &obj.LastHealthCheckedAt)
	if err != nil {
		return
	}
	delete(m, "last_health_checked_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TriggerJob : Job Trigger.
type TriggerJob struct {
	// Time in UTC format.
	Event *string `json:"event,omitempty"`

	// Complete Job with user inputs and system generated data.
	Job *Job `json:"job,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of TriggerJob
func (o *TriggerJob) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TriggerJob
func (o *TriggerJob) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TriggerJob
func (o *TriggerJob) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TriggerJob
func (o *TriggerJob) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Event != nil {
		m["event"] = o.Event
	}
	if o.Job != nil {
		m["job"] = o.Job
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTriggerJob unmarshals an instance of TriggerJob from the specified map of raw messages.
func UnmarshalTriggerJob(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TriggerJob)
	err = core.UnmarshalPrimitive(m, "event", &obj.Event)
	if err != nil {
		return
	}
	delete(m, "event")
	err = core.UnmarshalModel(m, "job", &obj.Job, UnmarshalJob)
	if err != nil {
		return
	}
	delete(m, "job")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TriggerList : List of trigger definitions response.
type TriggerList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of triggers.
	Triggers []Trigger `json:"triggers,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of TriggerList
func (o *TriggerList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TriggerList
func (o *TriggerList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TriggerList
func (o *TriggerList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TriggerList
func (o *TriggerList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Triggers != nil {
		m["triggers"] = o.Triggers
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTriggerList unmarshals an instance of TriggerList from the specified map of raw messages.
func UnmarshalTriggerList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TriggerList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "triggers", &obj.Triggers, UnmarshalTrigger)
	if err != nil {
		return
	}
	delete(m, "triggers")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// TriggerScheduled : Scheduled Trigger.
type TriggerScheduled struct {
	// frequency.
	Frequency *string `json:"frequency,omitempty"`

	// Tinme in UTC format.
	Time *string `json:"time,omitempty"`

	// Day.
	Day *string `json:"day,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of TriggerScheduled
func (o *TriggerScheduled) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of TriggerScheduled
func (o *TriggerScheduled) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of TriggerScheduled
func (o *TriggerScheduled) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of TriggerScheduled
func (o *TriggerScheduled) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Frequency != nil {
		m["frequency"] = o.Frequency
	}
	if o.Time != nil {
		m["time"] = o.Time
	}
	if o.Day != nil {
		m["day"] = o.Day
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalTriggerScheduled unmarshals an instance of TriggerScheduled from the specified map of raw messages.
func UnmarshalTriggerScheduled(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(TriggerScheduled)
	err = core.UnmarshalPrimitive(m, "frequency", &obj.Frequency)
	if err != nil {
		return
	}
	delete(m, "frequency")
	err = core.UnmarshalPrimitive(m, "time", &obj.Time)
	if err != nil {
		return
	}
	delete(m, "time")
	err = core.UnmarshalPrimitive(m, "day", &obj.Day)
	if err != nil {
		return
	}
	delete(m, "day")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// UpdateActionOptions : The UpdateAction options.
type UpdateActionOptions struct {
	// Action Id.  Use GET /actions API to look up the Action Ids in your IBM Cloud account.
	ActionID *string `validate:"required,ne="`

	// Action.
	Action *Action `validate:"required"`

	// The personal access token to authenticate with your private GitHub or GitLab repository and access your Terraform
	// template.
	XGithubToken *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateActionOptions : Instantiate UpdateActionOptions
func (*Schematics20ApiV2) NewUpdateActionOptions(actionID string, action *Action) *UpdateActionOptions {
	return &UpdateActionOptions{
		ActionID: core.StringPtr(actionID),
		Action:   action,
	}
}

// SetActionID : Allow user to set ActionID
func (options *UpdateActionOptions) SetActionID(actionID string) *UpdateActionOptions {
	options.ActionID = core.StringPtr(actionID)
	return options
}

// SetAction : Allow user to set Action
func (options *UpdateActionOptions) SetAction(action *Action) *UpdateActionOptions {
	options.Action = action
	return options
}

// SetXGithubToken : Allow user to set XGithubToken
func (options *UpdateActionOptions) SetXGithubToken(xGithubToken string) *UpdateActionOptions {
	options.XGithubToken = core.StringPtr(xGithubToken)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateActionOptions) SetHeaders(param map[string]string) *UpdateActionOptions {
	options.Headers = param
	return options
}

// UpdateAgentRegistrationOptions : The UpdateAgentRegistration options.
type UpdateAgentRegistrationOptions struct {
	// Agent ID to get the details of agent.
	AgentID *string `validate:"required,ne="`

	// Update the agent registration.
	Agent *Agent `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateAgentRegistrationOptions : Instantiate UpdateAgentRegistrationOptions
func (*Schematics20ApiV2) NewUpdateAgentRegistrationOptions(agentID string, agent *Agent) *UpdateAgentRegistrationOptions {
	return &UpdateAgentRegistrationOptions{
		AgentID: core.StringPtr(agentID),
		Agent:   agent,
	}
}

// SetAgentID : Allow user to set AgentID
func (options *UpdateAgentRegistrationOptions) SetAgentID(agentID string) *UpdateAgentRegistrationOptions {
	options.AgentID = core.StringPtr(agentID)
	return options
}

// SetAgent : Allow user to set Agent
func (options *UpdateAgentRegistrationOptions) SetAgent(agent *Agent) *UpdateAgentRegistrationOptions {
	options.Agent = agent
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateAgentRegistrationOptions) SetHeaders(param map[string]string) *UpdateAgentRegistrationOptions {
	options.Headers = param
	return options
}

// UpdateAtasetOptions : The UpdateAtaset options.
type UpdateAtasetOptions struct {
	// Shared dataset Id.  Use `GET /v2/datasets` API to look up the Shared dataset Ids  in your IBM Cloud account.
	DatasetID *string `validate:"required,ne="`

	// Update the shared dataset details.
	Dataset *Dataset `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateAtasetOptions : Instantiate UpdateAtasetOptions
func (*Schematics20ApiV2) NewUpdateAtasetOptions(datasetID string, dataset *Dataset) *UpdateAtasetOptions {
	return &UpdateAtasetOptions{
		DatasetID: core.StringPtr(datasetID),
		Dataset:   dataset,
	}
}

// SetDatasetID : Allow user to set DatasetID
func (options *UpdateAtasetOptions) SetDatasetID(datasetID string) *UpdateAtasetOptions {
	options.DatasetID = core.StringPtr(datasetID)
	return options
}

// SetDataset : Allow user to set Dataset
func (options *UpdateAtasetOptions) SetDataset(dataset *Dataset) *UpdateAtasetOptions {
	options.Dataset = dataset
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateAtasetOptions) SetHeaders(param map[string]string) *UpdateAtasetOptions {
	options.Headers = param
	return options
}

// UpdateBlueprintOptions : The UpdateBlueprint options.
type UpdateBlueprintOptions struct {
	// Environment Id.  Use `GET /v2/blueprints` API to look up the order ids in your IBM Cloud account.
	BlueprintID *string `validate:"required,ne="`

	// Update the blueprint details.
	Blueprint *Blueprint `validate:"required"`

	// Level of details returned by the get method.
	Profile *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the UpdateBlueprintOptions.Profile property.
// Level of details returned by the get method.
const (
	UpdateBlueprintOptions_Profile_Ids     = "ids"
	UpdateBlueprintOptions_Profile_Summary = "summary"
)

// NewUpdateBlueprintOptions : Instantiate UpdateBlueprintOptions
func (*Schematics20ApiV2) NewUpdateBlueprintOptions(blueprintID string, blueprint *Blueprint) *UpdateBlueprintOptions {
	return &UpdateBlueprintOptions{
		BlueprintID: core.StringPtr(blueprintID),
		Blueprint:   blueprint,
	}
}

// SetBlueprintID : Allow user to set BlueprintID
func (options *UpdateBlueprintOptions) SetBlueprintID(blueprintID string) *UpdateBlueprintOptions {
	options.BlueprintID = core.StringPtr(blueprintID)
	return options
}

// SetBlueprint : Allow user to set Blueprint
func (options *UpdateBlueprintOptions) SetBlueprint(blueprint *Blueprint) *UpdateBlueprintOptions {
	options.Blueprint = blueprint
	return options
}

// SetProfile : Allow user to set Profile
func (options *UpdateBlueprintOptions) SetProfile(profile string) *UpdateBlueprintOptions {
	options.Profile = core.StringPtr(profile)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateBlueprintOptions) SetHeaders(param map[string]string) *UpdateBlueprintOptions {
	options.Headers = param
	return options
}

// UpdateCapsuleOptions : The UpdateCapsule options.
type UpdateCapsuleOptions struct {
	// Controls Id.  Use `GET /v2/controls` API to look up the Controls Ids in your IBM Cloud account.
	ControlsID *string `validate:"required,ne="`

	// Capsule Id.  Use `GET /v2/controls/<contorls_id>/capsules` API to look up the Capsules Ids  for the Controls in your
	// IBM Cloud account.
	CapsuleID *string `validate:"required,ne="`

	// Update the Policy Capusle.
	Capsule *Capsule `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateCapsuleOptions : Instantiate UpdateCapsuleOptions
func (*Schematics20ApiV2) NewUpdateCapsuleOptions(controlsID string, capsuleID string, capsule *Capsule) *UpdateCapsuleOptions {
	return &UpdateCapsuleOptions{
		ControlsID: core.StringPtr(controlsID),
		CapsuleID:  core.StringPtr(capsuleID),
		Capsule:    capsule,
	}
}

// SetControlsID : Allow user to set ControlsID
func (options *UpdateCapsuleOptions) SetControlsID(controlsID string) *UpdateCapsuleOptions {
	options.ControlsID = core.StringPtr(controlsID)
	return options
}

// SetCapsuleID : Allow user to set CapsuleID
func (options *UpdateCapsuleOptions) SetCapsuleID(capsuleID string) *UpdateCapsuleOptions {
	options.CapsuleID = core.StringPtr(capsuleID)
	return options
}

// SetCapsule : Allow user to set Capsule
func (options *UpdateCapsuleOptions) SetCapsule(capsule *Capsule) *UpdateCapsuleOptions {
	options.Capsule = capsule
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateCapsuleOptions) SetHeaders(param map[string]string) *UpdateCapsuleOptions {
	options.Headers = param
	return options
}

// UpdateCartOrder : Update Cart order details with user inputs data.
type UpdateCartOrder struct {
	// Cart order name (unique for an account).
	Name *string `json:"name,omitempty"`

	// Cart order description.
	Description *string `json:"description,omitempty"`

	// Cart order tags.
	Tags []string `json:"tags,omitempty"`

	CartItems []UpdateOrderItemConfiguration `json:"cart_items,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of UpdateCartOrder
func (o *UpdateCartOrder) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of UpdateCartOrder
func (o *UpdateCartOrder) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of UpdateCartOrder
func (o *UpdateCartOrder) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of UpdateCartOrder
func (o *UpdateCartOrder) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.CartItems != nil {
		m["cart_items"] = o.CartItems
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalUpdateCartOrder unmarshals an instance of UpdateCartOrder from the specified map of raw messages.
func UnmarshalUpdateCartOrder(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(UpdateCartOrder)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalModel(m, "cart_items", &obj.CartItems, UnmarshalUpdateOrderItemConfiguration)
	if err != nil {
		return
	}
	delete(m, "cart_items")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// UpdateCartOrderOptions : The UpdateCartOrder options.
type UpdateCartOrderOptions struct {
	// Fulfilment job order Id.  Use `GET /v2/cart` API to look up the order ids in your IBM Cloud account.
	OrderID *string `validate:"required,ne="`

	// The name of fulfilment job operation (install, uninstall, configure, operate, dryrun, update, destroy).
	Operation *string `validate:"required"`

	// Update the fulfilment job order and contextually run.
	UpdateCartOrder *UpdateCartOrder `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateCartOrderOptions : Instantiate UpdateCartOrderOptions
func (*Schematics20ApiV2) NewUpdateCartOrderOptions(orderID string, operation string, updateCartOrder *UpdateCartOrder) *UpdateCartOrderOptions {
	return &UpdateCartOrderOptions{
		OrderID:         core.StringPtr(orderID),
		Operation:       core.StringPtr(operation),
		UpdateCartOrder: updateCartOrder,
	}
}

// SetOrderID : Allow user to set OrderID
func (options *UpdateCartOrderOptions) SetOrderID(orderID string) *UpdateCartOrderOptions {
	options.OrderID = core.StringPtr(orderID)
	return options
}

// SetOperation : Allow user to set Operation
func (options *UpdateCartOrderOptions) SetOperation(operation string) *UpdateCartOrderOptions {
	options.Operation = core.StringPtr(operation)
	return options
}

// SetUpdateCartOrder : Allow user to set UpdateCartOrder
func (options *UpdateCartOrderOptions) SetUpdateCartOrder(updateCartOrder *UpdateCartOrder) *UpdateCartOrderOptions {
	options.UpdateCartOrder = updateCartOrder
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateCartOrderOptions) SetHeaders(param map[string]string) *UpdateCartOrderOptions {
	options.Headers = param
	return options
}

// UpdateControlsOptions : The UpdateControls options.
type UpdateControlsOptions struct {
	// Controls Id.  Use `GET /v2/controls` API to look up the Controls Ids in your IBM Cloud account.
	ControlsID *string `validate:"required,ne="`

	// Update the Controls definition.
	Controls *Controls `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateControlsOptions : Instantiate UpdateControlsOptions
func (*Schematics20ApiV2) NewUpdateControlsOptions(controlsID string, controls *Controls) *UpdateControlsOptions {
	return &UpdateControlsOptions{
		ControlsID: core.StringPtr(controlsID),
		Controls:   controls,
	}
}

// SetControlsID : Allow user to set ControlsID
func (options *UpdateControlsOptions) SetControlsID(controlsID string) *UpdateControlsOptions {
	options.ControlsID = core.StringPtr(controlsID)
	return options
}

// SetControls : Allow user to set Controls
func (options *UpdateControlsOptions) SetControls(controls *Controls) *UpdateControlsOptions {
	options.Controls = controls
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateControlsOptions) SetHeaders(param map[string]string) *UpdateControlsOptions {
	options.Headers = param
	return options
}

// UpdateFlowInWorkspaceOptions : The UpdateFlowInWorkspace options.
type UpdateFlowInWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Flow Id.  Use `GET /v2/workspaces/<workspace_id>/flows` API to look up the  Flow Ids in your Workspaces.
	FlowID *string `validate:"required,ne="`

	// Update the Flow definition in the workspace.
	TemplateFlow *TemplateFlow

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateFlowInWorkspaceOptions : Instantiate UpdateFlowInWorkspaceOptions
func (*Schematics20ApiV2) NewUpdateFlowInWorkspaceOptions(wID string, flowID string) *UpdateFlowInWorkspaceOptions {
	return &UpdateFlowInWorkspaceOptions{
		WID:    core.StringPtr(wID),
		FlowID: core.StringPtr(flowID),
	}
}

// SetWID : Allow user to set WID
func (options *UpdateFlowInWorkspaceOptions) SetWID(wID string) *UpdateFlowInWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetFlowID : Allow user to set FlowID
func (options *UpdateFlowInWorkspaceOptions) SetFlowID(flowID string) *UpdateFlowInWorkspaceOptions {
	options.FlowID = core.StringPtr(flowID)
	return options
}

// SetTemplateFlow : Allow user to set TemplateFlow
func (options *UpdateFlowInWorkspaceOptions) SetTemplateFlow(templateFlow *TemplateFlow) *UpdateFlowInWorkspaceOptions {
	options.TemplateFlow = templateFlow
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateFlowInWorkspaceOptions) SetHeaders(param map[string]string) *UpdateFlowInWorkspaceOptions {
	options.Headers = param
	return options
}

// UpdateJobOptions : The UpdateJob options.
type UpdateJobOptions struct {
	// Job Id. Use `GET /v2/jobs` API to look up the Job Ids in your IBM Cloud account.
	JobID *string `validate:"required,ne="`

	// The IAM refresh token for the user or service identity.
	//
	//   **Retrieving refresh token**:
	//   * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST
	// "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d
	// "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
	//   * For more information, about creating IAM access token and API Docs, refer, [IAM access
	// token](/apidocs/iam-identity-token-api#gettoken-password) and [Create API
	// key](/apidocs/iam-identity-token-api#create-api-key).
	//
	//   **Limitation**:
	//   * If the token is expired, you can use `refresh token` to get a new IAM access token.
	//   * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
	//   * When the IAM access token is about to expire, use the API key to create a new access token.
	RefreshToken *string `validate:"required"`

	// Clone the Job-record, and relaunch the Job.
	Job *Job `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateJobOptions : Instantiate UpdateJobOptions
func (*Schematics20ApiV2) NewUpdateJobOptions(jobID string, refreshToken string, job *Job) *UpdateJobOptions {
	return &UpdateJobOptions{
		JobID:        core.StringPtr(jobID),
		RefreshToken: core.StringPtr(refreshToken),
		Job:          job,
	}
}

// SetJobID : Allow user to set JobID
func (options *UpdateJobOptions) SetJobID(jobID string) *UpdateJobOptions {
	options.JobID = core.StringPtr(jobID)
	return options
}

// SetRefreshToken : Allow user to set RefreshToken
func (options *UpdateJobOptions) SetRefreshToken(refreshToken string) *UpdateJobOptions {
	options.RefreshToken = core.StringPtr(refreshToken)
	return options
}

// SetJob : Allow user to set Job
func (options *UpdateJobOptions) SetJob(job *Job) *UpdateJobOptions {
	options.Job = job
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateJobOptions) SetHeaders(param map[string]string) *UpdateJobOptions {
	options.Headers = param
	return options
}

// UpdateKmsSettingsOptions : The UpdateKmsSettings options.
type UpdateKmsSettingsOptions struct {
	// Options to be provided with updating kms settings.
	KMSSettings *KMSSettings `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateKmsSettingsOptions : Instantiate UpdateKmsSettingsOptions
func (*Schematics20ApiV2) NewUpdateKmsSettingsOptions(kMSSettings *KMSSettings) *UpdateKmsSettingsOptions {
	return &UpdateKmsSettingsOptions{
		KMSSettings: kMSSettings,
	}
}

// SetKMSSettings : Allow user to set KMSSettings
func (options *UpdateKmsSettingsOptions) SetKMSSettings(kMSSettings *KMSSettings) *UpdateKmsSettingsOptions {
	options.KMSSettings = kMSSettings
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateKmsSettingsOptions) SetHeaders(param map[string]string) *UpdateKmsSettingsOptions {
	options.Headers = param
	return options
}

// UpdateOrderItemConfiguration : Update Catalog item configuration in the Cart order.
type UpdateOrderItemConfiguration struct {
	// Catalog item name.
	Name *string `json:"name,omitempty"`

	// Catalog item description.
	Description *string `json:"description,omitempty"`

	// Input configuration for the order.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Input environment variables used by order.
	Settings []VariableData `json:"settings,omitempty"`

	// Output configuration of the order.
	Outputs []VariableData `json:"outputs,omitempty"`

	// Target cluster details to perform POC operation.
	Target *TargetRequest `json:"target,omitempty"`

	// Name of the fulfilment job operations.
	Operation *string `json:"operation,omitempty"`

	// Additional service input data (for extensibility).
	ServiceData []ServiceVariableData `json:"service_data,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the UpdateOrderItemConfiguration.Operation property.
// Name of the fulfilment job operations.
const (
	UpdateOrderItemConfiguration_Operation_Configure = "configure"
	UpdateOrderItemConfiguration_Operation_Destroy   = "destroy"
	UpdateOrderItemConfiguration_Operation_Dryrun    = "dryrun"
	UpdateOrderItemConfiguration_Operation_Install   = "install"
	UpdateOrderItemConfiguration_Operation_Operate   = "operate"
	UpdateOrderItemConfiguration_Operation_Preview   = "preview"
	UpdateOrderItemConfiguration_Operation_Uninstall = "uninstall"
	UpdateOrderItemConfiguration_Operation_Update    = "update"
)

// SetProperty allows the user to set an arbitrary property on an instance of UpdateOrderItemConfiguration
func (o *UpdateOrderItemConfiguration) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of UpdateOrderItemConfiguration
func (o *UpdateOrderItemConfiguration) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of UpdateOrderItemConfiguration
func (o *UpdateOrderItemConfiguration) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of UpdateOrderItemConfiguration
func (o *UpdateOrderItemConfiguration) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Settings != nil {
		m["settings"] = o.Settings
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	if o.Target != nil {
		m["target"] = o.Target
	}
	if o.Operation != nil {
		m["operation"] = o.Operation
	}
	if o.ServiceData != nil {
		m["service_data"] = o.ServiceData
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalUpdateOrderItemConfiguration unmarshals an instance of UpdateOrderItemConfiguration from the specified map of raw messages.
func UnmarshalUpdateOrderItemConfiguration(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(UpdateOrderItemConfiguration)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "settings", &obj.Settings, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "settings")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "outputs")
	err = core.UnmarshalModel(m, "target", &obj.Target, UnmarshalTargetRequest)
	if err != nil {
		return
	}
	delete(m, "target")
	err = core.UnmarshalPrimitive(m, "operation", &obj.Operation)
	if err != nil {
		return
	}
	delete(m, "operation")
	err = core.UnmarshalModel(m, "service_data", &obj.ServiceData, UnmarshalServiceVariableData)
	if err != nil {
		return
	}
	delete(m, "service_data")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// UpdateTemplateInWorkspaceOptions : The UpdateTemplateInWorkspace options.
type UpdateTemplateInWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The ID of the Terraform template in your workspace.  When you create a workspace, the Terraform template that  your
	// workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up the workspace IDs  and template
	// IDs or `template_data.id` in your IBM Cloud account.
	TID *string `validate:"required,ne="`

	// Update the Template definition in the Workspace.
	Template *Template

	// The personal access token to authenticate with your private GitHub or GitLab repository and access your Terraform
	// template.
	XGithubToken *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateTemplateInWorkspaceOptions : Instantiate UpdateTemplateInWorkspaceOptions
func (*Schematics20ApiV2) NewUpdateTemplateInWorkspaceOptions(wID string, tID string) *UpdateTemplateInWorkspaceOptions {
	return &UpdateTemplateInWorkspaceOptions{
		WID: core.StringPtr(wID),
		TID: core.StringPtr(tID),
	}
}

// SetWID : Allow user to set WID
func (options *UpdateTemplateInWorkspaceOptions) SetWID(wID string) *UpdateTemplateInWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTID : Allow user to set TID
func (options *UpdateTemplateInWorkspaceOptions) SetTID(tID string) *UpdateTemplateInWorkspaceOptions {
	options.TID = core.StringPtr(tID)
	return options
}

// SetTemplate : Allow user to set Template
func (options *UpdateTemplateInWorkspaceOptions) SetTemplate(template *Template) *UpdateTemplateInWorkspaceOptions {
	options.Template = template
	return options
}

// SetXGithubToken : Allow user to set XGithubToken
func (options *UpdateTemplateInWorkspaceOptions) SetXGithubToken(xGithubToken string) *UpdateTemplateInWorkspaceOptions {
	options.XGithubToken = core.StringPtr(xGithubToken)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateTemplateInWorkspaceOptions) SetHeaders(param map[string]string) *UpdateTemplateInWorkspaceOptions {
	options.Headers = param
	return options
}

// UpdateWorkspaceOptions : The UpdateWorkspace options.
type UpdateWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// Update some details in the Workspace.
	Workspace *Workspace `validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateWorkspaceOptions : Instantiate UpdateWorkspaceOptions
func (*Schematics20ApiV2) NewUpdateWorkspaceOptions(wID string, workspace *Workspace) *UpdateWorkspaceOptions {
	return &UpdateWorkspaceOptions{
		WID:       core.StringPtr(wID),
		Workspace: workspace,
	}
}

// SetWID : Allow user to set WID
func (options *UpdateWorkspaceOptions) SetWID(wID string) *UpdateWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetWorkspace : Allow user to set Workspace
func (options *UpdateWorkspaceOptions) SetWorkspace(workspace *Workspace) *UpdateWorkspaceOptions {
	options.Workspace = workspace
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateWorkspaceOptions) SetHeaders(param map[string]string) *UpdateWorkspaceOptions {
	options.Headers = param
	return options
}

// UploadTemplateTarActionOptions : The UploadTemplateTarAction options.
type UploadTemplateTarActionOptions struct {
	// Action Id.  Use GET /actions API to look up the Action Ids in your IBM Cloud account.
	ActionID *string `validate:"required,ne="`

	// Template tar file.
	File io.ReadCloser

	// The content type of file.
	FileContentType *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUploadTemplateTarActionOptions : Instantiate UploadTemplateTarActionOptions
func (*Schematics20ApiV2) NewUploadTemplateTarActionOptions(actionID string) *UploadTemplateTarActionOptions {
	return &UploadTemplateTarActionOptions{
		ActionID: core.StringPtr(actionID),
	}
}

// SetActionID : Allow user to set ActionID
func (options *UploadTemplateTarActionOptions) SetActionID(actionID string) *UploadTemplateTarActionOptions {
	options.ActionID = core.StringPtr(actionID)
	return options
}

// SetFile : Allow user to set File
func (options *UploadTemplateTarActionOptions) SetFile(file io.ReadCloser) *UploadTemplateTarActionOptions {
	options.File = file
	return options
}

// SetFileContentType : Allow user to set FileContentType
func (options *UploadTemplateTarActionOptions) SetFileContentType(fileContentType string) *UploadTemplateTarActionOptions {
	options.FileContentType = core.StringPtr(fileContentType)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UploadTemplateTarActionOptions) SetHeaders(param map[string]string) *UploadTemplateTarActionOptions {
	options.Headers = param
	return options
}

// UploadTemplateTarBlueprintOptions : The UploadTemplateTarBlueprint options.
type UploadTemplateTarBlueprintOptions struct {
	// Environment Id.  Use `GET /v2/blueprints` API to look up the order ids in your IBM Cloud account.
	BlueprintID *string `validate:"required,ne="`

	// Template tar file.
	File io.ReadCloser

	// The content type of file.
	FileContentType *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUploadTemplateTarBlueprintOptions : Instantiate UploadTemplateTarBlueprintOptions
func (*Schematics20ApiV2) NewUploadTemplateTarBlueprintOptions(blueprintID string) *UploadTemplateTarBlueprintOptions {
	return &UploadTemplateTarBlueprintOptions{
		BlueprintID: core.StringPtr(blueprintID),
	}
}

// SetBlueprintID : Allow user to set BlueprintID
func (options *UploadTemplateTarBlueprintOptions) SetBlueprintID(blueprintID string) *UploadTemplateTarBlueprintOptions {
	options.BlueprintID = core.StringPtr(blueprintID)
	return options
}

// SetFile : Allow user to set File
func (options *UploadTemplateTarBlueprintOptions) SetFile(file io.ReadCloser) *UploadTemplateTarBlueprintOptions {
	options.File = file
	return options
}

// SetFileContentType : Allow user to set FileContentType
func (options *UploadTemplateTarBlueprintOptions) SetFileContentType(fileContentType string) *UploadTemplateTarBlueprintOptions {
	options.FileContentType = core.StringPtr(fileContentType)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UploadTemplateTarBlueprintOptions) SetHeaders(param map[string]string) *UploadTemplateTarBlueprintOptions {
	options.Headers = param
	return options
}

// UploadTemplateTarInWorkspaceOptions : The UploadTemplateTarInWorkspace options.
type UploadTemplateTarInWorkspaceOptions struct {
	// The ID of the workspace.  To find the workspace ID, use the `GET /v1/workspaces` API.
	WID *string `validate:"required,ne="`

	// The ID of the Terraform template in your workspace.  When you create a workspace, the Terraform template that  your
	// workspace points to is assigned a unique ID. Use the `GET /v1/workspaces` to look up the workspace IDs  and template
	// IDs or `template_data.id` in your IBM Cloud account.
	TID *string `validate:"required,ne="`

	// Template tar file.
	File io.ReadCloser

	// The content type of file.
	FileContentType *string

	// The personal access token to authenticate with your private GitHub or GitLab repository and access your Terraform
	// template.
	XGithubToken *string

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUploadTemplateTarInWorkspaceOptions : Instantiate UploadTemplateTarInWorkspaceOptions
func (*Schematics20ApiV2) NewUploadTemplateTarInWorkspaceOptions(wID string, tID string) *UploadTemplateTarInWorkspaceOptions {
	return &UploadTemplateTarInWorkspaceOptions{
		WID: core.StringPtr(wID),
		TID: core.StringPtr(tID),
	}
}

// SetWID : Allow user to set WID
func (options *UploadTemplateTarInWorkspaceOptions) SetWID(wID string) *UploadTemplateTarInWorkspaceOptions {
	options.WID = core.StringPtr(wID)
	return options
}

// SetTID : Allow user to set TID
func (options *UploadTemplateTarInWorkspaceOptions) SetTID(tID string) *UploadTemplateTarInWorkspaceOptions {
	options.TID = core.StringPtr(tID)
	return options
}

// SetFile : Allow user to set File
func (options *UploadTemplateTarInWorkspaceOptions) SetFile(file io.ReadCloser) *UploadTemplateTarInWorkspaceOptions {
	options.File = file
	return options
}

// SetFileContentType : Allow user to set FileContentType
func (options *UploadTemplateTarInWorkspaceOptions) SetFileContentType(fileContentType string) *UploadTemplateTarInWorkspaceOptions {
	options.FileContentType = core.StringPtr(fileContentType)
	return options
}

// SetXGithubToken : Allow user to set XGithubToken
func (options *UploadTemplateTarInWorkspaceOptions) SetXGithubToken(xGithubToken string) *UploadTemplateTarInWorkspaceOptions {
	options.XGithubToken = core.StringPtr(xGithubToken)
	return options
}

// SetHeaders : Allow user to set Headers
func (options *UploadTemplateTarInWorkspaceOptions) SetHeaders(param map[string]string) *UploadTemplateTarInWorkspaceOptions {
	options.Headers = param
	return options
}

// UserState : User defined status of the Schematics object.
type UserState struct {
	// User-defined states
	//   * `draft` Object can be modified; can be used by Jobs run by the author, during execution
	//   * `live` Object can be modified; can be used by Jobs during execution
	//   * `locked` Object cannot be modified; can be used by Jobs during execution
	//   * `disable` Object can be modified. cannot be used by Jobs during execution.
	State *string `json:"state,omitempty"`

	// Name of the User who set the state of the Object.
	SetBy *string `json:"set_by,omitempty"`

	// When the User who set the state of the Object.
	SetAt *strfmt.DateTime `json:"set_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the UserState.State property.
// User-defined states
//   * `draft` Object can be modified; can be used by Jobs run by the author, during execution
//   * `live` Object can be modified; can be used by Jobs during execution
//   * `locked` Object cannot be modified; can be used by Jobs during execution
//   * `disable` Object can be modified. cannot be used by Jobs during execution.
const (
	UserState_State_Disable = "disable"
	UserState_State_Draft   = "draft"
	UserState_State_Live    = "live"
	UserState_State_Locked  = "locked"
)

// SetProperty allows the user to set an arbitrary property on an instance of UserState
func (o *UserState) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of UserState
func (o *UserState) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of UserState
func (o *UserState) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of UserState
func (o *UserState) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.State != nil {
		m["state"] = o.State
	}
	if o.SetBy != nil {
		m["set_by"] = o.SetBy
	}
	if o.SetAt != nil {
		m["set_at"] = o.SetAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalUserState unmarshals an instance of UserState from the specified map of raw messages.
func UnmarshalUserState(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(UserState)
	err = core.UnmarshalPrimitive(m, "state", &obj.State)
	if err != nil {
		return
	}
	delete(m, "state")
	err = core.UnmarshalPrimitive(m, "set_by", &obj.SetBy)
	if err != nil {
		return
	}
	delete(m, "set_by")
	err = core.UnmarshalPrimitive(m, "set_at", &obj.SetAt)
	if err != nil {
		return
	}
	delete(m, "set_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ValueListResponse : List of string values.
type ValueListResponse struct {
	// list values.
	Values []string `json:"values,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ValueListResponse
func (o *ValueListResponse) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ValueListResponse
func (o *ValueListResponse) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ValueListResponse
func (o *ValueListResponse) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ValueListResponse
func (o *ValueListResponse) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Values != nil {
		m["values"] = o.Values
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalValueListResponse unmarshals an instance of ValueListResponse from the specified map of raw messages.
func UnmarshalValueListResponse(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ValueListResponse)
	err = core.UnmarshalPrimitive(m, "values", &obj.Values)
	if err != nil {
		return
	}
	delete(m, "values")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ValueResponse : String value.
type ValueResponse struct {
	// value response.
	Value *string `json:"value,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ValueResponse
func (o *ValueResponse) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ValueResponse
func (o *ValueResponse) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ValueResponse
func (o *ValueResponse) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ValueResponse
func (o *ValueResponse) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Value != nil {
		m["value"] = o.Value
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalValueResponse unmarshals an instance of ValueResponse from the specified map of raw messages.
func UnmarshalValueResponse(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ValueResponse)
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		return
	}
	delete(m, "value")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// VariableData : User editable variable data and system generated reference to the value.
type VariableData struct {
	// The name of the variable. For example, `name = "inventory username"`.
	Name *string `json:"name,omitempty"`

	// The value for the variable or reference to the value. For example, `value = "<provide your ssh_key_value with \n>"`.
	// **Note** The SSH key should contain `\n` at the end of the key details in case of command line or API calls.
	Value *string `json:"value,omitempty"`

	// True, will ignore the data in the value attribute, instead the data in metadata.default_value will be used.
	UseDefault *bool `json:"use_default,omitempty"`

	// An user editable metadata for the variables.
	Metadata *VariableMetadata `json:"metadata,omitempty"`

	// The reference link to the variable value By default the expression points to `$self.value`.
	Link *string `json:"link,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of VariableData
func (o *VariableData) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of VariableData
func (o *VariableData) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of VariableData
func (o *VariableData) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of VariableData
func (o *VariableData) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Value != nil {
		m["value"] = o.Value
	}
	if o.UseDefault != nil {
		m["use_default"] = o.UseDefault
	}
	if o.Metadata != nil {
		m["metadata"] = o.Metadata
	}
	if o.Link != nil {
		m["link"] = o.Link
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalVariableData unmarshals an instance of VariableData from the specified map of raw messages.
func UnmarshalVariableData(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(VariableData)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		return
	}
	delete(m, "value")
	err = core.UnmarshalPrimitive(m, "use_default", &obj.UseDefault)
	if err != nil {
		return
	}
	delete(m, "use_default")
	err = core.UnmarshalModel(m, "metadata", &obj.Metadata, UnmarshalVariableMetadata)
	if err != nil {
		return
	}
	delete(m, "metadata")
	err = core.UnmarshalPrimitive(m, "link", &obj.Link)
	if err != nil {
		return
	}
	delete(m, "link")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// VariableDataList : List of Variable data record response.
type VariableDataList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of variables and values.
	Variables []VariableData `json:"variables,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of VariableDataList
func (o *VariableDataList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of VariableDataList
func (o *VariableDataList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of VariableDataList
func (o *VariableDataList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of VariableDataList
func (o *VariableDataList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Variables != nil {
		m["variables"] = o.Variables
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalVariableDataList unmarshals an instance of VariableDataList from the specified map of raw messages.
func UnmarshalVariableDataList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(VariableDataList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "variables", &obj.Variables, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "variables")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// VariableMetadata : An user editable metadata for the variables.
type VariableMetadata struct {
	// Type of the variable.
	Type *string `json:"type,omitempty"`

	// The list of aliases for the variable name.
	Aliases []string `json:"aliases,omitempty"`

	// The description of the meta data.
	Description *string `json:"description,omitempty"`

	// Cloud data type of the variable. eg. resource_group_id, region, vpc_id.
	CloudDataType *string `json:"cloud_data_type,omitempty"`

	// Default value for the variable only if the override value is not specified.
	DefaultValue *string `json:"default_value,omitempty"`

	// The status of the link.
	LinkStatus *string `json:"link_status,omitempty"`

	// Is the variable secure or sensitive ?.
	Secure *bool `json:"secure,omitempty"`

	// Is the variable readonly ?.
	Immutable *bool `json:"immutable,omitempty"`

	// If **true**, the variable is not displayed on UI or Command line.
	Hidden *bool `json:"hidden,omitempty"`

	// If the variable required?.
	Required *bool `json:"required,omitempty"`

	// The list of possible values for this variable.  If type is **integer** or **date**, then the array of string is
	// converted to array of integers or date during the runtime.
	Options []string `json:"options,omitempty"`

	// The minimum value of the variable. Applicable for the integer type.
	MinValue *int64 `json:"min_value,omitempty"`

	// The maximum value of the variable. Applicable for the integer type.
	MaxValue *int64 `json:"max_value,omitempty"`

	// The minimum length of the variable value. Applicable for the string type.
	MinLength *int64 `json:"min_length,omitempty"`

	// The maximum length of the variable value. Applicable for the string type.
	MaxLength *int64 `json:"max_length,omitempty"`

	// The regex for the variable value.
	Matches *string `json:"matches,omitempty"`

	// The relative position of this variable in a list.
	Position *int64 `json:"position,omitempty"`

	// The display name of the group this variable belongs to.
	GroupBy *string `json:"group_by,omitempty"`

	// The source of this meta-data.
	Source *string `json:"source,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the VariableMetadata.Type property.
// Type of the variable.
const (
	VariableMetadata_Type_Array   = "array"
	VariableMetadata_Type_Boolean = "boolean"
	VariableMetadata_Type_Complex = "complex"
	VariableMetadata_Type_Date    = "date"
	VariableMetadata_Type_Integer = "integer"
	VariableMetadata_Type_Link    = "link"
	VariableMetadata_Type_List    = "list"
	VariableMetadata_Type_Map     = "map"
	VariableMetadata_Type_String  = "string"
)

// Constants associated with the VariableMetadata.LinkStatus property.
// The status of the link.
const (
	VariableMetadata_LinkStatus_Broken = "broken"
	VariableMetadata_LinkStatus_Normal = "normal"
)

// SetProperty allows the user to set an arbitrary property on an instance of VariableMetadata
func (o *VariableMetadata) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of VariableMetadata
func (o *VariableMetadata) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of VariableMetadata
func (o *VariableMetadata) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of VariableMetadata
func (o *VariableMetadata) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Type != nil {
		m["type"] = o.Type
	}
	if o.Aliases != nil {
		m["aliases"] = o.Aliases
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.CloudDataType != nil {
		m["cloud_data_type"] = o.CloudDataType
	}
	if o.DefaultValue != nil {
		m["default_value"] = o.DefaultValue
	}
	if o.LinkStatus != nil {
		m["link_status"] = o.LinkStatus
	}
	if o.Secure != nil {
		m["secure"] = o.Secure
	}
	if o.Immutable != nil {
		m["immutable"] = o.Immutable
	}
	if o.Hidden != nil {
		m["hidden"] = o.Hidden
	}
	if o.Required != nil {
		m["required"] = o.Required
	}
	if o.Options != nil {
		m["options"] = o.Options
	}
	if o.MinValue != nil {
		m["min_value"] = o.MinValue
	}
	if o.MaxValue != nil {
		m["max_value"] = o.MaxValue
	}
	if o.MinLength != nil {
		m["min_length"] = o.MinLength
	}
	if o.MaxLength != nil {
		m["max_length"] = o.MaxLength
	}
	if o.Matches != nil {
		m["matches"] = o.Matches
	}
	if o.Position != nil {
		m["position"] = o.Position
	}
	if o.GroupBy != nil {
		m["group_by"] = o.GroupBy
	}
	if o.Source != nil {
		m["source"] = o.Source
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalVariableMetadata unmarshals an instance of VariableMetadata from the specified map of raw messages.
func UnmarshalVariableMetadata(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(VariableMetadata)
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		return
	}
	delete(m, "type")
	err = core.UnmarshalPrimitive(m, "aliases", &obj.Aliases)
	if err != nil {
		return
	}
	delete(m, "aliases")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "cloud_data_type", &obj.CloudDataType)
	if err != nil {
		return
	}
	delete(m, "cloud_data_type")
	err = core.UnmarshalPrimitive(m, "default_value", &obj.DefaultValue)
	if err != nil {
		return
	}
	delete(m, "default_value")
	err = core.UnmarshalPrimitive(m, "link_status", &obj.LinkStatus)
	if err != nil {
		return
	}
	delete(m, "link_status")
	err = core.UnmarshalPrimitive(m, "secure", &obj.Secure)
	if err != nil {
		return
	}
	delete(m, "secure")
	err = core.UnmarshalPrimitive(m, "immutable", &obj.Immutable)
	if err != nil {
		return
	}
	delete(m, "immutable")
	err = core.UnmarshalPrimitive(m, "hidden", &obj.Hidden)
	if err != nil {
		return
	}
	delete(m, "hidden")
	err = core.UnmarshalPrimitive(m, "required", &obj.Required)
	if err != nil {
		return
	}
	delete(m, "required")
	err = core.UnmarshalPrimitive(m, "options", &obj.Options)
	if err != nil {
		return
	}
	delete(m, "options")
	err = core.UnmarshalPrimitive(m, "min_value", &obj.MinValue)
	if err != nil {
		return
	}
	delete(m, "min_value")
	err = core.UnmarshalPrimitive(m, "max_value", &obj.MaxValue)
	if err != nil {
		return
	}
	delete(m, "max_value")
	err = core.UnmarshalPrimitive(m, "min_length", &obj.MinLength)
	if err != nil {
		return
	}
	delete(m, "min_length")
	err = core.UnmarshalPrimitive(m, "max_length", &obj.MaxLength)
	if err != nil {
		return
	}
	delete(m, "max_length")
	err = core.UnmarshalPrimitive(m, "matches", &obj.Matches)
	if err != nil {
		return
	}
	delete(m, "matches")
	err = core.UnmarshalPrimitive(m, "position", &obj.Position)
	if err != nil {
		return
	}
	delete(m, "position")
	err = core.UnmarshalPrimitive(m, "group_by", &obj.GroupBy)
	if err != nil {
		return
	}
	delete(m, "group_by")
	err = core.UnmarshalPrimitive(m, "source", &obj.Source)
	if err != nil {
		return
	}
	delete(m, "source")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// WebHook : Complete WebHook details provided by user and system generated.
type WebHook struct {
	// Schematics job command name.
	CommandName *string `json:"command_name,omitempty"`

	// Type of the Schematics web-hook.
	HookType *string `json:"hook_type,omitempty"`

	// List of notification points.
	HookSite *string `json:"hook_site,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Resource-group id for the Schematics web-hook.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Schematics web-hook tags.
	Tags []string `json:"tags,omitempty"`

	// Endpoint URL for the Schematics web-hook.
	HookEndpointURL *string `json:"hook_endpoint_url,omitempty"`

	// Service-ID to connect to the Schematics web-hook; if this is not provided, Schematics will used the IAM token of the
	// user to connect to the Hook.
	ServiceID *string `json:"service_id,omitempty"`

	// API Key for the Service ID.
	Apikey *string `json:"apikey,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// True - Replace the Hook definition, without waiting for completion of all inflight Schematics operations;   False -
	// Block new Schematics operations, and wait for  the relevant inflight operations to complete - before  changing the
	// Hook definition.
	IgnoreInflightOperations *bool `json:"ignore_inflight_operations,omitempty"`

	// Id of the Schematics web-hook.
	HookID *string `json:"hook_id,omitempty"`

	// Name of the user who registered the Schematics web-hook.
	RegisteredBy *string `json:"registered_by,omitempty"`

	// Timestamp of Schematics web-hook registration.
	RegisteredAt *strfmt.DateTime `json:"registered_at,omitempty"`

	// Schematics web-hook updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Name of user who updated the Schematics web-hook definition.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Timestamp of the last health check.
	LastHealthCheckedAt *strfmt.DateTime `json:"last_health_checked_at,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the WebHook.CommandName property.
// Schematics job command name.
const (
	WebHook_CommandName_AnsiblePlaybookCheck = "ansible_playbook_check"
	WebHook_CommandName_AnsiblePlaybookRun   = "ansible_playbook_run"
	WebHook_CommandName_CreateAction         = "create_action"
	WebHook_CommandName_CreateCart           = "create_cart"
	WebHook_CommandName_CreateEnvironment    = "create_environment"
	WebHook_CommandName_CreateWorkspace      = "create_workspace"
	WebHook_CommandName_DeleteAction         = "delete_action"
	WebHook_CommandName_DeleteEnvironment    = "delete_environment"
	WebHook_CommandName_DeleteWorkspace      = "delete_workspace"
	WebHook_CommandName_EnvironmentInit      = "environment_init"
	WebHook_CommandName_EnvironmentInstall   = "environment_install"
	WebHook_CommandName_EnvironmentUninstall = "environment_uninstall"
	WebHook_CommandName_PatchAction          = "patch_action"
	WebHook_CommandName_PatchWorkspace       = "patch_workspace"
	WebHook_CommandName_PutAction            = "put_action"
	WebHook_CommandName_PutEnvironment       = "put_environment"
	WebHook_CommandName_PutWorkspace         = "put_workspace"
	WebHook_CommandName_RepositoryProcess    = "repository_process"
	WebHook_CommandName_SystemKeyDelete      = "system_key_delete"
	WebHook_CommandName_SystemKeyDisable     = "system_key_disable"
	WebHook_CommandName_SystemKeyEnable      = "system_key_enable"
	WebHook_CommandName_SystemKeyRestore     = "system_key_restore"
	WebHook_CommandName_SystemKeyRotate      = "system_key_rotate"
	WebHook_CommandName_TerraformCommands    = "terraform_commands"
	WebHook_CommandName_WorkspaceApply       = "workspace_apply"
	WebHook_CommandName_WorkspaceDestroy     = "workspace_destroy"
	WebHook_CommandName_WorkspacePlan        = "workspace_plan"
	WebHook_CommandName_WorkspaceRefresh     = "workspace_refresh"
)

// Constants associated with the WebHook.HookType property.
// Type of the Schematics web-hook.
const (
	WebHook_HookType_Callback = "callback"
	WebHook_HookType_Hook     = "hook"
)

// Constants associated with the WebHook.HookSite property.
// List of notification points.
const (
	WebHook_HookSite_Before    = "before"
	WebHook_HookSite_OnError   = "on_error"
	WebHook_HookSite_OnSuccess = "on_success"
)

// Constants associated with the WebHook.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	WebHook_Location_EuDe    = "eu-de"
	WebHook_Location_EuGb    = "eu-gb"
	WebHook_Location_UsEast  = "us-east"
	WebHook_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of WebHook
func (o *WebHook) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of WebHook
func (o *WebHook) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of WebHook
func (o *WebHook) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of WebHook
func (o *WebHook) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.CommandName != nil {
		m["command_name"] = o.CommandName
	}
	if o.HookType != nil {
		m["hook_type"] = o.HookType
	}
	if o.HookSite != nil {
		m["hook_site"] = o.HookSite
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.HookEndpointURL != nil {
		m["hook_endpoint_url"] = o.HookEndpointURL
	}
	if o.ServiceID != nil {
		m["service_id"] = o.ServiceID
	}
	if o.Apikey != nil {
		m["apikey"] = o.Apikey
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.IgnoreInflightOperations != nil {
		m["ignore_inflight_operations"] = o.IgnoreInflightOperations
	}
	if o.HookID != nil {
		m["hook_id"] = o.HookID
	}
	if o.RegisteredBy != nil {
		m["registered_by"] = o.RegisteredBy
	}
	if o.RegisteredAt != nil {
		m["registered_at"] = o.RegisteredAt
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.LastHealthCheckedAt != nil {
		m["last_health_checked_at"] = o.LastHealthCheckedAt
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalWebHook unmarshals an instance of WebHook from the specified map of raw messages.
func UnmarshalWebHook(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(WebHook)
	err = core.UnmarshalPrimitive(m, "command_name", &obj.CommandName)
	if err != nil {
		return
	}
	delete(m, "command_name")
	err = core.UnmarshalPrimitive(m, "hook_type", &obj.HookType)
	if err != nil {
		return
	}
	delete(m, "hook_type")
	err = core.UnmarshalPrimitive(m, "hook_site", &obj.HookSite)
	if err != nil {
		return
	}
	delete(m, "hook_site")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "hook_endpoint_url", &obj.HookEndpointURL)
	if err != nil {
		return
	}
	delete(m, "hook_endpoint_url")
	err = core.UnmarshalPrimitive(m, "service_id", &obj.ServiceID)
	if err != nil {
		return
	}
	delete(m, "service_id")
	err = core.UnmarshalPrimitive(m, "apikey", &obj.Apikey)
	if err != nil {
		return
	}
	delete(m, "apikey")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalPrimitive(m, "ignore_inflight_operations", &obj.IgnoreInflightOperations)
	if err != nil {
		return
	}
	delete(m, "ignore_inflight_operations")
	err = core.UnmarshalPrimitive(m, "hook_id", &obj.HookID)
	if err != nil {
		return
	}
	delete(m, "hook_id")
	err = core.UnmarshalPrimitive(m, "registered_by", &obj.RegisteredBy)
	if err != nil {
		return
	}
	delete(m, "registered_by")
	err = core.UnmarshalPrimitive(m, "registered_at", &obj.RegisteredAt)
	if err != nil {
		return
	}
	delete(m, "registered_at")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalPrimitive(m, "last_health_checked_at", &obj.LastHealthCheckedAt)
	if err != nil {
		return
	}
	delete(m, "last_health_checked_at")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// WebHookList : List of Web-hook details response.
type WebHookList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of webhooks.
	Hooks []WebHook `json:"hooks,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of WebHookList
func (o *WebHookList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of WebHookList
func (o *WebHookList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of WebHookList
func (o *WebHookList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of WebHookList
func (o *WebHookList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Hooks != nil {
		m["hooks"] = o.Hooks
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalWebHookList unmarshals an instance of WebHookList from the specified map of raw messages.
func UnmarshalWebHookList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(WebHookList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "hooks", &obj.Hooks, UnmarshalWebHook)
	if err != nil {
		return
	}
	delete(m, "hooks")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Workspace : Complete Workspace details with user inputs and system generated data.
type Workspace struct {
	// Workspace name (unique for an account).
	Name *string `json:"name" validate:"required"`

	// Workspace description.
	Description *string `json:"description,omitempty"`

	// Resource-group name for the Workspace.  By default, workspace will be created in Default Resource Group.
	ResourceGroup *string `json:"resource_group" validate:"required"`

	// Workspace tags.
	Tags []string `json:"tags,omitempty"`

	// If true, automatically destroy all resources, when the workspace is deleted. Default is false.
	DestroyResourcesOnDelete *bool `json:"destroy_resources_on_delete,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location" validate:"required"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Schematics job command parameter (playbook-name, capsule-name or flow-name).
	CommandParameter *string `json:"command_parameter,omitempty"`

	// Input variables for the Workspace.
	Inputs []VariableData `json:"inputs,omitempty"`

	// Output variables from the Workspace.
	Outputs []VariableData `json:"outputs,omitempty"`

	// Environment variables used by all the templates in the Workspace.
	Settings []VariableData `json:"settings,omitempty"`

	// Workspace Id.
	ID *string `json:"id,omitempty"`

	// Workspace Cloud Resource Name.
	Crn *string `json:"crn,omitempty"`

	// Workspace account id.
	Account *string `json:"account,omitempty"`

	// Workspace creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the workspace.
	CreatedBy *string `json:"created_by,omitempty"`

	// Workspace updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the workspace.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Computed state of the Workspace.
	State *WorkspaceLiteState `json:"state,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Workspace Template records.
	Templates []Template `json:"templates,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the Workspace.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	Workspace_Location_EuDe    = "eu-de"
	Workspace_Location_EuGb    = "eu-gb"
	Workspace_Location_UsEast  = "us-east"
	Workspace_Location_UsSouth = "us-south"
)

// NewWorkspace : Instantiate Workspace (Generic Model Constructor)
func (*Schematics20ApiV2) NewWorkspace(name string, resourceGroup string, location string) (model *Workspace, err error) {
	model = &Workspace{
		Name:          core.StringPtr(name),
		ResourceGroup: core.StringPtr(resourceGroup),
		Location:      core.StringPtr(location),
	}
	err = core.ValidateStruct(model, "required parameters")
	return
}

// SetProperty allows the user to set an arbitrary property on an instance of Workspace
func (o *Workspace) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of Workspace
func (o *Workspace) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of Workspace
func (o *Workspace) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of Workspace
func (o *Workspace) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.DestroyResourcesOnDelete != nil {
		m["destroy_resources_on_delete"] = o.DestroyResourcesOnDelete
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.CommandParameter != nil {
		m["command_parameter"] = o.CommandParameter
	}
	if o.Inputs != nil {
		m["inputs"] = o.Inputs
	}
	if o.Outputs != nil {
		m["outputs"] = o.Outputs
	}
	if o.Settings != nil {
		m["settings"] = o.Settings
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.Account != nil {
		m["account"] = o.Account
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	if o.State != nil {
		m["state"] = o.State
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.Templates != nil {
		m["templates"] = o.Templates
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalWorkspace unmarshals an instance of Workspace from the specified map of raw messages.
func UnmarshalWorkspace(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Workspace)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalPrimitive(m, "destroy_resources_on_delete", &obj.DestroyResourcesOnDelete)
	if err != nil {
		return
	}
	delete(m, "destroy_resources_on_delete")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalPrimitive(m, "command_parameter", &obj.CommandParameter)
	if err != nil {
		return
	}
	delete(m, "command_parameter")
	err = core.UnmarshalModel(m, "inputs", &obj.Inputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "inputs")
	err = core.UnmarshalModel(m, "outputs", &obj.Outputs, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "outputs")
	err = core.UnmarshalModel(m, "settings", &obj.Settings, UnmarshalVariableData)
	if err != nil {
		return
	}
	delete(m, "settings")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "account", &obj.Account)
	if err != nil {
		return
	}
	delete(m, "account")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	err = core.UnmarshalModel(m, "state", &obj.State, UnmarshalWorkspaceLiteState)
	if err != nil {
		return
	}
	delete(m, "state")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalModel(m, "templates", &obj.Templates, UnmarshalTemplate)
	if err != nil {
		return
	}
	delete(m, "templates")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// WorkspaceList : List of Workspace definition response.
type WorkspaceList struct {
	// Total number of records.
	TotalCount *int64 `json:"total_count,omitempty"`

	// Number of records returned.
	Limit *int64 `json:"limit" validate:"required"`

	// Skipped number of records.
	Offset *int64 `json:"offset" validate:"required"`

	// List of workspace records.
	Workspaces []WorkspaceLite `json:"workspaces,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of WorkspaceList
func (o *WorkspaceList) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of WorkspaceList
func (o *WorkspaceList) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of WorkspaceList
func (o *WorkspaceList) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of WorkspaceList
func (o *WorkspaceList) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.TotalCount != nil {
		m["total_count"] = o.TotalCount
	}
	if o.Limit != nil {
		m["limit"] = o.Limit
	}
	if o.Offset != nil {
		m["offset"] = o.Offset
	}
	if o.Workspaces != nil {
		m["workspaces"] = o.Workspaces
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalWorkspaceList unmarshals an instance of WorkspaceList from the specified map of raw messages.
func UnmarshalWorkspaceList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(WorkspaceList)
	err = core.UnmarshalPrimitive(m, "total_count", &obj.TotalCount)
	if err != nil {
		return
	}
	delete(m, "total_count")
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		return
	}
	delete(m, "limit")
	err = core.UnmarshalPrimitive(m, "offset", &obj.Offset)
	if err != nil {
		return
	}
	delete(m, "offset")
	err = core.UnmarshalModel(m, "workspaces", &obj.Workspaces, UnmarshalWorkspaceLite)
	if err != nil {
		return
	}
	delete(m, "workspaces")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// WorkspaceLite : Workspace summary profile with user inputs and system generated data.
type WorkspaceLite struct {
	// Workspace name (unique for an account).
	Name *string `json:"name,omitempty"`

	// Workspace description.
	Description *string `json:"description,omitempty"`

	// Workspace Id.
	ID *string `json:"id,omitempty"`

	// Workspace Cloud Resource Name.
	Crn *string `json:"crn,omitempty"`

	// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
	// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
	// provisioned using Schematics.
	Location *string `json:"location,omitempty"`

	// Resource-group name for the Workspace.  By default, Workspace will be created in Default Resource Group.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Workspace tags.
	Tags []string `json:"tags,omitempty"`

	// User defined status of the Schematics object.
	UserState *UserState `json:"user_state,omitempty"`

	// Computed state of the Workspace.
	State *WorkspaceLiteState `json:"state,omitempty"`

	// System lock status.
	SysLock *SystemLock `json:"sys_lock,omitempty"`

	// Workspace creation time.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Email address of user who created the Workspace.
	CreatedBy *string `json:"created_by,omitempty"`

	// Workspace updation time.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Email address of user who updated the Workspace.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the WorkspaceLite.Location property.
// List of locations supported by IBM Cloud Schematics service.  While creating your workspace or action, choose the
// right region, since it cannot be changed.  Note, this does not limit the location of the IBM Cloud resources,
// provisioned using Schematics.
const (
	WorkspaceLite_Location_EuDe    = "eu-de"
	WorkspaceLite_Location_EuGb    = "eu-gb"
	WorkspaceLite_Location_UsEast  = "us-east"
	WorkspaceLite_Location_UsSouth = "us-south"
)

// SetProperty allows the user to set an arbitrary property on an instance of WorkspaceLite
func (o *WorkspaceLite) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of WorkspaceLite
func (o *WorkspaceLite) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of WorkspaceLite
func (o *WorkspaceLite) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of WorkspaceLite
func (o *WorkspaceLite) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.Name != nil {
		m["name"] = o.Name
	}
	if o.Description != nil {
		m["description"] = o.Description
	}
	if o.ID != nil {
		m["id"] = o.ID
	}
	if o.Crn != nil {
		m["crn"] = o.Crn
	}
	if o.Location != nil {
		m["location"] = o.Location
	}
	if o.ResourceGroup != nil {
		m["resource_group"] = o.ResourceGroup
	}
	if o.Tags != nil {
		m["tags"] = o.Tags
	}
	if o.UserState != nil {
		m["user_state"] = o.UserState
	}
	if o.State != nil {
		m["state"] = o.State
	}
	if o.SysLock != nil {
		m["sys_lock"] = o.SysLock
	}
	if o.CreatedAt != nil {
		m["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		m["created_by"] = o.CreatedBy
	}
	if o.UpdatedAt != nil {
		m["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		m["updated_by"] = o.UpdatedBy
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalWorkspaceLite unmarshals an instance of WorkspaceLite from the specified map of raw messages.
func UnmarshalWorkspaceLite(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(WorkspaceLite)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		return
	}
	delete(m, "name")
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		return
	}
	delete(m, "description")
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		return
	}
	delete(m, "id")
	err = core.UnmarshalPrimitive(m, "crn", &obj.Crn)
	if err != nil {
		return
	}
	delete(m, "crn")
	err = core.UnmarshalPrimitive(m, "location", &obj.Location)
	if err != nil {
		return
	}
	delete(m, "location")
	err = core.UnmarshalPrimitive(m, "resource_group", &obj.ResourceGroup)
	if err != nil {
		return
	}
	delete(m, "resource_group")
	err = core.UnmarshalPrimitive(m, "tags", &obj.Tags)
	if err != nil {
		return
	}
	delete(m, "tags")
	err = core.UnmarshalModel(m, "user_state", &obj.UserState, UnmarshalUserState)
	if err != nil {
		return
	}
	delete(m, "user_state")
	err = core.UnmarshalModel(m, "state", &obj.State, UnmarshalWorkspaceLiteState)
	if err != nil {
		return
	}
	delete(m, "state")
	err = core.UnmarshalModel(m, "sys_lock", &obj.SysLock, UnmarshalSystemLock)
	if err != nil {
		return
	}
	delete(m, "sys_lock")
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		return
	}
	delete(m, "created_at")
	err = core.UnmarshalPrimitive(m, "created_by", &obj.CreatedBy)
	if err != nil {
		return
	}
	delete(m, "created_by")
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		return
	}
	delete(m, "updated_at")
	err = core.UnmarshalPrimitive(m, "updated_by", &obj.UpdatedBy)
	if err != nil {
		return
	}
	delete(m, "updated_by")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// WorkspaceLiteState : Computed state of the Workspace.
type WorkspaceLiteState struct {
	// Status of automation (workspace or action).
	StatusCode *string `json:"status_code,omitempty"`

	// Automation status message - to be displayed along with the status_code.
	StatusMessage *string `json:"status_message,omitempty"`

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// Constants associated with the WorkspaceLiteState.StatusCode property.
// Status of automation (workspace or action).
const (
	WorkspaceLiteState_StatusCode_Critical = "critical"
	WorkspaceLiteState_StatusCode_Disabled = "disabled"
	WorkspaceLiteState_StatusCode_Normal   = "normal"
	WorkspaceLiteState_StatusCode_Pending  = "pending"
)

// SetProperty allows the user to set an arbitrary property on an instance of WorkspaceLiteState
func (o *WorkspaceLiteState) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of WorkspaceLiteState
func (o *WorkspaceLiteState) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of WorkspaceLiteState
func (o *WorkspaceLiteState) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of WorkspaceLiteState
func (o *WorkspaceLiteState) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	if o.StatusCode != nil {
		m["status_code"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		m["status_message"] = o.StatusMessage
	}
	buffer, err = json.Marshal(m)
	return
}

// UnmarshalWorkspaceLiteState unmarshals an instance of WorkspaceLiteState from the specified map of raw messages.
func UnmarshalWorkspaceLiteState(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(WorkspaceLiteState)
	err = core.UnmarshalPrimitive(m, "status_code", &obj.StatusCode)
	if err != nil {
		return
	}
	delete(m, "status_code")
	err = core.UnmarshalPrimitive(m, "status_message", &obj.StatusMessage)
	if err != nil {
		return
	}
	delete(m, "status_message")
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = e
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

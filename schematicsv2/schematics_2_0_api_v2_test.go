/**
 * (C) Copyright IBM Corp. 2022.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package schematics20apiv2_test

import (
	"bytes"
	"com.ibm.cloud/schematics20apiv2"
	"context"
	"fmt"
	"github.com/IBM/go-sdk-core/v5/core"
	"github.com/go-openapi/strfmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"io"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"os"
	"time"
)

var _ = Describe(`Schematics20ApiV2`, func() {
	var testServer *httptest.Server
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetSchematicsInfo(getSchematicsInfoOptions *GetSchematicsInfoOptions) - Operation response error`, func() {
		getSchematicsInfoPath := "/v2/info"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsInfoPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSchematicsInfo with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetSchematicsInfoOptions model
				getSchematicsInfoOptionsModel := new(schematics20apiv2.GetSchematicsInfoOptions)
				getSchematicsInfoOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetSchematicsInfo(getSchematicsInfoOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetSchematicsInfo(getSchematicsInfoOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSchematicsInfo(getSchematicsInfoOptions *GetSchematicsInfoOptions)`, func() {
		getSchematicsInfoPath := "/v2/info"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsInfoPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"schematics_version": "SchematicsVersion", "schematics_build": "SchematicsBuild", "supported_locations": ["us-south"], "supported_templates": {"mapKey": ["terraform_v0_11"]}, "supported_runtimes": {"mapKey": [{"runtime_image": "RuntimeImage", "runtime_properties": {"mapKey": ["Inner"]}}]}}`)
				}))
			})
			It(`Invoke GetSchematicsInfo successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetSchematicsInfoOptions model
				getSchematicsInfoOptionsModel := new(schematics20apiv2.GetSchematicsInfoOptions)
				getSchematicsInfoOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetSchematicsInfoWithContext(ctx, getSchematicsInfoOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetSchematicsInfo(getSchematicsInfoOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetSchematicsInfoWithContext(ctx, getSchematicsInfoOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsInfoPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"schematics_version": "SchematicsVersion", "schematics_build": "SchematicsBuild", "supported_locations": ["us-south"], "supported_templates": {"mapKey": ["terraform_v0_11"]}, "supported_runtimes": {"mapKey": [{"runtime_image": "RuntimeImage", "runtime_properties": {"mapKey": ["Inner"]}}]}}`)
				}))
			})
			It(`Invoke GetSchematicsInfo successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetSchematicsInfo(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSchematicsInfoOptions model
				getSchematicsInfoOptionsModel := new(schematics20apiv2.GetSchematicsInfoOptions)
				getSchematicsInfoOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetSchematicsInfo(getSchematicsInfoOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSchematicsInfo with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetSchematicsInfoOptions model
				getSchematicsInfoOptionsModel := new(schematics20apiv2.GetSchematicsInfoOptions)
				getSchematicsInfoOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetSchematicsInfo(getSchematicsInfoOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSchematicsAccessRules(listSchematicsAccessRulesOptions *ListSchematicsAccessRulesOptions) - Operation response error`, func() {
		listSchematicsAccessRulesPath := "/v2/access"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSchematicsAccessRulesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSchematicsAccessRules with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListSchematicsAccessRulesOptions model
				listSchematicsAccessRulesOptionsModel := new(schematics20apiv2.ListSchematicsAccessRulesOptions)
				listSchematicsAccessRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListSchematicsAccessRules(listSchematicsAccessRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListSchematicsAccessRules(listSchematicsAccessRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListSchematicsAccessRules(listSchematicsAccessRulesOptions *ListSchematicsAccessRulesOptions)`, func() {
		listSchematicsAccessRulesPath := "/v2/access"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSchematicsAccessRulesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "access_rules": [{"effect": "allow", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "principal": "Principal", "origin": "workspaces"}]}`)
				}))
			})
			It(`Invoke ListSchematicsAccessRules successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListSchematicsAccessRulesOptions model
				listSchematicsAccessRulesOptionsModel := new(schematics20apiv2.ListSchematicsAccessRulesOptions)
				listSchematicsAccessRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListSchematicsAccessRulesWithContext(ctx, listSchematicsAccessRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListSchematicsAccessRules(listSchematicsAccessRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListSchematicsAccessRulesWithContext(ctx, listSchematicsAccessRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSchematicsAccessRulesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "access_rules": [{"effect": "allow", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "principal": "Principal", "origin": "workspaces"}]}`)
				}))
			})
			It(`Invoke ListSchematicsAccessRules successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListSchematicsAccessRules(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSchematicsAccessRulesOptions model
				listSchematicsAccessRulesOptionsModel := new(schematics20apiv2.ListSchematicsAccessRulesOptions)
				listSchematicsAccessRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListSchematicsAccessRules(listSchematicsAccessRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListSchematicsAccessRules with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListSchematicsAccessRulesOptions model
				listSchematicsAccessRulesOptionsModel := new(schematics20apiv2.ListSchematicsAccessRulesOptions)
				listSchematicsAccessRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListSchematicsAccessRules(listSchematicsAccessRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSchematicsAccessRulesForResource(getSchematicsAccessRulesForResourceOptions *GetSchematicsAccessRulesForResourceOptions) - Operation response error`, func() {
		getSchematicsAccessRulesForResourcePath := "/v2/access/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsAccessRulesForResourcePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["command_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["command_parameter"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSchematicsAccessRulesForResource with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetSchematicsAccessRulesForResourceOptions model
				getSchematicsAccessRulesForResourceOptionsModel := new(schematics20apiv2.GetSchematicsAccessRulesForResourceOptions)
				getSchematicsAccessRulesForResourceOptionsModel.ResourceName = core.StringPtr("testString")
				getSchematicsAccessRulesForResourceOptionsModel.CommandName = core.StringPtr("testString")
				getSchematicsAccessRulesForResourceOptionsModel.CommandParameter = core.StringPtr("testString")
				getSchematicsAccessRulesForResourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetSchematicsAccessRulesForResource(getSchematicsAccessRulesForResourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetSchematicsAccessRulesForResource(getSchematicsAccessRulesForResourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSchematicsAccessRulesForResource(getSchematicsAccessRulesForResourceOptions *GetSchematicsAccessRulesForResourceOptions)`, func() {
		getSchematicsAccessRulesForResourcePath := "/v2/access/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsAccessRulesForResourcePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["command_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["command_parameter"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "access_rules": [{"effect": "allow", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "principal": "Principal", "origin": "workspaces"}]}`)
				}))
			})
			It(`Invoke GetSchematicsAccessRulesForResource successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetSchematicsAccessRulesForResourceOptions model
				getSchematicsAccessRulesForResourceOptionsModel := new(schematics20apiv2.GetSchematicsAccessRulesForResourceOptions)
				getSchematicsAccessRulesForResourceOptionsModel.ResourceName = core.StringPtr("testString")
				getSchematicsAccessRulesForResourceOptionsModel.CommandName = core.StringPtr("testString")
				getSchematicsAccessRulesForResourceOptionsModel.CommandParameter = core.StringPtr("testString")
				getSchematicsAccessRulesForResourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetSchematicsAccessRulesForResourceWithContext(ctx, getSchematicsAccessRulesForResourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetSchematicsAccessRulesForResource(getSchematicsAccessRulesForResourceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetSchematicsAccessRulesForResourceWithContext(ctx, getSchematicsAccessRulesForResourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsAccessRulesForResourcePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["command_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["command_parameter"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "access_rules": [{"effect": "allow", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "principal": "Principal", "origin": "workspaces"}]}`)
				}))
			})
			It(`Invoke GetSchematicsAccessRulesForResource successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetSchematicsAccessRulesForResource(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSchematicsAccessRulesForResourceOptions model
				getSchematicsAccessRulesForResourceOptionsModel := new(schematics20apiv2.GetSchematicsAccessRulesForResourceOptions)
				getSchematicsAccessRulesForResourceOptionsModel.ResourceName = core.StringPtr("testString")
				getSchematicsAccessRulesForResourceOptionsModel.CommandName = core.StringPtr("testString")
				getSchematicsAccessRulesForResourceOptionsModel.CommandParameter = core.StringPtr("testString")
				getSchematicsAccessRulesForResourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetSchematicsAccessRulesForResource(getSchematicsAccessRulesForResourceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSchematicsAccessRulesForResource with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetSchematicsAccessRulesForResourceOptions model
				getSchematicsAccessRulesForResourceOptionsModel := new(schematics20apiv2.GetSchematicsAccessRulesForResourceOptions)
				getSchematicsAccessRulesForResourceOptionsModel.ResourceName = core.StringPtr("testString")
				getSchematicsAccessRulesForResourceOptionsModel.CommandName = core.StringPtr("testString")
				getSchematicsAccessRulesForResourceOptionsModel.CommandParameter = core.StringPtr("testString")
				getSchematicsAccessRulesForResourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetSchematicsAccessRulesForResource(getSchematicsAccessRulesForResourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSchematicsAccessRulesForResourceOptions model with no property values
				getSchematicsAccessRulesForResourceOptionsModelNew := new(schematics20apiv2.GetSchematicsAccessRulesForResourceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetSchematicsAccessRulesForResource(getSchematicsAccessRulesForResourceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSchematicsCommandNames(getSchematicsCommandNamesOptions *GetSchematicsCommandNamesOptions) - Operation response error`, func() {
		getSchematicsCommandNamesPath := "/v2/commands/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsCommandNamesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSchematicsCommandNames with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetSchematicsCommandNamesOptions model
				getSchematicsCommandNamesOptionsModel := new(schematics20apiv2.GetSchematicsCommandNamesOptions)
				getSchematicsCommandNamesOptionsModel.ResourceName = core.StringPtr("testString")
				getSchematicsCommandNamesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetSchematicsCommandNames(getSchematicsCommandNamesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetSchematicsCommandNames(getSchematicsCommandNamesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetSchematicsCommandNames(getSchematicsCommandNamesOptions *GetSchematicsCommandNamesOptions)`, func() {
		getSchematicsCommandNamesPath := "/v2/commands/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsCommandNamesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"commands": [{"command_name": "workspace_plan", "command_parameter": "CommandParameter"}]}`)
				}))
			})
			It(`Invoke GetSchematicsCommandNames successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetSchematicsCommandNamesOptions model
				getSchematicsCommandNamesOptionsModel := new(schematics20apiv2.GetSchematicsCommandNamesOptions)
				getSchematicsCommandNamesOptionsModel.ResourceName = core.StringPtr("testString")
				getSchematicsCommandNamesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetSchematicsCommandNamesWithContext(ctx, getSchematicsCommandNamesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetSchematicsCommandNames(getSchematicsCommandNamesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetSchematicsCommandNamesWithContext(ctx, getSchematicsCommandNamesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsCommandNamesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"commands": [{"command_name": "workspace_plan", "command_parameter": "CommandParameter"}]}`)
				}))
			})
			It(`Invoke GetSchematicsCommandNames successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetSchematicsCommandNames(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSchematicsCommandNamesOptions model
				getSchematicsCommandNamesOptionsModel := new(schematics20apiv2.GetSchematicsCommandNamesOptions)
				getSchematicsCommandNamesOptionsModel.ResourceName = core.StringPtr("testString")
				getSchematicsCommandNamesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetSchematicsCommandNames(getSchematicsCommandNamesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSchematicsCommandNames with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetSchematicsCommandNamesOptions model
				getSchematicsCommandNamesOptionsModel := new(schematics20apiv2.GetSchematicsCommandNamesOptions)
				getSchematicsCommandNamesOptionsModel.ResourceName = core.StringPtr("testString")
				getSchematicsCommandNamesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetSchematicsCommandNames(getSchematicsCommandNamesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSchematicsCommandNamesOptions model with no property values
				getSchematicsCommandNamesOptionsModelNew := new(schematics20apiv2.GetSchematicsCommandNamesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetSchematicsCommandNames(getSchematicsCommandNamesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListWorkspaces(listWorkspacesOptions *ListWorkspacesOptions) - Operation response error`, func() {
		listWorkspacesPath := "/v2/workspaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListWorkspaces with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := new(schematics20apiv2.ListWorkspacesOptions)
				listWorkspacesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspacesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspacesOptionsModel.Sort = core.StringPtr("testString")
				listWorkspacesOptionsModel.Profile = core.StringPtr("ids")
				listWorkspacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListWorkspaces(listWorkspacesOptions *ListWorkspacesOptions)`, func() {
		listWorkspacesPath := "/v2/workspaces"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspacesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "workspaces": [{"name": "Name", "description": "Description", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListWorkspaces successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := new(schematics20apiv2.ListWorkspacesOptions)
				listWorkspacesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspacesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspacesOptionsModel.Sort = core.StringPtr("testString")
				listWorkspacesOptionsModel.Profile = core.StringPtr("ids")
				listWorkspacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListWorkspacesWithContext(ctx, listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListWorkspacesWithContext(ctx, listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspacesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "workspaces": [{"name": "Name", "description": "Description", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListWorkspaces successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListWorkspaces(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := new(schematics20apiv2.ListWorkspacesOptions)
				listWorkspacesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspacesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspacesOptionsModel.Sort = core.StringPtr("testString")
				listWorkspacesOptionsModel.Profile = core.StringPtr("ids")
				listWorkspacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListWorkspaces with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := new(schematics20apiv2.ListWorkspacesOptions)
				listWorkspacesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspacesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspacesOptionsModel.Sort = core.StringPtr("testString")
				listWorkspacesOptionsModel.Profile = core.StringPtr("ids")
				listWorkspacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateWorkspace(createWorkspaceOptions *CreateWorkspaceOptions) - Operation response error`, func() {
		createWorkspacePath := "/v2/workspaces"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspacePath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := new(schematics20apiv2.CreateWorkspaceOptions)
				createWorkspaceOptionsModel.Workspace = workspaceModel
				createWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateWorkspace(createWorkspaceOptions *CreateWorkspaceOptions)`, func() {
		createWorkspacePath := "/v2/workspaces"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "ResourceGroup", "tags": ["Tags"], "destroy_resources_on_delete": true, "location": "us-south", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "CommandParameter", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke CreateWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := new(schematics20apiv2.CreateWorkspaceOptions)
				createWorkspaceOptionsModel.Workspace = workspaceModel
				createWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateWorkspaceWithContext(ctx, createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateWorkspaceWithContext(ctx, createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "ResourceGroup", "tags": ["Tags"], "destroy_resources_on_delete": true, "location": "us-south", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "CommandParameter", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke CreateWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := new(schematics20apiv2.CreateWorkspaceOptions)
				createWorkspaceOptionsModel.Workspace = workspaceModel
				createWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := new(schematics20apiv2.CreateWorkspaceOptions)
				createWorkspaceOptionsModel.Workspace = workspaceModel
				createWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateWorkspaceOptions model with no property values
				createWorkspaceOptionsModelNew := new(schematics20apiv2.CreateWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateWorkspace(createWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspace(getWorkspaceOptions *GetWorkspaceOptions) - Operation response error`, func() {
		getWorkspacePath := "/v2/workspaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOptions model
				getWorkspaceOptionsModel := new(schematics20apiv2.GetWorkspaceOptions)
				getWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOptionsModel.Profile = core.StringPtr("summary")
				getWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspace(getWorkspaceOptions *GetWorkspaceOptions)`, func() {
		getWorkspacePath := "/v2/workspaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "ResourceGroup", "tags": ["Tags"], "destroy_resources_on_delete": true, "location": "us-south", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "CommandParameter", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke GetWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceOptions model
				getWorkspaceOptionsModel := new(schematics20apiv2.GetWorkspaceOptions)
				getWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOptionsModel.Profile = core.StringPtr("summary")
				getWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetWorkspaceWithContext(ctx, getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetWorkspaceWithContext(ctx, getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "ResourceGroup", "tags": ["Tags"], "destroy_resources_on_delete": true, "location": "us-south", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "CommandParameter", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke GetWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceOptions model
				getWorkspaceOptionsModel := new(schematics20apiv2.GetWorkspaceOptions)
				getWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOptionsModel.Profile = core.StringPtr("summary")
				getWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOptions model
				getWorkspaceOptionsModel := new(schematics20apiv2.GetWorkspaceOptions)
				getWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOptionsModel.Profile = core.StringPtr("summary")
				getWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceOptions model with no property values
				getWorkspaceOptionsModelNew := new(schematics20apiv2.GetWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetWorkspace(getWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceWorkspace(replaceWorkspaceOptions *ReplaceWorkspaceOptions) - Operation response error`, func() {
		replaceWorkspacePath := "/v2/workspaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceWorkspaceOptions model
				replaceWorkspaceOptionsModel := new(schematics20apiv2.ReplaceWorkspaceOptions)
				replaceWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Workspace = workspaceModel
				replaceWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceWorkspace(replaceWorkspaceOptions *ReplaceWorkspaceOptions)`, func() {
		replaceWorkspacePath := "/v2/workspaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "ResourceGroup", "tags": ["Tags"], "destroy_resources_on_delete": true, "location": "us-south", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "CommandParameter", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke ReplaceWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceWorkspaceOptions model
				replaceWorkspaceOptionsModel := new(schematics20apiv2.ReplaceWorkspaceOptions)
				replaceWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Workspace = workspaceModel
				replaceWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ReplaceWorkspaceWithContext(ctx, replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ReplaceWorkspaceWithContext(ctx, replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "ResourceGroup", "tags": ["Tags"], "destroy_resources_on_delete": true, "location": "us-south", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "CommandParameter", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke ReplaceWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ReplaceWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceWorkspaceOptions model
				replaceWorkspaceOptionsModel := new(schematics20apiv2.ReplaceWorkspaceOptions)
				replaceWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Workspace = workspaceModel
				replaceWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceWorkspaceOptions model
				replaceWorkspaceOptionsModel := new(schematics20apiv2.ReplaceWorkspaceOptions)
				replaceWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Workspace = workspaceModel
				replaceWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceWorkspaceOptions model with no property values
				replaceWorkspaceOptionsModelNew := new(schematics20apiv2.ReplaceWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ReplaceWorkspace(replaceWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteWorkspace(deleteWorkspaceOptions *DeleteWorkspaceOptions)`, func() {
		deleteWorkspacePath := "/v2/workspaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteWorkspacePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteWorkspaceOptions model
				deleteWorkspaceOptionsModel := new(schematics20apiv2.DeleteWorkspaceOptions)
				deleteWorkspaceOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.Force = core.BoolPtr(true)
				deleteWorkspaceOptionsModel.Propagate = core.BoolPtr(true)
				deleteWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteWorkspace(deleteWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteWorkspaceOptions model
				deleteWorkspaceOptionsModel := new(schematics20apiv2.DeleteWorkspaceOptions)
				deleteWorkspaceOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.Force = core.BoolPtr(true)
				deleteWorkspaceOptionsModel.Propagate = core.BoolPtr(true)
				deleteWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteWorkspace(deleteWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteWorkspaceOptions model with no property values
				deleteWorkspaceOptionsModelNew := new(schematics20apiv2.DeleteWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteWorkspace(deleteWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateWorkspace(updateWorkspaceOptions *UpdateWorkspaceOptions) - Operation response error`, func() {
		updateWorkspacePath := "/v2/workspaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateWorkspaceOptions model
				updateWorkspaceOptionsModel := new(schematics20apiv2.UpdateWorkspaceOptions)
				updateWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Workspace = workspaceModel
				updateWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateWorkspace(updateWorkspaceOptions *UpdateWorkspaceOptions)`, func() {
		updateWorkspacePath := "/v2/workspaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "ResourceGroup", "tags": ["Tags"], "destroy_resources_on_delete": true, "location": "us-south", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "CommandParameter", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke UpdateWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateWorkspaceOptions model
				updateWorkspaceOptionsModel := new(schematics20apiv2.UpdateWorkspaceOptions)
				updateWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Workspace = workspaceModel
				updateWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UpdateWorkspaceWithContext(ctx, updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UpdateWorkspaceWithContext(ctx, updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "ResourceGroup", "tags": ["Tags"], "destroy_resources_on_delete": true, "location": "us-south", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "CommandParameter", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke UpdateWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UpdateWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateWorkspaceOptions model
				updateWorkspaceOptionsModel := new(schematics20apiv2.UpdateWorkspaceOptions)
				updateWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Workspace = workspaceModel
				updateWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateWorkspaceOptions model
				updateWorkspaceOptionsModel := new(schematics20apiv2.UpdateWorkspaceOptions)
				updateWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Workspace = workspaceModel
				updateWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateWorkspaceOptions model with no property values
				updateWorkspaceOptionsModelNew := new(schematics20apiv2.UpdateWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UpdateWorkspace(updateWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListWorkspaceInputs(listWorkspaceInputsOptions *ListWorkspaceInputsOptions) - Operation response error`, func() {
		listWorkspaceInputsPath := "/v2/workspaces/testString/inputs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListWorkspaceInputs with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListWorkspaceInputsOptions model
				listWorkspaceInputsOptionsModel := new(schematics20apiv2.ListWorkspaceInputsOptions)
				listWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceInputsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceInputsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListWorkspaceInputs(listWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListWorkspaceInputs(listWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListWorkspaceInputs(listWorkspaceInputsOptions *ListWorkspaceInputsOptions)`, func() {
		listWorkspaceInputsPath := "/v2/workspaces/testString/inputs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ListWorkspaceInputs successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListWorkspaceInputsOptions model
				listWorkspaceInputsOptionsModel := new(schematics20apiv2.ListWorkspaceInputsOptions)
				listWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceInputsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceInputsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListWorkspaceInputsWithContext(ctx, listWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListWorkspaceInputs(listWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListWorkspaceInputsWithContext(ctx, listWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ListWorkspaceInputs successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListWorkspaceInputs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListWorkspaceInputsOptions model
				listWorkspaceInputsOptionsModel := new(schematics20apiv2.ListWorkspaceInputsOptions)
				listWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceInputsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceInputsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListWorkspaceInputs(listWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListWorkspaceInputs with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListWorkspaceInputsOptions model
				listWorkspaceInputsOptionsModel := new(schematics20apiv2.ListWorkspaceInputsOptions)
				listWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceInputsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceInputsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListWorkspaceInputs(listWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListWorkspaceInputsOptions model with no property values
				listWorkspaceInputsOptionsModelNew := new(schematics20apiv2.ListWorkspaceInputsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ListWorkspaceInputs(listWorkspaceInputsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListWorkspaceOutputs(listWorkspaceOutputsOptions *ListWorkspaceOutputsOptions) - Operation response error`, func() {
		listWorkspaceOutputsPath := "/v2/workspaces/testString/outputs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspaceOutputsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListWorkspaceOutputs with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListWorkspaceOutputsOptions model
				listWorkspaceOutputsOptionsModel := new(schematics20apiv2.ListWorkspaceOutputsOptions)
				listWorkspaceOutputsOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceOutputsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceOutputsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspaceOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListWorkspaceOutputs(listWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListWorkspaceOutputs(listWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListWorkspaceOutputs(listWorkspaceOutputsOptions *ListWorkspaceOutputsOptions)`, func() {
		listWorkspaceOutputsPath := "/v2/workspaces/testString/outputs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspaceOutputsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ListWorkspaceOutputs successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListWorkspaceOutputsOptions model
				listWorkspaceOutputsOptionsModel := new(schematics20apiv2.ListWorkspaceOutputsOptions)
				listWorkspaceOutputsOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceOutputsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceOutputsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspaceOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListWorkspaceOutputsWithContext(ctx, listWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListWorkspaceOutputs(listWorkspaceOutputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListWorkspaceOutputsWithContext(ctx, listWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspaceOutputsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ListWorkspaceOutputs successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListWorkspaceOutputs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListWorkspaceOutputsOptions model
				listWorkspaceOutputsOptionsModel := new(schematics20apiv2.ListWorkspaceOutputsOptions)
				listWorkspaceOutputsOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceOutputsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceOutputsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspaceOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListWorkspaceOutputs(listWorkspaceOutputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListWorkspaceOutputs with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListWorkspaceOutputsOptions model
				listWorkspaceOutputsOptionsModel := new(schematics20apiv2.ListWorkspaceOutputsOptions)
				listWorkspaceOutputsOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceOutputsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceOutputsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWorkspaceOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListWorkspaceOutputs(listWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListWorkspaceOutputsOptions model with no property values
				listWorkspaceOutputsOptionsModelNew := new(schematics20apiv2.ListWorkspaceOutputsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ListWorkspaceOutputs(listWorkspaceOutputsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`CreateWorkspaceTemplates(createWorkspaceTemplatesOptions *CreateWorkspaceTemplatesOptions) - Operation response error`, func() {
		createWorkspaceTemplatesPath := "/v2/templates"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspaceTemplatesPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateWorkspaceTemplates with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateListRequest model
				templateListRequestModel := new(schematics20apiv2.TemplateListRequest)
				templateListRequestModel.Templates = []schematics20apiv2.Template{*templateModel}
				templateListRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateWorkspaceTemplatesOptions model
				createWorkspaceTemplatesOptionsModel := new(schematics20apiv2.CreateWorkspaceTemplatesOptions)
				createWorkspaceTemplatesOptionsModel.TemplateListRequest = templateListRequestModel
				createWorkspaceTemplatesOptionsModel.XGithubToken = core.StringPtr("testString")
				createWorkspaceTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateWorkspaceTemplates(createWorkspaceTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateWorkspaceTemplates(createWorkspaceTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateWorkspaceTemplates(createWorkspaceTemplatesOptions *CreateWorkspaceTemplatesOptions)`, func() {
		createWorkspaceTemplatesPath := "/v2/templates"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspaceTemplatesPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "ResourceGroup", "tags": ["Tags"], "destroy_resources_on_delete": true, "location": "us-south", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "CommandParameter", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke CreateWorkspaceTemplates successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateListRequest model
				templateListRequestModel := new(schematics20apiv2.TemplateListRequest)
				templateListRequestModel.Templates = []schematics20apiv2.Template{*templateModel}
				templateListRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateWorkspaceTemplatesOptions model
				createWorkspaceTemplatesOptionsModel := new(schematics20apiv2.CreateWorkspaceTemplatesOptions)
				createWorkspaceTemplatesOptionsModel.TemplateListRequest = templateListRequestModel
				createWorkspaceTemplatesOptionsModel.XGithubToken = core.StringPtr("testString")
				createWorkspaceTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateWorkspaceTemplatesWithContext(ctx, createWorkspaceTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateWorkspaceTemplates(createWorkspaceTemplatesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateWorkspaceTemplatesWithContext(ctx, createWorkspaceTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspaceTemplatesPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "My Workspace", "description": "This workspace manages front-end micro service for production environment", "resource_group": "ResourceGroup", "tags": ["Tags"], "destroy_resources_on_delete": true, "location": "us-south", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "command_parameter": "CommandParameter", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "templates": [{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke CreateWorkspaceTemplates successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateWorkspaceTemplates(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateListRequest model
				templateListRequestModel := new(schematics20apiv2.TemplateListRequest)
				templateListRequestModel.Templates = []schematics20apiv2.Template{*templateModel}
				templateListRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateWorkspaceTemplatesOptions model
				createWorkspaceTemplatesOptionsModel := new(schematics20apiv2.CreateWorkspaceTemplatesOptions)
				createWorkspaceTemplatesOptionsModel.TemplateListRequest = templateListRequestModel
				createWorkspaceTemplatesOptionsModel.XGithubToken = core.StringPtr("testString")
				createWorkspaceTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateWorkspaceTemplates(createWorkspaceTemplatesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateWorkspaceTemplates with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateListRequest model
				templateListRequestModel := new(schematics20apiv2.TemplateListRequest)
				templateListRequestModel.Templates = []schematics20apiv2.Template{*templateModel}
				templateListRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateWorkspaceTemplatesOptions model
				createWorkspaceTemplatesOptionsModel := new(schematics20apiv2.CreateWorkspaceTemplatesOptions)
				createWorkspaceTemplatesOptionsModel.TemplateListRequest = templateListRequestModel
				createWorkspaceTemplatesOptionsModel.XGithubToken = core.StringPtr("testString")
				createWorkspaceTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateWorkspaceTemplates(createWorkspaceTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateWorkspaceTemplatesOptions model with no property values
				createWorkspaceTemplatesOptionsModelNew := new(schematics20apiv2.CreateWorkspaceTemplatesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateWorkspaceTemplates(createWorkspaceTemplatesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTemplatesInWorkspace(listTemplatesInWorkspaceOptions *ListTemplatesInWorkspaceOptions) - Operation response error`, func() {
		listTemplatesInWorkspacePath := "/v2/workspaces/testString/templates"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTemplatesInWorkspacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTemplatesInWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListTemplatesInWorkspaceOptions model
				listTemplatesInWorkspaceOptionsModel := new(schematics20apiv2.ListTemplatesInWorkspaceOptions)
				listTemplatesInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				listTemplatesInWorkspaceOptionsModel.Offset = core.Int64Ptr(int64(0))
				listTemplatesInWorkspaceOptionsModel.Limit = core.Int64Ptr(int64(1))
				listTemplatesInWorkspaceOptionsModel.Sort = core.StringPtr("testString")
				listTemplatesInWorkspaceOptionsModel.Profile = core.StringPtr("ids")
				listTemplatesInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListTemplatesInWorkspace(listTemplatesInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListTemplatesInWorkspace(listTemplatesInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListTemplatesInWorkspace(listTemplatesInWorkspaceOptions *ListTemplatesInWorkspaceOptions)`, func() {
		listTemplatesInWorkspacePath := "/v2/workspaces/testString/templates"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTemplatesInWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "templates": [{"id": "ID", "name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListTemplatesInWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListTemplatesInWorkspaceOptions model
				listTemplatesInWorkspaceOptionsModel := new(schematics20apiv2.ListTemplatesInWorkspaceOptions)
				listTemplatesInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				listTemplatesInWorkspaceOptionsModel.Offset = core.Int64Ptr(int64(0))
				listTemplatesInWorkspaceOptionsModel.Limit = core.Int64Ptr(int64(1))
				listTemplatesInWorkspaceOptionsModel.Sort = core.StringPtr("testString")
				listTemplatesInWorkspaceOptionsModel.Profile = core.StringPtr("ids")
				listTemplatesInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListTemplatesInWorkspaceWithContext(ctx, listTemplatesInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListTemplatesInWorkspace(listTemplatesInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListTemplatesInWorkspaceWithContext(ctx, listTemplatesInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTemplatesInWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "templates": [{"id": "ID", "name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListTemplatesInWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListTemplatesInWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTemplatesInWorkspaceOptions model
				listTemplatesInWorkspaceOptionsModel := new(schematics20apiv2.ListTemplatesInWorkspaceOptions)
				listTemplatesInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				listTemplatesInWorkspaceOptionsModel.Offset = core.Int64Ptr(int64(0))
				listTemplatesInWorkspaceOptionsModel.Limit = core.Int64Ptr(int64(1))
				listTemplatesInWorkspaceOptionsModel.Sort = core.StringPtr("testString")
				listTemplatesInWorkspaceOptionsModel.Profile = core.StringPtr("ids")
				listTemplatesInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListTemplatesInWorkspace(listTemplatesInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTemplatesInWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListTemplatesInWorkspaceOptions model
				listTemplatesInWorkspaceOptionsModel := new(schematics20apiv2.ListTemplatesInWorkspaceOptions)
				listTemplatesInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				listTemplatesInWorkspaceOptionsModel.Offset = core.Int64Ptr(int64(0))
				listTemplatesInWorkspaceOptionsModel.Limit = core.Int64Ptr(int64(1))
				listTemplatesInWorkspaceOptionsModel.Sort = core.StringPtr("testString")
				listTemplatesInWorkspaceOptionsModel.Profile = core.StringPtr("ids")
				listTemplatesInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListTemplatesInWorkspace(listTemplatesInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTemplatesInWorkspaceOptions model with no property values
				listTemplatesInWorkspaceOptionsModelNew := new(schematics20apiv2.ListTemplatesInWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ListTemplatesInWorkspace(listTemplatesInWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AddTemplatesToWorkspace(addTemplatesToWorkspaceOptions *AddTemplatesToWorkspaceOptions) - Operation response error`, func() {
		addTemplatesToWorkspacePath := "/v2/workspaces/testString/templates"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addTemplatesToWorkspacePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke AddTemplatesToWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AddTemplatesToWorkspaceOptions model
				addTemplatesToWorkspaceOptionsModel := new(schematics20apiv2.AddTemplatesToWorkspaceOptions)
				addTemplatesToWorkspaceOptionsModel.WID = core.StringPtr("testString")
				addTemplatesToWorkspaceOptionsModel.Template = templateModel
				addTemplatesToWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				addTemplatesToWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.AddTemplatesToWorkspace(addTemplatesToWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.AddTemplatesToWorkspace(addTemplatesToWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddTemplatesToWorkspace(addTemplatesToWorkspaceOptions *AddTemplatesToWorkspaceOptions)`, func() {
		addTemplatesToWorkspacePath := "/v2/workspaces/testString/templates"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addTemplatesToWorkspacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke AddTemplatesToWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AddTemplatesToWorkspaceOptions model
				addTemplatesToWorkspaceOptionsModel := new(schematics20apiv2.AddTemplatesToWorkspaceOptions)
				addTemplatesToWorkspaceOptionsModel.WID = core.StringPtr("testString")
				addTemplatesToWorkspaceOptionsModel.Template = templateModel
				addTemplatesToWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				addTemplatesToWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.AddTemplatesToWorkspaceWithContext(ctx, addTemplatesToWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.AddTemplatesToWorkspace(addTemplatesToWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.AddTemplatesToWorkspaceWithContext(ctx, addTemplatesToWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addTemplatesToWorkspacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke AddTemplatesToWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.AddTemplatesToWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AddTemplatesToWorkspaceOptions model
				addTemplatesToWorkspaceOptionsModel := new(schematics20apiv2.AddTemplatesToWorkspaceOptions)
				addTemplatesToWorkspaceOptionsModel.WID = core.StringPtr("testString")
				addTemplatesToWorkspaceOptionsModel.Template = templateModel
				addTemplatesToWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				addTemplatesToWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.AddTemplatesToWorkspace(addTemplatesToWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke AddTemplatesToWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AddTemplatesToWorkspaceOptions model
				addTemplatesToWorkspaceOptionsModel := new(schematics20apiv2.AddTemplatesToWorkspaceOptions)
				addTemplatesToWorkspaceOptionsModel.WID = core.StringPtr("testString")
				addTemplatesToWorkspaceOptionsModel.Template = templateModel
				addTemplatesToWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				addTemplatesToWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.AddTemplatesToWorkspace(addTemplatesToWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the AddTemplatesToWorkspaceOptions model with no property values
				addTemplatesToWorkspaceOptionsModelNew := new(schematics20apiv2.AddTemplatesToWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.AddTemplatesToWorkspace(addTemplatesToWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTemplateInWorkspace(getTemplateInWorkspaceOptions *GetTemplateInWorkspaceOptions) - Operation response error`, func() {
		getTemplateInWorkspacePath := "/v2/workspaces/testString/templates/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateInWorkspacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTemplateInWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetTemplateInWorkspaceOptions model
				getTemplateInWorkspaceOptionsModel := new(schematics20apiv2.GetTemplateInWorkspaceOptions)
				getTemplateInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getTemplateInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				getTemplateInWorkspaceOptionsModel.Profile = core.StringPtr("summary")
				getTemplateInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetTemplateInWorkspace(getTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetTemplateInWorkspace(getTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetTemplateInWorkspace(getTemplateInWorkspaceOptions *GetTemplateInWorkspaceOptions)`, func() {
		getTemplateInWorkspacePath := "/v2/workspaces/testString/templates/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateInWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetTemplateInWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetTemplateInWorkspaceOptions model
				getTemplateInWorkspaceOptionsModel := new(schematics20apiv2.GetTemplateInWorkspaceOptions)
				getTemplateInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getTemplateInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				getTemplateInWorkspaceOptionsModel.Profile = core.StringPtr("summary")
				getTemplateInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetTemplateInWorkspaceWithContext(ctx, getTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetTemplateInWorkspace(getTemplateInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetTemplateInWorkspaceWithContext(ctx, getTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateInWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetTemplateInWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetTemplateInWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTemplateInWorkspaceOptions model
				getTemplateInWorkspaceOptionsModel := new(schematics20apiv2.GetTemplateInWorkspaceOptions)
				getTemplateInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getTemplateInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				getTemplateInWorkspaceOptionsModel.Profile = core.StringPtr("summary")
				getTemplateInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetTemplateInWorkspace(getTemplateInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTemplateInWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetTemplateInWorkspaceOptions model
				getTemplateInWorkspaceOptionsModel := new(schematics20apiv2.GetTemplateInWorkspaceOptions)
				getTemplateInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getTemplateInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				getTemplateInWorkspaceOptionsModel.Profile = core.StringPtr("summary")
				getTemplateInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetTemplateInWorkspace(getTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTemplateInWorkspaceOptions model with no property values
				getTemplateInWorkspaceOptionsModelNew := new(schematics20apiv2.GetTemplateInWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetTemplateInWorkspace(getTemplateInWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceTemplateInWorkspace(replaceTemplateInWorkspaceOptions *ReplaceTemplateInWorkspaceOptions) - Operation response error`, func() {
		replaceTemplateInWorkspacePath := "/v2/workspaces/testString/templates/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceTemplateInWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceTemplateInWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceTemplateInWorkspaceOptions model
				replaceTemplateInWorkspaceOptionsModel := new(schematics20apiv2.ReplaceTemplateInWorkspaceOptions)
				replaceTemplateInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceTemplateInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				replaceTemplateInWorkspaceOptionsModel.Template = templateModel
				replaceTemplateInWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				replaceTemplateInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ReplaceTemplateInWorkspace(replaceTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ReplaceTemplateInWorkspace(replaceTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceTemplateInWorkspace(replaceTemplateInWorkspaceOptions *ReplaceTemplateInWorkspaceOptions)`, func() {
		replaceTemplateInWorkspacePath := "/v2/workspaces/testString/templates/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceTemplateInWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke ReplaceTemplateInWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceTemplateInWorkspaceOptions model
				replaceTemplateInWorkspaceOptionsModel := new(schematics20apiv2.ReplaceTemplateInWorkspaceOptions)
				replaceTemplateInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceTemplateInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				replaceTemplateInWorkspaceOptionsModel.Template = templateModel
				replaceTemplateInWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				replaceTemplateInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ReplaceTemplateInWorkspaceWithContext(ctx, replaceTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ReplaceTemplateInWorkspace(replaceTemplateInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ReplaceTemplateInWorkspaceWithContext(ctx, replaceTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceTemplateInWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke ReplaceTemplateInWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ReplaceTemplateInWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceTemplateInWorkspaceOptions model
				replaceTemplateInWorkspaceOptionsModel := new(schematics20apiv2.ReplaceTemplateInWorkspaceOptions)
				replaceTemplateInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceTemplateInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				replaceTemplateInWorkspaceOptionsModel.Template = templateModel
				replaceTemplateInWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				replaceTemplateInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ReplaceTemplateInWorkspace(replaceTemplateInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceTemplateInWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceTemplateInWorkspaceOptions model
				replaceTemplateInWorkspaceOptionsModel := new(schematics20apiv2.ReplaceTemplateInWorkspaceOptions)
				replaceTemplateInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceTemplateInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				replaceTemplateInWorkspaceOptionsModel.Template = templateModel
				replaceTemplateInWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				replaceTemplateInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ReplaceTemplateInWorkspace(replaceTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceTemplateInWorkspaceOptions model with no property values
				replaceTemplateInWorkspaceOptionsModelNew := new(schematics20apiv2.ReplaceTemplateInWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ReplaceTemplateInWorkspace(replaceTemplateInWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteTemplateFromWorkspace(deleteTemplateFromWorkspaceOptions *DeleteTemplateFromWorkspaceOptions)`, func() {
		deleteTemplateFromWorkspacePath := "/v2/workspaces/testString/templates/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteTemplateFromWorkspacePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteTemplateFromWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteTemplateFromWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteTemplateFromWorkspaceOptions model
				deleteTemplateFromWorkspaceOptionsModel := new(schematics20apiv2.DeleteTemplateFromWorkspaceOptions)
				deleteTemplateFromWorkspaceOptionsModel.WID = core.StringPtr("testString")
				deleteTemplateFromWorkspaceOptionsModel.TID = core.StringPtr("testString")
				deleteTemplateFromWorkspaceOptionsModel.Force = core.BoolPtr(true)
				deleteTemplateFromWorkspaceOptionsModel.Propagate = core.BoolPtr(true)
				deleteTemplateFromWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteTemplateFromWorkspace(deleteTemplateFromWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteTemplateFromWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteTemplateFromWorkspaceOptions model
				deleteTemplateFromWorkspaceOptionsModel := new(schematics20apiv2.DeleteTemplateFromWorkspaceOptions)
				deleteTemplateFromWorkspaceOptionsModel.WID = core.StringPtr("testString")
				deleteTemplateFromWorkspaceOptionsModel.TID = core.StringPtr("testString")
				deleteTemplateFromWorkspaceOptionsModel.Force = core.BoolPtr(true)
				deleteTemplateFromWorkspaceOptionsModel.Propagate = core.BoolPtr(true)
				deleteTemplateFromWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteTemplateFromWorkspace(deleteTemplateFromWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteTemplateFromWorkspaceOptions model with no property values
				deleteTemplateFromWorkspaceOptionsModelNew := new(schematics20apiv2.DeleteTemplateFromWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteTemplateFromWorkspace(deleteTemplateFromWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTemplateInWorkspace(updateTemplateInWorkspaceOptions *UpdateTemplateInWorkspaceOptions) - Operation response error`, func() {
		updateTemplateInWorkspacePath := "/v2/workspaces/testString/templates/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTemplateInWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateTemplateInWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateTemplateInWorkspaceOptions model
				updateTemplateInWorkspaceOptionsModel := new(schematics20apiv2.UpdateTemplateInWorkspaceOptions)
				updateTemplateInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateTemplateInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				updateTemplateInWorkspaceOptionsModel.Template = templateModel
				updateTemplateInWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				updateTemplateInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UpdateTemplateInWorkspace(updateTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UpdateTemplateInWorkspace(updateTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateTemplateInWorkspace(updateTemplateInWorkspaceOptions *UpdateTemplateInWorkspaceOptions)`, func() {
		updateTemplateInWorkspacePath := "/v2/workspaces/testString/templates/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTemplateInWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UpdateTemplateInWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateTemplateInWorkspaceOptions model
				updateTemplateInWorkspaceOptionsModel := new(schematics20apiv2.UpdateTemplateInWorkspaceOptions)
				updateTemplateInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateTemplateInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				updateTemplateInWorkspaceOptionsModel.Template = templateModel
				updateTemplateInWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				updateTemplateInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UpdateTemplateInWorkspaceWithContext(ctx, updateTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UpdateTemplateInWorkspace(updateTemplateInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UpdateTemplateInWorkspaceWithContext(ctx, updateTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTemplateInWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UpdateTemplateInWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UpdateTemplateInWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateTemplateInWorkspaceOptions model
				updateTemplateInWorkspaceOptionsModel := new(schematics20apiv2.UpdateTemplateInWorkspaceOptions)
				updateTemplateInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateTemplateInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				updateTemplateInWorkspaceOptionsModel.Template = templateModel
				updateTemplateInWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				updateTemplateInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UpdateTemplateInWorkspace(updateTemplateInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateTemplateInWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateTemplateInWorkspaceOptions model
				updateTemplateInWorkspaceOptionsModel := new(schematics20apiv2.UpdateTemplateInWorkspaceOptions)
				updateTemplateInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateTemplateInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				updateTemplateInWorkspaceOptionsModel.Template = templateModel
				updateTemplateInWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				updateTemplateInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UpdateTemplateInWorkspace(updateTemplateInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateTemplateInWorkspaceOptions model with no property values
				updateTemplateInWorkspaceOptionsModelNew := new(schematics20apiv2.UpdateTemplateInWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UpdateTemplateInWorkspace(updateTemplateInWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UploadTemplateTarInWorkspace(uploadTemplateTarInWorkspaceOptions *UploadTemplateTarInWorkspaceOptions) - Operation response error`, func() {
		uploadTemplateTarInWorkspacePath := "/v2/workspaces/testString/templates/testString/content"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarInWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UploadTemplateTarInWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarInWorkspaceOptions model
				uploadTemplateTarInWorkspaceOptionsModel := new(schematics20apiv2.UploadTemplateTarInWorkspaceOptions)
				uploadTemplateTarInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarInWorkspaceOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UploadTemplateTarInWorkspace(uploadTemplateTarInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UploadTemplateTarInWorkspace(uploadTemplateTarInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UploadTemplateTarInWorkspace(uploadTemplateTarInWorkspaceOptions *UploadTemplateTarInWorkspaceOptions)`, func() {
		uploadTemplateTarInWorkspacePath := "/v2/workspaces/testString/templates/testString/content"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarInWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UploadTemplateTarInWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UploadTemplateTarInWorkspaceOptions model
				uploadTemplateTarInWorkspaceOptionsModel := new(schematics20apiv2.UploadTemplateTarInWorkspaceOptions)
				uploadTemplateTarInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarInWorkspaceOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UploadTemplateTarInWorkspaceWithContext(ctx, uploadTemplateTarInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UploadTemplateTarInWorkspace(uploadTemplateTarInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UploadTemplateTarInWorkspaceWithContext(ctx, uploadTemplateTarInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarInWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "vpc_terraform / helm_front_end_app_micro_service", "description": "This template provisions clusters in production environment", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_readme_url": "SourceReadmeURL", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "inventory": "Inventory", "id": "ID", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UploadTemplateTarInWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UploadTemplateTarInWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UploadTemplateTarInWorkspaceOptions model
				uploadTemplateTarInWorkspaceOptionsModel := new(schematics20apiv2.UploadTemplateTarInWorkspaceOptions)
				uploadTemplateTarInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarInWorkspaceOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UploadTemplateTarInWorkspace(uploadTemplateTarInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UploadTemplateTarInWorkspace with error: Param validation error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:  testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarInWorkspaceOptions model
				uploadTemplateTarInWorkspaceOptionsModel := new(schematics20apiv2.UploadTemplateTarInWorkspaceOptions)
				// Invoke operation with invalid options model (negative test)
				result, response, operationErr := schematics20ApiService.UploadTemplateTarInWorkspace(uploadTemplateTarInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			It(`Invoke UploadTemplateTarInWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarInWorkspaceOptions model
				uploadTemplateTarInWorkspaceOptionsModel := new(schematics20apiv2.UploadTemplateTarInWorkspaceOptions)
				uploadTemplateTarInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.TID = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarInWorkspaceOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				uploadTemplateTarInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UploadTemplateTarInWorkspace(uploadTemplateTarInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UploadTemplateTarInWorkspaceOptions model with no property values
				uploadTemplateTarInWorkspaceOptionsModelNew := new(schematics20apiv2.UploadTemplateTarInWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UploadTemplateTarInWorkspace(uploadTemplateTarInWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetTemplateReadme(getTemplateReadmeOptions *GetTemplateReadmeOptions)`, func() {
		getTemplateReadmePath := "/v2/workspaces/testString/templates/testString/readme"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateReadmePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "text/markdown")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "text/markdown")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetTemplateReadme successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetTemplateReadmeOptions model
				getTemplateReadmeOptionsModel := new(schematics20apiv2.GetTemplateReadmeOptions)
				getTemplateReadmeOptionsModel.WID = core.StringPtr("testString")
				getTemplateReadmeOptionsModel.TID = core.StringPtr("testString")
				getTemplateReadmeOptionsModel.Accept = core.StringPtr("text/markdown")
				getTemplateReadmeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetTemplateReadmeWithContext(ctx, getTemplateReadmeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetTemplateReadme(getTemplateReadmeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetTemplateReadmeWithContext(ctx, getTemplateReadmeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateReadmePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "text/markdown")))
					// Set mock response
					res.Header().Set("Content-type", "text/markdown")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetTemplateReadme successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetTemplateReadme(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTemplateReadmeOptions model
				getTemplateReadmeOptionsModel := new(schematics20apiv2.GetTemplateReadmeOptions)
				getTemplateReadmeOptionsModel.WID = core.StringPtr("testString")
				getTemplateReadmeOptionsModel.TID = core.StringPtr("testString")
				getTemplateReadmeOptionsModel.Accept = core.StringPtr("text/markdown")
				getTemplateReadmeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetTemplateReadme(getTemplateReadmeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTemplateReadme with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetTemplateReadmeOptions model
				getTemplateReadmeOptionsModel := new(schematics20apiv2.GetTemplateReadmeOptions)
				getTemplateReadmeOptionsModel.WID = core.StringPtr("testString")
				getTemplateReadmeOptionsModel.TID = core.StringPtr("testString")
				getTemplateReadmeOptionsModel.Accept = core.StringPtr("text/markdown")
				getTemplateReadmeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetTemplateReadme(getTemplateReadmeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTemplateReadmeOptions model with no property values
				getTemplateReadmeOptionsModelNew := new(schematics20apiv2.GetTemplateReadmeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetTemplateReadme(getTemplateReadmeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTemplateSource(getTemplateSourceOptions *GetTemplateSourceOptions) - Operation response error`, func() {
		getTemplateSourcePath := "/v2/workspaces/testString/templates/testString/source"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateSourcePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTemplateSource with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetTemplateSourceOptions model
				getTemplateSourceOptionsModel := new(schematics20apiv2.GetTemplateSourceOptions)
				getTemplateSourceOptionsModel.WID = core.StringPtr("testString")
				getTemplateSourceOptionsModel.TID = core.StringPtr("testString")
				getTemplateSourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetTemplateSource(getTemplateSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetTemplateSource(getTemplateSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetTemplateSource(getTemplateSourceOptions *GetTemplateSourceOptions)`, func() {
		getTemplateSourcePath := "/v2/workspaces/testString/templates/testString/source"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateSourcePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}`)
				}))
			})
			It(`Invoke GetTemplateSource successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetTemplateSourceOptions model
				getTemplateSourceOptionsModel := new(schematics20apiv2.GetTemplateSourceOptions)
				getTemplateSourceOptionsModel.WID = core.StringPtr("testString")
				getTemplateSourceOptionsModel.TID = core.StringPtr("testString")
				getTemplateSourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetTemplateSourceWithContext(ctx, getTemplateSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetTemplateSource(getTemplateSourceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetTemplateSourceWithContext(ctx, getTemplateSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateSourcePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}`)
				}))
			})
			It(`Invoke GetTemplateSource successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetTemplateSource(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTemplateSourceOptions model
				getTemplateSourceOptionsModel := new(schematics20apiv2.GetTemplateSourceOptions)
				getTemplateSourceOptionsModel.WID = core.StringPtr("testString")
				getTemplateSourceOptionsModel.TID = core.StringPtr("testString")
				getTemplateSourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetTemplateSource(getTemplateSourceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTemplateSource with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetTemplateSourceOptions model
				getTemplateSourceOptionsModel := new(schematics20apiv2.GetTemplateSourceOptions)
				getTemplateSourceOptionsModel.WID = core.StringPtr("testString")
				getTemplateSourceOptionsModel.TID = core.StringPtr("testString")
				getTemplateSourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetTemplateSource(getTemplateSourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTemplateSourceOptions model with no property values
				getTemplateSourceOptionsModelNew := new(schematics20apiv2.GetTemplateSourceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetTemplateSource(getTemplateSourceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTemplateInputs(listTemplateInputsOptions *ListTemplateInputsOptions) - Operation response error`, func() {
		listTemplateInputsPath := "/v2/workspaces/testString/templates/testString/inputs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTemplateInputsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTemplateInputs with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListTemplateInputsOptions model
				listTemplateInputsOptionsModel := new(schematics20apiv2.ListTemplateInputsOptions)
				listTemplateInputsOptionsModel.WID = core.StringPtr("testString")
				listTemplateInputsOptionsModel.TID = core.StringPtr("testString")
				listTemplateInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListTemplateInputs(listTemplateInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListTemplateInputs(listTemplateInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListTemplateInputs(listTemplateInputsOptions *ListTemplateInputsOptions)`, func() {
		listTemplateInputsPath := "/v2/workspaces/testString/templates/testString/inputs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTemplateInputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "variables": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ListTemplateInputs successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListTemplateInputsOptions model
				listTemplateInputsOptionsModel := new(schematics20apiv2.ListTemplateInputsOptions)
				listTemplateInputsOptionsModel.WID = core.StringPtr("testString")
				listTemplateInputsOptionsModel.TID = core.StringPtr("testString")
				listTemplateInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListTemplateInputsWithContext(ctx, listTemplateInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListTemplateInputs(listTemplateInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListTemplateInputsWithContext(ctx, listTemplateInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTemplateInputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "variables": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ListTemplateInputs successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListTemplateInputs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTemplateInputsOptions model
				listTemplateInputsOptionsModel := new(schematics20apiv2.ListTemplateInputsOptions)
				listTemplateInputsOptionsModel.WID = core.StringPtr("testString")
				listTemplateInputsOptionsModel.TID = core.StringPtr("testString")
				listTemplateInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListTemplateInputs(listTemplateInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTemplateInputs with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListTemplateInputsOptions model
				listTemplateInputsOptionsModel := new(schematics20apiv2.ListTemplateInputsOptions)
				listTemplateInputsOptionsModel.WID = core.StringPtr("testString")
				listTemplateInputsOptionsModel.TID = core.StringPtr("testString")
				listTemplateInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListTemplateInputs(listTemplateInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTemplateInputsOptions model with no property values
				listTemplateInputsOptionsModelNew := new(schematics20apiv2.ListTemplateInputsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ListTemplateInputs(listTemplateInputsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTemplateOutputs(listTemplateOutputsOptions *ListTemplateOutputsOptions) - Operation response error`, func() {
		listTemplateOutputsPath := "/v2/workspaces/testString/templates/testString/outputs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTemplateOutputsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTemplateOutputs with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListTemplateOutputsOptions model
				listTemplateOutputsOptionsModel := new(schematics20apiv2.ListTemplateOutputsOptions)
				listTemplateOutputsOptionsModel.WID = core.StringPtr("testString")
				listTemplateOutputsOptionsModel.TID = core.StringPtr("testString")
				listTemplateOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListTemplateOutputs(listTemplateOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListTemplateOutputs(listTemplateOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListTemplateOutputs(listTemplateOutputsOptions *ListTemplateOutputsOptions)`, func() {
		listTemplateOutputsPath := "/v2/workspaces/testString/templates/testString/outputs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTemplateOutputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "variables": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ListTemplateOutputs successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListTemplateOutputsOptions model
				listTemplateOutputsOptionsModel := new(schematics20apiv2.ListTemplateOutputsOptions)
				listTemplateOutputsOptionsModel.WID = core.StringPtr("testString")
				listTemplateOutputsOptionsModel.TID = core.StringPtr("testString")
				listTemplateOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListTemplateOutputsWithContext(ctx, listTemplateOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListTemplateOutputs(listTemplateOutputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListTemplateOutputsWithContext(ctx, listTemplateOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTemplateOutputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "variables": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ListTemplateOutputs successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListTemplateOutputs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTemplateOutputsOptions model
				listTemplateOutputsOptionsModel := new(schematics20apiv2.ListTemplateOutputsOptions)
				listTemplateOutputsOptionsModel.WID = core.StringPtr("testString")
				listTemplateOutputsOptionsModel.TID = core.StringPtr("testString")
				listTemplateOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListTemplateOutputs(listTemplateOutputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTemplateOutputs with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListTemplateOutputsOptions model
				listTemplateOutputsOptionsModel := new(schematics20apiv2.ListTemplateOutputsOptions)
				listTemplateOutputsOptionsModel.WID = core.StringPtr("testString")
				listTemplateOutputsOptionsModel.TID = core.StringPtr("testString")
				listTemplateOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListTemplateOutputs(listTemplateOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTemplateOutputsOptions model with no property values
				listTemplateOutputsOptionsModelNew := new(schematics20apiv2.ListTemplateOutputsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ListTemplateOutputs(listTemplateOutputsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListFlowsInWorkspace(listFlowsInWorkspaceOptions *ListFlowsInWorkspaceOptions) - Operation response error`, func() {
		listFlowsInWorkspacePath := "/v2/workspaces/testString/flows"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFlowsInWorkspacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListFlowsInWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListFlowsInWorkspaceOptions model
				listFlowsInWorkspaceOptionsModel := new(schematics20apiv2.ListFlowsInWorkspaceOptions)
				listFlowsInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				listFlowsInWorkspaceOptionsModel.Offset = core.Int64Ptr(int64(0))
				listFlowsInWorkspaceOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFlowsInWorkspaceOptionsModel.Sort = core.StringPtr("testString")
				listFlowsInWorkspaceOptionsModel.Profile = core.StringPtr("ids")
				listFlowsInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListFlowsInWorkspace(listFlowsInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListFlowsInWorkspace(listFlowsInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListFlowsInWorkspace(listFlowsInWorkspaceOptions *ListFlowsInWorkspaceOptions)`, func() {
		listFlowsInWorkspacePath := "/v2/workspaces/testString/flows"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFlowsInWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "flows": [{"id": "ID", "name": "Name", "version": "Version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListFlowsInWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListFlowsInWorkspaceOptions model
				listFlowsInWorkspaceOptionsModel := new(schematics20apiv2.ListFlowsInWorkspaceOptions)
				listFlowsInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				listFlowsInWorkspaceOptionsModel.Offset = core.Int64Ptr(int64(0))
				listFlowsInWorkspaceOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFlowsInWorkspaceOptionsModel.Sort = core.StringPtr("testString")
				listFlowsInWorkspaceOptionsModel.Profile = core.StringPtr("ids")
				listFlowsInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListFlowsInWorkspaceWithContext(ctx, listFlowsInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListFlowsInWorkspace(listFlowsInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListFlowsInWorkspaceWithContext(ctx, listFlowsInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFlowsInWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "flows": [{"id": "ID", "name": "Name", "version": "Version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListFlowsInWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListFlowsInWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListFlowsInWorkspaceOptions model
				listFlowsInWorkspaceOptionsModel := new(schematics20apiv2.ListFlowsInWorkspaceOptions)
				listFlowsInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				listFlowsInWorkspaceOptionsModel.Offset = core.Int64Ptr(int64(0))
				listFlowsInWorkspaceOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFlowsInWorkspaceOptionsModel.Sort = core.StringPtr("testString")
				listFlowsInWorkspaceOptionsModel.Profile = core.StringPtr("ids")
				listFlowsInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListFlowsInWorkspace(listFlowsInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListFlowsInWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListFlowsInWorkspaceOptions model
				listFlowsInWorkspaceOptionsModel := new(schematics20apiv2.ListFlowsInWorkspaceOptions)
				listFlowsInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				listFlowsInWorkspaceOptionsModel.Offset = core.Int64Ptr(int64(0))
				listFlowsInWorkspaceOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFlowsInWorkspaceOptionsModel.Sort = core.StringPtr("testString")
				listFlowsInWorkspaceOptionsModel.Profile = core.StringPtr("ids")
				listFlowsInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListFlowsInWorkspace(listFlowsInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListFlowsInWorkspaceOptions model with no property values
				listFlowsInWorkspaceOptionsModelNew := new(schematics20apiv2.ListFlowsInWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ListFlowsInWorkspace(listFlowsInWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AddFlowToWorkspace(addFlowToWorkspaceOptions *AddFlowToWorkspaceOptions) - Operation response error`, func() {
		addFlowToWorkspacePath := "/v2/workspaces/testString/flows"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addFlowToWorkspacePath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke AddFlowToWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AddFlowToWorkspaceOptions model
				addFlowToWorkspaceOptionsModel := new(schematics20apiv2.AddFlowToWorkspaceOptions)
				addFlowToWorkspaceOptionsModel.WID = core.StringPtr("testString")
				addFlowToWorkspaceOptionsModel.TemplateFlow = templateFlowModel
				addFlowToWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.AddFlowToWorkspace(addFlowToWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.AddFlowToWorkspace(addFlowToWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`AddFlowToWorkspace(addFlowToWorkspaceOptions *AddFlowToWorkspaceOptions)`, func() {
		addFlowToWorkspacePath := "/v2/workspaces/testString/flows"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addFlowToWorkspacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "version": "Version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "ID", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "PreCondition", "template_id": "TemplateID", "override_command": {"command": "workspace_plan", "command_options": ["CommandOptions"]}, "post_condition": "PostCondition", "on_error": "OnError"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "ID", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 12, "error_count": 10}, "validation_logs": [{"flow_index": 9, "inputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}], "outputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}]}]}`)
				}))
			})
			It(`Invoke AddFlowToWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AddFlowToWorkspaceOptions model
				addFlowToWorkspaceOptionsModel := new(schematics20apiv2.AddFlowToWorkspaceOptions)
				addFlowToWorkspaceOptionsModel.WID = core.StringPtr("testString")
				addFlowToWorkspaceOptionsModel.TemplateFlow = templateFlowModel
				addFlowToWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.AddFlowToWorkspaceWithContext(ctx, addFlowToWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.AddFlowToWorkspace(addFlowToWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.AddFlowToWorkspaceWithContext(ctx, addFlowToWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addFlowToWorkspacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "version": "Version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "ID", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "PreCondition", "template_id": "TemplateID", "override_command": {"command": "workspace_plan", "command_options": ["CommandOptions"]}, "post_condition": "PostCondition", "on_error": "OnError"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "ID", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 12, "error_count": 10}, "validation_logs": [{"flow_index": 9, "inputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}], "outputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}]}]}`)
				}))
			})
			It(`Invoke AddFlowToWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.AddFlowToWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AddFlowToWorkspaceOptions model
				addFlowToWorkspaceOptionsModel := new(schematics20apiv2.AddFlowToWorkspaceOptions)
				addFlowToWorkspaceOptionsModel.WID = core.StringPtr("testString")
				addFlowToWorkspaceOptionsModel.TemplateFlow = templateFlowModel
				addFlowToWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.AddFlowToWorkspace(addFlowToWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke AddFlowToWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AddFlowToWorkspaceOptions model
				addFlowToWorkspaceOptionsModel := new(schematics20apiv2.AddFlowToWorkspaceOptions)
				addFlowToWorkspaceOptionsModel.WID = core.StringPtr("testString")
				addFlowToWorkspaceOptionsModel.TemplateFlow = templateFlowModel
				addFlowToWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.AddFlowToWorkspace(addFlowToWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the AddFlowToWorkspaceOptions model with no property values
				addFlowToWorkspaceOptionsModelNew := new(schematics20apiv2.AddFlowToWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.AddFlowToWorkspace(addFlowToWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFlowInWorkspace(getFlowInWorkspaceOptions *GetFlowInWorkspaceOptions) - Operation response error`, func() {
		getFlowInWorkspacePath := "/v2/workspaces/testString/flows/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFlowInWorkspacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetFlowInWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetFlowInWorkspaceOptions model
				getFlowInWorkspaceOptionsModel := new(schematics20apiv2.GetFlowInWorkspaceOptions)
				getFlowInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getFlowInWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				getFlowInWorkspaceOptionsModel.Profile = core.StringPtr("summary")
				getFlowInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetFlowInWorkspace(getFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetFlowInWorkspace(getFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetFlowInWorkspace(getFlowInWorkspaceOptions *GetFlowInWorkspaceOptions)`, func() {
		getFlowInWorkspacePath := "/v2/workspaces/testString/flows/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFlowInWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "version": "Version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "ID", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "PreCondition", "template_id": "TemplateID", "override_command": {"command": "workspace_plan", "command_options": ["CommandOptions"]}, "post_condition": "PostCondition", "on_error": "OnError"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "ID", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 12, "error_count": 10}, "validation_logs": [{"flow_index": 9, "inputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}], "outputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}]}]}`)
				}))
			})
			It(`Invoke GetFlowInWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetFlowInWorkspaceOptions model
				getFlowInWorkspaceOptionsModel := new(schematics20apiv2.GetFlowInWorkspaceOptions)
				getFlowInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getFlowInWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				getFlowInWorkspaceOptionsModel.Profile = core.StringPtr("summary")
				getFlowInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetFlowInWorkspaceWithContext(ctx, getFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetFlowInWorkspace(getFlowInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetFlowInWorkspaceWithContext(ctx, getFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFlowInWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "version": "Version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "ID", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "PreCondition", "template_id": "TemplateID", "override_command": {"command": "workspace_plan", "command_options": ["CommandOptions"]}, "post_condition": "PostCondition", "on_error": "OnError"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "ID", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 12, "error_count": 10}, "validation_logs": [{"flow_index": 9, "inputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}], "outputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}]}]}`)
				}))
			})
			It(`Invoke GetFlowInWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetFlowInWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetFlowInWorkspaceOptions model
				getFlowInWorkspaceOptionsModel := new(schematics20apiv2.GetFlowInWorkspaceOptions)
				getFlowInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getFlowInWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				getFlowInWorkspaceOptionsModel.Profile = core.StringPtr("summary")
				getFlowInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetFlowInWorkspace(getFlowInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetFlowInWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetFlowInWorkspaceOptions model
				getFlowInWorkspaceOptionsModel := new(schematics20apiv2.GetFlowInWorkspaceOptions)
				getFlowInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getFlowInWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				getFlowInWorkspaceOptionsModel.Profile = core.StringPtr("summary")
				getFlowInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetFlowInWorkspace(getFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetFlowInWorkspaceOptions model with no property values
				getFlowInWorkspaceOptionsModelNew := new(schematics20apiv2.GetFlowInWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetFlowInWorkspace(getFlowInWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceFlowInWorkspace(replaceFlowInWorkspaceOptions *ReplaceFlowInWorkspaceOptions) - Operation response error`, func() {
		replaceFlowInWorkspacePath := "/v2/workspaces/testString/flows/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceFlowInWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceFlowInWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceFlowInWorkspaceOptions model
				replaceFlowInWorkspaceOptionsModel := new(schematics20apiv2.ReplaceFlowInWorkspaceOptions)
				replaceFlowInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceFlowInWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				replaceFlowInWorkspaceOptionsModel.TemplateFlow = templateFlowModel
				replaceFlowInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ReplaceFlowInWorkspace(replaceFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ReplaceFlowInWorkspace(replaceFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceFlowInWorkspace(replaceFlowInWorkspaceOptions *ReplaceFlowInWorkspaceOptions)`, func() {
		replaceFlowInWorkspacePath := "/v2/workspaces/testString/flows/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceFlowInWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "version": "Version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "ID", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "PreCondition", "template_id": "TemplateID", "override_command": {"command": "workspace_plan", "command_options": ["CommandOptions"]}, "post_condition": "PostCondition", "on_error": "OnError"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "ID", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 12, "error_count": 10}, "validation_logs": [{"flow_index": 9, "inputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}], "outputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}]}]}`)
				}))
			})
			It(`Invoke ReplaceFlowInWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceFlowInWorkspaceOptions model
				replaceFlowInWorkspaceOptionsModel := new(schematics20apiv2.ReplaceFlowInWorkspaceOptions)
				replaceFlowInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceFlowInWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				replaceFlowInWorkspaceOptionsModel.TemplateFlow = templateFlowModel
				replaceFlowInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ReplaceFlowInWorkspaceWithContext(ctx, replaceFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ReplaceFlowInWorkspace(replaceFlowInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ReplaceFlowInWorkspaceWithContext(ctx, replaceFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceFlowInWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "version": "Version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "ID", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "PreCondition", "template_id": "TemplateID", "override_command": {"command": "workspace_plan", "command_options": ["CommandOptions"]}, "post_condition": "PostCondition", "on_error": "OnError"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "ID", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 12, "error_count": 10}, "validation_logs": [{"flow_index": 9, "inputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}], "outputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}]}]}`)
				}))
			})
			It(`Invoke ReplaceFlowInWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ReplaceFlowInWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceFlowInWorkspaceOptions model
				replaceFlowInWorkspaceOptionsModel := new(schematics20apiv2.ReplaceFlowInWorkspaceOptions)
				replaceFlowInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceFlowInWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				replaceFlowInWorkspaceOptionsModel.TemplateFlow = templateFlowModel
				replaceFlowInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ReplaceFlowInWorkspace(replaceFlowInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceFlowInWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceFlowInWorkspaceOptions model
				replaceFlowInWorkspaceOptionsModel := new(schematics20apiv2.ReplaceFlowInWorkspaceOptions)
				replaceFlowInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceFlowInWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				replaceFlowInWorkspaceOptionsModel.TemplateFlow = templateFlowModel
				replaceFlowInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ReplaceFlowInWorkspace(replaceFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceFlowInWorkspaceOptions model with no property values
				replaceFlowInWorkspaceOptionsModelNew := new(schematics20apiv2.ReplaceFlowInWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ReplaceFlowInWorkspace(replaceFlowInWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteFlowFromWorkspace(deleteFlowFromWorkspaceOptions *DeleteFlowFromWorkspaceOptions)`, func() {
		deleteFlowFromWorkspacePath := "/v2/workspaces/testString/flows/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteFlowFromWorkspacePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteFlowFromWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteFlowFromWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteFlowFromWorkspaceOptions model
				deleteFlowFromWorkspaceOptionsModel := new(schematics20apiv2.DeleteFlowFromWorkspaceOptions)
				deleteFlowFromWorkspaceOptionsModel.WID = core.StringPtr("testString")
				deleteFlowFromWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				deleteFlowFromWorkspaceOptionsModel.Propagate = core.BoolPtr(true)
				deleteFlowFromWorkspaceOptionsModel.Force = core.BoolPtr(true)
				deleteFlowFromWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteFlowFromWorkspace(deleteFlowFromWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteFlowFromWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteFlowFromWorkspaceOptions model
				deleteFlowFromWorkspaceOptionsModel := new(schematics20apiv2.DeleteFlowFromWorkspaceOptions)
				deleteFlowFromWorkspaceOptionsModel.WID = core.StringPtr("testString")
				deleteFlowFromWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				deleteFlowFromWorkspaceOptionsModel.Propagate = core.BoolPtr(true)
				deleteFlowFromWorkspaceOptionsModel.Force = core.BoolPtr(true)
				deleteFlowFromWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteFlowFromWorkspace(deleteFlowFromWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteFlowFromWorkspaceOptions model with no property values
				deleteFlowFromWorkspaceOptionsModelNew := new(schematics20apiv2.DeleteFlowFromWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteFlowFromWorkspace(deleteFlowFromWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateFlowInWorkspace(updateFlowInWorkspaceOptions *UpdateFlowInWorkspaceOptions) - Operation response error`, func() {
		updateFlowInWorkspacePath := "/v2/workspaces/testString/flows/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFlowInWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateFlowInWorkspace with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateFlowInWorkspaceOptions model
				updateFlowInWorkspaceOptionsModel := new(schematics20apiv2.UpdateFlowInWorkspaceOptions)
				updateFlowInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateFlowInWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				updateFlowInWorkspaceOptionsModel.TemplateFlow = templateFlowModel
				updateFlowInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UpdateFlowInWorkspace(updateFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UpdateFlowInWorkspace(updateFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateFlowInWorkspace(updateFlowInWorkspaceOptions *UpdateFlowInWorkspaceOptions)`, func() {
		updateFlowInWorkspacePath := "/v2/workspaces/testString/flows/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFlowInWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "version": "Version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "ID", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "PreCondition", "template_id": "TemplateID", "override_command": {"command": "workspace_plan", "command_options": ["CommandOptions"]}, "post_condition": "PostCondition", "on_error": "OnError"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "ID", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 12, "error_count": 10}, "validation_logs": [{"flow_index": 9, "inputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}], "outputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}]}]}`)
				}))
			})
			It(`Invoke UpdateFlowInWorkspace successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateFlowInWorkspaceOptions model
				updateFlowInWorkspaceOptionsModel := new(schematics20apiv2.UpdateFlowInWorkspaceOptions)
				updateFlowInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateFlowInWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				updateFlowInWorkspaceOptionsModel.TemplateFlow = templateFlowModel
				updateFlowInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UpdateFlowInWorkspaceWithContext(ctx, updateFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UpdateFlowInWorkspace(updateFlowInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UpdateFlowInWorkspaceWithContext(ctx, updateFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFlowInWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "version": "Version", "type": "simple_flow", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "definition": {"flow_type": "simple", "id": "ID", "simple_flow": [{"index": 5, "control": "do", "template_operation": {"pre_condition": "PreCondition", "template_id": "TemplateID", "override_command": {"command": "workspace_plan", "command_options": ["CommandOptions"]}, "post_condition": "PostCondition", "on_error": "OnError"}}], "custom_flow": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku"}, "id": "ID", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "validation_summary": {"warning_count": 12, "error_count": 10}, "validation_logs": [{"flow_index": 9, "inputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}], "outputs_status": [{"log_level": "info", "var_name": "VarName", "var_status": "VarStatus"}]}]}`)
				}))
			})
			It(`Invoke UpdateFlowInWorkspace successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UpdateFlowInWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateFlowInWorkspaceOptions model
				updateFlowInWorkspaceOptionsModel := new(schematics20apiv2.UpdateFlowInWorkspaceOptions)
				updateFlowInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateFlowInWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				updateFlowInWorkspaceOptionsModel.TemplateFlow = templateFlowModel
				updateFlowInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UpdateFlowInWorkspace(updateFlowInWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateFlowInWorkspace with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateFlowInWorkspaceOptions model
				updateFlowInWorkspaceOptionsModel := new(schematics20apiv2.UpdateFlowInWorkspaceOptions)
				updateFlowInWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateFlowInWorkspaceOptionsModel.FlowID = core.StringPtr("testString")
				updateFlowInWorkspaceOptionsModel.TemplateFlow = templateFlowModel
				updateFlowInWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UpdateFlowInWorkspace(updateFlowInWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateFlowInWorkspaceOptions model with no property values
				updateFlowInWorkspaceOptionsModelNew := new(schematics20apiv2.UpdateFlowInWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UpdateFlowInWorkspace(updateFlowInWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListActions(listActionsOptions *ListActionsOptions) - Operation response error`, func() {
		listActionsPath := "/v2/actions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listActionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListActions with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := new(schematics20apiv2.ListActionsOptions)
				listActionsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listActionsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listActionsOptionsModel.Sort = core.StringPtr("testString")
				listActionsOptionsModel.Profile = core.StringPtr("ids")
				listActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListActions(listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListActions(listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListActions(listActionsOptions *ListActionsOptions)`, func() {
		listActionsPath := "/v2/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listActionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "actions": [{"name": "Stop Action", "description": "This Action can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "namespace": "Namespace", "tags": ["Tags"], "playbook_name": "PlaybookName", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListActions successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := new(schematics20apiv2.ListActionsOptions)
				listActionsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listActionsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listActionsOptionsModel.Sort = core.StringPtr("testString")
				listActionsOptionsModel.Profile = core.StringPtr("ids")
				listActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListActionsWithContext(ctx, listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListActions(listActionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListActionsWithContext(ctx, listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listActionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "actions": [{"name": "Stop Action", "description": "This Action can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "namespace": "Namespace", "tags": ["Tags"], "playbook_name": "PlaybookName", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListActions successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListActions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := new(schematics20apiv2.ListActionsOptions)
				listActionsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listActionsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listActionsOptionsModel.Sort = core.StringPtr("testString")
				listActionsOptionsModel.Profile = core.StringPtr("ids")
				listActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListActions(listActionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListActions with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := new(schematics20apiv2.ListActionsOptions)
				listActionsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listActionsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listActionsOptionsModel.Sort = core.StringPtr("testString")
				listActionsOptionsModel.Profile = core.StringPtr("ids")
				listActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListActions(listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateAction(createActionOptions *CreateActionOptions) - Operation response error`, func() {
		createActionPath := "/v2/actions"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createActionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateAction with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematics20apiv2.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")
				credentialVariableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematics20apiv2.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel
				credentialVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ActionState model
				actionStateModel := new(schematics20apiv2.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")
				actionStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Action model
				actionModel := new(schematics20apiv2.Action)
				actionModel.Name = core.StringPtr("Stop Action")
				actionModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				actionModel.Location = core.StringPtr("us-south")
				actionModel.ResourceGroup = core.StringPtr("testString")
				actionModel.BastionConnectionType = core.StringPtr("ssh")
				actionModel.InventoryConnectionType = core.StringPtr("ssh")
				actionModel.Tags = []string{"testString"}
				actionModel.UserState = userStateModel
				actionModel.SourceReadmeURL = core.StringPtr("testString")
				actionModel.Source = externalSourceModel
				actionModel.SourceType = core.StringPtr("local")
				actionModel.CommandParameter = core.StringPtr("testString")
				actionModel.Inventory = core.StringPtr("testString")
				actionModel.Credentials = []schematics20apiv2.CredentialVariableData{*credentialVariableDataModel}
				actionModel.Bastion = bastionResourceDefinitionModel
				actionModel.BastionCredential = credentialVariableDataModel
				actionModel.TargetsIni = core.StringPtr("testString")
				actionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.State = actionStateModel
				actionModel.SysLock = systemLockModel
				actionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := new(schematics20apiv2.CreateActionOptions)
				createActionOptionsModel.Action = actionModel
				createActionOptionsModel.XGithubToken = core.StringPtr("testString")
				createActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateAction(createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateAction(createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateAction(createActionOptions *CreateActionOptions)`, func() {
		createActionPath := "/v2/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createActionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "bastion_connection_type": "ssh", "inventory_connection_type": "ssh", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke CreateAction successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematics20apiv2.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")
				credentialVariableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematics20apiv2.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel
				credentialVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ActionState model
				actionStateModel := new(schematics20apiv2.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")
				actionStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Action model
				actionModel := new(schematics20apiv2.Action)
				actionModel.Name = core.StringPtr("Stop Action")
				actionModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				actionModel.Location = core.StringPtr("us-south")
				actionModel.ResourceGroup = core.StringPtr("testString")
				actionModel.BastionConnectionType = core.StringPtr("ssh")
				actionModel.InventoryConnectionType = core.StringPtr("ssh")
				actionModel.Tags = []string{"testString"}
				actionModel.UserState = userStateModel
				actionModel.SourceReadmeURL = core.StringPtr("testString")
				actionModel.Source = externalSourceModel
				actionModel.SourceType = core.StringPtr("local")
				actionModel.CommandParameter = core.StringPtr("testString")
				actionModel.Inventory = core.StringPtr("testString")
				actionModel.Credentials = []schematics20apiv2.CredentialVariableData{*credentialVariableDataModel}
				actionModel.Bastion = bastionResourceDefinitionModel
				actionModel.BastionCredential = credentialVariableDataModel
				actionModel.TargetsIni = core.StringPtr("testString")
				actionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.State = actionStateModel
				actionModel.SysLock = systemLockModel
				actionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := new(schematics20apiv2.CreateActionOptions)
				createActionOptionsModel.Action = actionModel
				createActionOptionsModel.XGithubToken = core.StringPtr("testString")
				createActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateActionWithContext(ctx, createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateAction(createActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateActionWithContext(ctx, createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createActionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "bastion_connection_type": "ssh", "inventory_connection_type": "ssh", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke CreateAction successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematics20apiv2.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")
				credentialVariableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematics20apiv2.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel
				credentialVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ActionState model
				actionStateModel := new(schematics20apiv2.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")
				actionStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Action model
				actionModel := new(schematics20apiv2.Action)
				actionModel.Name = core.StringPtr("Stop Action")
				actionModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				actionModel.Location = core.StringPtr("us-south")
				actionModel.ResourceGroup = core.StringPtr("testString")
				actionModel.BastionConnectionType = core.StringPtr("ssh")
				actionModel.InventoryConnectionType = core.StringPtr("ssh")
				actionModel.Tags = []string{"testString"}
				actionModel.UserState = userStateModel
				actionModel.SourceReadmeURL = core.StringPtr("testString")
				actionModel.Source = externalSourceModel
				actionModel.SourceType = core.StringPtr("local")
				actionModel.CommandParameter = core.StringPtr("testString")
				actionModel.Inventory = core.StringPtr("testString")
				actionModel.Credentials = []schematics20apiv2.CredentialVariableData{*credentialVariableDataModel}
				actionModel.Bastion = bastionResourceDefinitionModel
				actionModel.BastionCredential = credentialVariableDataModel
				actionModel.TargetsIni = core.StringPtr("testString")
				actionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.State = actionStateModel
				actionModel.SysLock = systemLockModel
				actionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := new(schematics20apiv2.CreateActionOptions)
				createActionOptionsModel.Action = actionModel
				createActionOptionsModel.XGithubToken = core.StringPtr("testString")
				createActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateAction(createActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateAction with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematics20apiv2.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")
				credentialVariableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematics20apiv2.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel
				credentialVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ActionState model
				actionStateModel := new(schematics20apiv2.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")
				actionStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Action model
				actionModel := new(schematics20apiv2.Action)
				actionModel.Name = core.StringPtr("Stop Action")
				actionModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				actionModel.Location = core.StringPtr("us-south")
				actionModel.ResourceGroup = core.StringPtr("testString")
				actionModel.BastionConnectionType = core.StringPtr("ssh")
				actionModel.InventoryConnectionType = core.StringPtr("ssh")
				actionModel.Tags = []string{"testString"}
				actionModel.UserState = userStateModel
				actionModel.SourceReadmeURL = core.StringPtr("testString")
				actionModel.Source = externalSourceModel
				actionModel.SourceType = core.StringPtr("local")
				actionModel.CommandParameter = core.StringPtr("testString")
				actionModel.Inventory = core.StringPtr("testString")
				actionModel.Credentials = []schematics20apiv2.CredentialVariableData{*credentialVariableDataModel}
				actionModel.Bastion = bastionResourceDefinitionModel
				actionModel.BastionCredential = credentialVariableDataModel
				actionModel.TargetsIni = core.StringPtr("testString")
				actionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.State = actionStateModel
				actionModel.SysLock = systemLockModel
				actionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := new(schematics20apiv2.CreateActionOptions)
				createActionOptionsModel.Action = actionModel
				createActionOptionsModel.XGithubToken = core.StringPtr("testString")
				createActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateAction(createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateActionOptions model with no property values
				createActionOptionsModelNew := new(schematics20apiv2.CreateActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateAction(createActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAction(getActionOptions *GetActionOptions) - Operation response error`, func() {
		getActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getActionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAction with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetActionOptions model
				getActionOptionsModel := new(schematics20apiv2.GetActionOptions)
				getActionOptionsModel.ActionID = core.StringPtr("testString")
				getActionOptionsModel.Profile = core.StringPtr("summary")
				getActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetAction(getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetAction(getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetAction(getActionOptions *GetActionOptions)`, func() {
		getActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getActionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "bastion_connection_type": "ssh", "inventory_connection_type": "ssh", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetAction successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetActionOptions model
				getActionOptionsModel := new(schematics20apiv2.GetActionOptions)
				getActionOptionsModel.ActionID = core.StringPtr("testString")
				getActionOptionsModel.Profile = core.StringPtr("summary")
				getActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetActionWithContext(ctx, getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetAction(getActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetActionWithContext(ctx, getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getActionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "bastion_connection_type": "ssh", "inventory_connection_type": "ssh", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetAction successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetActionOptions model
				getActionOptionsModel := new(schematics20apiv2.GetActionOptions)
				getActionOptionsModel.ActionID = core.StringPtr("testString")
				getActionOptionsModel.Profile = core.StringPtr("summary")
				getActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetAction(getActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAction with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetActionOptions model
				getActionOptionsModel := new(schematics20apiv2.GetActionOptions)
				getActionOptionsModel.ActionID = core.StringPtr("testString")
				getActionOptionsModel.Profile = core.StringPtr("summary")
				getActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetAction(getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetActionOptions model with no property values
				getActionOptionsModelNew := new(schematics20apiv2.GetActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetAction(getActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteAction(deleteActionOptions *DeleteActionOptions)`, func() {
		deleteActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteActionPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteAction successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteActionOptions model
				deleteActionOptionsModel := new(schematics20apiv2.DeleteActionOptions)
				deleteActionOptionsModel.ActionID = core.StringPtr("testString")
				deleteActionOptionsModel.Force = core.BoolPtr(true)
				deleteActionOptionsModel.Propagate = core.BoolPtr(true)
				deleteActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteAction(deleteActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteAction with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteActionOptions model
				deleteActionOptionsModel := new(schematics20apiv2.DeleteActionOptions)
				deleteActionOptionsModel.ActionID = core.StringPtr("testString")
				deleteActionOptionsModel.Force = core.BoolPtr(true)
				deleteActionOptionsModel.Propagate = core.BoolPtr(true)
				deleteActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteAction(deleteActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteActionOptions model with no property values
				deleteActionOptionsModelNew := new(schematics20apiv2.DeleteActionOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteAction(deleteActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAction(updateActionOptions *UpdateActionOptions) - Operation response error`, func() {
		updateActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateActionPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateAction with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematics20apiv2.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")
				credentialVariableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematics20apiv2.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel
				credentialVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ActionState model
				actionStateModel := new(schematics20apiv2.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")
				actionStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Action model
				actionModel := new(schematics20apiv2.Action)
				actionModel.Name = core.StringPtr("Stop Action")
				actionModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				actionModel.Location = core.StringPtr("us-south")
				actionModel.ResourceGroup = core.StringPtr("testString")
				actionModel.BastionConnectionType = core.StringPtr("ssh")
				actionModel.InventoryConnectionType = core.StringPtr("ssh")
				actionModel.Tags = []string{"testString"}
				actionModel.UserState = userStateModel
				actionModel.SourceReadmeURL = core.StringPtr("testString")
				actionModel.Source = externalSourceModel
				actionModel.SourceType = core.StringPtr("local")
				actionModel.CommandParameter = core.StringPtr("testString")
				actionModel.Inventory = core.StringPtr("testString")
				actionModel.Credentials = []schematics20apiv2.CredentialVariableData{*credentialVariableDataModel}
				actionModel.Bastion = bastionResourceDefinitionModel
				actionModel.BastionCredential = credentialVariableDataModel
				actionModel.TargetsIni = core.StringPtr("testString")
				actionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.State = actionStateModel
				actionModel.SysLock = systemLockModel
				actionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateActionOptions model
				updateActionOptionsModel := new(schematics20apiv2.UpdateActionOptions)
				updateActionOptionsModel.ActionID = core.StringPtr("testString")
				updateActionOptionsModel.Action = actionModel
				updateActionOptionsModel.XGithubToken = core.StringPtr("testString")
				updateActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateAction(updateActionOptions *UpdateActionOptions)`, func() {
		updateActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateActionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "bastion_connection_type": "ssh", "inventory_connection_type": "ssh", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UpdateAction successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematics20apiv2.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")
				credentialVariableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematics20apiv2.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel
				credentialVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ActionState model
				actionStateModel := new(schematics20apiv2.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")
				actionStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Action model
				actionModel := new(schematics20apiv2.Action)
				actionModel.Name = core.StringPtr("Stop Action")
				actionModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				actionModel.Location = core.StringPtr("us-south")
				actionModel.ResourceGroup = core.StringPtr("testString")
				actionModel.BastionConnectionType = core.StringPtr("ssh")
				actionModel.InventoryConnectionType = core.StringPtr("ssh")
				actionModel.Tags = []string{"testString"}
				actionModel.UserState = userStateModel
				actionModel.SourceReadmeURL = core.StringPtr("testString")
				actionModel.Source = externalSourceModel
				actionModel.SourceType = core.StringPtr("local")
				actionModel.CommandParameter = core.StringPtr("testString")
				actionModel.Inventory = core.StringPtr("testString")
				actionModel.Credentials = []schematics20apiv2.CredentialVariableData{*credentialVariableDataModel}
				actionModel.Bastion = bastionResourceDefinitionModel
				actionModel.BastionCredential = credentialVariableDataModel
				actionModel.TargetsIni = core.StringPtr("testString")
				actionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.State = actionStateModel
				actionModel.SysLock = systemLockModel
				actionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateActionOptions model
				updateActionOptionsModel := new(schematics20apiv2.UpdateActionOptions)
				updateActionOptionsModel.ActionID = core.StringPtr("testString")
				updateActionOptionsModel.Action = actionModel
				updateActionOptionsModel.XGithubToken = core.StringPtr("testString")
				updateActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UpdateActionWithContext(ctx, updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UpdateActionWithContext(ctx, updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateActionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "bastion_connection_type": "ssh", "inventory_connection_type": "ssh", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UpdateAction successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UpdateAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematics20apiv2.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")
				credentialVariableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematics20apiv2.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel
				credentialVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ActionState model
				actionStateModel := new(schematics20apiv2.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")
				actionStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Action model
				actionModel := new(schematics20apiv2.Action)
				actionModel.Name = core.StringPtr("Stop Action")
				actionModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				actionModel.Location = core.StringPtr("us-south")
				actionModel.ResourceGroup = core.StringPtr("testString")
				actionModel.BastionConnectionType = core.StringPtr("ssh")
				actionModel.InventoryConnectionType = core.StringPtr("ssh")
				actionModel.Tags = []string{"testString"}
				actionModel.UserState = userStateModel
				actionModel.SourceReadmeURL = core.StringPtr("testString")
				actionModel.Source = externalSourceModel
				actionModel.SourceType = core.StringPtr("local")
				actionModel.CommandParameter = core.StringPtr("testString")
				actionModel.Inventory = core.StringPtr("testString")
				actionModel.Credentials = []schematics20apiv2.CredentialVariableData{*credentialVariableDataModel}
				actionModel.Bastion = bastionResourceDefinitionModel
				actionModel.BastionCredential = credentialVariableDataModel
				actionModel.TargetsIni = core.StringPtr("testString")
				actionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.State = actionStateModel
				actionModel.SysLock = systemLockModel
				actionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateActionOptions model
				updateActionOptionsModel := new(schematics20apiv2.UpdateActionOptions)
				updateActionOptionsModel.ActionID = core.StringPtr("testString")
				updateActionOptionsModel.Action = actionModel
				updateActionOptionsModel.XGithubToken = core.StringPtr("testString")
				updateActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateAction with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematics20apiv2.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")
				credentialVariableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematics20apiv2.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel
				credentialVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ActionState model
				actionStateModel := new(schematics20apiv2.ActionState)
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")
				actionStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Action model
				actionModel := new(schematics20apiv2.Action)
				actionModel.Name = core.StringPtr("Stop Action")
				actionModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				actionModel.Location = core.StringPtr("us-south")
				actionModel.ResourceGroup = core.StringPtr("testString")
				actionModel.BastionConnectionType = core.StringPtr("ssh")
				actionModel.InventoryConnectionType = core.StringPtr("ssh")
				actionModel.Tags = []string{"testString"}
				actionModel.UserState = userStateModel
				actionModel.SourceReadmeURL = core.StringPtr("testString")
				actionModel.Source = externalSourceModel
				actionModel.SourceType = core.StringPtr("local")
				actionModel.CommandParameter = core.StringPtr("testString")
				actionModel.Inventory = core.StringPtr("testString")
				actionModel.Credentials = []schematics20apiv2.CredentialVariableData{*credentialVariableDataModel}
				actionModel.Bastion = bastionResourceDefinitionModel
				actionModel.BastionCredential = credentialVariableDataModel
				actionModel.TargetsIni = core.StringPtr("testString")
				actionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.State = actionStateModel
				actionModel.SysLock = systemLockModel
				actionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateActionOptions model
				updateActionOptionsModel := new(schematics20apiv2.UpdateActionOptions)
				updateActionOptionsModel.ActionID = core.StringPtr("testString")
				updateActionOptionsModel.Action = actionModel
				updateActionOptionsModel.XGithubToken = core.StringPtr("testString")
				updateActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateActionOptions model with no property values
				updateActionOptionsModelNew := new(schematics20apiv2.UpdateActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UpdateAction(updateActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UploadTemplateTarAction(uploadTemplateTarActionOptions *UploadTemplateTarActionOptions) - Operation response error`, func() {
		uploadTemplateTarActionPath := "/v2/actions/testString/template_repo_upload"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarActionPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UploadTemplateTarAction with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematics20apiv2.UploadTemplateTarActionOptions)
				uploadTemplateTarActionOptionsModel.ActionID = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarActionOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UploadTemplateTarAction(uploadTemplateTarActionOptions *UploadTemplateTarActionOptions)`, func() {
		uploadTemplateTarActionPath := "/v2/actions/testString/template_repo_upload"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarActionPath))
					Expect(req.Method).To(Equal("PUT"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false, "id": "ID"}`)
				}))
			})
			It(`Invoke UploadTemplateTarAction successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematics20apiv2.UploadTemplateTarActionOptions)
				uploadTemplateTarActionOptionsModel.ActionID = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarActionOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UploadTemplateTarActionWithContext(ctx, uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UploadTemplateTarActionWithContext(ctx, uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarActionPath))
					Expect(req.Method).To(Equal("PUT"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false, "id": "ID"}`)
				}))
			})
			It(`Invoke UploadTemplateTarAction successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UploadTemplateTarAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematics20apiv2.UploadTemplateTarActionOptions)
				uploadTemplateTarActionOptionsModel.ActionID = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarActionOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UploadTemplateTarAction with error: Param validation error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:  testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematics20apiv2.UploadTemplateTarActionOptions)
				// Invoke operation with invalid options model (negative test)
				result, response, operationErr := schematics20ApiService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			It(`Invoke UploadTemplateTarAction with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematics20apiv2.UploadTemplateTarActionOptions)
				uploadTemplateTarActionOptionsModel.ActionID = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarActionOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UploadTemplateTarActionOptions model with no property values
				uploadTemplateTarActionOptionsModelNew := new(schematics20apiv2.UploadTemplateTarActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListJobs(listJobsOptions *ListJobsOptions) - Operation response error`, func() {
		listJobsPath := "/v2/jobs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					Expect(req.URL.Query()["resource"]).To(Equal([]string{"workspace"}))
					Expect(req.URL.Query()["resource_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["action_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["list"]).To(Equal([]string{"all"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListJobs with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := new(schematics20apiv2.ListJobsOptions)
				listJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listJobsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listJobsOptionsModel.Sort = core.StringPtr("testString")
				listJobsOptionsModel.Profile = core.StringPtr("ids")
				listJobsOptionsModel.Resource = core.StringPtr("workspace")
				listJobsOptionsModel.ResourceID = core.StringPtr("testString")
				listJobsOptionsModel.ActionID = core.StringPtr("testString")
				listJobsOptionsModel.List = core.StringPtr("all")
				listJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListJobs(listJobsOptions *ListJobsOptions)`, func() {
		listJobsPath := "/v2/jobs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					Expect(req.URL.Query()["resource"]).To(Equal([]string{"workspace"}))
					Expect(req.URL.Query()["resource_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["action_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["list"]).To(Equal([]string{"all"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "jobs": [{"id": "ID", "name": "Name", "description": "Description", "command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "tags": ["Tags"], "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "duration": "Duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}]}`)
				}))
			})
			It(`Invoke ListJobs successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := new(schematics20apiv2.ListJobsOptions)
				listJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listJobsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listJobsOptionsModel.Sort = core.StringPtr("testString")
				listJobsOptionsModel.Profile = core.StringPtr("ids")
				listJobsOptionsModel.Resource = core.StringPtr("workspace")
				listJobsOptionsModel.ResourceID = core.StringPtr("testString")
				listJobsOptionsModel.ActionID = core.StringPtr("testString")
				listJobsOptionsModel.List = core.StringPtr("all")
				listJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListJobsWithContext(ctx, listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListJobsWithContext(ctx, listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					Expect(req.URL.Query()["resource"]).To(Equal([]string{"workspace"}))
					Expect(req.URL.Query()["resource_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["action_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["list"]).To(Equal([]string{"all"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "jobs": [{"id": "ID", "name": "Name", "description": "Description", "command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "tags": ["Tags"], "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "duration": "Duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}]}`)
				}))
			})
			It(`Invoke ListJobs successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListJobs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := new(schematics20apiv2.ListJobsOptions)
				listJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listJobsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listJobsOptionsModel.Sort = core.StringPtr("testString")
				listJobsOptionsModel.Profile = core.StringPtr("ids")
				listJobsOptionsModel.Resource = core.StringPtr("workspace")
				listJobsOptionsModel.ResourceID = core.StringPtr("testString")
				listJobsOptionsModel.ActionID = core.StringPtr("testString")
				listJobsOptionsModel.List = core.StringPtr("all")
				listJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListJobs with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := new(schematics20apiv2.ListJobsOptions)
				listJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listJobsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listJobsOptionsModel.Sort = core.StringPtr("testString")
				listJobsOptionsModel.Profile = core.StringPtr("ids")
				listJobsOptionsModel.Resource = core.StringPtr("workspace")
				listJobsOptionsModel.ResourceID = core.StringPtr("testString")
				listJobsOptionsModel.ActionID = core.StringPtr("testString")
				listJobsOptionsModel.List = core.StringPtr("all")
				listJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateJob(createJobOptions *CreateJobOptions) - Operation response error`, func() {
		createJobPath := "/v2/jobs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createJobPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateJob with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateJobOptions model
				createJobOptionsModel := new(schematics20apiv2.CreateJobOptions)
				createJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createJobOptionsModel.Job = jobModel
				createJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateJob(createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateJob(createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateJob(createJobOptions *CreateJobOptions)`, func() {
		createJobPath := "/v2/jobs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createJobPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}`)
				}))
			})
			It(`Invoke CreateJob successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateJobOptions model
				createJobOptionsModel := new(schematics20apiv2.CreateJobOptions)
				createJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createJobOptionsModel.Job = jobModel
				createJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateJobWithContext(ctx, createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateJob(createJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateJobWithContext(ctx, createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createJobPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}`)
				}))
			})
			It(`Invoke CreateJob successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateJobOptions model
				createJobOptionsModel := new(schematics20apiv2.CreateJobOptions)
				createJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createJobOptionsModel.Job = jobModel
				createJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateJob(createJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateJob with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateJobOptions model
				createJobOptionsModel := new(schematics20apiv2.CreateJobOptions)
				createJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createJobOptionsModel.Job = jobModel
				createJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateJob(createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateJobOptions model with no property values
				createJobOptionsModelNew := new(schematics20apiv2.CreateJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateJob(createJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetJob(getJobOptions *GetJobOptions) - Operation response error`, func() {
		getJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetJob with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetJobOptions model
				getJobOptionsModel := new(schematics20apiv2.GetJobOptions)
				getJobOptionsModel.JobID = core.StringPtr("testString")
				getJobOptionsModel.Profile = core.StringPtr("summary")
				getJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetJob(getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetJob(getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetJob(getJobOptions *GetJobOptions)`, func() {
		getJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}`)
				}))
			})
			It(`Invoke GetJob successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetJobOptions model
				getJobOptionsModel := new(schematics20apiv2.GetJobOptions)
				getJobOptionsModel.JobID = core.StringPtr("testString")
				getJobOptionsModel.Profile = core.StringPtr("summary")
				getJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetJobWithContext(ctx, getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetJob(getJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetJobWithContext(ctx, getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}`)
				}))
			})
			It(`Invoke GetJob successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetJobOptions model
				getJobOptionsModel := new(schematics20apiv2.GetJobOptions)
				getJobOptionsModel.JobID = core.StringPtr("testString")
				getJobOptionsModel.Profile = core.StringPtr("summary")
				getJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetJob(getJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetJob with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetJobOptions model
				getJobOptionsModel := new(schematics20apiv2.GetJobOptions)
				getJobOptionsModel.JobID = core.StringPtr("testString")
				getJobOptionsModel.Profile = core.StringPtr("summary")
				getJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetJob(getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetJobOptions model with no property values
				getJobOptionsModelNew := new(schematics20apiv2.GetJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetJob(getJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateJob(updateJobOptions *UpdateJobOptions) - Operation response error`, func() {
		updateJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateJobPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateJob with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateJobOptions model
				updateJobOptionsModel := new(schematics20apiv2.UpdateJobOptions)
				updateJobOptionsModel.JobID = core.StringPtr("testString")
				updateJobOptionsModel.RefreshToken = core.StringPtr("testString")
				updateJobOptionsModel.Job = jobModel
				updateJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateJob(updateJobOptions *UpdateJobOptions)`, func() {
		updateJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateJobPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}`)
				}))
			})
			It(`Invoke UpdateJob successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateJobOptions model
				updateJobOptionsModel := new(schematics20apiv2.UpdateJobOptions)
				updateJobOptionsModel.JobID = core.StringPtr("testString")
				updateJobOptionsModel.RefreshToken = core.StringPtr("testString")
				updateJobOptionsModel.Job = jobModel
				updateJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UpdateJobWithContext(ctx, updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UpdateJobWithContext(ctx, updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateJobPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}`)
				}))
			})
			It(`Invoke UpdateJob successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UpdateJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateJobOptions model
				updateJobOptionsModel := new(schematics20apiv2.UpdateJobOptions)
				updateJobOptionsModel.JobID = core.StringPtr("testString")
				updateJobOptionsModel.RefreshToken = core.StringPtr("testString")
				updateJobOptionsModel.Job = jobModel
				updateJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateJob with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateJobOptions model
				updateJobOptionsModel := new(schematics20apiv2.UpdateJobOptions)
				updateJobOptionsModel.JobID = core.StringPtr("testString")
				updateJobOptionsModel.RefreshToken = core.StringPtr("testString")
				updateJobOptionsModel.Job = jobModel
				updateJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateJobOptions model with no property values
				updateJobOptionsModelNew := new(schematics20apiv2.UpdateJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UpdateJob(updateJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteJob(deleteJobOptions *DeleteJobOptions)`, func() {
		deleteJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteJobPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteJob successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteJobOptions model
				deleteJobOptionsModel := new(schematics20apiv2.DeleteJobOptions)
				deleteJobOptionsModel.JobID = core.StringPtr("testString")
				deleteJobOptionsModel.RefreshToken = core.StringPtr("testString")
				deleteJobOptionsModel.Force = core.BoolPtr(true)
				deleteJobOptionsModel.Propagate = core.BoolPtr(true)
				deleteJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteJob(deleteJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteJob with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteJobOptions model
				deleteJobOptionsModel := new(schematics20apiv2.DeleteJobOptions)
				deleteJobOptionsModel.JobID = core.StringPtr("testString")
				deleteJobOptionsModel.RefreshToken = core.StringPtr("testString")
				deleteJobOptionsModel.Force = core.BoolPtr(true)
				deleteJobOptionsModel.Propagate = core.BoolPtr(true)
				deleteJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteJob(deleteJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteJobOptions model with no property values
				deleteJobOptionsModelNew := new(schematics20apiv2.DeleteJobOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteJob(deleteJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListJobLogs(listJobLogsOptions *ListJobLogsOptions) - Operation response error`, func() {
		listJobLogsPath := "/v2/jobs/testString/logs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobLogsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListJobLogs with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListJobLogsOptions model
				listJobLogsOptionsModel := new(schematics20apiv2.ListJobLogsOptions)
				listJobLogsOptionsModel.JobID = core.StringPtr("testString")
				listJobLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListJobLogs(listJobLogsOptions *ListJobLogsOptions)`, func() {
		listJobLogsPath := "/v2/jobs/testString/logs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_id": "JobID", "job_name": "JobName", "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "format": "json", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ListJobLogs successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListJobLogsOptions model
				listJobLogsOptionsModel := new(schematics20apiv2.ListJobLogsOptions)
				listJobLogsOptionsModel.JobID = core.StringPtr("testString")
				listJobLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListJobLogsWithContext(ctx, listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListJobLogsWithContext(ctx, listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_id": "JobID", "job_name": "JobName", "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "format": "json", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ListJobLogs successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListJobLogs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListJobLogsOptions model
				listJobLogsOptionsModel := new(schematics20apiv2.ListJobLogsOptions)
				listJobLogsOptionsModel.JobID = core.StringPtr("testString")
				listJobLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListJobLogs with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListJobLogsOptions model
				listJobLogsOptionsModel := new(schematics20apiv2.ListJobLogsOptions)
				listJobLogsOptionsModel.JobID = core.StringPtr("testString")
				listJobLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListJobLogsOptions model with no property values
				listJobLogsOptionsModelNew := new(schematics20apiv2.ListJobLogsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ListJobLogs(listJobLogsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetJobFiles(getJobFilesOptions *GetJobFilesOptions) - Operation response error`, func() {
		getJobFilesPath := "/v2/jobs/testString/files"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobFilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["file_type"]).To(Equal([]string{"state_file"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetJobFiles with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetJobFilesOptions model
				getJobFilesOptionsModel := new(schematics20apiv2.GetJobFilesOptions)
				getJobFilesOptionsModel.JobID = core.StringPtr("testString")
				getJobFilesOptionsModel.FileType = core.StringPtr("state_file")
				getJobFilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetJobFiles(getJobFilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetJobFiles(getJobFilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetJobFiles(getJobFilesOptions *GetJobFilesOptions)`, func() {
		getJobFilesPath := "/v2/jobs/testString/files"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobFilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["file_type"]).To(Equal([]string{"state_file"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_id": "JobID", "job_name": "JobName", "summary": [{"name": "Name", "type": "number", "value": "Value"}], "file_type": "state_file", "file_content": "FileContent", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetJobFiles successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetJobFilesOptions model
				getJobFilesOptionsModel := new(schematics20apiv2.GetJobFilesOptions)
				getJobFilesOptionsModel.JobID = core.StringPtr("testString")
				getJobFilesOptionsModel.FileType = core.StringPtr("state_file")
				getJobFilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetJobFilesWithContext(ctx, getJobFilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetJobFiles(getJobFilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetJobFilesWithContext(ctx, getJobFilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobFilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["file_type"]).To(Equal([]string{"state_file"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_id": "JobID", "job_name": "JobName", "summary": [{"name": "Name", "type": "number", "value": "Value"}], "file_type": "state_file", "file_content": "FileContent", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetJobFiles successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetJobFiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetJobFilesOptions model
				getJobFilesOptionsModel := new(schematics20apiv2.GetJobFilesOptions)
				getJobFilesOptionsModel.JobID = core.StringPtr("testString")
				getJobFilesOptionsModel.FileType = core.StringPtr("state_file")
				getJobFilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetJobFiles(getJobFilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetJobFiles with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetJobFilesOptions model
				getJobFilesOptionsModel := new(schematics20apiv2.GetJobFilesOptions)
				getJobFilesOptionsModel.JobID = core.StringPtr("testString")
				getJobFilesOptionsModel.FileType = core.StringPtr("state_file")
				getJobFilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetJobFiles(getJobFilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetJobFilesOptions model with no property values
				getJobFilesOptionsModelNew := new(schematics20apiv2.GetJobFilesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetJobFiles(getJobFilesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListControls(listControlsOptions *ListControlsOptions) - Operation response error`, func() {
		listControlsPath := "/v2/controls"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listControlsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListControls with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListControlsOptions model
				listControlsOptionsModel := new(schematics20apiv2.ListControlsOptions)
				listControlsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listControlsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listControlsOptionsModel.Sort = core.StringPtr("testString")
				listControlsOptionsModel.Profile = core.StringPtr("ids")
				listControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListControls(listControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListControls(listControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListControls(listControlsOptions *ListControlsOptions)`, func() {
		listControlsPath := "/v2/controls"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listControlsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "controls": [{"name": "Name", "description": "This Controls can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListControls successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListControlsOptions model
				listControlsOptionsModel := new(schematics20apiv2.ListControlsOptions)
				listControlsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listControlsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listControlsOptionsModel.Sort = core.StringPtr("testString")
				listControlsOptionsModel.Profile = core.StringPtr("ids")
				listControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListControlsWithContext(ctx, listControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListControls(listControlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListControlsWithContext(ctx, listControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listControlsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "controls": [{"name": "Name", "description": "This Controls can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListControls successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListControls(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListControlsOptions model
				listControlsOptionsModel := new(schematics20apiv2.ListControlsOptions)
				listControlsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listControlsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listControlsOptionsModel.Sort = core.StringPtr("testString")
				listControlsOptionsModel.Profile = core.StringPtr("ids")
				listControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListControls(listControlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListControls with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListControlsOptions model
				listControlsOptionsModel := new(schematics20apiv2.ListControlsOptions)
				listControlsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listControlsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listControlsOptionsModel.Sort = core.StringPtr("testString")
				listControlsOptionsModel.Profile = core.StringPtr("ids")
				listControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListControls(listControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateControls(createControlsOptions *CreateControlsOptions) - Operation response error`, func() {
		createControlsPath := "/v2/controls"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createControlsPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateControls with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Controls model
				controlsModel := new(schematics20apiv2.Controls)
				controlsModel.Name = core.StringPtr("testString")
				controlsModel.Type = core.StringPtr("it_controls")
				controlsModel.Description = core.StringPtr("testString")
				controlsModel.ResourceGroup = core.StringPtr("testString")
				controlsModel.Location = core.StringPtr("us-south")
				controlsModel.Tags = []string{"testString"}
				controlsModel.SourceReadmeURL = core.StringPtr("testString")
				controlsModel.Source = externalSourceModel
				controlsModel.SourceType = core.StringPtr("local")
				controlsModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				controlsModel.UserState = userStateModel
				controlsModel.SysLock = systemLockModel
				controlsModel.Capsules = []schematics20apiv2.Capsule{*capsuleModel}
				controlsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateControlsOptions model
				createControlsOptionsModel := new(schematics20apiv2.CreateControlsOptions)
				createControlsOptionsModel.Controls = controlsModel
				createControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateControls(createControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateControls(createControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateControls(createControlsOptions *CreateControlsOptions)`, func() {
		createControlsPath := "/v2/controls"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createControlsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "it_controls", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_type": "local", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "id": "ID", "crn": "Crn", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "capsules": [{"name": "Name", "description": "Description", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "Inventory", "trigger_record_id": "TriggerRecordID", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "decisions": [{"rule": "Rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "ActionID"}], "id": "ID", "status": "Status", "controls_id": "ControlsID", "controls_name": "ControlsName", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "last_job_data": {"capsule_id": "CapsuleID", "calsule_name": "CalsuleName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "results": [{"job_id": "JobID", "job_name": "JobName", "policy": "Policy", "severity": 1, "job_state": "success", "failures": ["Failures"], "passed": ["Passed"], "evidences": [{"resources": [{"name": "Name", "type": "Type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke CreateControls successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Controls model
				controlsModel := new(schematics20apiv2.Controls)
				controlsModel.Name = core.StringPtr("testString")
				controlsModel.Type = core.StringPtr("it_controls")
				controlsModel.Description = core.StringPtr("testString")
				controlsModel.ResourceGroup = core.StringPtr("testString")
				controlsModel.Location = core.StringPtr("us-south")
				controlsModel.Tags = []string{"testString"}
				controlsModel.SourceReadmeURL = core.StringPtr("testString")
				controlsModel.Source = externalSourceModel
				controlsModel.SourceType = core.StringPtr("local")
				controlsModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				controlsModel.UserState = userStateModel
				controlsModel.SysLock = systemLockModel
				controlsModel.Capsules = []schematics20apiv2.Capsule{*capsuleModel}
				controlsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateControlsOptions model
				createControlsOptionsModel := new(schematics20apiv2.CreateControlsOptions)
				createControlsOptionsModel.Controls = controlsModel
				createControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateControlsWithContext(ctx, createControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateControls(createControlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateControlsWithContext(ctx, createControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createControlsPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "it_controls", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_type": "local", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "id": "ID", "crn": "Crn", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "capsules": [{"name": "Name", "description": "Description", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "Inventory", "trigger_record_id": "TriggerRecordID", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "decisions": [{"rule": "Rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "ActionID"}], "id": "ID", "status": "Status", "controls_id": "ControlsID", "controls_name": "ControlsName", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "last_job_data": {"capsule_id": "CapsuleID", "calsule_name": "CalsuleName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "results": [{"job_id": "JobID", "job_name": "JobName", "policy": "Policy", "severity": 1, "job_state": "success", "failures": ["Failures"], "passed": ["Passed"], "evidences": [{"resources": [{"name": "Name", "type": "Type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke CreateControls successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateControls(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Controls model
				controlsModel := new(schematics20apiv2.Controls)
				controlsModel.Name = core.StringPtr("testString")
				controlsModel.Type = core.StringPtr("it_controls")
				controlsModel.Description = core.StringPtr("testString")
				controlsModel.ResourceGroup = core.StringPtr("testString")
				controlsModel.Location = core.StringPtr("us-south")
				controlsModel.Tags = []string{"testString"}
				controlsModel.SourceReadmeURL = core.StringPtr("testString")
				controlsModel.Source = externalSourceModel
				controlsModel.SourceType = core.StringPtr("local")
				controlsModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				controlsModel.UserState = userStateModel
				controlsModel.SysLock = systemLockModel
				controlsModel.Capsules = []schematics20apiv2.Capsule{*capsuleModel}
				controlsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateControlsOptions model
				createControlsOptionsModel := new(schematics20apiv2.CreateControlsOptions)
				createControlsOptionsModel.Controls = controlsModel
				createControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateControls(createControlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateControls with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Controls model
				controlsModel := new(schematics20apiv2.Controls)
				controlsModel.Name = core.StringPtr("testString")
				controlsModel.Type = core.StringPtr("it_controls")
				controlsModel.Description = core.StringPtr("testString")
				controlsModel.ResourceGroup = core.StringPtr("testString")
				controlsModel.Location = core.StringPtr("us-south")
				controlsModel.Tags = []string{"testString"}
				controlsModel.SourceReadmeURL = core.StringPtr("testString")
				controlsModel.Source = externalSourceModel
				controlsModel.SourceType = core.StringPtr("local")
				controlsModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				controlsModel.UserState = userStateModel
				controlsModel.SysLock = systemLockModel
				controlsModel.Capsules = []schematics20apiv2.Capsule{*capsuleModel}
				controlsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateControlsOptions model
				createControlsOptionsModel := new(schematics20apiv2.CreateControlsOptions)
				createControlsOptionsModel.Controls = controlsModel
				createControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateControls(createControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateControlsOptions model with no property values
				createControlsOptionsModelNew := new(schematics20apiv2.CreateControlsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateControls(createControlsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetControls(getControlsOptions *GetControlsOptions) - Operation response error`, func() {
		getControlsPath := "/v2/controls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getControlsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetControls with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetControlsOptions model
				getControlsOptionsModel := new(schematics20apiv2.GetControlsOptions)
				getControlsOptionsModel.ControlsID = core.StringPtr("testString")
				getControlsOptionsModel.Profile = core.StringPtr("summary")
				getControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetControls(getControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetControls(getControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetControls(getControlsOptions *GetControlsOptions)`, func() {
		getControlsPath := "/v2/controls/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getControlsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "it_controls", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_type": "local", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "id": "ID", "crn": "Crn", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "capsules": [{"name": "Name", "description": "Description", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "Inventory", "trigger_record_id": "TriggerRecordID", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "decisions": [{"rule": "Rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "ActionID"}], "id": "ID", "status": "Status", "controls_id": "ControlsID", "controls_name": "ControlsName", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "last_job_data": {"capsule_id": "CapsuleID", "calsule_name": "CalsuleName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "results": [{"job_id": "JobID", "job_name": "JobName", "policy": "Policy", "severity": 1, "job_state": "success", "failures": ["Failures"], "passed": ["Passed"], "evidences": [{"resources": [{"name": "Name", "type": "Type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke GetControls successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetControlsOptions model
				getControlsOptionsModel := new(schematics20apiv2.GetControlsOptions)
				getControlsOptionsModel.ControlsID = core.StringPtr("testString")
				getControlsOptionsModel.Profile = core.StringPtr("summary")
				getControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetControlsWithContext(ctx, getControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetControls(getControlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetControlsWithContext(ctx, getControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getControlsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "it_controls", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_type": "local", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "id": "ID", "crn": "Crn", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "capsules": [{"name": "Name", "description": "Description", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "Inventory", "trigger_record_id": "TriggerRecordID", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "decisions": [{"rule": "Rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "ActionID"}], "id": "ID", "status": "Status", "controls_id": "ControlsID", "controls_name": "ControlsName", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "last_job_data": {"capsule_id": "CapsuleID", "calsule_name": "CalsuleName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "results": [{"job_id": "JobID", "job_name": "JobName", "policy": "Policy", "severity": 1, "job_state": "success", "failures": ["Failures"], "passed": ["Passed"], "evidences": [{"resources": [{"name": "Name", "type": "Type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke GetControls successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetControls(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetControlsOptions model
				getControlsOptionsModel := new(schematics20apiv2.GetControlsOptions)
				getControlsOptionsModel.ControlsID = core.StringPtr("testString")
				getControlsOptionsModel.Profile = core.StringPtr("summary")
				getControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetControls(getControlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetControls with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetControlsOptions model
				getControlsOptionsModel := new(schematics20apiv2.GetControlsOptions)
				getControlsOptionsModel.ControlsID = core.StringPtr("testString")
				getControlsOptionsModel.Profile = core.StringPtr("summary")
				getControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetControls(getControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetControlsOptions model with no property values
				getControlsOptionsModelNew := new(schematics20apiv2.GetControlsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetControls(getControlsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteControls(deleteControlsOptions *DeleteControlsOptions)`, func() {
		deleteControlsPath := "/v2/controls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteControlsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteControls successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteControls(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteControlsOptions model
				deleteControlsOptionsModel := new(schematics20apiv2.DeleteControlsOptions)
				deleteControlsOptionsModel.ControlsID = core.StringPtr("testString")
				deleteControlsOptionsModel.Force = core.BoolPtr(true)
				deleteControlsOptionsModel.Propagate = core.BoolPtr(true)
				deleteControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteControls(deleteControlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteControls with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteControlsOptions model
				deleteControlsOptionsModel := new(schematics20apiv2.DeleteControlsOptions)
				deleteControlsOptionsModel.ControlsID = core.StringPtr("testString")
				deleteControlsOptionsModel.Force = core.BoolPtr(true)
				deleteControlsOptionsModel.Propagate = core.BoolPtr(true)
				deleteControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteControls(deleteControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteControlsOptions model with no property values
				deleteControlsOptionsModelNew := new(schematics20apiv2.DeleteControlsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteControls(deleteControlsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateControls(updateControlsOptions *UpdateControlsOptions) - Operation response error`, func() {
		updateControlsPath := "/v2/controls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateControlsPath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateControls with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Controls model
				controlsModel := new(schematics20apiv2.Controls)
				controlsModel.Name = core.StringPtr("testString")
				controlsModel.Type = core.StringPtr("it_controls")
				controlsModel.Description = core.StringPtr("testString")
				controlsModel.ResourceGroup = core.StringPtr("testString")
				controlsModel.Location = core.StringPtr("us-south")
				controlsModel.Tags = []string{"testString"}
				controlsModel.SourceReadmeURL = core.StringPtr("testString")
				controlsModel.Source = externalSourceModel
				controlsModel.SourceType = core.StringPtr("local")
				controlsModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				controlsModel.UserState = userStateModel
				controlsModel.SysLock = systemLockModel
				controlsModel.Capsules = []schematics20apiv2.Capsule{*capsuleModel}
				controlsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateControlsOptions model
				updateControlsOptionsModel := new(schematics20apiv2.UpdateControlsOptions)
				updateControlsOptionsModel.ControlsID = core.StringPtr("testString")
				updateControlsOptionsModel.Controls = controlsModel
				updateControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UpdateControls(updateControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UpdateControls(updateControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateControls(updateControlsOptions *UpdateControlsOptions)`, func() {
		updateControlsPath := "/v2/controls/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateControlsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "it_controls", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_type": "local", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "id": "ID", "crn": "Crn", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "capsules": [{"name": "Name", "description": "Description", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "Inventory", "trigger_record_id": "TriggerRecordID", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "decisions": [{"rule": "Rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "ActionID"}], "id": "ID", "status": "Status", "controls_id": "ControlsID", "controls_name": "ControlsName", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "last_job_data": {"capsule_id": "CapsuleID", "calsule_name": "CalsuleName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "results": [{"job_id": "JobID", "job_name": "JobName", "policy": "Policy", "severity": 1, "job_state": "success", "failures": ["Failures"], "passed": ["Passed"], "evidences": [{"resources": [{"name": "Name", "type": "Type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke UpdateControls successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Controls model
				controlsModel := new(schematics20apiv2.Controls)
				controlsModel.Name = core.StringPtr("testString")
				controlsModel.Type = core.StringPtr("it_controls")
				controlsModel.Description = core.StringPtr("testString")
				controlsModel.ResourceGroup = core.StringPtr("testString")
				controlsModel.Location = core.StringPtr("us-south")
				controlsModel.Tags = []string{"testString"}
				controlsModel.SourceReadmeURL = core.StringPtr("testString")
				controlsModel.Source = externalSourceModel
				controlsModel.SourceType = core.StringPtr("local")
				controlsModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				controlsModel.UserState = userStateModel
				controlsModel.SysLock = systemLockModel
				controlsModel.Capsules = []schematics20apiv2.Capsule{*capsuleModel}
				controlsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateControlsOptions model
				updateControlsOptionsModel := new(schematics20apiv2.UpdateControlsOptions)
				updateControlsOptionsModel.ControlsID = core.StringPtr("testString")
				updateControlsOptionsModel.Controls = controlsModel
				updateControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UpdateControlsWithContext(ctx, updateControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UpdateControls(updateControlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UpdateControlsWithContext(ctx, updateControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateControlsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "it_controls", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "source_type": "local", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "id": "ID", "crn": "Crn", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "capsules": [{"name": "Name", "description": "Description", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "Inventory", "trigger_record_id": "TriggerRecordID", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "decisions": [{"rule": "Rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "ActionID"}], "id": "ID", "status": "Status", "controls_id": "ControlsID", "controls_name": "ControlsName", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "last_job_data": {"capsule_id": "CapsuleID", "calsule_name": "CalsuleName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "results": [{"job_id": "JobID", "job_name": "JobName", "policy": "Policy", "severity": 1, "job_state": "success", "failures": ["Failures"], "passed": ["Passed"], "evidences": [{"resources": [{"name": "Name", "type": "Type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}]}`)
				}))
			})
			It(`Invoke UpdateControls successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UpdateControls(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Controls model
				controlsModel := new(schematics20apiv2.Controls)
				controlsModel.Name = core.StringPtr("testString")
				controlsModel.Type = core.StringPtr("it_controls")
				controlsModel.Description = core.StringPtr("testString")
				controlsModel.ResourceGroup = core.StringPtr("testString")
				controlsModel.Location = core.StringPtr("us-south")
				controlsModel.Tags = []string{"testString"}
				controlsModel.SourceReadmeURL = core.StringPtr("testString")
				controlsModel.Source = externalSourceModel
				controlsModel.SourceType = core.StringPtr("local")
				controlsModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				controlsModel.UserState = userStateModel
				controlsModel.SysLock = systemLockModel
				controlsModel.Capsules = []schematics20apiv2.Capsule{*capsuleModel}
				controlsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateControlsOptions model
				updateControlsOptionsModel := new(schematics20apiv2.UpdateControlsOptions)
				updateControlsOptionsModel.ControlsID = core.StringPtr("testString")
				updateControlsOptionsModel.Controls = controlsModel
				updateControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UpdateControls(updateControlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateControls with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Controls model
				controlsModel := new(schematics20apiv2.Controls)
				controlsModel.Name = core.StringPtr("testString")
				controlsModel.Type = core.StringPtr("it_controls")
				controlsModel.Description = core.StringPtr("testString")
				controlsModel.ResourceGroup = core.StringPtr("testString")
				controlsModel.Location = core.StringPtr("us-south")
				controlsModel.Tags = []string{"testString"}
				controlsModel.SourceReadmeURL = core.StringPtr("testString")
				controlsModel.Source = externalSourceModel
				controlsModel.SourceType = core.StringPtr("local")
				controlsModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				controlsModel.UserState = userStateModel
				controlsModel.SysLock = systemLockModel
				controlsModel.Capsules = []schematics20apiv2.Capsule{*capsuleModel}
				controlsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateControlsOptions model
				updateControlsOptionsModel := new(schematics20apiv2.UpdateControlsOptions)
				updateControlsOptionsModel.ControlsID = core.StringPtr("testString")
				updateControlsOptionsModel.Controls = controlsModel
				updateControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UpdateControls(updateControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateControlsOptions model with no property values
				updateControlsOptionsModelNew := new(schematics20apiv2.UpdateControlsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UpdateControls(updateControlsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListCapsules(listCapsulesOptions *ListCapsulesOptions) - Operation response error`, func() {
		listCapsulesPath := "/v2/controls/testString/capsules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCapsulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListCapsules with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListCapsulesOptions model
				listCapsulesOptionsModel := new(schematics20apiv2.ListCapsulesOptions)
				listCapsulesOptionsModel.ControlsID = core.StringPtr("testString")
				listCapsulesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCapsulesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCapsulesOptionsModel.Sort = core.StringPtr("testString")
				listCapsulesOptionsModel.Profile = core.StringPtr("ids")
				listCapsulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListCapsules(listCapsulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListCapsules(listCapsulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListCapsules(listCapsulesOptions *ListCapsulesOptions)`, func() {
		listCapsulesPath := "/v2/controls/testString/capsules"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCapsulesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "capsules": [{"name": "Name", "description": "This Capsule can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListCapsules successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListCapsulesOptions model
				listCapsulesOptionsModel := new(schematics20apiv2.ListCapsulesOptions)
				listCapsulesOptionsModel.ControlsID = core.StringPtr("testString")
				listCapsulesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCapsulesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCapsulesOptionsModel.Sort = core.StringPtr("testString")
				listCapsulesOptionsModel.Profile = core.StringPtr("ids")
				listCapsulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListCapsulesWithContext(ctx, listCapsulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListCapsules(listCapsulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListCapsulesWithContext(ctx, listCapsulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCapsulesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "capsules": [{"name": "Name", "description": "This Capsule can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListCapsules successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListCapsules(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListCapsulesOptions model
				listCapsulesOptionsModel := new(schematics20apiv2.ListCapsulesOptions)
				listCapsulesOptionsModel.ControlsID = core.StringPtr("testString")
				listCapsulesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCapsulesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCapsulesOptionsModel.Sort = core.StringPtr("testString")
				listCapsulesOptionsModel.Profile = core.StringPtr("ids")
				listCapsulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListCapsules(listCapsulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListCapsules with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListCapsulesOptions model
				listCapsulesOptionsModel := new(schematics20apiv2.ListCapsulesOptions)
				listCapsulesOptionsModel.ControlsID = core.StringPtr("testString")
				listCapsulesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCapsulesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCapsulesOptionsModel.Sort = core.StringPtr("testString")
				listCapsulesOptionsModel.Profile = core.StringPtr("ids")
				listCapsulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListCapsules(listCapsulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListCapsulesOptions model with no property values
				listCapsulesOptionsModelNew := new(schematics20apiv2.ListCapsulesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ListCapsules(listCapsulesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateCapsule(createCapsuleOptions *CreateCapsuleOptions) - Operation response error`, func() {
		createCapsulePath := "/v2/controls/testString/capsules"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createCapsulePath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateCapsule with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateCapsuleOptions model
				createCapsuleOptionsModel := new(schematics20apiv2.CreateCapsuleOptions)
				createCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				createCapsuleOptionsModel.Capsule = capsuleModel
				createCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateCapsule(createCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateCapsule(createCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateCapsule(createCapsuleOptions *CreateCapsuleOptions)`, func() {
		createCapsulePath := "/v2/controls/testString/capsules"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createCapsulePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "capsules": [{"name": "Name", "description": "This Capsule can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke CreateCapsule successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateCapsuleOptions model
				createCapsuleOptionsModel := new(schematics20apiv2.CreateCapsuleOptions)
				createCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				createCapsuleOptionsModel.Capsule = capsuleModel
				createCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateCapsuleWithContext(ctx, createCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateCapsule(createCapsuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateCapsuleWithContext(ctx, createCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createCapsulePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "capsules": [{"name": "Name", "description": "This Capsule can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke CreateCapsule successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateCapsule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateCapsuleOptions model
				createCapsuleOptionsModel := new(schematics20apiv2.CreateCapsuleOptions)
				createCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				createCapsuleOptionsModel.Capsule = capsuleModel
				createCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateCapsule(createCapsuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateCapsule with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateCapsuleOptions model
				createCapsuleOptionsModel := new(schematics20apiv2.CreateCapsuleOptions)
				createCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				createCapsuleOptionsModel.Capsule = capsuleModel
				createCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateCapsule(createCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateCapsuleOptions model with no property values
				createCapsuleOptionsModelNew := new(schematics20apiv2.CreateCapsuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateCapsule(createCapsuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCapsule(getCapsuleOptions *GetCapsuleOptions) - Operation response error`, func() {
		getCapsulePath := "/v2/controls/testString/capsules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCapsulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCapsule with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCapsuleOptions model
				getCapsuleOptionsModel := new(schematics20apiv2.GetCapsuleOptions)
				getCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				getCapsuleOptionsModel.CapsuleID = core.StringPtr("testString")
				getCapsuleOptionsModel.Profile = core.StringPtr("summary")
				getCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetCapsule(getCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetCapsule(getCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetCapsule(getCapsuleOptions *GetCapsuleOptions)`, func() {
		getCapsulePath := "/v2/controls/testString/capsules/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCapsulePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "description": "Description", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "Inventory", "trigger_record_id": "TriggerRecordID", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "decisions": [{"rule": "Rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "ActionID"}], "id": "ID", "status": "Status", "controls_id": "ControlsID", "controls_name": "ControlsName", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "last_job_data": {"capsule_id": "CapsuleID", "calsule_name": "CalsuleName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "results": [{"job_id": "JobID", "job_name": "JobName", "policy": "Policy", "severity": 1, "job_state": "success", "failures": ["Failures"], "passed": ["Passed"], "evidences": [{"resources": [{"name": "Name", "type": "Type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetCapsule successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetCapsuleOptions model
				getCapsuleOptionsModel := new(schematics20apiv2.GetCapsuleOptions)
				getCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				getCapsuleOptionsModel.CapsuleID = core.StringPtr("testString")
				getCapsuleOptionsModel.Profile = core.StringPtr("summary")
				getCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetCapsuleWithContext(ctx, getCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetCapsule(getCapsuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetCapsuleWithContext(ctx, getCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCapsulePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "description": "Description", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "Inventory", "trigger_record_id": "TriggerRecordID", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "decisions": [{"rule": "Rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "ActionID"}], "id": "ID", "status": "Status", "controls_id": "ControlsID", "controls_name": "ControlsName", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "last_job_data": {"capsule_id": "CapsuleID", "calsule_name": "CalsuleName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "results": [{"job_id": "JobID", "job_name": "JobName", "policy": "Policy", "severity": 1, "job_state": "success", "failures": ["Failures"], "passed": ["Passed"], "evidences": [{"resources": [{"name": "Name", "type": "Type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetCapsule successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetCapsule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCapsuleOptions model
				getCapsuleOptionsModel := new(schematics20apiv2.GetCapsuleOptions)
				getCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				getCapsuleOptionsModel.CapsuleID = core.StringPtr("testString")
				getCapsuleOptionsModel.Profile = core.StringPtr("summary")
				getCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetCapsule(getCapsuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCapsule with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCapsuleOptions model
				getCapsuleOptionsModel := new(schematics20apiv2.GetCapsuleOptions)
				getCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				getCapsuleOptionsModel.CapsuleID = core.StringPtr("testString")
				getCapsuleOptionsModel.Profile = core.StringPtr("summary")
				getCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetCapsule(getCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCapsuleOptions model with no property values
				getCapsuleOptionsModelNew := new(schematics20apiv2.GetCapsuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetCapsule(getCapsuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteCapsule(deleteCapsuleOptions *DeleteCapsuleOptions)`, func() {
		deleteCapsulePath := "/v2/controls/testString/capsules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteCapsulePath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteCapsule successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteCapsule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteCapsuleOptions model
				deleteCapsuleOptionsModel := new(schematics20apiv2.DeleteCapsuleOptions)
				deleteCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				deleteCapsuleOptionsModel.CapsuleID = core.StringPtr("testString")
				deleteCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteCapsule(deleteCapsuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteCapsule with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteCapsuleOptions model
				deleteCapsuleOptionsModel := new(schematics20apiv2.DeleteCapsuleOptions)
				deleteCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				deleteCapsuleOptionsModel.CapsuleID = core.StringPtr("testString")
				deleteCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteCapsule(deleteCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteCapsuleOptions model with no property values
				deleteCapsuleOptionsModelNew := new(schematics20apiv2.DeleteCapsuleOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteCapsule(deleteCapsuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateCapsule(updateCapsuleOptions *UpdateCapsuleOptions) - Operation response error`, func() {
		updateCapsulePath := "/v2/controls/testString/capsules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateCapsulePath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateCapsule with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateCapsuleOptions model
				updateCapsuleOptionsModel := new(schematics20apiv2.UpdateCapsuleOptions)
				updateCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				updateCapsuleOptionsModel.CapsuleID = core.StringPtr("testString")
				updateCapsuleOptionsModel.Capsule = capsuleModel
				updateCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UpdateCapsule(updateCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UpdateCapsule(updateCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateCapsule(updateCapsuleOptions *UpdateCapsuleOptions)`, func() {
		updateCapsulePath := "/v2/controls/testString/capsules/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateCapsulePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "description": "Description", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "Inventory", "trigger_record_id": "TriggerRecordID", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "decisions": [{"rule": "Rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "ActionID"}], "id": "ID", "status": "Status", "controls_id": "ControlsID", "controls_name": "ControlsName", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "last_job_data": {"capsule_id": "CapsuleID", "calsule_name": "CalsuleName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "results": [{"job_id": "JobID", "job_name": "JobName", "policy": "Policy", "severity": 1, "job_state": "success", "failures": ["Failures"], "passed": ["Passed"], "evidences": [{"resources": [{"name": "Name", "type": "Type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UpdateCapsule successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateCapsuleOptions model
				updateCapsuleOptionsModel := new(schematics20apiv2.UpdateCapsuleOptions)
				updateCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				updateCapsuleOptionsModel.CapsuleID = core.StringPtr("testString")
				updateCapsuleOptionsModel.Capsule = capsuleModel
				updateCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UpdateCapsuleWithContext(ctx, updateCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UpdateCapsule(updateCapsuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UpdateCapsuleWithContext(ctx, updateCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateCapsulePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "description": "Description", "type": "Type", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "package": "Policy package path", "severity": 1, "inventory": "Inventory", "trigger_record_id": "TriggerRecordID", "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "decisions": [{"rule": "Rule", "pass_value": "before", "pass_expr": "== OR != OR <= OR >= OR > OR <", "evidence_found_in": "rule emitting details"}], "escalations": [{"action_id": "ActionID"}], "id": "ID", "status": "Status", "controls_id": "ControlsID", "controls_name": "ControlsName", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_message": "StatusMessage"}, "last_job_data": {"capsule_id": "CapsuleID", "calsule_name": "CalsuleName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "results": [{"job_id": "JobID", "job_name": "JobName", "policy": "Policy", "severity": 1, "job_state": "success", "failures": ["Failures"], "passed": ["Passed"], "evidences": [{"resources": [{"name": "Name", "type": "Type"}]}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UpdateCapsule successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UpdateCapsule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateCapsuleOptions model
				updateCapsuleOptionsModel := new(schematics20apiv2.UpdateCapsuleOptions)
				updateCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				updateCapsuleOptionsModel.CapsuleID = core.StringPtr("testString")
				updateCapsuleOptionsModel.Capsule = capsuleModel
				updateCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UpdateCapsule(updateCapsuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateCapsule with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateCapsuleOptions model
				updateCapsuleOptionsModel := new(schematics20apiv2.UpdateCapsuleOptions)
				updateCapsuleOptionsModel.ControlsID = core.StringPtr("testString")
				updateCapsuleOptionsModel.CapsuleID = core.StringPtr("testString")
				updateCapsuleOptionsModel.Capsule = capsuleModel
				updateCapsuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UpdateCapsule(updateCapsuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateCapsuleOptions model with no property values
				updateCapsuleOptionsModelNew := new(schematics20apiv2.UpdateCapsuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UpdateCapsule(updateCapsuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListDatasets(listDatasetsOptions *ListDatasetsOptions) - Operation response error`, func() {
		listDatasetsPath := "/v2/datasets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDatasetsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListDatasets with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListDatasetsOptions model
				listDatasetsOptionsModel := new(schematics20apiv2.ListDatasetsOptions)
				listDatasetsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listDatasetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDatasetsOptionsModel.Sort = core.StringPtr("testString")
				listDatasetsOptionsModel.Profile = core.StringPtr("ids")
				listDatasetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListDatasets(listDatasetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListDatasets(listDatasetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListDatasets(listDatasetsOptions *ListDatasetsOptions)`, func() {
		listDatasetsPath := "/v2/datasets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDatasetsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "datasets": [{"name": "Name", "dataset_id": "DatasetID", "type": "credential", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "source_type": "local", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListDatasets successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListDatasetsOptions model
				listDatasetsOptionsModel := new(schematics20apiv2.ListDatasetsOptions)
				listDatasetsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listDatasetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDatasetsOptionsModel.Sort = core.StringPtr("testString")
				listDatasetsOptionsModel.Profile = core.StringPtr("ids")
				listDatasetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListDatasetsWithContext(ctx, listDatasetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListDatasets(listDatasetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListDatasetsWithContext(ctx, listDatasetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDatasetsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "datasets": [{"name": "Name", "dataset_id": "DatasetID", "type": "credential", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "source_type": "local", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListDatasets successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListDatasets(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListDatasetsOptions model
				listDatasetsOptionsModel := new(schematics20apiv2.ListDatasetsOptions)
				listDatasetsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listDatasetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDatasetsOptionsModel.Sort = core.StringPtr("testString")
				listDatasetsOptionsModel.Profile = core.StringPtr("ids")
				listDatasetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListDatasets(listDatasetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListDatasets with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListDatasetsOptions model
				listDatasetsOptionsModel := new(schematics20apiv2.ListDatasetsOptions)
				listDatasetsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listDatasetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDatasetsOptionsModel.Sort = core.StringPtr("testString")
				listDatasetsOptionsModel.Profile = core.StringPtr("ids")
				listDatasetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListDatasets(listDatasetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDataset(createDatasetOptions *CreateDatasetOptions) - Operation response error`, func() {
		createDatasetPath := "/v2/datasets"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDatasetPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateDataset with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateDatasetOptions model
				createDatasetOptionsModel := new(schematics20apiv2.CreateDatasetOptions)
				createDatasetOptionsModel.Dataset = datasetModel
				createDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateDataset(createDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateDataset(createDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateDataset(createDatasetOptions *CreateDatasetOptions)`, func() {
		createDatasetPath := "/v2/datasets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDatasetPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "credential", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "data": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "datasource": "Datasource", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "dataset_id": "DatasetID", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "affected_resource_ids": ["AffectedResourceIds"]}`)
				}))
			})
			It(`Invoke CreateDataset successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateDatasetOptions model
				createDatasetOptionsModel := new(schematics20apiv2.CreateDatasetOptions)
				createDatasetOptionsModel.Dataset = datasetModel
				createDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateDatasetWithContext(ctx, createDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateDataset(createDatasetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateDatasetWithContext(ctx, createDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDatasetPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "credential", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "data": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "datasource": "Datasource", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "dataset_id": "DatasetID", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "affected_resource_ids": ["AffectedResourceIds"]}`)
				}))
			})
			It(`Invoke CreateDataset successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateDataset(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateDatasetOptions model
				createDatasetOptionsModel := new(schematics20apiv2.CreateDatasetOptions)
				createDatasetOptionsModel.Dataset = datasetModel
				createDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateDataset(createDatasetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateDataset with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateDatasetOptions model
				createDatasetOptionsModel := new(schematics20apiv2.CreateDatasetOptions)
				createDatasetOptionsModel.Dataset = datasetModel
				createDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateDataset(createDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateDatasetOptions model with no property values
				createDatasetOptionsModelNew := new(schematics20apiv2.CreateDatasetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateDataset(createDatasetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDataset(getDatasetOptions *GetDatasetOptions) - Operation response error`, func() {
		getDatasetPath := "/v2/datasets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatasetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDataset with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetDatasetOptions model
				getDatasetOptionsModel := new(schematics20apiv2.GetDatasetOptions)
				getDatasetOptionsModel.DatasetID = core.StringPtr("testString")
				getDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetDataset(getDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetDataset(getDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetDataset(getDatasetOptions *GetDatasetOptions)`, func() {
		getDatasetPath := "/v2/datasets/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatasetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "credential", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "data": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "datasource": "Datasource", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "dataset_id": "DatasetID", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "affected_resource_ids": ["AffectedResourceIds"]}`)
				}))
			})
			It(`Invoke GetDataset successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetDatasetOptions model
				getDatasetOptionsModel := new(schematics20apiv2.GetDatasetOptions)
				getDatasetOptionsModel.DatasetID = core.StringPtr("testString")
				getDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetDatasetWithContext(ctx, getDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetDataset(getDatasetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetDatasetWithContext(ctx, getDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatasetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "credential", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "data": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "datasource": "Datasource", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "dataset_id": "DatasetID", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "affected_resource_ids": ["AffectedResourceIds"]}`)
				}))
			})
			It(`Invoke GetDataset successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetDataset(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDatasetOptions model
				getDatasetOptionsModel := new(schematics20apiv2.GetDatasetOptions)
				getDatasetOptionsModel.DatasetID = core.StringPtr("testString")
				getDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetDataset(getDatasetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDataset with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetDatasetOptions model
				getDatasetOptionsModel := new(schematics20apiv2.GetDatasetOptions)
				getDatasetOptionsModel.DatasetID = core.StringPtr("testString")
				getDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetDataset(getDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDatasetOptions model with no property values
				getDatasetOptionsModelNew := new(schematics20apiv2.GetDatasetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetDataset(getDatasetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceDataset(replaceDatasetOptions *ReplaceDatasetOptions) - Operation response error`, func() {
		replaceDatasetPath := "/v2/datasets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceDatasetPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceDataset with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceDatasetOptions model
				replaceDatasetOptionsModel := new(schematics20apiv2.ReplaceDatasetOptions)
				replaceDatasetOptionsModel.DatasetID = core.StringPtr("testString")
				replaceDatasetOptionsModel.Dataset = datasetModel
				replaceDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ReplaceDataset(replaceDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ReplaceDataset(replaceDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceDataset(replaceDatasetOptions *ReplaceDatasetOptions)`, func() {
		replaceDatasetPath := "/v2/datasets/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceDatasetPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "credential", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "data": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "datasource": "Datasource", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "dataset_id": "DatasetID", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "affected_resource_ids": ["AffectedResourceIds"]}`)
				}))
			})
			It(`Invoke ReplaceDataset successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceDatasetOptions model
				replaceDatasetOptionsModel := new(schematics20apiv2.ReplaceDatasetOptions)
				replaceDatasetOptionsModel.DatasetID = core.StringPtr("testString")
				replaceDatasetOptionsModel.Dataset = datasetModel
				replaceDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ReplaceDatasetWithContext(ctx, replaceDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ReplaceDataset(replaceDatasetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ReplaceDatasetWithContext(ctx, replaceDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceDatasetPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "credential", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "data": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "datasource": "Datasource", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "dataset_id": "DatasetID", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "affected_resource_ids": ["AffectedResourceIds"]}`)
				}))
			})
			It(`Invoke ReplaceDataset successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ReplaceDataset(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceDatasetOptions model
				replaceDatasetOptionsModel := new(schematics20apiv2.ReplaceDatasetOptions)
				replaceDatasetOptionsModel.DatasetID = core.StringPtr("testString")
				replaceDatasetOptionsModel.Dataset = datasetModel
				replaceDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ReplaceDataset(replaceDatasetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceDataset with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceDatasetOptions model
				replaceDatasetOptionsModel := new(schematics20apiv2.ReplaceDatasetOptions)
				replaceDatasetOptionsModel.DatasetID = core.StringPtr("testString")
				replaceDatasetOptionsModel.Dataset = datasetModel
				replaceDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ReplaceDataset(replaceDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceDatasetOptions model with no property values
				replaceDatasetOptionsModelNew := new(schematics20apiv2.ReplaceDatasetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ReplaceDataset(replaceDatasetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteDataset(deleteDatasetOptions *DeleteDatasetOptions)`, func() {
		deleteDatasetPath := "/v2/datasets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteDatasetPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteDataset successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteDataset(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteDatasetOptions model
				deleteDatasetOptionsModel := new(schematics20apiv2.DeleteDatasetOptions)
				deleteDatasetOptionsModel.DatasetID = core.StringPtr("testString")
				deleteDatasetOptionsModel.Force = core.BoolPtr(true)
				deleteDatasetOptionsModel.Propagate = core.BoolPtr(true)
				deleteDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteDataset(deleteDatasetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteDataset with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteDatasetOptions model
				deleteDatasetOptionsModel := new(schematics20apiv2.DeleteDatasetOptions)
				deleteDatasetOptionsModel.DatasetID = core.StringPtr("testString")
				deleteDatasetOptionsModel.Force = core.BoolPtr(true)
				deleteDatasetOptionsModel.Propagate = core.BoolPtr(true)
				deleteDatasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteDataset(deleteDatasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteDatasetOptions model with no property values
				deleteDatasetOptionsModelNew := new(schematics20apiv2.DeleteDatasetOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteDataset(deleteDatasetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAtaset(updateAtasetOptions *UpdateAtasetOptions) - Operation response error`, func() {
		updateAtasetPath := "/v2/datasets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAtasetPath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateAtaset with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateAtasetOptions model
				updateAtasetOptionsModel := new(schematics20apiv2.UpdateAtasetOptions)
				updateAtasetOptionsModel.DatasetID = core.StringPtr("testString")
				updateAtasetOptionsModel.Dataset = datasetModel
				updateAtasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UpdateAtaset(updateAtasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UpdateAtaset(updateAtasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateAtaset(updateAtasetOptions *UpdateAtasetOptions)`, func() {
		updateAtasetPath := "/v2/datasets/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAtasetPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "credential", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "data": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "datasource": "Datasource", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "dataset_id": "DatasetID", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "affected_resource_ids": ["AffectedResourceIds"]}`)
				}))
			})
			It(`Invoke UpdateAtaset successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateAtasetOptions model
				updateAtasetOptionsModel := new(schematics20apiv2.UpdateAtasetOptions)
				updateAtasetOptionsModel.DatasetID = core.StringPtr("testString")
				updateAtasetOptionsModel.Dataset = datasetModel
				updateAtasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UpdateAtasetWithContext(ctx, updateAtasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UpdateAtaset(updateAtasetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UpdateAtasetWithContext(ctx, updateAtasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAtasetPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "credential", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "data": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "datasource": "Datasource", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "dataset_id": "DatasetID", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "affected_resource_ids": ["AffectedResourceIds"]}`)
				}))
			})
			It(`Invoke UpdateAtaset successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UpdateAtaset(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateAtasetOptions model
				updateAtasetOptionsModel := new(schematics20apiv2.UpdateAtasetOptions)
				updateAtasetOptionsModel.DatasetID = core.StringPtr("testString")
				updateAtasetOptionsModel.Dataset = datasetModel
				updateAtasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UpdateAtaset(updateAtasetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateAtaset with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateAtasetOptions model
				updateAtasetOptionsModel := new(schematics20apiv2.UpdateAtasetOptions)
				updateAtasetOptionsModel.DatasetID = core.StringPtr("testString")
				updateAtasetOptionsModel.Dataset = datasetModel
				updateAtasetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UpdateAtaset(updateAtasetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateAtasetOptions model with no property values
				updateAtasetOptionsModelNew := new(schematics20apiv2.UpdateAtasetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UpdateAtaset(updateAtasetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDatasetVariables(listDatasetVariablesOptions *ListDatasetVariablesOptions) - Operation response error`, func() {
		listDatasetVariablesPath := "/v2/datasets/testString/variables"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDatasetVariablesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListDatasetVariables with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListDatasetVariablesOptions model
				listDatasetVariablesOptionsModel := new(schematics20apiv2.ListDatasetVariablesOptions)
				listDatasetVariablesOptionsModel.DatasetID = core.StringPtr("testString")
				listDatasetVariablesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListDatasetVariables(listDatasetVariablesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListDatasetVariables(listDatasetVariablesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListDatasetVariables(listDatasetVariablesOptions *ListDatasetVariablesOptions)`, func() {
		listDatasetVariablesPath := "/v2/datasets/testString/variables"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDatasetVariablesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "variables": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ListDatasetVariables successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListDatasetVariablesOptions model
				listDatasetVariablesOptionsModel := new(schematics20apiv2.ListDatasetVariablesOptions)
				listDatasetVariablesOptionsModel.DatasetID = core.StringPtr("testString")
				listDatasetVariablesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListDatasetVariablesWithContext(ctx, listDatasetVariablesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListDatasetVariables(listDatasetVariablesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListDatasetVariablesWithContext(ctx, listDatasetVariablesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDatasetVariablesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "variables": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ListDatasetVariables successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListDatasetVariables(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListDatasetVariablesOptions model
				listDatasetVariablesOptionsModel := new(schematics20apiv2.ListDatasetVariablesOptions)
				listDatasetVariablesOptionsModel.DatasetID = core.StringPtr("testString")
				listDatasetVariablesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListDatasetVariables(listDatasetVariablesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListDatasetVariables with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListDatasetVariablesOptions model
				listDatasetVariablesOptionsModel := new(schematics20apiv2.ListDatasetVariablesOptions)
				listDatasetVariablesOptionsModel.DatasetID = core.StringPtr("testString")
				listDatasetVariablesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListDatasetVariables(listDatasetVariablesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListDatasetVariablesOptions model with no property values
				listDatasetVariablesOptionsModelNew := new(schematics20apiv2.ListDatasetVariablesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ListDatasetVariables(listDatasetVariablesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDatasetVariable(getDatasetVariableOptions *GetDatasetVariableOptions) - Operation response error`, func() {
		getDatasetVariablePath := "/v2/datasets/testString/values/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatasetVariablePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDatasetVariable with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetDatasetVariableOptions model
				getDatasetVariableOptionsModel := new(schematics20apiv2.GetDatasetVariableOptions)
				getDatasetVariableOptionsModel.DatasetID = core.StringPtr("testString")
				getDatasetVariableOptionsModel.VarName = core.StringPtr("testString")
				getDatasetVariableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetDatasetVariable(getDatasetVariableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetDatasetVariable(getDatasetVariableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetDatasetVariable(getDatasetVariableOptions *GetDatasetVariableOptions)`, func() {
		getDatasetVariablePath := "/v2/datasets/testString/values/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatasetVariablePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}`)
				}))
			})
			It(`Invoke GetDatasetVariable successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetDatasetVariableOptions model
				getDatasetVariableOptionsModel := new(schematics20apiv2.GetDatasetVariableOptions)
				getDatasetVariableOptionsModel.DatasetID = core.StringPtr("testString")
				getDatasetVariableOptionsModel.VarName = core.StringPtr("testString")
				getDatasetVariableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetDatasetVariableWithContext(ctx, getDatasetVariableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetDatasetVariable(getDatasetVariableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetDatasetVariableWithContext(ctx, getDatasetVariableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatasetVariablePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}`)
				}))
			})
			It(`Invoke GetDatasetVariable successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetDatasetVariable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDatasetVariableOptions model
				getDatasetVariableOptionsModel := new(schematics20apiv2.GetDatasetVariableOptions)
				getDatasetVariableOptionsModel.DatasetID = core.StringPtr("testString")
				getDatasetVariableOptionsModel.VarName = core.StringPtr("testString")
				getDatasetVariableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetDatasetVariable(getDatasetVariableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDatasetVariable with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetDatasetVariableOptions model
				getDatasetVariableOptionsModel := new(schematics20apiv2.GetDatasetVariableOptions)
				getDatasetVariableOptionsModel.DatasetID = core.StringPtr("testString")
				getDatasetVariableOptionsModel.VarName = core.StringPtr("testString")
				getDatasetVariableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetDatasetVariable(getDatasetVariableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDatasetVariableOptions model with no property values
				getDatasetVariableOptionsModelNew := new(schematics20apiv2.GetDatasetVariableOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetDatasetVariable(getDatasetVariableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListInventories(listInventoriesOptions *ListInventoriesOptions) - Operation response error`, func() {
		listInventoriesPath := "/v2/inventories"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInventoriesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInventories with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := new(schematics20apiv2.ListInventoriesOptions)
				listInventoriesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listInventoriesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInventoriesOptionsModel.Sort = core.StringPtr("testString")
				listInventoriesOptionsModel.Profile = core.StringPtr("ids")
				listInventoriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListInventories(listInventoriesOptions *ListInventoriesOptions)`, func() {
		listInventoriesPath := "/v2/inventories"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInventoriesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "inventories": [{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}]}`)
				}))
			})
			It(`Invoke ListInventories successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := new(schematics20apiv2.ListInventoriesOptions)
				listInventoriesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listInventoriesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInventoriesOptionsModel.Sort = core.StringPtr("testString")
				listInventoriesOptionsModel.Profile = core.StringPtr("ids")
				listInventoriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListInventoriesWithContext(ctx, listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListInventoriesWithContext(ctx, listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInventoriesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "inventories": [{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}]}`)
				}))
			})
			It(`Invoke ListInventories successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListInventories(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := new(schematics20apiv2.ListInventoriesOptions)
				listInventoriesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listInventoriesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInventoriesOptionsModel.Sort = core.StringPtr("testString")
				listInventoriesOptionsModel.Profile = core.StringPtr("ids")
				listInventoriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInventories with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := new(schematics20apiv2.ListInventoriesOptions)
				listInventoriesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listInventoriesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInventoriesOptionsModel.Sort = core.StringPtr("testString")
				listInventoriesOptionsModel.Profile = core.StringPtr("ids")
				listInventoriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInventory(createInventoryOptions *CreateInventoryOptions) - Operation response error`, func() {
		createInventoryPath := "/v2/inventories"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInventoryPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInventory with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the InventoryResourceDefinition model
				inventoryResourceDefinitionModel := new(schematics20apiv2.InventoryResourceDefinition)
				inventoryResourceDefinitionModel.Name = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Description = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Location = core.StringPtr("us-south")
				inventoryResourceDefinitionModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceDefinitionModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceDefinitionModel.ResourceQueries = []string{"testString"}
				inventoryResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := new(schematics20apiv2.CreateInventoryOptions)
				createInventoryOptionsModel.InventoryResourceDefinition = inventoryResourceDefinitionModel
				createInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateInventory(createInventoryOptions *CreateInventoryOptions)`, func() {
		createInventoryPath := "/v2/inventories"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInventoryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke CreateInventory successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the InventoryResourceDefinition model
				inventoryResourceDefinitionModel := new(schematics20apiv2.InventoryResourceDefinition)
				inventoryResourceDefinitionModel.Name = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Description = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Location = core.StringPtr("us-south")
				inventoryResourceDefinitionModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceDefinitionModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceDefinitionModel.ResourceQueries = []string{"testString"}
				inventoryResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := new(schematics20apiv2.CreateInventoryOptions)
				createInventoryOptionsModel.InventoryResourceDefinition = inventoryResourceDefinitionModel
				createInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateInventoryWithContext(ctx, createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateInventoryWithContext(ctx, createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInventoryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke CreateInventory successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateInventory(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InventoryResourceDefinition model
				inventoryResourceDefinitionModel := new(schematics20apiv2.InventoryResourceDefinition)
				inventoryResourceDefinitionModel.Name = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Description = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Location = core.StringPtr("us-south")
				inventoryResourceDefinitionModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceDefinitionModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceDefinitionModel.ResourceQueries = []string{"testString"}
				inventoryResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := new(schematics20apiv2.CreateInventoryOptions)
				createInventoryOptionsModel.InventoryResourceDefinition = inventoryResourceDefinitionModel
				createInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateInventory with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the InventoryResourceDefinition model
				inventoryResourceDefinitionModel := new(schematics20apiv2.InventoryResourceDefinition)
				inventoryResourceDefinitionModel.Name = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Description = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Location = core.StringPtr("us-south")
				inventoryResourceDefinitionModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceDefinitionModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceDefinitionModel.ResourceQueries = []string{"testString"}
				inventoryResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := new(schematics20apiv2.CreateInventoryOptions)
				createInventoryOptionsModel.InventoryResourceDefinition = inventoryResourceDefinitionModel
				createInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInventoryOptions model with no property values
				createInventoryOptionsModelNew := new(schematics20apiv2.CreateInventoryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateInventory(createInventoryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInventory(getInventoryOptions *GetInventoryOptions) - Operation response error`, func() {
		getInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInventory with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetInventoryOptions model
				getInventoryOptionsModel := new(schematics20apiv2.GetInventoryOptions)
				getInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryOptionsModel.Profile = core.StringPtr("summary")
				getInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInventory(getInventoryOptions *GetInventoryOptions)`, func() {
		getInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke GetInventory successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetInventoryOptions model
				getInventoryOptionsModel := new(schematics20apiv2.GetInventoryOptions)
				getInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryOptionsModel.Profile = core.StringPtr("summary")
				getInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetInventoryWithContext(ctx, getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetInventoryWithContext(ctx, getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke GetInventory successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetInventory(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInventoryOptions model
				getInventoryOptionsModel := new(schematics20apiv2.GetInventoryOptions)
				getInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryOptionsModel.Profile = core.StringPtr("summary")
				getInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInventory with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetInventoryOptions model
				getInventoryOptionsModel := new(schematics20apiv2.GetInventoryOptions)
				getInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryOptionsModel.Profile = core.StringPtr("summary")
				getInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInventoryOptions model with no property values
				getInventoryOptionsModelNew := new(schematics20apiv2.GetInventoryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetInventory(getInventoryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceInventory(replaceInventoryOptions *ReplaceInventoryOptions) - Operation response error`, func() {
		replaceInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceInventoryPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceInventory with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the InventoryResourceDefinition model
				inventoryResourceDefinitionModel := new(schematics20apiv2.InventoryResourceDefinition)
				inventoryResourceDefinitionModel.Name = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Description = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Location = core.StringPtr("us-south")
				inventoryResourceDefinitionModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceDefinitionModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceDefinitionModel.ResourceQueries = []string{"testString"}
				inventoryResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceInventoryOptions model
				replaceInventoryOptionsModel := new(schematics20apiv2.ReplaceInventoryOptions)
				replaceInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				replaceInventoryOptionsModel.InventoryResourceDefinition = inventoryResourceDefinitionModel
				replaceInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceInventory(replaceInventoryOptions *ReplaceInventoryOptions)`, func() {
		replaceInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceInventoryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke ReplaceInventory successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the InventoryResourceDefinition model
				inventoryResourceDefinitionModel := new(schematics20apiv2.InventoryResourceDefinition)
				inventoryResourceDefinitionModel.Name = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Description = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Location = core.StringPtr("us-south")
				inventoryResourceDefinitionModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceDefinitionModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceDefinitionModel.ResourceQueries = []string{"testString"}
				inventoryResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceInventoryOptions model
				replaceInventoryOptionsModel := new(schematics20apiv2.ReplaceInventoryOptions)
				replaceInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				replaceInventoryOptionsModel.InventoryResourceDefinition = inventoryResourceDefinitionModel
				replaceInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ReplaceInventoryWithContext(ctx, replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ReplaceInventoryWithContext(ctx, replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceInventoryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke ReplaceInventory successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ReplaceInventory(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InventoryResourceDefinition model
				inventoryResourceDefinitionModel := new(schematics20apiv2.InventoryResourceDefinition)
				inventoryResourceDefinitionModel.Name = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Description = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Location = core.StringPtr("us-south")
				inventoryResourceDefinitionModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceDefinitionModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceDefinitionModel.ResourceQueries = []string{"testString"}
				inventoryResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceInventoryOptions model
				replaceInventoryOptionsModel := new(schematics20apiv2.ReplaceInventoryOptions)
				replaceInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				replaceInventoryOptionsModel.InventoryResourceDefinition = inventoryResourceDefinitionModel
				replaceInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceInventory with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the InventoryResourceDefinition model
				inventoryResourceDefinitionModel := new(schematics20apiv2.InventoryResourceDefinition)
				inventoryResourceDefinitionModel.Name = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Description = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Location = core.StringPtr("us-south")
				inventoryResourceDefinitionModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceDefinitionModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceDefinitionModel.ResourceQueries = []string{"testString"}
				inventoryResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceInventoryOptions model
				replaceInventoryOptionsModel := new(schematics20apiv2.ReplaceInventoryOptions)
				replaceInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				replaceInventoryOptionsModel.InventoryResourceDefinition = inventoryResourceDefinitionModel
				replaceInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceInventoryOptions model with no property values
				replaceInventoryOptionsModelNew := new(schematics20apiv2.ReplaceInventoryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ReplaceInventory(replaceInventoryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteInventory(deleteInventoryOptions *DeleteInventoryOptions)`, func() {
		deleteInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInventoryPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInventory successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteInventory(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInventoryOptions model
				deleteInventoryOptionsModel := new(schematics20apiv2.DeleteInventoryOptions)
				deleteInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				deleteInventoryOptionsModel.Force = core.BoolPtr(true)
				deleteInventoryOptionsModel.Propagate = core.BoolPtr(true)
				deleteInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteInventory(deleteInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInventory with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteInventoryOptions model
				deleteInventoryOptionsModel := new(schematics20apiv2.DeleteInventoryOptions)
				deleteInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				deleteInventoryOptionsModel.Force = core.BoolPtr(true)
				deleteInventoryOptionsModel.Propagate = core.BoolPtr(true)
				deleteInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteInventory(deleteInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInventoryOptions model with no property values
				deleteInventoryOptionsModelNew := new(schematics20apiv2.DeleteInventoryOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteInventory(deleteInventoryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListResourceQuery(listResourceQueryOptions *ListResourceQueryOptions) - Operation response error`, func() {
		listResourceQueryPath := "/v2/resources_query"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceQueryPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListResourceQuery with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := new(schematics20apiv2.ListResourceQueryOptions)
				listResourceQueryOptionsModel.Offset = core.Int64Ptr(int64(0))
				listResourceQueryOptionsModel.Limit = core.Int64Ptr(int64(1))
				listResourceQueryOptionsModel.Sort = core.StringPtr("testString")
				listResourceQueryOptionsModel.Profile = core.StringPtr("ids")
				listResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListResourceQuery(listResourceQueryOptions *ListResourceQueryOptions)`, func() {
		listResourceQueryPath := "/v2/resources_query"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceQueryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "resource_queries": [{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}]}`)
				}))
			})
			It(`Invoke ListResourceQuery successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := new(schematics20apiv2.ListResourceQueryOptions)
				listResourceQueryOptionsModel.Offset = core.Int64Ptr(int64(0))
				listResourceQueryOptionsModel.Limit = core.Int64Ptr(int64(1))
				listResourceQueryOptionsModel.Sort = core.StringPtr("testString")
				listResourceQueryOptionsModel.Profile = core.StringPtr("ids")
				listResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListResourceQueryWithContext(ctx, listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListResourceQueryWithContext(ctx, listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceQueryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "resource_queries": [{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}]}`)
				}))
			})
			It(`Invoke ListResourceQuery successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListResourceQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := new(schematics20apiv2.ListResourceQueryOptions)
				listResourceQueryOptionsModel.Offset = core.Int64Ptr(int64(0))
				listResourceQueryOptionsModel.Limit = core.Int64Ptr(int64(1))
				listResourceQueryOptionsModel.Sort = core.StringPtr("testString")
				listResourceQueryOptionsModel.Profile = core.StringPtr("ids")
				listResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListResourceQuery with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := new(schematics20apiv2.ListResourceQueryOptions)
				listResourceQueryOptionsModel.Offset = core.Int64Ptr(int64(0))
				listResourceQueryOptionsModel.Limit = core.Int64Ptr(int64(1))
				listResourceQueryOptionsModel.Sort = core.StringPtr("testString")
				listResourceQueryOptionsModel.Profile = core.StringPtr("ids")
				listResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateResourceQuery(createResourceQueryOptions *CreateResourceQueryOptions) - Operation response error`, func() {
		createResourceQueryPath := "/v2/resources_query"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateResourceQuery with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematics20apiv2.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				resourceQueryParamModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematics20apiv2.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematics20apiv2.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				resourceQueryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQueryDefinition model
				resourceQueryDefinitionModel := new(schematics20apiv2.ResourceQueryDefinition)
				resourceQueryDefinitionModel.Type = core.StringPtr("vsi")
				resourceQueryDefinitionModel.Name = core.StringPtr("testString")
				resourceQueryDefinitionModel.Queries = []schematics20apiv2.ResourceQuery{*resourceQueryModel}
				resourceQueryDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := new(schematics20apiv2.CreateResourceQueryOptions)
				createResourceQueryOptionsModel.ResourceQueryDefinition = resourceQueryDefinitionModel
				createResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateResourceQuery(createResourceQueryOptions *CreateResourceQueryOptions)`, func() {
		createResourceQueryPath := "/v2/resources_query"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke CreateResourceQuery successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematics20apiv2.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				resourceQueryParamModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematics20apiv2.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematics20apiv2.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				resourceQueryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQueryDefinition model
				resourceQueryDefinitionModel := new(schematics20apiv2.ResourceQueryDefinition)
				resourceQueryDefinitionModel.Type = core.StringPtr("vsi")
				resourceQueryDefinitionModel.Name = core.StringPtr("testString")
				resourceQueryDefinitionModel.Queries = []schematics20apiv2.ResourceQuery{*resourceQueryModel}
				resourceQueryDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := new(schematics20apiv2.CreateResourceQueryOptions)
				createResourceQueryOptionsModel.ResourceQueryDefinition = resourceQueryDefinitionModel
				createResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateResourceQueryWithContext(ctx, createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateResourceQueryWithContext(ctx, createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke CreateResourceQuery successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateResourceQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematics20apiv2.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				resourceQueryParamModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematics20apiv2.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematics20apiv2.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				resourceQueryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQueryDefinition model
				resourceQueryDefinitionModel := new(schematics20apiv2.ResourceQueryDefinition)
				resourceQueryDefinitionModel.Type = core.StringPtr("vsi")
				resourceQueryDefinitionModel.Name = core.StringPtr("testString")
				resourceQueryDefinitionModel.Queries = []schematics20apiv2.ResourceQuery{*resourceQueryModel}
				resourceQueryDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := new(schematics20apiv2.CreateResourceQueryOptions)
				createResourceQueryOptionsModel.ResourceQueryDefinition = resourceQueryDefinitionModel
				createResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateResourceQuery with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematics20apiv2.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				resourceQueryParamModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematics20apiv2.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematics20apiv2.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				resourceQueryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQueryDefinition model
				resourceQueryDefinitionModel := new(schematics20apiv2.ResourceQueryDefinition)
				resourceQueryDefinitionModel.Type = core.StringPtr("vsi")
				resourceQueryDefinitionModel.Name = core.StringPtr("testString")
				resourceQueryDefinitionModel.Queries = []schematics20apiv2.ResourceQuery{*resourceQueryModel}
				resourceQueryDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := new(schematics20apiv2.CreateResourceQueryOptions)
				createResourceQueryOptionsModel.ResourceQueryDefinition = resourceQueryDefinitionModel
				createResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateResourceQueryOptions model with no property values
				createResourceQueryOptionsModelNew := new(schematics20apiv2.CreateResourceQueryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateResourceQuery(createResourceQueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetResourcesQuery(getResourcesQueryOptions *GetResourcesQueryOptions) - Operation response error`, func() {
		getResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getResourcesQueryPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetResourcesQuery with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetResourcesQueryOptions model
				getResourcesQueryOptionsModel := new(schematics20apiv2.GetResourcesQueryOptions)
				getResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				getResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetResourcesQuery(getResourcesQueryOptions *GetResourcesQueryOptions)`, func() {
		getResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getResourcesQueryPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke GetResourcesQuery successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetResourcesQueryOptions model
				getResourcesQueryOptionsModel := new(schematics20apiv2.GetResourcesQueryOptions)
				getResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				getResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetResourcesQueryWithContext(ctx, getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetResourcesQueryWithContext(ctx, getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getResourcesQueryPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke GetResourcesQuery successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetResourcesQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetResourcesQueryOptions model
				getResourcesQueryOptionsModel := new(schematics20apiv2.GetResourcesQueryOptions)
				getResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				getResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetResourcesQuery with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetResourcesQueryOptions model
				getResourcesQueryOptionsModel := new(schematics20apiv2.GetResourcesQueryOptions)
				getResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				getResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetResourcesQueryOptions model with no property values
				getResourcesQueryOptionsModelNew := new(schematics20apiv2.GetResourcesQueryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetResourcesQuery(getResourcesQueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceResourcesQuery(replaceResourcesQueryOptions *ReplaceResourcesQueryOptions) - Operation response error`, func() {
		replaceResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceResourcesQueryPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceResourcesQuery with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematics20apiv2.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				resourceQueryParamModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematics20apiv2.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematics20apiv2.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				resourceQueryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQueryDefinition model
				resourceQueryDefinitionModel := new(schematics20apiv2.ResourceQueryDefinition)
				resourceQueryDefinitionModel.Type = core.StringPtr("vsi")
				resourceQueryDefinitionModel.Name = core.StringPtr("testString")
				resourceQueryDefinitionModel.Queries = []schematics20apiv2.ResourceQuery{*resourceQueryModel}
				resourceQueryDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceResourcesQueryOptions model
				replaceResourcesQueryOptionsModel := new(schematics20apiv2.ReplaceResourcesQueryOptions)
				replaceResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.ResourceQueryDefinition = resourceQueryDefinitionModel
				replaceResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceResourcesQuery(replaceResourcesQueryOptions *ReplaceResourcesQueryOptions)`, func() {
		replaceResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceResourcesQueryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke ReplaceResourcesQuery successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematics20apiv2.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				resourceQueryParamModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematics20apiv2.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematics20apiv2.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				resourceQueryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQueryDefinition model
				resourceQueryDefinitionModel := new(schematics20apiv2.ResourceQueryDefinition)
				resourceQueryDefinitionModel.Type = core.StringPtr("vsi")
				resourceQueryDefinitionModel.Name = core.StringPtr("testString")
				resourceQueryDefinitionModel.Queries = []schematics20apiv2.ResourceQuery{*resourceQueryModel}
				resourceQueryDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceResourcesQueryOptions model
				replaceResourcesQueryOptionsModel := new(schematics20apiv2.ReplaceResourcesQueryOptions)
				replaceResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.ResourceQueryDefinition = resourceQueryDefinitionModel
				replaceResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ReplaceResourcesQueryWithContext(ctx, replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ReplaceResourcesQueryWithContext(ctx, replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceResourcesQueryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke ReplaceResourcesQuery successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ReplaceResourcesQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematics20apiv2.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				resourceQueryParamModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematics20apiv2.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematics20apiv2.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				resourceQueryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQueryDefinition model
				resourceQueryDefinitionModel := new(schematics20apiv2.ResourceQueryDefinition)
				resourceQueryDefinitionModel.Type = core.StringPtr("vsi")
				resourceQueryDefinitionModel.Name = core.StringPtr("testString")
				resourceQueryDefinitionModel.Queries = []schematics20apiv2.ResourceQuery{*resourceQueryModel}
				resourceQueryDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceResourcesQueryOptions model
				replaceResourcesQueryOptionsModel := new(schematics20apiv2.ReplaceResourcesQueryOptions)
				replaceResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.ResourceQueryDefinition = resourceQueryDefinitionModel
				replaceResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceResourcesQuery with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematics20apiv2.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				resourceQueryParamModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematics20apiv2.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematics20apiv2.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				resourceQueryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ResourceQueryDefinition model
				resourceQueryDefinitionModel := new(schematics20apiv2.ResourceQueryDefinition)
				resourceQueryDefinitionModel.Type = core.StringPtr("vsi")
				resourceQueryDefinitionModel.Name = core.StringPtr("testString")
				resourceQueryDefinitionModel.Queries = []schematics20apiv2.ResourceQuery{*resourceQueryModel}
				resourceQueryDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceResourcesQueryOptions model
				replaceResourcesQueryOptionsModel := new(schematics20apiv2.ReplaceResourcesQueryOptions)
				replaceResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.ResourceQueryDefinition = resourceQueryDefinitionModel
				replaceResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceResourcesQueryOptions model with no property values
				replaceResourcesQueryOptionsModelNew := new(schematics20apiv2.ReplaceResourcesQueryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ExecuteResourceQuery(executeResourceQueryOptions *ExecuteResourceQueryOptions) - Operation response error`, func() {
		executeResourceQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(executeResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ExecuteResourceQuery with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ExecuteResourceQueryOptions model
				executeResourceQueryOptionsModel := new(schematics20apiv2.ExecuteResourceQueryOptions)
				executeResourceQueryOptionsModel.QueryID = core.StringPtr("testString")
				executeResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ExecuteResourceQuery(executeResourceQueryOptions *ExecuteResourceQueryOptions)`, func() {
		executeResourceQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(executeResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"response": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"], "query_output": [{"name": "Name", "value": "Value"}]}]}`)
				}))
			})
			It(`Invoke ExecuteResourceQuery successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ExecuteResourceQueryOptions model
				executeResourceQueryOptionsModel := new(schematics20apiv2.ExecuteResourceQueryOptions)
				executeResourceQueryOptionsModel.QueryID = core.StringPtr("testString")
				executeResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ExecuteResourceQueryWithContext(ctx, executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ExecuteResourceQueryWithContext(ctx, executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(executeResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"response": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"], "query_output": [{"name": "Name", "value": "Value"}]}]}`)
				}))
			})
			It(`Invoke ExecuteResourceQuery successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ExecuteResourceQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ExecuteResourceQueryOptions model
				executeResourceQueryOptionsModel := new(schematics20apiv2.ExecuteResourceQueryOptions)
				executeResourceQueryOptionsModel.QueryID = core.StringPtr("testString")
				executeResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ExecuteResourceQuery with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ExecuteResourceQueryOptions model
				executeResourceQueryOptionsModel := new(schematics20apiv2.ExecuteResourceQueryOptions)
				executeResourceQueryOptionsModel.QueryID = core.StringPtr("testString")
				executeResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ExecuteResourceQueryOptions model with no property values
				executeResourceQueryOptionsModelNew := new(schematics20apiv2.ExecuteResourceQueryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ExecuteResourceQuery(executeResourceQueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteResourcesQuery(deleteResourcesQueryOptions *DeleteResourcesQueryOptions)`, func() {
		deleteResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteResourcesQueryPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteResourcesQuery successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteResourcesQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteResourcesQueryOptions model
				deleteResourcesQueryOptionsModel := new(schematics20apiv2.DeleteResourcesQueryOptions)
				deleteResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				deleteResourcesQueryOptionsModel.Force = core.BoolPtr(true)
				deleteResourcesQueryOptionsModel.Propagate = core.BoolPtr(true)
				deleteResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteResourcesQuery(deleteResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteResourcesQuery with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteResourcesQueryOptions model
				deleteResourcesQueryOptionsModel := new(schematics20apiv2.DeleteResourcesQueryOptions)
				deleteResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				deleteResourcesQueryOptionsModel.Force = core.BoolPtr(true)
				deleteResourcesQueryOptionsModel.Propagate = core.BoolPtr(true)
				deleteResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteResourcesQuery(deleteResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteResourcesQueryOptions model with no property values
				deleteResourcesQueryOptionsModelNew := new(schematics20apiv2.DeleteResourcesQueryOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteResourcesQuery(deleteResourcesQueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListAgent(listAgentOptions *ListAgentOptions) - Operation response error`, func() {
		listAgentPath := "/v2/settings/agents"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAgentPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListAgent with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListAgentOptions model
				listAgentOptionsModel := new(schematics20apiv2.ListAgentOptions)
				listAgentOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentOptionsModel.Limit = core.Int64Ptr(int64(1))
				listAgentOptionsModel.Profile = core.StringPtr("summary")
				listAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListAgent(listAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListAgent(listAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListAgent(listAgentOptions *ListAgentOptions)`, func() {
		listAgentPath := "/v2/settings/agents"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAgentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "agents": [{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "profile_id": "ProfileID", "agent_id": "AgentID", "crn": "Crn", "account": "Account", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_health": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}]}`)
				}))
			})
			It(`Invoke ListAgent successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListAgentOptions model
				listAgentOptionsModel := new(schematics20apiv2.ListAgentOptions)
				listAgentOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentOptionsModel.Limit = core.Int64Ptr(int64(1))
				listAgentOptionsModel.Profile = core.StringPtr("summary")
				listAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListAgentWithContext(ctx, listAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListAgent(listAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListAgentWithContext(ctx, listAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAgentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "agents": [{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "profile_id": "ProfileID", "agent_id": "AgentID", "crn": "Crn", "account": "Account", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_health": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}]}`)
				}))
			})
			It(`Invoke ListAgent successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListAgent(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListAgentOptions model
				listAgentOptionsModel := new(schematics20apiv2.ListAgentOptions)
				listAgentOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentOptionsModel.Limit = core.Int64Ptr(int64(1))
				listAgentOptionsModel.Profile = core.StringPtr("summary")
				listAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListAgent(listAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListAgent with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListAgentOptions model
				listAgentOptionsModel := new(schematics20apiv2.ListAgentOptions)
				listAgentOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentOptionsModel.Limit = core.Int64Ptr(int64(1))
				listAgentOptionsModel.Profile = core.StringPtr("summary")
				listAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListAgent(listAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RegisterAgent(registerAgentOptions *RegisterAgentOptions) - Operation response error`, func() {
		registerAgentPath := "/v2/settings/agents"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerAgentPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke RegisterAgent with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentHealth model
				agentHealthModel := new(schematics20apiv2.AgentHealth)
				agentHealthModel.State = core.StringPtr("Connected")
				agentHealthModel.CheckedAt = CreateMockDateTime()
				agentHealthModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentSystemState model
				agentSystemStateModel := new(schematics20apiv2.AgentSystemState)
				agentSystemStateModel.State = core.StringPtr("error")
				agentSystemStateModel.Message = core.StringPtr("testString")
				agentSystemStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Agent model
				agentModel := new(schematics20apiv2.Agent)
				agentModel.Name = core.StringPtr("MyDevAgent")
				agentModel.Description = core.StringPtr("Register agent")
				agentModel.ResourceGroup = core.StringPtr("testString")
				agentModel.Tags = []string{"testString"}
				agentModel.Location = core.StringPtr("us-south")
				agentModel.ProfileID = core.StringPtr("testString")
				agentModel.AgentID = core.StringPtr("testString")
				agentModel.UserState = userStateModel
				agentModel.AgentHealth = agentHealthModel
				agentModel.SystemState = agentSystemStateModel
				agentModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the RegisterAgentOptions model
				registerAgentOptionsModel := new(schematics20apiv2.RegisterAgentOptions)
				registerAgentOptionsModel.Agent = agentModel
				registerAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.RegisterAgent(registerAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.RegisterAgent(registerAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RegisterAgent(registerAgentOptions *RegisterAgentOptions)`, func() {
		registerAgentPath := "/v2/settings/agents"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerAgentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "profile_id": "ProfileID", "agent_id": "AgentID", "crn": "Crn", "account": "Account", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_health": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}`)
				}))
			})
			It(`Invoke RegisterAgent successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentHealth model
				agentHealthModel := new(schematics20apiv2.AgentHealth)
				agentHealthModel.State = core.StringPtr("Connected")
				agentHealthModel.CheckedAt = CreateMockDateTime()
				agentHealthModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentSystemState model
				agentSystemStateModel := new(schematics20apiv2.AgentSystemState)
				agentSystemStateModel.State = core.StringPtr("error")
				agentSystemStateModel.Message = core.StringPtr("testString")
				agentSystemStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Agent model
				agentModel := new(schematics20apiv2.Agent)
				agentModel.Name = core.StringPtr("MyDevAgent")
				agentModel.Description = core.StringPtr("Register agent")
				agentModel.ResourceGroup = core.StringPtr("testString")
				agentModel.Tags = []string{"testString"}
				agentModel.Location = core.StringPtr("us-south")
				agentModel.ProfileID = core.StringPtr("testString")
				agentModel.AgentID = core.StringPtr("testString")
				agentModel.UserState = userStateModel
				agentModel.AgentHealth = agentHealthModel
				agentModel.SystemState = agentSystemStateModel
				agentModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the RegisterAgentOptions model
				registerAgentOptionsModel := new(schematics20apiv2.RegisterAgentOptions)
				registerAgentOptionsModel.Agent = agentModel
				registerAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.RegisterAgentWithContext(ctx, registerAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.RegisterAgent(registerAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.RegisterAgentWithContext(ctx, registerAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerAgentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "profile_id": "ProfileID", "agent_id": "AgentID", "crn": "Crn", "account": "Account", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_health": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}`)
				}))
			})
			It(`Invoke RegisterAgent successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.RegisterAgent(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentHealth model
				agentHealthModel := new(schematics20apiv2.AgentHealth)
				agentHealthModel.State = core.StringPtr("Connected")
				agentHealthModel.CheckedAt = CreateMockDateTime()
				agentHealthModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentSystemState model
				agentSystemStateModel := new(schematics20apiv2.AgentSystemState)
				agentSystemStateModel.State = core.StringPtr("error")
				agentSystemStateModel.Message = core.StringPtr("testString")
				agentSystemStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Agent model
				agentModel := new(schematics20apiv2.Agent)
				agentModel.Name = core.StringPtr("MyDevAgent")
				agentModel.Description = core.StringPtr("Register agent")
				agentModel.ResourceGroup = core.StringPtr("testString")
				agentModel.Tags = []string{"testString"}
				agentModel.Location = core.StringPtr("us-south")
				agentModel.ProfileID = core.StringPtr("testString")
				agentModel.AgentID = core.StringPtr("testString")
				agentModel.UserState = userStateModel
				agentModel.AgentHealth = agentHealthModel
				agentModel.SystemState = agentSystemStateModel
				agentModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the RegisterAgentOptions model
				registerAgentOptionsModel := new(schematics20apiv2.RegisterAgentOptions)
				registerAgentOptionsModel.Agent = agentModel
				registerAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.RegisterAgent(registerAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke RegisterAgent with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentHealth model
				agentHealthModel := new(schematics20apiv2.AgentHealth)
				agentHealthModel.State = core.StringPtr("Connected")
				agentHealthModel.CheckedAt = CreateMockDateTime()
				agentHealthModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentSystemState model
				agentSystemStateModel := new(schematics20apiv2.AgentSystemState)
				agentSystemStateModel.State = core.StringPtr("error")
				agentSystemStateModel.Message = core.StringPtr("testString")
				agentSystemStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Agent model
				agentModel := new(schematics20apiv2.Agent)
				agentModel.Name = core.StringPtr("MyDevAgent")
				agentModel.Description = core.StringPtr("Register agent")
				agentModel.ResourceGroup = core.StringPtr("testString")
				agentModel.Tags = []string{"testString"}
				agentModel.Location = core.StringPtr("us-south")
				agentModel.ProfileID = core.StringPtr("testString")
				agentModel.AgentID = core.StringPtr("testString")
				agentModel.UserState = userStateModel
				agentModel.AgentHealth = agentHealthModel
				agentModel.SystemState = agentSystemStateModel
				agentModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the RegisterAgentOptions model
				registerAgentOptionsModel := new(schematics20apiv2.RegisterAgentOptions)
				registerAgentOptionsModel.Agent = agentModel
				registerAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.RegisterAgent(registerAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the RegisterAgentOptions model with no property values
				registerAgentOptionsModelNew := new(schematics20apiv2.RegisterAgentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.RegisterAgent(registerAgentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAgent(getAgentOptions *GetAgentOptions) - Operation response error`, func() {
		getAgentPath := "/v2/settings/agents/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAgentPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAgent with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetAgentOptions model
				getAgentOptionsModel := new(schematics20apiv2.GetAgentOptions)
				getAgentOptionsModel.AgentID = core.StringPtr("testString")
				getAgentOptionsModel.Profile = core.StringPtr("summary")
				getAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetAgent(getAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetAgent(getAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetAgent(getAgentOptions *GetAgentOptions)`, func() {
		getAgentPath := "/v2/settings/agents/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAgentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "profile_id": "ProfileID", "agent_id": "AgentID", "crn": "Crn", "account": "Account", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_health": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}`)
				}))
			})
			It(`Invoke GetAgent successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetAgentOptions model
				getAgentOptionsModel := new(schematics20apiv2.GetAgentOptions)
				getAgentOptionsModel.AgentID = core.StringPtr("testString")
				getAgentOptionsModel.Profile = core.StringPtr("summary")
				getAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetAgentWithContext(ctx, getAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetAgent(getAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetAgentWithContext(ctx, getAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAgentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "profile_id": "ProfileID", "agent_id": "AgentID", "crn": "Crn", "account": "Account", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_health": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}`)
				}))
			})
			It(`Invoke GetAgent successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetAgent(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAgentOptions model
				getAgentOptionsModel := new(schematics20apiv2.GetAgentOptions)
				getAgentOptionsModel.AgentID = core.StringPtr("testString")
				getAgentOptionsModel.Profile = core.StringPtr("summary")
				getAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetAgent(getAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAgent with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetAgentOptions model
				getAgentOptionsModel := new(schematics20apiv2.GetAgentOptions)
				getAgentOptionsModel.AgentID = core.StringPtr("testString")
				getAgentOptionsModel.Profile = core.StringPtr("summary")
				getAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetAgent(getAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetAgentOptions model with no property values
				getAgentOptionsModelNew := new(schematics20apiv2.GetAgentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetAgent(getAgentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteAgent(deleteAgentOptions *DeleteAgentOptions)`, func() {
		deleteAgentPath := "/v2/settings/agents/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteAgentPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteAgent successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteAgent(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteAgentOptions model
				deleteAgentOptionsModel := new(schematics20apiv2.DeleteAgentOptions)
				deleteAgentOptionsModel.AgentID = core.StringPtr("testString")
				deleteAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteAgent(deleteAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteAgent with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteAgentOptions model
				deleteAgentOptionsModel := new(schematics20apiv2.DeleteAgentOptions)
				deleteAgentOptionsModel.AgentID = core.StringPtr("testString")
				deleteAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteAgent(deleteAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteAgentOptions model with no property values
				deleteAgentOptionsModelNew := new(schematics20apiv2.DeleteAgentOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteAgent(deleteAgentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAgentRegistration(updateAgentRegistrationOptions *UpdateAgentRegistrationOptions) - Operation response error`, func() {
		updateAgentRegistrationPath := "/v2/settings/agents/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAgentRegistrationPath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateAgentRegistration with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentHealth model
				agentHealthModel := new(schematics20apiv2.AgentHealth)
				agentHealthModel.State = core.StringPtr("Connected")
				agentHealthModel.CheckedAt = CreateMockDateTime()
				agentHealthModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentSystemState model
				agentSystemStateModel := new(schematics20apiv2.AgentSystemState)
				agentSystemStateModel.State = core.StringPtr("error")
				agentSystemStateModel.Message = core.StringPtr("testString")
				agentSystemStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Agent model
				agentModel := new(schematics20apiv2.Agent)
				agentModel.Name = core.StringPtr("MyDevAgent")
				agentModel.Description = core.StringPtr("Register agent")
				agentModel.ResourceGroup = core.StringPtr("testString")
				agentModel.Tags = []string{"testString"}
				agentModel.Location = core.StringPtr("us-south")
				agentModel.ProfileID = core.StringPtr("testString")
				agentModel.AgentID = core.StringPtr("testString")
				agentModel.UserState = userStateModel
				agentModel.AgentHealth = agentHealthModel
				agentModel.SystemState = agentSystemStateModel
				agentModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateAgentRegistrationOptions model
				updateAgentRegistrationOptionsModel := new(schematics20apiv2.UpdateAgentRegistrationOptions)
				updateAgentRegistrationOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Agent = agentModel
				updateAgentRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UpdateAgentRegistration(updateAgentRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UpdateAgentRegistration(updateAgentRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateAgentRegistration(updateAgentRegistrationOptions *UpdateAgentRegistrationOptions)`, func() {
		updateAgentRegistrationPath := "/v2/settings/agents/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAgentRegistrationPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "profile_id": "ProfileID", "agent_id": "AgentID", "crn": "Crn", "account": "Account", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_health": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}`)
				}))
			})
			It(`Invoke UpdateAgentRegistration successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentHealth model
				agentHealthModel := new(schematics20apiv2.AgentHealth)
				agentHealthModel.State = core.StringPtr("Connected")
				agentHealthModel.CheckedAt = CreateMockDateTime()
				agentHealthModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentSystemState model
				agentSystemStateModel := new(schematics20apiv2.AgentSystemState)
				agentSystemStateModel.State = core.StringPtr("error")
				agentSystemStateModel.Message = core.StringPtr("testString")
				agentSystemStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Agent model
				agentModel := new(schematics20apiv2.Agent)
				agentModel.Name = core.StringPtr("MyDevAgent")
				agentModel.Description = core.StringPtr("Register agent")
				agentModel.ResourceGroup = core.StringPtr("testString")
				agentModel.Tags = []string{"testString"}
				agentModel.Location = core.StringPtr("us-south")
				agentModel.ProfileID = core.StringPtr("testString")
				agentModel.AgentID = core.StringPtr("testString")
				agentModel.UserState = userStateModel
				agentModel.AgentHealth = agentHealthModel
				agentModel.SystemState = agentSystemStateModel
				agentModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateAgentRegistrationOptions model
				updateAgentRegistrationOptionsModel := new(schematics20apiv2.UpdateAgentRegistrationOptions)
				updateAgentRegistrationOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Agent = agentModel
				updateAgentRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UpdateAgentRegistrationWithContext(ctx, updateAgentRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UpdateAgentRegistration(updateAgentRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UpdateAgentRegistrationWithContext(ctx, updateAgentRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAgentRegistrationPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "profile_id": "ProfileID", "agent_id": "AgentID", "crn": "Crn", "account": "Account", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_health": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}`)
				}))
			})
			It(`Invoke UpdateAgentRegistration successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UpdateAgentRegistration(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentHealth model
				agentHealthModel := new(schematics20apiv2.AgentHealth)
				agentHealthModel.State = core.StringPtr("Connected")
				agentHealthModel.CheckedAt = CreateMockDateTime()
				agentHealthModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentSystemState model
				agentSystemStateModel := new(schematics20apiv2.AgentSystemState)
				agentSystemStateModel.State = core.StringPtr("error")
				agentSystemStateModel.Message = core.StringPtr("testString")
				agentSystemStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Agent model
				agentModel := new(schematics20apiv2.Agent)
				agentModel.Name = core.StringPtr("MyDevAgent")
				agentModel.Description = core.StringPtr("Register agent")
				agentModel.ResourceGroup = core.StringPtr("testString")
				agentModel.Tags = []string{"testString"}
				agentModel.Location = core.StringPtr("us-south")
				agentModel.ProfileID = core.StringPtr("testString")
				agentModel.AgentID = core.StringPtr("testString")
				agentModel.UserState = userStateModel
				agentModel.AgentHealth = agentHealthModel
				agentModel.SystemState = agentSystemStateModel
				agentModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateAgentRegistrationOptions model
				updateAgentRegistrationOptionsModel := new(schematics20apiv2.UpdateAgentRegistrationOptions)
				updateAgentRegistrationOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Agent = agentModel
				updateAgentRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UpdateAgentRegistration(updateAgentRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateAgentRegistration with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentHealth model
				agentHealthModel := new(schematics20apiv2.AgentHealth)
				agentHealthModel.State = core.StringPtr("Connected")
				agentHealthModel.CheckedAt = CreateMockDateTime()
				agentHealthModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the AgentSystemState model
				agentSystemStateModel := new(schematics20apiv2.AgentSystemState)
				agentSystemStateModel.State = core.StringPtr("error")
				agentSystemStateModel.Message = core.StringPtr("testString")
				agentSystemStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Agent model
				agentModel := new(schematics20apiv2.Agent)
				agentModel.Name = core.StringPtr("MyDevAgent")
				agentModel.Description = core.StringPtr("Register agent")
				agentModel.ResourceGroup = core.StringPtr("testString")
				agentModel.Tags = []string{"testString"}
				agentModel.Location = core.StringPtr("us-south")
				agentModel.ProfileID = core.StringPtr("testString")
				agentModel.AgentID = core.StringPtr("testString")
				agentModel.UserState = userStateModel
				agentModel.AgentHealth = agentHealthModel
				agentModel.SystemState = agentSystemStateModel
				agentModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateAgentRegistrationOptions model
				updateAgentRegistrationOptionsModel := new(schematics20apiv2.UpdateAgentRegistrationOptions)
				updateAgentRegistrationOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Agent = agentModel
				updateAgentRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UpdateAgentRegistration(updateAgentRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateAgentRegistrationOptions model with no property values
				updateAgentRegistrationOptionsModelNew := new(schematics20apiv2.UpdateAgentRegistrationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UpdateAgentRegistration(updateAgentRegistrationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetDatasetVariableValue(getDatasetVariableValueOptions *GetDatasetVariableValueOptions) - Operation response error`, func() {
		getDatasetVariableValuePath := "/v2/datasets/testString/values/testString/value"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatasetVariableValuePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDatasetVariableValue with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetDatasetVariableValueOptions model
				getDatasetVariableValueOptionsModel := new(schematics20apiv2.GetDatasetVariableValueOptions)
				getDatasetVariableValueOptionsModel.DatasetID = core.StringPtr("testString")
				getDatasetVariableValueOptionsModel.VarName = core.StringPtr("testString")
				getDatasetVariableValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetDatasetVariableValue(getDatasetVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetDatasetVariableValue(getDatasetVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetDatasetVariableValue(getDatasetVariableValueOptions *GetDatasetVariableValueOptions)`, func() {
		getDatasetVariableValuePath := "/v2/datasets/testString/values/testString/value"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatasetVariableValuePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetDatasetVariableValue successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetDatasetVariableValueOptions model
				getDatasetVariableValueOptionsModel := new(schematics20apiv2.GetDatasetVariableValueOptions)
				getDatasetVariableValueOptionsModel.DatasetID = core.StringPtr("testString")
				getDatasetVariableValueOptionsModel.VarName = core.StringPtr("testString")
				getDatasetVariableValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetDatasetVariableValueWithContext(ctx, getDatasetVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetDatasetVariableValue(getDatasetVariableValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetDatasetVariableValueWithContext(ctx, getDatasetVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDatasetVariableValuePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetDatasetVariableValue successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetDatasetVariableValue(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDatasetVariableValueOptions model
				getDatasetVariableValueOptionsModel := new(schematics20apiv2.GetDatasetVariableValueOptions)
				getDatasetVariableValueOptionsModel.DatasetID = core.StringPtr("testString")
				getDatasetVariableValueOptionsModel.VarName = core.StringPtr("testString")
				getDatasetVariableValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetDatasetVariableValue(getDatasetVariableValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDatasetVariableValue with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetDatasetVariableValueOptions model
				getDatasetVariableValueOptionsModel := new(schematics20apiv2.GetDatasetVariableValueOptions)
				getDatasetVariableValueOptionsModel.DatasetID = core.StringPtr("testString")
				getDatasetVariableValueOptionsModel.VarName = core.StringPtr("testString")
				getDatasetVariableValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetDatasetVariableValue(getDatasetVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDatasetVariableValueOptions model with no property values
				getDatasetVariableValueOptionsModelNew := new(schematics20apiv2.GetDatasetVariableValueOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetDatasetVariableValue(getDatasetVariableValueOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCredentialVariableValue(getCredentialVariableValueOptions *GetCredentialVariableValueOptions) - Operation response error`, func() {
		getCredentialVariableValuePath := "/v2/credentials/testString/variables/testString/value"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCredentialVariableValuePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCredentialVariableValue with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCredentialVariableValueOptions model
				getCredentialVariableValueOptionsModel := new(schematics20apiv2.GetCredentialVariableValueOptions)
				getCredentialVariableValueOptionsModel.CredsID = core.StringPtr("testString")
				getCredentialVariableValueOptionsModel.VarName = core.StringPtr("testString")
				getCredentialVariableValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetCredentialVariableValue(getCredentialVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetCredentialVariableValue(getCredentialVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetCredentialVariableValue(getCredentialVariableValueOptions *GetCredentialVariableValueOptions)`, func() {
		getCredentialVariableValuePath := "/v2/credentials/testString/variables/testString/value"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCredentialVariableValuePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetCredentialVariableValue successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetCredentialVariableValueOptions model
				getCredentialVariableValueOptionsModel := new(schematics20apiv2.GetCredentialVariableValueOptions)
				getCredentialVariableValueOptionsModel.CredsID = core.StringPtr("testString")
				getCredentialVariableValueOptionsModel.VarName = core.StringPtr("testString")
				getCredentialVariableValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetCredentialVariableValueWithContext(ctx, getCredentialVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetCredentialVariableValue(getCredentialVariableValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetCredentialVariableValueWithContext(ctx, getCredentialVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCredentialVariableValuePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetCredentialVariableValue successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetCredentialVariableValue(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCredentialVariableValueOptions model
				getCredentialVariableValueOptionsModel := new(schematics20apiv2.GetCredentialVariableValueOptions)
				getCredentialVariableValueOptionsModel.CredsID = core.StringPtr("testString")
				getCredentialVariableValueOptionsModel.VarName = core.StringPtr("testString")
				getCredentialVariableValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetCredentialVariableValue(getCredentialVariableValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCredentialVariableValue with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCredentialVariableValueOptions model
				getCredentialVariableValueOptionsModel := new(schematics20apiv2.GetCredentialVariableValueOptions)
				getCredentialVariableValueOptionsModel.CredsID = core.StringPtr("testString")
				getCredentialVariableValueOptionsModel.VarName = core.StringPtr("testString")
				getCredentialVariableValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetCredentialVariableValue(getCredentialVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCredentialVariableValueOptions model with no property values
				getCredentialVariableValueOptionsModelNew := new(schematics20apiv2.GetCredentialVariableValueOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetCredentialVariableValue(getCredentialVariableValueOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInventoryVariableValue(getInventoryVariableValueOptions *GetInventoryVariableValueOptions) - Operation response error`, func() {
		getInventoryVariableValuePath := "/v2/inventories/testString/variables/testString/value"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryVariableValuePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInventoryVariableValue with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetInventoryVariableValueOptions model
				getInventoryVariableValueOptionsModel := new(schematics20apiv2.GetInventoryVariableValueOptions)
				getInventoryVariableValueOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryVariableValueOptionsModel.VarName = core.StringPtr("testString")
				getInventoryVariableValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetInventoryVariableValue(getInventoryVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetInventoryVariableValue(getInventoryVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetInventoryVariableValue(getInventoryVariableValueOptions *GetInventoryVariableValueOptions)`, func() {
		getInventoryVariableValuePath := "/v2/inventories/testString/variables/testString/value"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryVariableValuePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"values": ["Values"]}`)
				}))
			})
			It(`Invoke GetInventoryVariableValue successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetInventoryVariableValueOptions model
				getInventoryVariableValueOptionsModel := new(schematics20apiv2.GetInventoryVariableValueOptions)
				getInventoryVariableValueOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryVariableValueOptionsModel.VarName = core.StringPtr("testString")
				getInventoryVariableValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetInventoryVariableValueWithContext(ctx, getInventoryVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetInventoryVariableValue(getInventoryVariableValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetInventoryVariableValueWithContext(ctx, getInventoryVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryVariableValuePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"values": ["Values"]}`)
				}))
			})
			It(`Invoke GetInventoryVariableValue successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetInventoryVariableValue(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInventoryVariableValueOptions model
				getInventoryVariableValueOptionsModel := new(schematics20apiv2.GetInventoryVariableValueOptions)
				getInventoryVariableValueOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryVariableValueOptionsModel.VarName = core.StringPtr("testString")
				getInventoryVariableValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetInventoryVariableValue(getInventoryVariableValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInventoryVariableValue with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetInventoryVariableValueOptions model
				getInventoryVariableValueOptionsModel := new(schematics20apiv2.GetInventoryVariableValueOptions)
				getInventoryVariableValueOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryVariableValueOptionsModel.VarName = core.StringPtr("testString")
				getInventoryVariableValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetInventoryVariableValue(getInventoryVariableValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInventoryVariableValueOptions model with no property values
				getInventoryVariableValueOptionsModelNew := new(schematics20apiv2.GetInventoryVariableValueOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetInventoryVariableValue(getInventoryVariableValueOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceInputValue(getWorkspaceInputValueOptions *GetWorkspaceInputValueOptions) - Operation response error`, func() {
		getWorkspaceInputValuePath := "/v2/workspaces/testString/inputs/testString/value"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceInputValuePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceInputValue with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceInputValueOptions model
				getWorkspaceInputValueOptionsModel := new(schematics20apiv2.GetWorkspaceInputValueOptions)
				getWorkspaceInputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceInputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceInputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceInputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetWorkspaceInputValue(getWorkspaceInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetWorkspaceInputValue(getWorkspaceInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceInputValue(getWorkspaceInputValueOptions *GetWorkspaceInputValueOptions)`, func() {
		getWorkspaceInputValuePath := "/v2/workspaces/testString/inputs/testString/value"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceInputValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetWorkspaceInputValue successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceInputValueOptions model
				getWorkspaceInputValueOptionsModel := new(schematics20apiv2.GetWorkspaceInputValueOptions)
				getWorkspaceInputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceInputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceInputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceInputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetWorkspaceInputValueWithContext(ctx, getWorkspaceInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetWorkspaceInputValue(getWorkspaceInputValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetWorkspaceInputValueWithContext(ctx, getWorkspaceInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceInputValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetWorkspaceInputValue successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetWorkspaceInputValue(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceInputValueOptions model
				getWorkspaceInputValueOptionsModel := new(schematics20apiv2.GetWorkspaceInputValueOptions)
				getWorkspaceInputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceInputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceInputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceInputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetWorkspaceInputValue(getWorkspaceInputValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceInputValue with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceInputValueOptions model
				getWorkspaceInputValueOptionsModel := new(schematics20apiv2.GetWorkspaceInputValueOptions)
				getWorkspaceInputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceInputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceInputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceInputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetWorkspaceInputValue(getWorkspaceInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceInputValueOptions model with no property values
				getWorkspaceInputValueOptionsModelNew := new(schematics20apiv2.GetWorkspaceInputValueOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetWorkspaceInputValue(getWorkspaceInputValueOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceOutputValue(getWorkspaceOutputValueOptions *GetWorkspaceOutputValueOptions) - Operation response error`, func() {
		getWorkspaceOutputValuePath := "/v2/workspaces/testString/outputs/testString/value"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceOutputValuePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceOutputValue with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOutputValueOptions model
				getWorkspaceOutputValueOptionsModel := new(schematics20apiv2.GetWorkspaceOutputValueOptions)
				getWorkspaceOutputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOutputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceOutputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceOutputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceOutputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetWorkspaceOutputValue(getWorkspaceOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetWorkspaceOutputValue(getWorkspaceOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceOutputValue(getWorkspaceOutputValueOptions *GetWorkspaceOutputValueOptions)`, func() {
		getWorkspaceOutputValuePath := "/v2/workspaces/testString/outputs/testString/value"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceOutputValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetWorkspaceOutputValue successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceOutputValueOptions model
				getWorkspaceOutputValueOptionsModel := new(schematics20apiv2.GetWorkspaceOutputValueOptions)
				getWorkspaceOutputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOutputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceOutputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceOutputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceOutputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetWorkspaceOutputValueWithContext(ctx, getWorkspaceOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetWorkspaceOutputValue(getWorkspaceOutputValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetWorkspaceOutputValueWithContext(ctx, getWorkspaceOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceOutputValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetWorkspaceOutputValue successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetWorkspaceOutputValue(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceOutputValueOptions model
				getWorkspaceOutputValueOptionsModel := new(schematics20apiv2.GetWorkspaceOutputValueOptions)
				getWorkspaceOutputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOutputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceOutputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceOutputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceOutputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetWorkspaceOutputValue(getWorkspaceOutputValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceOutputValue with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOutputValueOptions model
				getWorkspaceOutputValueOptionsModel := new(schematics20apiv2.GetWorkspaceOutputValueOptions)
				getWorkspaceOutputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOutputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceOutputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceOutputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceOutputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetWorkspaceOutputValue(getWorkspaceOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceOutputValueOptions model with no property values
				getWorkspaceOutputValueOptionsModelNew := new(schematics20apiv2.GetWorkspaceOutputValueOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetWorkspaceOutputValue(getWorkspaceOutputValueOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceSettingsValue(getWorkspaceSettingsValueOptions *GetWorkspaceSettingsValueOptions) - Operation response error`, func() {
		getWorkspaceSettingsValuePath := "/v2/workspaces/testString/settings/testString/value"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceSettingsValuePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceSettingsValue with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceSettingsValueOptions model
				getWorkspaceSettingsValueOptionsModel := new(schematics20apiv2.GetWorkspaceSettingsValueOptions)
				getWorkspaceSettingsValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceSettingsValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceSettingsValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceSettingsValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceSettingsValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetWorkspaceSettingsValue(getWorkspaceSettingsValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetWorkspaceSettingsValue(getWorkspaceSettingsValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceSettingsValue(getWorkspaceSettingsValueOptions *GetWorkspaceSettingsValueOptions)`, func() {
		getWorkspaceSettingsValuePath := "/v2/workspaces/testString/settings/testString/value"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceSettingsValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetWorkspaceSettingsValue successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceSettingsValueOptions model
				getWorkspaceSettingsValueOptionsModel := new(schematics20apiv2.GetWorkspaceSettingsValueOptions)
				getWorkspaceSettingsValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceSettingsValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceSettingsValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceSettingsValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceSettingsValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetWorkspaceSettingsValueWithContext(ctx, getWorkspaceSettingsValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetWorkspaceSettingsValue(getWorkspaceSettingsValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetWorkspaceSettingsValueWithContext(ctx, getWorkspaceSettingsValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceSettingsValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetWorkspaceSettingsValue successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetWorkspaceSettingsValue(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceSettingsValueOptions model
				getWorkspaceSettingsValueOptionsModel := new(schematics20apiv2.GetWorkspaceSettingsValueOptions)
				getWorkspaceSettingsValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceSettingsValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceSettingsValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceSettingsValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceSettingsValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetWorkspaceSettingsValue(getWorkspaceSettingsValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceSettingsValue with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceSettingsValueOptions model
				getWorkspaceSettingsValueOptionsModel := new(schematics20apiv2.GetWorkspaceSettingsValueOptions)
				getWorkspaceSettingsValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceSettingsValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceSettingsValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceSettingsValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceSettingsValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetWorkspaceSettingsValue(getWorkspaceSettingsValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceSettingsValueOptions model with no property values
				getWorkspaceSettingsValueOptionsModelNew := new(schematics20apiv2.GetWorkspaceSettingsValueOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetWorkspaceSettingsValue(getWorkspaceSettingsValueOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceTemplateInputValue(getWorkspaceTemplateInputValueOptions *GetWorkspaceTemplateInputValueOptions) - Operation response error`, func() {
		getWorkspaceTemplateInputValuePath := "/v2/workspaces/testString/templates/testString/inputs/testString/value"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateInputValuePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateInputValue with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceTemplateInputValueOptions model
				getWorkspaceTemplateInputValueOptionsModel := new(schematics20apiv2.GetWorkspaceTemplateInputValueOptions)
				getWorkspaceTemplateInputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateInputValueOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateInputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceTemplateInputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceTemplateInputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceTemplateInputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetWorkspaceTemplateInputValue(getWorkspaceTemplateInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetWorkspaceTemplateInputValue(getWorkspaceTemplateInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceTemplateInputValue(getWorkspaceTemplateInputValueOptions *GetWorkspaceTemplateInputValueOptions)`, func() {
		getWorkspaceTemplateInputValuePath := "/v2/workspaces/testString/templates/testString/inputs/testString/value"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateInputValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateInputValue successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceTemplateInputValueOptions model
				getWorkspaceTemplateInputValueOptionsModel := new(schematics20apiv2.GetWorkspaceTemplateInputValueOptions)
				getWorkspaceTemplateInputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateInputValueOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateInputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceTemplateInputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceTemplateInputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceTemplateInputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetWorkspaceTemplateInputValueWithContext(ctx, getWorkspaceTemplateInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetWorkspaceTemplateInputValue(getWorkspaceTemplateInputValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetWorkspaceTemplateInputValueWithContext(ctx, getWorkspaceTemplateInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateInputValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateInputValue successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetWorkspaceTemplateInputValue(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceTemplateInputValueOptions model
				getWorkspaceTemplateInputValueOptionsModel := new(schematics20apiv2.GetWorkspaceTemplateInputValueOptions)
				getWorkspaceTemplateInputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateInputValueOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateInputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceTemplateInputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceTemplateInputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceTemplateInputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetWorkspaceTemplateInputValue(getWorkspaceTemplateInputValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceTemplateInputValue with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceTemplateInputValueOptions model
				getWorkspaceTemplateInputValueOptionsModel := new(schematics20apiv2.GetWorkspaceTemplateInputValueOptions)
				getWorkspaceTemplateInputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateInputValueOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateInputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceTemplateInputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceTemplateInputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceTemplateInputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetWorkspaceTemplateInputValue(getWorkspaceTemplateInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceTemplateInputValueOptions model with no property values
				getWorkspaceTemplateInputValueOptionsModelNew := new(schematics20apiv2.GetWorkspaceTemplateInputValueOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetWorkspaceTemplateInputValue(getWorkspaceTemplateInputValueOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceTemplateOutputValue(getWorkspaceTemplateOutputValueOptions *GetWorkspaceTemplateOutputValueOptions) - Operation response error`, func() {
		getWorkspaceTemplateOutputValuePath := "/v2/workspaces/testString/templates/testString/outputs/testString/value"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateOutputValuePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateOutputValue with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceTemplateOutputValueOptions model
				getWorkspaceTemplateOutputValueOptionsModel := new(schematics20apiv2.GetWorkspaceTemplateOutputValueOptions)
				getWorkspaceTemplateOutputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateOutputValueOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateOutputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceTemplateOutputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceTemplateOutputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceTemplateOutputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetWorkspaceTemplateOutputValue(getWorkspaceTemplateOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetWorkspaceTemplateOutputValue(getWorkspaceTemplateOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceTemplateOutputValue(getWorkspaceTemplateOutputValueOptions *GetWorkspaceTemplateOutputValueOptions)`, func() {
		getWorkspaceTemplateOutputValuePath := "/v2/workspaces/testString/templates/testString/outputs/testString/value"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateOutputValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateOutputValue successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceTemplateOutputValueOptions model
				getWorkspaceTemplateOutputValueOptionsModel := new(schematics20apiv2.GetWorkspaceTemplateOutputValueOptions)
				getWorkspaceTemplateOutputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateOutputValueOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateOutputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceTemplateOutputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceTemplateOutputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceTemplateOutputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetWorkspaceTemplateOutputValueWithContext(ctx, getWorkspaceTemplateOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetWorkspaceTemplateOutputValue(getWorkspaceTemplateOutputValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetWorkspaceTemplateOutputValueWithContext(ctx, getWorkspaceTemplateOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateOutputValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateOutputValue successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetWorkspaceTemplateOutputValue(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceTemplateOutputValueOptions model
				getWorkspaceTemplateOutputValueOptionsModel := new(schematics20apiv2.GetWorkspaceTemplateOutputValueOptions)
				getWorkspaceTemplateOutputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateOutputValueOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateOutputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceTemplateOutputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceTemplateOutputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceTemplateOutputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetWorkspaceTemplateOutputValue(getWorkspaceTemplateOutputValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceTemplateOutputValue with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceTemplateOutputValueOptions model
				getWorkspaceTemplateOutputValueOptionsModel := new(schematics20apiv2.GetWorkspaceTemplateOutputValueOptions)
				getWorkspaceTemplateOutputValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateOutputValueOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateOutputValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceTemplateOutputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceTemplateOutputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceTemplateOutputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetWorkspaceTemplateOutputValue(getWorkspaceTemplateOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceTemplateOutputValueOptions model with no property values
				getWorkspaceTemplateOutputValueOptionsModelNew := new(schematics20apiv2.GetWorkspaceTemplateOutputValueOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetWorkspaceTemplateOutputValue(getWorkspaceTemplateOutputValueOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceTemplateSettingValue(getWorkspaceTemplateSettingValueOptions *GetWorkspaceTemplateSettingValueOptions) - Operation response error`, func() {
		getWorkspaceTemplateSettingValuePath := "/v2/workspaces/testString/templates/testString/settings/testString/value"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateSettingValuePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateSettingValue with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceTemplateSettingValueOptions model
				getWorkspaceTemplateSettingValueOptionsModel := new(schematics20apiv2.GetWorkspaceTemplateSettingValueOptions)
				getWorkspaceTemplateSettingValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateSettingValueOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateSettingValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceTemplateSettingValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceTemplateSettingValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceTemplateSettingValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetWorkspaceTemplateSettingValue(getWorkspaceTemplateSettingValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetWorkspaceTemplateSettingValue(getWorkspaceTemplateSettingValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWorkspaceTemplateSettingValue(getWorkspaceTemplateSettingValueOptions *GetWorkspaceTemplateSettingValueOptions)`, func() {
		getWorkspaceTemplateSettingValuePath := "/v2/workspaces/testString/templates/testString/settings/testString/value"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateSettingValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateSettingValue successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceTemplateSettingValueOptions model
				getWorkspaceTemplateSettingValueOptionsModel := new(schematics20apiv2.GetWorkspaceTemplateSettingValueOptions)
				getWorkspaceTemplateSettingValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateSettingValueOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateSettingValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceTemplateSettingValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceTemplateSettingValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceTemplateSettingValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetWorkspaceTemplateSettingValueWithContext(ctx, getWorkspaceTemplateSettingValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetWorkspaceTemplateSettingValue(getWorkspaceTemplateSettingValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetWorkspaceTemplateSettingValueWithContext(ctx, getWorkspaceTemplateSettingValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateSettingValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateSettingValue successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetWorkspaceTemplateSettingValue(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceTemplateSettingValueOptions model
				getWorkspaceTemplateSettingValueOptionsModel := new(schematics20apiv2.GetWorkspaceTemplateSettingValueOptions)
				getWorkspaceTemplateSettingValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateSettingValueOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateSettingValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceTemplateSettingValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceTemplateSettingValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceTemplateSettingValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetWorkspaceTemplateSettingValue(getWorkspaceTemplateSettingValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceTemplateSettingValue with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceTemplateSettingValueOptions model
				getWorkspaceTemplateSettingValueOptionsModel := new(schematics20apiv2.GetWorkspaceTemplateSettingValueOptions)
				getWorkspaceTemplateSettingValueOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateSettingValueOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateSettingValueOptionsModel.VarName = core.StringPtr("testString")
				getWorkspaceTemplateSettingValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getWorkspaceTemplateSettingValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getWorkspaceTemplateSettingValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetWorkspaceTemplateSettingValue(getWorkspaceTemplateSettingValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceTemplateSettingValueOptions model with no property values
				getWorkspaceTemplateSettingValueOptionsModelNew := new(schematics20apiv2.GetWorkspaceTemplateSettingValueOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetWorkspaceTemplateSettingValue(getWorkspaceTemplateSettingValueOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetJobWorkspaceInputValue(getJobWorkspaceInputValueOptions *GetJobWorkspaceInputValueOptions) - Operation response error`, func() {
		getJobWorkspaceInputValuePath := "/v2/jobs/testString/workspaces/testString/inputs/testString/value"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobWorkspaceInputValuePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetJobWorkspaceInputValue with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetJobWorkspaceInputValueOptions model
				getJobWorkspaceInputValueOptionsModel := new(schematics20apiv2.GetJobWorkspaceInputValueOptions)
				getJobWorkspaceInputValueOptionsModel.JobID = core.StringPtr("testString")
				getJobWorkspaceInputValueOptionsModel.WID = core.StringPtr("testString")
				getJobWorkspaceInputValueOptionsModel.VarName = core.StringPtr("testString")
				getJobWorkspaceInputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getJobWorkspaceInputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getJobWorkspaceInputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetJobWorkspaceInputValue(getJobWorkspaceInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetJobWorkspaceInputValue(getJobWorkspaceInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetJobWorkspaceInputValue(getJobWorkspaceInputValueOptions *GetJobWorkspaceInputValueOptions)`, func() {
		getJobWorkspaceInputValuePath := "/v2/jobs/testString/workspaces/testString/inputs/testString/value"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobWorkspaceInputValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetJobWorkspaceInputValue successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetJobWorkspaceInputValueOptions model
				getJobWorkspaceInputValueOptionsModel := new(schematics20apiv2.GetJobWorkspaceInputValueOptions)
				getJobWorkspaceInputValueOptionsModel.JobID = core.StringPtr("testString")
				getJobWorkspaceInputValueOptionsModel.WID = core.StringPtr("testString")
				getJobWorkspaceInputValueOptionsModel.VarName = core.StringPtr("testString")
				getJobWorkspaceInputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getJobWorkspaceInputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getJobWorkspaceInputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetJobWorkspaceInputValueWithContext(ctx, getJobWorkspaceInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetJobWorkspaceInputValue(getJobWorkspaceInputValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetJobWorkspaceInputValueWithContext(ctx, getJobWorkspaceInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobWorkspaceInputValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetJobWorkspaceInputValue successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetJobWorkspaceInputValue(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetJobWorkspaceInputValueOptions model
				getJobWorkspaceInputValueOptionsModel := new(schematics20apiv2.GetJobWorkspaceInputValueOptions)
				getJobWorkspaceInputValueOptionsModel.JobID = core.StringPtr("testString")
				getJobWorkspaceInputValueOptionsModel.WID = core.StringPtr("testString")
				getJobWorkspaceInputValueOptionsModel.VarName = core.StringPtr("testString")
				getJobWorkspaceInputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getJobWorkspaceInputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getJobWorkspaceInputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetJobWorkspaceInputValue(getJobWorkspaceInputValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetJobWorkspaceInputValue with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetJobWorkspaceInputValueOptions model
				getJobWorkspaceInputValueOptionsModel := new(schematics20apiv2.GetJobWorkspaceInputValueOptions)
				getJobWorkspaceInputValueOptionsModel.JobID = core.StringPtr("testString")
				getJobWorkspaceInputValueOptionsModel.WID = core.StringPtr("testString")
				getJobWorkspaceInputValueOptionsModel.VarName = core.StringPtr("testString")
				getJobWorkspaceInputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getJobWorkspaceInputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getJobWorkspaceInputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetJobWorkspaceInputValue(getJobWorkspaceInputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetJobWorkspaceInputValueOptions model with no property values
				getJobWorkspaceInputValueOptionsModelNew := new(schematics20apiv2.GetJobWorkspaceInputValueOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetJobWorkspaceInputValue(getJobWorkspaceInputValueOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetJobWorkspaceOutputValue(getJobWorkspaceOutputValueOptions *GetJobWorkspaceOutputValueOptions) - Operation response error`, func() {
		getJobWorkspaceOutputValuePath := "/v2/jobs/testString/workspaces/testString/outputs/testString/value"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobWorkspaceOutputValuePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetJobWorkspaceOutputValue with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetJobWorkspaceOutputValueOptions model
				getJobWorkspaceOutputValueOptionsModel := new(schematics20apiv2.GetJobWorkspaceOutputValueOptions)
				getJobWorkspaceOutputValueOptionsModel.JobID = core.StringPtr("testString")
				getJobWorkspaceOutputValueOptionsModel.WID = core.StringPtr("testString")
				getJobWorkspaceOutputValueOptionsModel.VarName = core.StringPtr("testString")
				getJobWorkspaceOutputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getJobWorkspaceOutputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getJobWorkspaceOutputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetJobWorkspaceOutputValue(getJobWorkspaceOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetJobWorkspaceOutputValue(getJobWorkspaceOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetJobWorkspaceOutputValue(getJobWorkspaceOutputValueOptions *GetJobWorkspaceOutputValueOptions)`, func() {
		getJobWorkspaceOutputValuePath := "/v2/jobs/testString/workspaces/testString/outputs/testString/value"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobWorkspaceOutputValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetJobWorkspaceOutputValue successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetJobWorkspaceOutputValueOptions model
				getJobWorkspaceOutputValueOptionsModel := new(schematics20apiv2.GetJobWorkspaceOutputValueOptions)
				getJobWorkspaceOutputValueOptionsModel.JobID = core.StringPtr("testString")
				getJobWorkspaceOutputValueOptionsModel.WID = core.StringPtr("testString")
				getJobWorkspaceOutputValueOptionsModel.VarName = core.StringPtr("testString")
				getJobWorkspaceOutputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getJobWorkspaceOutputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getJobWorkspaceOutputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetJobWorkspaceOutputValueWithContext(ctx, getJobWorkspaceOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetJobWorkspaceOutputValue(getJobWorkspaceOutputValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetJobWorkspaceOutputValueWithContext(ctx, getJobWorkspaceOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobWorkspaceOutputValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetJobWorkspaceOutputValue successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetJobWorkspaceOutputValue(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetJobWorkspaceOutputValueOptions model
				getJobWorkspaceOutputValueOptionsModel := new(schematics20apiv2.GetJobWorkspaceOutputValueOptions)
				getJobWorkspaceOutputValueOptionsModel.JobID = core.StringPtr("testString")
				getJobWorkspaceOutputValueOptionsModel.WID = core.StringPtr("testString")
				getJobWorkspaceOutputValueOptionsModel.VarName = core.StringPtr("testString")
				getJobWorkspaceOutputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getJobWorkspaceOutputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getJobWorkspaceOutputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetJobWorkspaceOutputValue(getJobWorkspaceOutputValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetJobWorkspaceOutputValue with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetJobWorkspaceOutputValueOptions model
				getJobWorkspaceOutputValueOptionsModel := new(schematics20apiv2.GetJobWorkspaceOutputValueOptions)
				getJobWorkspaceOutputValueOptionsModel.JobID = core.StringPtr("testString")
				getJobWorkspaceOutputValueOptionsModel.WID = core.StringPtr("testString")
				getJobWorkspaceOutputValueOptionsModel.VarName = core.StringPtr("testString")
				getJobWorkspaceOutputValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getJobWorkspaceOutputValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getJobWorkspaceOutputValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetJobWorkspaceOutputValue(getJobWorkspaceOutputValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetJobWorkspaceOutputValueOptions model with no property values
				getJobWorkspaceOutputValueOptionsModelNew := new(schematics20apiv2.GetJobWorkspaceOutputValueOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetJobWorkspaceOutputValue(getJobWorkspaceOutputValueOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetJobWorkspaceSettingValue(getJobWorkspaceSettingValueOptions *GetJobWorkspaceSettingValueOptions) - Operation response error`, func() {
		getJobWorkspaceSettingValuePath := "/v2/jobs/testString/workspaces/testString/settings/testString/value"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobWorkspaceSettingValuePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetJobWorkspaceSettingValue with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetJobWorkspaceSettingValueOptions model
				getJobWorkspaceSettingValueOptionsModel := new(schematics20apiv2.GetJobWorkspaceSettingValueOptions)
				getJobWorkspaceSettingValueOptionsModel.JobID = core.StringPtr("testString")
				getJobWorkspaceSettingValueOptionsModel.WID = core.StringPtr("testString")
				getJobWorkspaceSettingValueOptionsModel.VarName = core.StringPtr("testString")
				getJobWorkspaceSettingValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getJobWorkspaceSettingValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getJobWorkspaceSettingValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetJobWorkspaceSettingValue(getJobWorkspaceSettingValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetJobWorkspaceSettingValue(getJobWorkspaceSettingValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetJobWorkspaceSettingValue(getJobWorkspaceSettingValueOptions *GetJobWorkspaceSettingValueOptions)`, func() {
		getJobWorkspaceSettingValuePath := "/v2/jobs/testString/workspaces/testString/settings/testString/value"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobWorkspaceSettingValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetJobWorkspaceSettingValue successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetJobWorkspaceSettingValueOptions model
				getJobWorkspaceSettingValueOptionsModel := new(schematics20apiv2.GetJobWorkspaceSettingValueOptions)
				getJobWorkspaceSettingValueOptionsModel.JobID = core.StringPtr("testString")
				getJobWorkspaceSettingValueOptionsModel.WID = core.StringPtr("testString")
				getJobWorkspaceSettingValueOptionsModel.VarName = core.StringPtr("testString")
				getJobWorkspaceSettingValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getJobWorkspaceSettingValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getJobWorkspaceSettingValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetJobWorkspaceSettingValueWithContext(ctx, getJobWorkspaceSettingValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetJobWorkspaceSettingValue(getJobWorkspaceSettingValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetJobWorkspaceSettingValueWithContext(ctx, getJobWorkspaceSettingValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobWorkspaceSettingValuePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"value": "Value"}`)
				}))
			})
			It(`Invoke GetJobWorkspaceSettingValue successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetJobWorkspaceSettingValue(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetJobWorkspaceSettingValueOptions model
				getJobWorkspaceSettingValueOptionsModel := new(schematics20apiv2.GetJobWorkspaceSettingValueOptions)
				getJobWorkspaceSettingValueOptionsModel.JobID = core.StringPtr("testString")
				getJobWorkspaceSettingValueOptionsModel.WID = core.StringPtr("testString")
				getJobWorkspaceSettingValueOptionsModel.VarName = core.StringPtr("testString")
				getJobWorkspaceSettingValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getJobWorkspaceSettingValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getJobWorkspaceSettingValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetJobWorkspaceSettingValue(getJobWorkspaceSettingValueOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetJobWorkspaceSettingValue with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetJobWorkspaceSettingValueOptions model
				getJobWorkspaceSettingValueOptionsModel := new(schematics20apiv2.GetJobWorkspaceSettingValueOptions)
				getJobWorkspaceSettingValueOptionsModel.JobID = core.StringPtr("testString")
				getJobWorkspaceSettingValueOptionsModel.WID = core.StringPtr("testString")
				getJobWorkspaceSettingValueOptionsModel.VarName = core.StringPtr("testString")
				getJobWorkspaceSettingValueOptionsModel.Offset = core.Int64Ptr(int64(0))
				getJobWorkspaceSettingValueOptionsModel.Limit = core.Int64Ptr(int64(1))
				getJobWorkspaceSettingValueOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetJobWorkspaceSettingValue(getJobWorkspaceSettingValueOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetJobWorkspaceSettingValueOptions model with no property values
				getJobWorkspaceSettingValueOptionsModelNew := new(schematics20apiv2.GetJobWorkspaceSettingValueOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetJobWorkspaceSettingValue(getJobWorkspaceSettingValueOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetKmsSettings(getKmsSettingsOptions *GetKmsSettingsOptions) - Operation response error`, func() {
		getKmsSettingsPath := "/v2/settings/kms"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKmsSettingsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetKmsSettings with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetKmsSettingsOptions model
				getKmsSettingsOptionsModel := new(schematics20apiv2.GetKmsSettingsOptions)
				getKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				getKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetKmsSettings(getKmsSettingsOptions *GetKmsSettingsOptions)`, func() {
		getKmsSettingsPath := "/v2/settings/kms"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKmsSettingsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "primary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}, "secondary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}}`)
				}))
			})
			It(`Invoke GetKmsSettings successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetKmsSettingsOptions model
				getKmsSettingsOptionsModel := new(schematics20apiv2.GetKmsSettingsOptions)
				getKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				getKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetKmsSettingsWithContext(ctx, getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetKmsSettingsWithContext(ctx, getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKmsSettingsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "primary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}, "secondary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}}`)
				}))
			})
			It(`Invoke GetKmsSettings successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetKmsSettings(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetKmsSettingsOptions model
				getKmsSettingsOptionsModel := new(schematics20apiv2.GetKmsSettingsOptions)
				getKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				getKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetKmsSettings with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetKmsSettingsOptions model
				getKmsSettingsOptionsModel := new(schematics20apiv2.GetKmsSettingsOptions)
				getKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				getKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetKmsSettingsOptions model with no property values
				getKmsSettingsOptionsModelNew := new(schematics20apiv2.GetKmsSettingsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetKmsSettings(getKmsSettingsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateKmsSettings(updateKmsSettingsOptions *UpdateKmsSettingsOptions) - Operation response error`, func() {
		updateKmsSettingsPath := "/v2/settings/kms"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateKmsSettingsPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateKmsSettings with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematics20apiv2.KMSSettingsPrimaryCrk)
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematics20apiv2.KMSSettingsSecondaryCrk)
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the KMSSettings model
				kmsSettingsModel := new(schematics20apiv2.KMSSettings)
				kmsSettingsModel.Location = core.StringPtr("testString")
				kmsSettingsModel.EncryptionScheme = core.StringPtr("testString")
				kmsSettingsModel.ResourceGroup = core.StringPtr("testString")
				kmsSettingsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				kmsSettingsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				kmsSettingsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := new(schematics20apiv2.UpdateKmsSettingsOptions)
				updateKmsSettingsOptionsModel.KMSSettings = kmsSettingsModel
				updateKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateKmsSettings(updateKmsSettingsOptions *UpdateKmsSettingsOptions)`, func() {
		updateKmsSettingsPath := "/v2/settings/kms"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateKmsSettingsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "primary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}, "secondary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}}`)
				}))
			})
			It(`Invoke UpdateKmsSettings successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematics20apiv2.KMSSettingsPrimaryCrk)
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematics20apiv2.KMSSettingsSecondaryCrk)
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the KMSSettings model
				kmsSettingsModel := new(schematics20apiv2.KMSSettings)
				kmsSettingsModel.Location = core.StringPtr("testString")
				kmsSettingsModel.EncryptionScheme = core.StringPtr("testString")
				kmsSettingsModel.ResourceGroup = core.StringPtr("testString")
				kmsSettingsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				kmsSettingsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				kmsSettingsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := new(schematics20apiv2.UpdateKmsSettingsOptions)
				updateKmsSettingsOptionsModel.KMSSettings = kmsSettingsModel
				updateKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UpdateKmsSettingsWithContext(ctx, updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UpdateKmsSettingsWithContext(ctx, updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateKmsSettingsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "primary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}, "secondary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}}`)
				}))
			})
			It(`Invoke UpdateKmsSettings successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UpdateKmsSettings(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematics20apiv2.KMSSettingsPrimaryCrk)
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematics20apiv2.KMSSettingsSecondaryCrk)
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the KMSSettings model
				kmsSettingsModel := new(schematics20apiv2.KMSSettings)
				kmsSettingsModel.Location = core.StringPtr("testString")
				kmsSettingsModel.EncryptionScheme = core.StringPtr("testString")
				kmsSettingsModel.ResourceGroup = core.StringPtr("testString")
				kmsSettingsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				kmsSettingsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				kmsSettingsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := new(schematics20apiv2.UpdateKmsSettingsOptions)
				updateKmsSettingsOptionsModel.KMSSettings = kmsSettingsModel
				updateKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateKmsSettings with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematics20apiv2.KMSSettingsPrimaryCrk)
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematics20apiv2.KMSSettingsSecondaryCrk)
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the KMSSettings model
				kmsSettingsModel := new(schematics20apiv2.KMSSettings)
				kmsSettingsModel.Location = core.StringPtr("testString")
				kmsSettingsModel.EncryptionScheme = core.StringPtr("testString")
				kmsSettingsModel.ResourceGroup = core.StringPtr("testString")
				kmsSettingsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				kmsSettingsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				kmsSettingsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := new(schematics20apiv2.UpdateKmsSettingsOptions)
				updateKmsSettingsOptionsModel.KMSSettings = kmsSettingsModel
				updateKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateKmsSettingsOptions model with no property values
				updateKmsSettingsOptionsModelNew := new(schematics20apiv2.UpdateKmsSettingsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UpdateKmsSettings(updateKmsSettingsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListKms(listKmsOptions *ListKmsOptions) - Operation response error`, func() {
		listKmsPath := "/v2/settings/kms_instances"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listKmsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["encryption_scheme"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["resource_group"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListKms with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListKmsOptions model
				listKmsOptionsModel := new(schematics20apiv2.ListKmsOptions)
				listKmsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				listKmsOptionsModel.Location = core.StringPtr("testString")
				listKmsOptionsModel.ResourceGroup = core.StringPtr("testString")
				listKmsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listKmsOptionsModel.Sort = core.StringPtr("testString")
				listKmsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListKms(listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListKms(listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListKms(listKmsOptions *ListKmsOptions)`, func() {
		listKmsPath := "/v2/settings/kms_instances"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listKmsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["encryption_scheme"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["resource_group"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "kms_instances": [{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "kms_crn": "KmsCrn", "kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "kms_public_endpoint": "KmsPublicEndpoint", "keys": [{"name": "Name", "crn": "Crn", "error": "Error"}]}]}`)
				}))
			})
			It(`Invoke ListKms successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListKmsOptions model
				listKmsOptionsModel := new(schematics20apiv2.ListKmsOptions)
				listKmsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				listKmsOptionsModel.Location = core.StringPtr("testString")
				listKmsOptionsModel.ResourceGroup = core.StringPtr("testString")
				listKmsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listKmsOptionsModel.Sort = core.StringPtr("testString")
				listKmsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListKmsWithContext(ctx, listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListKms(listKmsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListKmsWithContext(ctx, listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listKmsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["encryption_scheme"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["resource_group"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "kms_instances": [{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "kms_crn": "KmsCrn", "kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "kms_public_endpoint": "KmsPublicEndpoint", "keys": [{"name": "Name", "crn": "Crn", "error": "Error"}]}]}`)
				}))
			})
			It(`Invoke ListKms successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListKms(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListKmsOptions model
				listKmsOptionsModel := new(schematics20apiv2.ListKmsOptions)
				listKmsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				listKmsOptionsModel.Location = core.StringPtr("testString")
				listKmsOptionsModel.ResourceGroup = core.StringPtr("testString")
				listKmsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listKmsOptionsModel.Sort = core.StringPtr("testString")
				listKmsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListKms(listKmsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListKms with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListKmsOptions model
				listKmsOptionsModel := new(schematics20apiv2.ListKmsOptions)
				listKmsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				listKmsOptionsModel.Location = core.StringPtr("testString")
				listKmsOptionsModel.ResourceGroup = core.StringPtr("testString")
				listKmsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listKmsOptionsModel.Sort = core.StringPtr("testString")
				listKmsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListKms(listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListKmsOptions model with no property values
				listKmsOptionsModelNew := new(schematics20apiv2.ListKmsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ListKms(listKmsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListTriggers(listTriggersOptions *ListTriggersOptions) - Operation response error`, func() {
		listTriggersPath := "/v2/settings/triggers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTriggersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTriggers with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListTriggersOptions model
				listTriggersOptionsModel := new(schematics20apiv2.ListTriggersOptions)
				listTriggersOptionsModel.Offset = core.Int64Ptr(int64(0))
				listTriggersOptionsModel.Limit = core.Int64Ptr(int64(1))
				listTriggersOptionsModel.Sort = core.StringPtr("testString")
				listTriggersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListTriggers(listTriggersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListTriggers(listTriggersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListTriggers(listTriggersOptions *ListTriggersOptions)`, func() {
		listTriggersPath := "/v2/settings/triggers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTriggersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "triggers": [{"name": "Name", "type": "action", "description": "Description", "resource_group": "ResourceGroup", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["Tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "TriggerID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTriggers successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListTriggersOptions model
				listTriggersOptionsModel := new(schematics20apiv2.ListTriggersOptions)
				listTriggersOptionsModel.Offset = core.Int64Ptr(int64(0))
				listTriggersOptionsModel.Limit = core.Int64Ptr(int64(1))
				listTriggersOptionsModel.Sort = core.StringPtr("testString")
				listTriggersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListTriggersWithContext(ctx, listTriggersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListTriggers(listTriggersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListTriggersWithContext(ctx, listTriggersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTriggersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "triggers": [{"name": "Name", "type": "action", "description": "Description", "resource_group": "ResourceGroup", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["Tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "TriggerID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListTriggers successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListTriggers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTriggersOptions model
				listTriggersOptionsModel := new(schematics20apiv2.ListTriggersOptions)
				listTriggersOptionsModel.Offset = core.Int64Ptr(int64(0))
				listTriggersOptionsModel.Limit = core.Int64Ptr(int64(1))
				listTriggersOptionsModel.Sort = core.StringPtr("testString")
				listTriggersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListTriggers(listTriggersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListTriggers with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListTriggersOptions model
				listTriggersOptionsModel := new(schematics20apiv2.ListTriggersOptions)
				listTriggersOptionsModel.Offset = core.Int64Ptr(int64(0))
				listTriggersOptionsModel.Limit = core.Int64Ptr(int64(1))
				listTriggersOptionsModel.Sort = core.StringPtr("testString")
				listTriggersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListTriggers(listTriggersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTrigger(createTriggerOptions *CreateTriggerOptions) - Operation response error`, func() {
		createTriggerPath := "/v2/settings/triggers"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTriggerPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateTrigger with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Trigger model
				triggerModel := new(schematics20apiv2.Trigger)
				triggerModel.Name = core.StringPtr("testString")
				triggerModel.Type = core.StringPtr("action")
				triggerModel.Description = core.StringPtr("testString")
				triggerModel.ResourceGroup = core.StringPtr("testString")
				triggerModel.ServiceID = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Apikey = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Location = core.StringPtr("us-south")
				triggerModel.Tags = []string{"testString"}
				triggerModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				triggerModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				triggerModel.UserState = userStateModel
				triggerModel.SysLock = systemLockModel
				triggerModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateTriggerOptions model
				createTriggerOptionsModel := new(schematics20apiv2.CreateTriggerOptions)
				createTriggerOptionsModel.Trigger = triggerModel
				createTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateTrigger(createTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateTrigger(createTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateTrigger(createTriggerOptions *CreateTriggerOptions)`, func() {
		createTriggerPath := "/v2/settings/triggers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTriggerPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "action", "description": "Description", "resource_group": "ResourceGroup", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["Tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "TriggerID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateTrigger successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Trigger model
				triggerModel := new(schematics20apiv2.Trigger)
				triggerModel.Name = core.StringPtr("testString")
				triggerModel.Type = core.StringPtr("action")
				triggerModel.Description = core.StringPtr("testString")
				triggerModel.ResourceGroup = core.StringPtr("testString")
				triggerModel.ServiceID = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Apikey = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Location = core.StringPtr("us-south")
				triggerModel.Tags = []string{"testString"}
				triggerModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				triggerModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				triggerModel.UserState = userStateModel
				triggerModel.SysLock = systemLockModel
				triggerModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateTriggerOptions model
				createTriggerOptionsModel := new(schematics20apiv2.CreateTriggerOptions)
				createTriggerOptionsModel.Trigger = triggerModel
				createTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateTriggerWithContext(ctx, createTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateTrigger(createTriggerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateTriggerWithContext(ctx, createTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTriggerPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "action", "description": "Description", "resource_group": "ResourceGroup", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["Tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "TriggerID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateTrigger successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateTrigger(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Trigger model
				triggerModel := new(schematics20apiv2.Trigger)
				triggerModel.Name = core.StringPtr("testString")
				triggerModel.Type = core.StringPtr("action")
				triggerModel.Description = core.StringPtr("testString")
				triggerModel.ResourceGroup = core.StringPtr("testString")
				triggerModel.ServiceID = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Apikey = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Location = core.StringPtr("us-south")
				triggerModel.Tags = []string{"testString"}
				triggerModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				triggerModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				triggerModel.UserState = userStateModel
				triggerModel.SysLock = systemLockModel
				triggerModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateTriggerOptions model
				createTriggerOptionsModel := new(schematics20apiv2.CreateTriggerOptions)
				createTriggerOptionsModel.Trigger = triggerModel
				createTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateTrigger(createTriggerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateTrigger with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Trigger model
				triggerModel := new(schematics20apiv2.Trigger)
				triggerModel.Name = core.StringPtr("testString")
				triggerModel.Type = core.StringPtr("action")
				triggerModel.Description = core.StringPtr("testString")
				triggerModel.ResourceGroup = core.StringPtr("testString")
				triggerModel.ServiceID = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Apikey = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Location = core.StringPtr("us-south")
				triggerModel.Tags = []string{"testString"}
				triggerModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				triggerModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				triggerModel.UserState = userStateModel
				triggerModel.SysLock = systemLockModel
				triggerModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateTriggerOptions model
				createTriggerOptionsModel := new(schematics20apiv2.CreateTriggerOptions)
				createTriggerOptionsModel.Trigger = triggerModel
				createTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateTrigger(createTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateTriggerOptions model with no property values
				createTriggerOptionsModelNew := new(schematics20apiv2.CreateTriggerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateTrigger(createTriggerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTrigger(getTriggerOptions *GetTriggerOptions) - Operation response error`, func() {
		getTriggerPath := "/v2/settings/triggers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTriggerPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTrigger with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetTriggerOptions model
				getTriggerOptionsModel := new(schematics20apiv2.GetTriggerOptions)
				getTriggerOptionsModel.TriggerID = core.StringPtr("testString")
				getTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetTrigger(getTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetTrigger(getTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetTrigger(getTriggerOptions *GetTriggerOptions)`, func() {
		getTriggerPath := "/v2/settings/triggers/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTriggerPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "action", "description": "Description", "resource_group": "ResourceGroup", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["Tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "TriggerID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetTrigger successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetTriggerOptions model
				getTriggerOptionsModel := new(schematics20apiv2.GetTriggerOptions)
				getTriggerOptionsModel.TriggerID = core.StringPtr("testString")
				getTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetTriggerWithContext(ctx, getTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetTrigger(getTriggerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetTriggerWithContext(ctx, getTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTriggerPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "action", "description": "Description", "resource_group": "ResourceGroup", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["Tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "TriggerID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetTrigger successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetTrigger(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTriggerOptions model
				getTriggerOptionsModel := new(schematics20apiv2.GetTriggerOptions)
				getTriggerOptionsModel.TriggerID = core.StringPtr("testString")
				getTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetTrigger(getTriggerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTrigger with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetTriggerOptions model
				getTriggerOptionsModel := new(schematics20apiv2.GetTriggerOptions)
				getTriggerOptionsModel.TriggerID = core.StringPtr("testString")
				getTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetTrigger(getTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTriggerOptions model with no property values
				getTriggerOptionsModelNew := new(schematics20apiv2.GetTriggerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetTrigger(getTriggerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceTrigger(replaceTriggerOptions *ReplaceTriggerOptions) - Operation response error`, func() {
		replaceTriggerPath := "/v2/settings/triggers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceTriggerPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceTrigger with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Trigger model
				triggerModel := new(schematics20apiv2.Trigger)
				triggerModel.Name = core.StringPtr("testString")
				triggerModel.Type = core.StringPtr("action")
				triggerModel.Description = core.StringPtr("testString")
				triggerModel.ResourceGroup = core.StringPtr("testString")
				triggerModel.ServiceID = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Apikey = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Location = core.StringPtr("us-south")
				triggerModel.Tags = []string{"testString"}
				triggerModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				triggerModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				triggerModel.UserState = userStateModel
				triggerModel.SysLock = systemLockModel
				triggerModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceTriggerOptions model
				replaceTriggerOptionsModel := new(schematics20apiv2.ReplaceTriggerOptions)
				replaceTriggerOptionsModel.TriggerID = core.StringPtr("testString")
				replaceTriggerOptionsModel.Trigger = triggerModel
				replaceTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ReplaceTrigger(replaceTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ReplaceTrigger(replaceTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceTrigger(replaceTriggerOptions *ReplaceTriggerOptions)`, func() {
		replaceTriggerPath := "/v2/settings/triggers/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceTriggerPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "action", "description": "Description", "resource_group": "ResourceGroup", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["Tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "TriggerID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ReplaceTrigger successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Trigger model
				triggerModel := new(schematics20apiv2.Trigger)
				triggerModel.Name = core.StringPtr("testString")
				triggerModel.Type = core.StringPtr("action")
				triggerModel.Description = core.StringPtr("testString")
				triggerModel.ResourceGroup = core.StringPtr("testString")
				triggerModel.ServiceID = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Apikey = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Location = core.StringPtr("us-south")
				triggerModel.Tags = []string{"testString"}
				triggerModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				triggerModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				triggerModel.UserState = userStateModel
				triggerModel.SysLock = systemLockModel
				triggerModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceTriggerOptions model
				replaceTriggerOptionsModel := new(schematics20apiv2.ReplaceTriggerOptions)
				replaceTriggerOptionsModel.TriggerID = core.StringPtr("testString")
				replaceTriggerOptionsModel.Trigger = triggerModel
				replaceTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ReplaceTriggerWithContext(ctx, replaceTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ReplaceTrigger(replaceTriggerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ReplaceTriggerWithContext(ctx, replaceTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceTriggerPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "type": "action", "description": "Description", "resource_group": "ResourceGroup", "service_id": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "apikey": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "location": "us-south", "tags": ["Tags"], "job_triggers": [{"event": "before | after", "job": {"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}}], "scheduled_triggers": [{"frequency": "daily | weekly", "time": "time in UTC", "day": "expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday"}], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "trigger_id": "TriggerID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ReplaceTrigger successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ReplaceTrigger(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Trigger model
				triggerModel := new(schematics20apiv2.Trigger)
				triggerModel.Name = core.StringPtr("testString")
				triggerModel.Type = core.StringPtr("action")
				triggerModel.Description = core.StringPtr("testString")
				triggerModel.ResourceGroup = core.StringPtr("testString")
				triggerModel.ServiceID = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Apikey = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Location = core.StringPtr("us-south")
				triggerModel.Tags = []string{"testString"}
				triggerModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				triggerModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				triggerModel.UserState = userStateModel
				triggerModel.SysLock = systemLockModel
				triggerModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceTriggerOptions model
				replaceTriggerOptionsModel := new(schematics20apiv2.ReplaceTriggerOptions)
				replaceTriggerOptionsModel.TriggerID = core.StringPtr("testString")
				replaceTriggerOptionsModel.Trigger = triggerModel
				replaceTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ReplaceTrigger(replaceTriggerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceTrigger with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Trigger model
				triggerModel := new(schematics20apiv2.Trigger)
				triggerModel.Name = core.StringPtr("testString")
				triggerModel.Type = core.StringPtr("action")
				triggerModel.Description = core.StringPtr("testString")
				triggerModel.ResourceGroup = core.StringPtr("testString")
				triggerModel.ServiceID = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Apikey = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Location = core.StringPtr("us-south")
				triggerModel.Tags = []string{"testString"}
				triggerModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				triggerModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				triggerModel.UserState = userStateModel
				triggerModel.SysLock = systemLockModel
				triggerModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceTriggerOptions model
				replaceTriggerOptionsModel := new(schematics20apiv2.ReplaceTriggerOptions)
				replaceTriggerOptionsModel.TriggerID = core.StringPtr("testString")
				replaceTriggerOptionsModel.Trigger = triggerModel
				replaceTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ReplaceTrigger(replaceTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceTriggerOptions model with no property values
				replaceTriggerOptionsModelNew := new(schematics20apiv2.ReplaceTriggerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ReplaceTrigger(replaceTriggerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteTrigger(deleteTriggerOptions *DeleteTriggerOptions)`, func() {
		deleteTriggerPath := "/v2/settings/triggers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteTriggerPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteTrigger successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteTrigger(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteTriggerOptions model
				deleteTriggerOptionsModel := new(schematics20apiv2.DeleteTriggerOptions)
				deleteTriggerOptionsModel.TriggerID = core.StringPtr("testString")
				deleteTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteTrigger(deleteTriggerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteTrigger with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteTriggerOptions model
				deleteTriggerOptionsModel := new(schematics20apiv2.DeleteTriggerOptions)
				deleteTriggerOptionsModel.TriggerID = core.StringPtr("testString")
				deleteTriggerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteTrigger(deleteTriggerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteTriggerOptions model with no property values
				deleteTriggerOptionsModelNew := new(schematics20apiv2.DeleteTriggerOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteTrigger(deleteTriggerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListWebhook(listWebhookOptions *ListWebhookOptions) - Operation response error`, func() {
		listWebhookPath := "/v2/settings/hooks"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWebhookPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListWebhook with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListWebhookOptions model
				listWebhookOptionsModel := new(schematics20apiv2.ListWebhookOptions)
				listWebhookOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWebhookOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWebhookOptionsModel.Sort = core.StringPtr("testString")
				listWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListWebhook(listWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListWebhook(listWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListWebhook(listWebhookOptions *ListWebhookOptions)`, func() {
		listWebhookPath := "/v2/settings/hooks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWebhookPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "hooks": [{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "hook_endpoint_url": "HookEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "HookID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListWebhook successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListWebhookOptions model
				listWebhookOptionsModel := new(schematics20apiv2.ListWebhookOptions)
				listWebhookOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWebhookOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWebhookOptionsModel.Sort = core.StringPtr("testString")
				listWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListWebhookWithContext(ctx, listWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListWebhook(listWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListWebhookWithContext(ctx, listWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWebhookPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "hooks": [{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "hook_endpoint_url": "HookEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "HookID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListWebhook successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListWebhook(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListWebhookOptions model
				listWebhookOptionsModel := new(schematics20apiv2.ListWebhookOptions)
				listWebhookOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWebhookOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWebhookOptionsModel.Sort = core.StringPtr("testString")
				listWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListWebhook(listWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListWebhook with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListWebhookOptions model
				listWebhookOptionsModel := new(schematics20apiv2.ListWebhookOptions)
				listWebhookOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWebhookOptionsModel.Limit = core.Int64Ptr(int64(1))
				listWebhookOptionsModel.Sort = core.StringPtr("testString")
				listWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListWebhook(listWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateWebhook(createWebhookOptions *CreateWebhookOptions) - Operation response error`, func() {
		createWebhookPath := "/v2/settings/hooks"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWebhookPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateWebhook with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WebHook model
				webHookModel := new(schematics20apiv2.WebHook)
				webHookModel.CommandName = core.StringPtr("workspace_plan")
				webHookModel.HookType = core.StringPtr("hook")
				webHookModel.HookSite = core.StringPtr("before")
				webHookModel.Location = core.StringPtr("us-south")
				webHookModel.ResourceGroup = core.StringPtr("testString")
				webHookModel.Tags = []string{"testString"}
				webHookModel.HookEndpointURL = core.StringPtr("testString")
				webHookModel.ServiceID = core.StringPtr("testString")
				webHookModel.Apikey = core.StringPtr("testString")
				webHookModel.UserState = userStateModel
				webHookModel.IgnoreInflightOperations = core.BoolPtr(true)
				webHookModel.SysLock = systemLockModel
				webHookModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateWebhookOptions model
				createWebhookOptionsModel := new(schematics20apiv2.CreateWebhookOptions)
				createWebhookOptionsModel.WebHook = webHookModel
				createWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateWebhook(createWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateWebhook(createWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateWebhook(createWebhookOptions *CreateWebhookOptions)`, func() {
		createWebhookPath := "/v2/settings/hooks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWebhookPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "hook_endpoint_url": "HookEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "HookID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateWebhook successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WebHook model
				webHookModel := new(schematics20apiv2.WebHook)
				webHookModel.CommandName = core.StringPtr("workspace_plan")
				webHookModel.HookType = core.StringPtr("hook")
				webHookModel.HookSite = core.StringPtr("before")
				webHookModel.Location = core.StringPtr("us-south")
				webHookModel.ResourceGroup = core.StringPtr("testString")
				webHookModel.Tags = []string{"testString"}
				webHookModel.HookEndpointURL = core.StringPtr("testString")
				webHookModel.ServiceID = core.StringPtr("testString")
				webHookModel.Apikey = core.StringPtr("testString")
				webHookModel.UserState = userStateModel
				webHookModel.IgnoreInflightOperations = core.BoolPtr(true)
				webHookModel.SysLock = systemLockModel
				webHookModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateWebhookOptions model
				createWebhookOptionsModel := new(schematics20apiv2.CreateWebhookOptions)
				createWebhookOptionsModel.WebHook = webHookModel
				createWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateWebhookWithContext(ctx, createWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateWebhook(createWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateWebhookWithContext(ctx, createWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWebhookPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "hook_endpoint_url": "HookEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "HookID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateWebhook successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateWebhook(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WebHook model
				webHookModel := new(schematics20apiv2.WebHook)
				webHookModel.CommandName = core.StringPtr("workspace_plan")
				webHookModel.HookType = core.StringPtr("hook")
				webHookModel.HookSite = core.StringPtr("before")
				webHookModel.Location = core.StringPtr("us-south")
				webHookModel.ResourceGroup = core.StringPtr("testString")
				webHookModel.Tags = []string{"testString"}
				webHookModel.HookEndpointURL = core.StringPtr("testString")
				webHookModel.ServiceID = core.StringPtr("testString")
				webHookModel.Apikey = core.StringPtr("testString")
				webHookModel.UserState = userStateModel
				webHookModel.IgnoreInflightOperations = core.BoolPtr(true)
				webHookModel.SysLock = systemLockModel
				webHookModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateWebhookOptions model
				createWebhookOptionsModel := new(schematics20apiv2.CreateWebhookOptions)
				createWebhookOptionsModel.WebHook = webHookModel
				createWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateWebhook(createWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateWebhook with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WebHook model
				webHookModel := new(schematics20apiv2.WebHook)
				webHookModel.CommandName = core.StringPtr("workspace_plan")
				webHookModel.HookType = core.StringPtr("hook")
				webHookModel.HookSite = core.StringPtr("before")
				webHookModel.Location = core.StringPtr("us-south")
				webHookModel.ResourceGroup = core.StringPtr("testString")
				webHookModel.Tags = []string{"testString"}
				webHookModel.HookEndpointURL = core.StringPtr("testString")
				webHookModel.ServiceID = core.StringPtr("testString")
				webHookModel.Apikey = core.StringPtr("testString")
				webHookModel.UserState = userStateModel
				webHookModel.IgnoreInflightOperations = core.BoolPtr(true)
				webHookModel.SysLock = systemLockModel
				webHookModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateWebhookOptions model
				createWebhookOptionsModel := new(schematics20apiv2.CreateWebhookOptions)
				createWebhookOptionsModel.WebHook = webHookModel
				createWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateWebhook(createWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateWebhookOptions model with no property values
				createWebhookOptionsModelNew := new(schematics20apiv2.CreateWebhookOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateWebhook(createWebhookOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWebhook(getWebhookOptions *GetWebhookOptions) - Operation response error`, func() {
		getWebhookPath := "/v2/settings/hooks/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWebhookPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWebhook with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWebhookOptions model
				getWebhookOptionsModel := new(schematics20apiv2.GetWebhookOptions)
				getWebhookOptionsModel.HookID = core.StringPtr("testString")
				getWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetWebhook(getWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetWebhook(getWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetWebhook(getWebhookOptions *GetWebhookOptions)`, func() {
		getWebhookPath := "/v2/settings/hooks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWebhookPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "hook_endpoint_url": "HookEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "HookID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetWebhook successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetWebhookOptions model
				getWebhookOptionsModel := new(schematics20apiv2.GetWebhookOptions)
				getWebhookOptionsModel.HookID = core.StringPtr("testString")
				getWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetWebhookWithContext(ctx, getWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetWebhook(getWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetWebhookWithContext(ctx, getWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWebhookPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "hook_endpoint_url": "HookEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "HookID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetWebhook successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetWebhook(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWebhookOptions model
				getWebhookOptionsModel := new(schematics20apiv2.GetWebhookOptions)
				getWebhookOptionsModel.HookID = core.StringPtr("testString")
				getWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetWebhook(getWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWebhook with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetWebhookOptions model
				getWebhookOptionsModel := new(schematics20apiv2.GetWebhookOptions)
				getWebhookOptionsModel.HookID = core.StringPtr("testString")
				getWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetWebhook(getWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWebhookOptions model with no property values
				getWebhookOptionsModelNew := new(schematics20apiv2.GetWebhookOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetWebhook(getWebhookOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceWebhook(replaceWebhookOptions *ReplaceWebhookOptions) - Operation response error`, func() {
		replaceWebhookPath := "/v2/settings/hooks/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWebhookPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceWebhook with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WebHook model
				webHookModel := new(schematics20apiv2.WebHook)
				webHookModel.CommandName = core.StringPtr("workspace_plan")
				webHookModel.HookType = core.StringPtr("hook")
				webHookModel.HookSite = core.StringPtr("before")
				webHookModel.Location = core.StringPtr("us-south")
				webHookModel.ResourceGroup = core.StringPtr("testString")
				webHookModel.Tags = []string{"testString"}
				webHookModel.HookEndpointURL = core.StringPtr("testString")
				webHookModel.ServiceID = core.StringPtr("testString")
				webHookModel.Apikey = core.StringPtr("testString")
				webHookModel.UserState = userStateModel
				webHookModel.IgnoreInflightOperations = core.BoolPtr(true)
				webHookModel.SysLock = systemLockModel
				webHookModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceWebhookOptions model
				replaceWebhookOptionsModel := new(schematics20apiv2.ReplaceWebhookOptions)
				replaceWebhookOptionsModel.HookID = core.StringPtr("testString")
				replaceWebhookOptionsModel.WebHook = webHookModel
				replaceWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ReplaceWebhook(replaceWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ReplaceWebhook(replaceWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceWebhook(replaceWebhookOptions *ReplaceWebhookOptions)`, func() {
		replaceWebhookPath := "/v2/settings/hooks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWebhookPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "hook_endpoint_url": "HookEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "HookID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ReplaceWebhook successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WebHook model
				webHookModel := new(schematics20apiv2.WebHook)
				webHookModel.CommandName = core.StringPtr("workspace_plan")
				webHookModel.HookType = core.StringPtr("hook")
				webHookModel.HookSite = core.StringPtr("before")
				webHookModel.Location = core.StringPtr("us-south")
				webHookModel.ResourceGroup = core.StringPtr("testString")
				webHookModel.Tags = []string{"testString"}
				webHookModel.HookEndpointURL = core.StringPtr("testString")
				webHookModel.ServiceID = core.StringPtr("testString")
				webHookModel.Apikey = core.StringPtr("testString")
				webHookModel.UserState = userStateModel
				webHookModel.IgnoreInflightOperations = core.BoolPtr(true)
				webHookModel.SysLock = systemLockModel
				webHookModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceWebhookOptions model
				replaceWebhookOptionsModel := new(schematics20apiv2.ReplaceWebhookOptions)
				replaceWebhookOptionsModel.HookID = core.StringPtr("testString")
				replaceWebhookOptionsModel.WebHook = webHookModel
				replaceWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ReplaceWebhookWithContext(ctx, replaceWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ReplaceWebhook(replaceWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ReplaceWebhookWithContext(ctx, replaceWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWebhookPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_name": "workspace_plan", "hook_type": "hook", "hook_site": "before", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "hook_endpoint_url": "HookEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "hook_id": "HookID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ReplaceWebhook successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ReplaceWebhook(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WebHook model
				webHookModel := new(schematics20apiv2.WebHook)
				webHookModel.CommandName = core.StringPtr("workspace_plan")
				webHookModel.HookType = core.StringPtr("hook")
				webHookModel.HookSite = core.StringPtr("before")
				webHookModel.Location = core.StringPtr("us-south")
				webHookModel.ResourceGroup = core.StringPtr("testString")
				webHookModel.Tags = []string{"testString"}
				webHookModel.HookEndpointURL = core.StringPtr("testString")
				webHookModel.ServiceID = core.StringPtr("testString")
				webHookModel.Apikey = core.StringPtr("testString")
				webHookModel.UserState = userStateModel
				webHookModel.IgnoreInflightOperations = core.BoolPtr(true)
				webHookModel.SysLock = systemLockModel
				webHookModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceWebhookOptions model
				replaceWebhookOptionsModel := new(schematics20apiv2.ReplaceWebhookOptions)
				replaceWebhookOptionsModel.HookID = core.StringPtr("testString")
				replaceWebhookOptionsModel.WebHook = webHookModel
				replaceWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ReplaceWebhook(replaceWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceWebhook with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the WebHook model
				webHookModel := new(schematics20apiv2.WebHook)
				webHookModel.CommandName = core.StringPtr("workspace_plan")
				webHookModel.HookType = core.StringPtr("hook")
				webHookModel.HookSite = core.StringPtr("before")
				webHookModel.Location = core.StringPtr("us-south")
				webHookModel.ResourceGroup = core.StringPtr("testString")
				webHookModel.Tags = []string{"testString"}
				webHookModel.HookEndpointURL = core.StringPtr("testString")
				webHookModel.ServiceID = core.StringPtr("testString")
				webHookModel.Apikey = core.StringPtr("testString")
				webHookModel.UserState = userStateModel
				webHookModel.IgnoreInflightOperations = core.BoolPtr(true)
				webHookModel.SysLock = systemLockModel
				webHookModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceWebhookOptions model
				replaceWebhookOptionsModel := new(schematics20apiv2.ReplaceWebhookOptions)
				replaceWebhookOptionsModel.HookID = core.StringPtr("testString")
				replaceWebhookOptionsModel.WebHook = webHookModel
				replaceWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ReplaceWebhook(replaceWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceWebhookOptions model with no property values
				replaceWebhookOptionsModelNew := new(schematics20apiv2.ReplaceWebhookOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ReplaceWebhook(replaceWebhookOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteWebhook(deleteWebhookOptions *DeleteWebhookOptions)`, func() {
		deleteWebhookPath := "/v2/settings/hooks/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteWebhookPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteWebhook successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteWebhook(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteWebhookOptions model
				deleteWebhookOptionsModel := new(schematics20apiv2.DeleteWebhookOptions)
				deleteWebhookOptionsModel.HookID = core.StringPtr("testString")
				deleteWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteWebhook(deleteWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteWebhook with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteWebhookOptions model
				deleteWebhookOptionsModel := new(schematics20apiv2.DeleteWebhookOptions)
				deleteWebhookOptionsModel.HookID = core.StringPtr("testString")
				deleteWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteWebhook(deleteWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteWebhookOptions model with no property values
				deleteWebhookOptionsModelNew := new(schematics20apiv2.DeleteWebhookOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteWebhook(deleteWebhookOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetPrivateCluster(getPrivateClusterOptions *GetPrivateClusterOptions) - Operation response error`, func() {
		getPrivateClusterPath := "/v2/settings/private_clusters"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPrivateClusterPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetPrivateCluster with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetPrivateClusterOptions model
				getPrivateClusterOptionsModel := new(schematics20apiv2.GetPrivateClusterOptions)
				getPrivateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetPrivateCluster(getPrivateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetPrivateCluster(getPrivateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetPrivateCluster(getPrivateClusterOptions *GetPrivateClusterOptions)`, func() {
		getPrivateClusterPath := "/v2/settings/private_clusters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPrivateClusterPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "clusters": [{"cluster_id": "ClusterID", "kube_config": "KubeConfig", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "cluster_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke GetPrivateCluster successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetPrivateClusterOptions model
				getPrivateClusterOptionsModel := new(schematics20apiv2.GetPrivateClusterOptions)
				getPrivateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetPrivateClusterWithContext(ctx, getPrivateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetPrivateCluster(getPrivateClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetPrivateClusterWithContext(ctx, getPrivateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPrivateClusterPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "clusters": [{"cluster_id": "ClusterID", "kube_config": "KubeConfig", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "cluster_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke GetPrivateCluster successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetPrivateCluster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetPrivateClusterOptions model
				getPrivateClusterOptionsModel := new(schematics20apiv2.GetPrivateClusterOptions)
				getPrivateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetPrivateCluster(getPrivateClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetPrivateCluster with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetPrivateClusterOptions model
				getPrivateClusterOptionsModel := new(schematics20apiv2.GetPrivateClusterOptions)
				getPrivateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetPrivateCluster(getPrivateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreatePrivateCluster(createPrivateClusterOptions *CreatePrivateClusterOptions) - Operation response error`, func() {
		createPrivateClusterPath := "/v2/settings/private_clusters"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createPrivateClusterPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreatePrivateCluster with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PrivateCluster model
				privateClusterModel := new(schematics20apiv2.PrivateCluster)
				privateClusterModel.ClusterID = core.StringPtr("testString")
				privateClusterModel.KubeConfig = core.StringPtr("testString")
				privateClusterModel.Tags = []string{"testString"}
				privateClusterModel.UserState = userStateModel
				privateClusterModel.RegisteredBy = core.StringPtr("testString")
				privateClusterModel.RegisteredAt = CreateMockDateTime()
				privateClusterModel.UpdatedAt = CreateMockDateTime()
				privateClusterModel.UpdatedBy = core.StringPtr("testString")
				privateClusterModel.SysLock = systemLockModel
				privateClusterModel.ClusterHealth = core.StringPtr("active")
				privateClusterModel.LastHealthCheckedAt = CreateMockDateTime()
				privateClusterModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreatePrivateClusterOptions model
				createPrivateClusterOptionsModel := new(schematics20apiv2.CreatePrivateClusterOptions)
				createPrivateClusterOptionsModel.PrivateCluster = privateClusterModel
				createPrivateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreatePrivateCluster(createPrivateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreatePrivateCluster(createPrivateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreatePrivateCluster(createPrivateClusterOptions *CreatePrivateClusterOptions)`, func() {
		createPrivateClusterPath := "/v2/settings/private_clusters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createPrivateClusterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cluster_id": "ClusterID", "kube_config": "KubeConfig", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "cluster_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreatePrivateCluster successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PrivateCluster model
				privateClusterModel := new(schematics20apiv2.PrivateCluster)
				privateClusterModel.ClusterID = core.StringPtr("testString")
				privateClusterModel.KubeConfig = core.StringPtr("testString")
				privateClusterModel.Tags = []string{"testString"}
				privateClusterModel.UserState = userStateModel
				privateClusterModel.RegisteredBy = core.StringPtr("testString")
				privateClusterModel.RegisteredAt = CreateMockDateTime()
				privateClusterModel.UpdatedAt = CreateMockDateTime()
				privateClusterModel.UpdatedBy = core.StringPtr("testString")
				privateClusterModel.SysLock = systemLockModel
				privateClusterModel.ClusterHealth = core.StringPtr("active")
				privateClusterModel.LastHealthCheckedAt = CreateMockDateTime()
				privateClusterModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreatePrivateClusterOptions model
				createPrivateClusterOptionsModel := new(schematics20apiv2.CreatePrivateClusterOptions)
				createPrivateClusterOptionsModel.PrivateCluster = privateClusterModel
				createPrivateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreatePrivateClusterWithContext(ctx, createPrivateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreatePrivateCluster(createPrivateClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreatePrivateClusterWithContext(ctx, createPrivateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createPrivateClusterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cluster_id": "ClusterID", "kube_config": "KubeConfig", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "cluster_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreatePrivateCluster successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreatePrivateCluster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PrivateCluster model
				privateClusterModel := new(schematics20apiv2.PrivateCluster)
				privateClusterModel.ClusterID = core.StringPtr("testString")
				privateClusterModel.KubeConfig = core.StringPtr("testString")
				privateClusterModel.Tags = []string{"testString"}
				privateClusterModel.UserState = userStateModel
				privateClusterModel.RegisteredBy = core.StringPtr("testString")
				privateClusterModel.RegisteredAt = CreateMockDateTime()
				privateClusterModel.UpdatedAt = CreateMockDateTime()
				privateClusterModel.UpdatedBy = core.StringPtr("testString")
				privateClusterModel.SysLock = systemLockModel
				privateClusterModel.ClusterHealth = core.StringPtr("active")
				privateClusterModel.LastHealthCheckedAt = CreateMockDateTime()
				privateClusterModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreatePrivateClusterOptions model
				createPrivateClusterOptionsModel := new(schematics20apiv2.CreatePrivateClusterOptions)
				createPrivateClusterOptionsModel.PrivateCluster = privateClusterModel
				createPrivateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreatePrivateCluster(createPrivateClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreatePrivateCluster with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the PrivateCluster model
				privateClusterModel := new(schematics20apiv2.PrivateCluster)
				privateClusterModel.ClusterID = core.StringPtr("testString")
				privateClusterModel.KubeConfig = core.StringPtr("testString")
				privateClusterModel.Tags = []string{"testString"}
				privateClusterModel.UserState = userStateModel
				privateClusterModel.RegisteredBy = core.StringPtr("testString")
				privateClusterModel.RegisteredAt = CreateMockDateTime()
				privateClusterModel.UpdatedAt = CreateMockDateTime()
				privateClusterModel.UpdatedBy = core.StringPtr("testString")
				privateClusterModel.SysLock = systemLockModel
				privateClusterModel.ClusterHealth = core.StringPtr("active")
				privateClusterModel.LastHealthCheckedAt = CreateMockDateTime()
				privateClusterModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreatePrivateClusterOptions model
				createPrivateClusterOptionsModel := new(schematics20apiv2.CreatePrivateClusterOptions)
				createPrivateClusterOptionsModel.PrivateCluster = privateClusterModel
				createPrivateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreatePrivateCluster(createPrivateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreatePrivateClusterOptions model with no property values
				createPrivateClusterOptionsModelNew := new(schematics20apiv2.CreatePrivateClusterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreatePrivateCluster(createPrivateClusterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeletePrivateCluster(deletePrivateClusterOptions *DeletePrivateClusterOptions)`, func() {
		deletePrivateClusterPath := "/v2/settings/private_clusters"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deletePrivateClusterPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeletePrivateCluster successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeletePrivateCluster(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeletePrivateClusterOptions model
				deletePrivateClusterOptionsModel := new(schematics20apiv2.DeletePrivateClusterOptions)
				deletePrivateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeletePrivateCluster(deletePrivateClusterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeletePrivateCluster with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeletePrivateClusterOptions model
				deletePrivateClusterOptionsModel := new(schematics20apiv2.DeletePrivateClusterOptions)
				deletePrivateClusterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeletePrivateCluster(deletePrivateClusterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListAdapter(listAdapterOptions *ListAdapterOptions) - Operation response error`, func() {
		listAdapterPath := "/v2/settings/adapters"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAdapterPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListAdapter with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListAdapterOptions model
				listAdapterOptionsModel := new(schematics20apiv2.ListAdapterOptions)
				listAdapterOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAdapterOptionsModel.Limit = core.Int64Ptr(int64(1))
				listAdapterOptionsModel.Sort = core.StringPtr("testString")
				listAdapterOptionsModel.Profile = core.StringPtr("ids")
				listAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListAdapter(listAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListAdapter(listAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListAdapter(listAdapterOptions *ListAdapterOptions)`, func() {
		listAdapterPath := "/v2/settings/adapters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAdapterPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "adapters": [{"adapter_name": "AdapterName", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "adapter_endpoint_url": "AdapterEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "AdapterID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListAdapter successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListAdapterOptions model
				listAdapterOptionsModel := new(schematics20apiv2.ListAdapterOptions)
				listAdapterOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAdapterOptionsModel.Limit = core.Int64Ptr(int64(1))
				listAdapterOptionsModel.Sort = core.StringPtr("testString")
				listAdapterOptionsModel.Profile = core.StringPtr("ids")
				listAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListAdapterWithContext(ctx, listAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListAdapter(listAdapterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListAdapterWithContext(ctx, listAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAdapterPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "adapters": [{"adapter_name": "AdapterName", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "adapter_endpoint_url": "AdapterEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "AdapterID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListAdapter successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListAdapter(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListAdapterOptions model
				listAdapterOptionsModel := new(schematics20apiv2.ListAdapterOptions)
				listAdapterOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAdapterOptionsModel.Limit = core.Int64Ptr(int64(1))
				listAdapterOptionsModel.Sort = core.StringPtr("testString")
				listAdapterOptionsModel.Profile = core.StringPtr("ids")
				listAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListAdapter(listAdapterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListAdapter with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListAdapterOptions model
				listAdapterOptionsModel := new(schematics20apiv2.ListAdapterOptions)
				listAdapterOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAdapterOptionsModel.Limit = core.Int64Ptr(int64(1))
				listAdapterOptionsModel.Sort = core.StringPtr("testString")
				listAdapterOptionsModel.Profile = core.StringPtr("ids")
				listAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListAdapter(listAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateAdapter(createAdapterOptions *CreateAdapterOptions) - Operation response error`, func() {
		createAdapterPath := "/v2/settings/adapters"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAdapterPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateAdapter with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Adapter model
				adapterModel := new(schematics20apiv2.Adapter)
				adapterModel.AdapterName = core.StringPtr("testString")
				adapterModel.AdapterType = core.StringPtr("scm_adapter")
				adapterModel.Location = core.StringPtr("us-south")
				adapterModel.ResourceGroup = core.StringPtr("testString")
				adapterModel.Tags = []string{"testString"}
				adapterModel.AdapterEndpointURL = core.StringPtr("testString")
				adapterModel.ServiceID = core.StringPtr("testString")
				adapterModel.Apikey = core.StringPtr("testString")
				adapterModel.UserState = userStateModel
				adapterModel.IgnoreInflightOperations = core.BoolPtr(true)
				adapterModel.AdapterID = core.StringPtr("testString")
				adapterModel.RegisteredBy = core.StringPtr("testString")
				adapterModel.RegisteredAt = CreateMockDateTime()
				adapterModel.UpdatedAt = CreateMockDateTime()
				adapterModel.UpdatedBy = core.StringPtr("testString")
				adapterModel.SysLock = systemLockModel
				adapterModel.AdapterHealth = core.StringPtr("active")
				adapterModel.LastHealthCheckedAt = CreateMockDateTime()
				adapterModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateAdapterOptions model
				createAdapterOptionsModel := new(schematics20apiv2.CreateAdapterOptions)
				createAdapterOptionsModel.Adapter = adapterModel
				createAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateAdapter(createAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateAdapter(createAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateAdapter(createAdapterOptions *CreateAdapterOptions)`, func() {
		createAdapterPath := "/v2/settings/adapters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAdapterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"adapter_name": "AdapterName", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "adapter_endpoint_url": "AdapterEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "AdapterID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateAdapter successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Adapter model
				adapterModel := new(schematics20apiv2.Adapter)
				adapterModel.AdapterName = core.StringPtr("testString")
				adapterModel.AdapterType = core.StringPtr("scm_adapter")
				adapterModel.Location = core.StringPtr("us-south")
				adapterModel.ResourceGroup = core.StringPtr("testString")
				adapterModel.Tags = []string{"testString"}
				adapterModel.AdapterEndpointURL = core.StringPtr("testString")
				adapterModel.ServiceID = core.StringPtr("testString")
				adapterModel.Apikey = core.StringPtr("testString")
				adapterModel.UserState = userStateModel
				adapterModel.IgnoreInflightOperations = core.BoolPtr(true)
				adapterModel.AdapterID = core.StringPtr("testString")
				adapterModel.RegisteredBy = core.StringPtr("testString")
				adapterModel.RegisteredAt = CreateMockDateTime()
				adapterModel.UpdatedAt = CreateMockDateTime()
				adapterModel.UpdatedBy = core.StringPtr("testString")
				adapterModel.SysLock = systemLockModel
				adapterModel.AdapterHealth = core.StringPtr("active")
				adapterModel.LastHealthCheckedAt = CreateMockDateTime()
				adapterModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateAdapterOptions model
				createAdapterOptionsModel := new(schematics20apiv2.CreateAdapterOptions)
				createAdapterOptionsModel.Adapter = adapterModel
				createAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateAdapterWithContext(ctx, createAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateAdapter(createAdapterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateAdapterWithContext(ctx, createAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAdapterPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"adapter_name": "AdapterName", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "adapter_endpoint_url": "AdapterEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "AdapterID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreateAdapter successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateAdapter(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Adapter model
				adapterModel := new(schematics20apiv2.Adapter)
				adapterModel.AdapterName = core.StringPtr("testString")
				adapterModel.AdapterType = core.StringPtr("scm_adapter")
				adapterModel.Location = core.StringPtr("us-south")
				adapterModel.ResourceGroup = core.StringPtr("testString")
				adapterModel.Tags = []string{"testString"}
				adapterModel.AdapterEndpointURL = core.StringPtr("testString")
				adapterModel.ServiceID = core.StringPtr("testString")
				adapterModel.Apikey = core.StringPtr("testString")
				adapterModel.UserState = userStateModel
				adapterModel.IgnoreInflightOperations = core.BoolPtr(true)
				adapterModel.AdapterID = core.StringPtr("testString")
				adapterModel.RegisteredBy = core.StringPtr("testString")
				adapterModel.RegisteredAt = CreateMockDateTime()
				adapterModel.UpdatedAt = CreateMockDateTime()
				adapterModel.UpdatedBy = core.StringPtr("testString")
				adapterModel.SysLock = systemLockModel
				adapterModel.AdapterHealth = core.StringPtr("active")
				adapterModel.LastHealthCheckedAt = CreateMockDateTime()
				adapterModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateAdapterOptions model
				createAdapterOptionsModel := new(schematics20apiv2.CreateAdapterOptions)
				createAdapterOptionsModel.Adapter = adapterModel
				createAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateAdapter(createAdapterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateAdapter with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Adapter model
				adapterModel := new(schematics20apiv2.Adapter)
				adapterModel.AdapterName = core.StringPtr("testString")
				adapterModel.AdapterType = core.StringPtr("scm_adapter")
				adapterModel.Location = core.StringPtr("us-south")
				adapterModel.ResourceGroup = core.StringPtr("testString")
				adapterModel.Tags = []string{"testString"}
				adapterModel.AdapterEndpointURL = core.StringPtr("testString")
				adapterModel.ServiceID = core.StringPtr("testString")
				adapterModel.Apikey = core.StringPtr("testString")
				adapterModel.UserState = userStateModel
				adapterModel.IgnoreInflightOperations = core.BoolPtr(true)
				adapterModel.AdapterID = core.StringPtr("testString")
				adapterModel.RegisteredBy = core.StringPtr("testString")
				adapterModel.RegisteredAt = CreateMockDateTime()
				adapterModel.UpdatedAt = CreateMockDateTime()
				adapterModel.UpdatedBy = core.StringPtr("testString")
				adapterModel.SysLock = systemLockModel
				adapterModel.AdapterHealth = core.StringPtr("active")
				adapterModel.LastHealthCheckedAt = CreateMockDateTime()
				adapterModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateAdapterOptions model
				createAdapterOptionsModel := new(schematics20apiv2.CreateAdapterOptions)
				createAdapterOptionsModel.Adapter = adapterModel
				createAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateAdapter(createAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateAdapterOptions model with no property values
				createAdapterOptionsModelNew := new(schematics20apiv2.CreateAdapterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateAdapter(createAdapterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAdapter(getAdapterOptions *GetAdapterOptions) - Operation response error`, func() {
		getAdapterPath := "/v2/settings/adapters/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAdapterPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAdapter with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetAdapterOptions model
				getAdapterOptionsModel := new(schematics20apiv2.GetAdapterOptions)
				getAdapterOptionsModel.AdapterID = core.StringPtr("testString")
				getAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetAdapter(getAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetAdapter(getAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetAdapter(getAdapterOptions *GetAdapterOptions)`, func() {
		getAdapterPath := "/v2/settings/adapters/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAdapterPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"adapter_name": "AdapterName", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "adapter_endpoint_url": "AdapterEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "AdapterID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetAdapter successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetAdapterOptions model
				getAdapterOptionsModel := new(schematics20apiv2.GetAdapterOptions)
				getAdapterOptionsModel.AdapterID = core.StringPtr("testString")
				getAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetAdapterWithContext(ctx, getAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetAdapter(getAdapterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetAdapterWithContext(ctx, getAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAdapterPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"adapter_name": "AdapterName", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "adapter_endpoint_url": "AdapterEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "AdapterID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetAdapter successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetAdapter(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAdapterOptions model
				getAdapterOptionsModel := new(schematics20apiv2.GetAdapterOptions)
				getAdapterOptionsModel.AdapterID = core.StringPtr("testString")
				getAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetAdapter(getAdapterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAdapter with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetAdapterOptions model
				getAdapterOptionsModel := new(schematics20apiv2.GetAdapterOptions)
				getAdapterOptionsModel.AdapterID = core.StringPtr("testString")
				getAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetAdapter(getAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetAdapterOptions model with no property values
				getAdapterOptionsModelNew := new(schematics20apiv2.GetAdapterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetAdapter(getAdapterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceAdapter(replaceAdapterOptions *ReplaceAdapterOptions) - Operation response error`, func() {
		replaceAdapterPath := "/v2/settings/adapters/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceAdapterPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceAdapter with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Adapter model
				adapterModel := new(schematics20apiv2.Adapter)
				adapterModel.AdapterName = core.StringPtr("testString")
				adapterModel.AdapterType = core.StringPtr("scm_adapter")
				adapterModel.Location = core.StringPtr("us-south")
				adapterModel.ResourceGroup = core.StringPtr("testString")
				adapterModel.Tags = []string{"testString"}
				adapterModel.AdapterEndpointURL = core.StringPtr("testString")
				adapterModel.ServiceID = core.StringPtr("testString")
				adapterModel.Apikey = core.StringPtr("testString")
				adapterModel.UserState = userStateModel
				adapterModel.IgnoreInflightOperations = core.BoolPtr(true)
				adapterModel.AdapterID = core.StringPtr("testString")
				adapterModel.RegisteredBy = core.StringPtr("testString")
				adapterModel.RegisteredAt = CreateMockDateTime()
				adapterModel.UpdatedAt = CreateMockDateTime()
				adapterModel.UpdatedBy = core.StringPtr("testString")
				adapterModel.SysLock = systemLockModel
				adapterModel.AdapterHealth = core.StringPtr("active")
				adapterModel.LastHealthCheckedAt = CreateMockDateTime()
				adapterModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceAdapterOptions model
				replaceAdapterOptionsModel := new(schematics20apiv2.ReplaceAdapterOptions)
				replaceAdapterOptionsModel.AdapterID = core.StringPtr("testString")
				replaceAdapterOptionsModel.Adapter = adapterModel
				replaceAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ReplaceAdapter(replaceAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ReplaceAdapter(replaceAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceAdapter(replaceAdapterOptions *ReplaceAdapterOptions)`, func() {
		replaceAdapterPath := "/v2/settings/adapters/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceAdapterPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"adapter_name": "AdapterName", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "adapter_endpoint_url": "AdapterEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "AdapterID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ReplaceAdapter successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Adapter model
				adapterModel := new(schematics20apiv2.Adapter)
				adapterModel.AdapterName = core.StringPtr("testString")
				adapterModel.AdapterType = core.StringPtr("scm_adapter")
				adapterModel.Location = core.StringPtr("us-south")
				adapterModel.ResourceGroup = core.StringPtr("testString")
				adapterModel.Tags = []string{"testString"}
				adapterModel.AdapterEndpointURL = core.StringPtr("testString")
				adapterModel.ServiceID = core.StringPtr("testString")
				adapterModel.Apikey = core.StringPtr("testString")
				adapterModel.UserState = userStateModel
				adapterModel.IgnoreInflightOperations = core.BoolPtr(true)
				adapterModel.AdapterID = core.StringPtr("testString")
				adapterModel.RegisteredBy = core.StringPtr("testString")
				adapterModel.RegisteredAt = CreateMockDateTime()
				adapterModel.UpdatedAt = CreateMockDateTime()
				adapterModel.UpdatedBy = core.StringPtr("testString")
				adapterModel.SysLock = systemLockModel
				adapterModel.AdapterHealth = core.StringPtr("active")
				adapterModel.LastHealthCheckedAt = CreateMockDateTime()
				adapterModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceAdapterOptions model
				replaceAdapterOptionsModel := new(schematics20apiv2.ReplaceAdapterOptions)
				replaceAdapterOptionsModel.AdapterID = core.StringPtr("testString")
				replaceAdapterOptionsModel.Adapter = adapterModel
				replaceAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ReplaceAdapterWithContext(ctx, replaceAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ReplaceAdapter(replaceAdapterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ReplaceAdapterWithContext(ctx, replaceAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceAdapterPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"adapter_name": "AdapterName", "adapter_type": "scm_adapter", "location": "us-south", "resource_group": "ResourceGroup", "tags": ["Tags"], "adapter_endpoint_url": "AdapterEndpointURL", "service_id": "ServiceID", "apikey": "Apikey", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "ignore_inflight_operations": true, "adapter_id": "AdapterID", "registered_by": "RegisteredBy", "registered_at": "2019-01-01T12:00:00.000Z", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "adapter_health": "active", "last_health_checked_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ReplaceAdapter successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ReplaceAdapter(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Adapter model
				adapterModel := new(schematics20apiv2.Adapter)
				adapterModel.AdapterName = core.StringPtr("testString")
				adapterModel.AdapterType = core.StringPtr("scm_adapter")
				adapterModel.Location = core.StringPtr("us-south")
				adapterModel.ResourceGroup = core.StringPtr("testString")
				adapterModel.Tags = []string{"testString"}
				adapterModel.AdapterEndpointURL = core.StringPtr("testString")
				adapterModel.ServiceID = core.StringPtr("testString")
				adapterModel.Apikey = core.StringPtr("testString")
				adapterModel.UserState = userStateModel
				adapterModel.IgnoreInflightOperations = core.BoolPtr(true)
				adapterModel.AdapterID = core.StringPtr("testString")
				adapterModel.RegisteredBy = core.StringPtr("testString")
				adapterModel.RegisteredAt = CreateMockDateTime()
				adapterModel.UpdatedAt = CreateMockDateTime()
				adapterModel.UpdatedBy = core.StringPtr("testString")
				adapterModel.SysLock = systemLockModel
				adapterModel.AdapterHealth = core.StringPtr("active")
				adapterModel.LastHealthCheckedAt = CreateMockDateTime()
				adapterModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceAdapterOptions model
				replaceAdapterOptionsModel := new(schematics20apiv2.ReplaceAdapterOptions)
				replaceAdapterOptionsModel.AdapterID = core.StringPtr("testString")
				replaceAdapterOptionsModel.Adapter = adapterModel
				replaceAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ReplaceAdapter(replaceAdapterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceAdapter with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Adapter model
				adapterModel := new(schematics20apiv2.Adapter)
				adapterModel.AdapterName = core.StringPtr("testString")
				adapterModel.AdapterType = core.StringPtr("scm_adapter")
				adapterModel.Location = core.StringPtr("us-south")
				adapterModel.ResourceGroup = core.StringPtr("testString")
				adapterModel.Tags = []string{"testString"}
				adapterModel.AdapterEndpointURL = core.StringPtr("testString")
				adapterModel.ServiceID = core.StringPtr("testString")
				adapterModel.Apikey = core.StringPtr("testString")
				adapterModel.UserState = userStateModel
				adapterModel.IgnoreInflightOperations = core.BoolPtr(true)
				adapterModel.AdapterID = core.StringPtr("testString")
				adapterModel.RegisteredBy = core.StringPtr("testString")
				adapterModel.RegisteredAt = CreateMockDateTime()
				adapterModel.UpdatedAt = CreateMockDateTime()
				adapterModel.UpdatedBy = core.StringPtr("testString")
				adapterModel.SysLock = systemLockModel
				adapterModel.AdapterHealth = core.StringPtr("active")
				adapterModel.LastHealthCheckedAt = CreateMockDateTime()
				adapterModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceAdapterOptions model
				replaceAdapterOptionsModel := new(schematics20apiv2.ReplaceAdapterOptions)
				replaceAdapterOptionsModel.AdapterID = core.StringPtr("testString")
				replaceAdapterOptionsModel.Adapter = adapterModel
				replaceAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ReplaceAdapter(replaceAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceAdapterOptions model with no property values
				replaceAdapterOptionsModelNew := new(schematics20apiv2.ReplaceAdapterOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ReplaceAdapter(replaceAdapterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteAdapter(deleteAdapterOptions *DeleteAdapterOptions)`, func() {
		deleteAdapterPath := "/v2/settings/adapters/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteAdapterPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteAdapter successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteAdapter(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteAdapterOptions model
				deleteAdapterOptionsModel := new(schematics20apiv2.DeleteAdapterOptions)
				deleteAdapterOptionsModel.AdapterID = core.StringPtr("testString")
				deleteAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteAdapter(deleteAdapterOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteAdapter with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteAdapterOptions model
				deleteAdapterOptionsModel := new(schematics20apiv2.DeleteAdapterOptions)
				deleteAdapterOptionsModel.AdapterID = core.StringPtr("testString")
				deleteAdapterOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteAdapter(deleteAdapterOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteAdapterOptions model with no property values
				deleteAdapterOptionsModelNew := new(schematics20apiv2.DeleteAdapterOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteAdapter(deleteAdapterOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListConnection(listConnectionOptions *ListConnectionOptions) - Operation response error`, func() {
		listConnectionPath := "/v2/settings/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listConnectionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListConnection with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListConnectionOptions model
				listConnectionOptionsModel := new(schematics20apiv2.ListConnectionOptions)
				listConnectionOptionsModel.Offset = core.Int64Ptr(int64(0))
				listConnectionOptionsModel.Limit = core.Int64Ptr(int64(1))
				listConnectionOptionsModel.Sort = core.StringPtr("testString")
				listConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListConnection(listConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListConnection(listConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListConnection(listConnectionOptions *ListConnectionOptions)`, func() {
		listConnectionPath := "/v2/settings/connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listConnectionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "connections": [{"name": "Name", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "connection_type": "ConnectionType", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListConnection successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListConnectionOptions model
				listConnectionOptionsModel := new(schematics20apiv2.ListConnectionOptions)
				listConnectionOptionsModel.Offset = core.Int64Ptr(int64(0))
				listConnectionOptionsModel.Limit = core.Int64Ptr(int64(1))
				listConnectionOptionsModel.Sort = core.StringPtr("testString")
				listConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListConnectionWithContext(ctx, listConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListConnection(listConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListConnectionWithContext(ctx, listConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listConnectionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "connections": [{"name": "Name", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "connection_type": "ConnectionType", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListConnection successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListConnectionOptions model
				listConnectionOptionsModel := new(schematics20apiv2.ListConnectionOptions)
				listConnectionOptionsModel.Offset = core.Int64Ptr(int64(0))
				listConnectionOptionsModel.Limit = core.Int64Ptr(int64(1))
				listConnectionOptionsModel.Sort = core.StringPtr("testString")
				listConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListConnection(listConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListConnection with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListConnectionOptions model
				listConnectionOptionsModel := new(schematics20apiv2.ListConnectionOptions)
				listConnectionOptionsModel.Offset = core.Int64Ptr(int64(0))
				listConnectionOptionsModel.Limit = core.Int64Ptr(int64(1))
				listConnectionOptionsModel.Sort = core.StringPtr("testString")
				listConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListConnection(listConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateConnection(createConnectionOptions *CreateConnectionOptions) - Operation response error`, func() {
		createConnectionPath := "/v2/settings/connections"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createConnectionPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateConnection with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Connection model
				connectionModel := new(schematics20apiv2.Connection)
				connectionModel.Name = core.StringPtr("testString")
				connectionModel.Description = core.StringPtr("testString")
				connectionModel.ResourceGroup = core.StringPtr("testString")
				connectionModel.Location = core.StringPtr("us-south")
				connectionModel.Tags = []string{"testString"}
				connectionModel.ConnectionType = core.StringPtr("testString")
				connectionModel.ConnectionProperties = []schematics20apiv2.VariableData{*variableDataModel}
				connectionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateConnectionOptions model
				createConnectionOptionsModel := new(schematics20apiv2.CreateConnectionOptions)
				createConnectionOptionsModel.Connection = connectionModel
				createConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateConnection(createConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateConnection(createConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateConnection(createConnectionOptions *CreateConnectionOptions)`, func() {
		createConnectionPath := "/v2/settings/connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createConnectionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "crn": "Crn", "connection_type": "ConnectionType", "connection_properties": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}`)
				}))
			})
			It(`Invoke CreateConnection successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Connection model
				connectionModel := new(schematics20apiv2.Connection)
				connectionModel.Name = core.StringPtr("testString")
				connectionModel.Description = core.StringPtr("testString")
				connectionModel.ResourceGroup = core.StringPtr("testString")
				connectionModel.Location = core.StringPtr("us-south")
				connectionModel.Tags = []string{"testString"}
				connectionModel.ConnectionType = core.StringPtr("testString")
				connectionModel.ConnectionProperties = []schematics20apiv2.VariableData{*variableDataModel}
				connectionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateConnectionOptions model
				createConnectionOptionsModel := new(schematics20apiv2.CreateConnectionOptions)
				createConnectionOptionsModel.Connection = connectionModel
				createConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateConnectionWithContext(ctx, createConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateConnection(createConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateConnectionWithContext(ctx, createConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createConnectionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "description": "Description", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "crn": "Crn", "connection_type": "ConnectionType", "connection_properties": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}`)
				}))
			})
			It(`Invoke CreateConnection successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Connection model
				connectionModel := new(schematics20apiv2.Connection)
				connectionModel.Name = core.StringPtr("testString")
				connectionModel.Description = core.StringPtr("testString")
				connectionModel.ResourceGroup = core.StringPtr("testString")
				connectionModel.Location = core.StringPtr("us-south")
				connectionModel.Tags = []string{"testString"}
				connectionModel.ConnectionType = core.StringPtr("testString")
				connectionModel.ConnectionProperties = []schematics20apiv2.VariableData{*variableDataModel}
				connectionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateConnectionOptions model
				createConnectionOptionsModel := new(schematics20apiv2.CreateConnectionOptions)
				createConnectionOptionsModel.Connection = connectionModel
				createConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateConnection(createConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateConnection with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Connection model
				connectionModel := new(schematics20apiv2.Connection)
				connectionModel.Name = core.StringPtr("testString")
				connectionModel.Description = core.StringPtr("testString")
				connectionModel.ResourceGroup = core.StringPtr("testString")
				connectionModel.Location = core.StringPtr("us-south")
				connectionModel.Tags = []string{"testString"}
				connectionModel.ConnectionType = core.StringPtr("testString")
				connectionModel.ConnectionProperties = []schematics20apiv2.VariableData{*variableDataModel}
				connectionModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateConnectionOptions model
				createConnectionOptionsModel := new(schematics20apiv2.CreateConnectionOptions)
				createConnectionOptionsModel.Connection = connectionModel
				createConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateConnection(createConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateConnectionOptions model with no property values
				createConnectionOptionsModelNew := new(schematics20apiv2.CreateConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateConnection(createConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetConnection(getConnectionOptions *GetConnectionOptions) - Operation response error`, func() {
		getConnectionPath := "/v2/settings/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getConnectionPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetConnection with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetConnectionOptions model
				getConnectionOptionsModel := new(schematics20apiv2.GetConnectionOptions)
				getConnectionOptionsModel.ConnectionID = core.StringPtr("testString")
				getConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetConnection(getConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetConnection(getConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetConnection(getConnectionOptions *GetConnectionOptions)`, func() {
		getConnectionPath := "/v2/settings/connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getConnectionPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "connection_type": "ConnectionType", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}`)
				}))
			})
			It(`Invoke GetConnection successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetConnectionOptions model
				getConnectionOptionsModel := new(schematics20apiv2.GetConnectionOptions)
				getConnectionOptionsModel.ConnectionID = core.StringPtr("testString")
				getConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetConnectionWithContext(ctx, getConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetConnection(getConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetConnectionWithContext(ctx, getConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getConnectionPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "resource_group": "ResourceGroup", "location": "us-south", "tags": ["Tags"], "connection_type": "ConnectionType", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}`)
				}))
			})
			It(`Invoke GetConnection successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetConnectionOptions model
				getConnectionOptionsModel := new(schematics20apiv2.GetConnectionOptions)
				getConnectionOptionsModel.ConnectionID = core.StringPtr("testString")
				getConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetConnection(getConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetConnection with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetConnectionOptions model
				getConnectionOptionsModel := new(schematics20apiv2.GetConnectionOptions)
				getConnectionOptionsModel.ConnectionID = core.StringPtr("testString")
				getConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetConnection(getConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetConnectionOptions model with no property values
				getConnectionOptionsModelNew := new(schematics20apiv2.GetConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetConnection(getConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteConnection(deleteConnectionOptions *DeleteConnectionOptions)`, func() {
		deleteConnectionPath := "/v2/settings/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteConnectionPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteConnection successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteConnectionOptions model
				deleteConnectionOptionsModel := new(schematics20apiv2.DeleteConnectionOptions)
				deleteConnectionOptionsModel.ConnectionID = core.StringPtr("testString")
				deleteConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteConnection(deleteConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteConnection with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteConnectionOptions model
				deleteConnectionOptionsModel := new(schematics20apiv2.DeleteConnectionOptions)
				deleteConnectionOptionsModel.ConnectionID = core.StringPtr("testString")
				deleteConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteConnection(deleteConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteConnectionOptions model with no property values
				deleteConnectionOptionsModelNew := new(schematics20apiv2.DeleteConnectionOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteConnection(deleteConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDatasources(listDatasourcesOptions *ListDatasourcesOptions) - Operation response error`, func() {
		listDatasourcesPath := "/v2/settings/datasources"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDatasourcesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListDatasources with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListDatasourcesOptions model
				listDatasourcesOptionsModel := new(schematics20apiv2.ListDatasourcesOptions)
				listDatasourcesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listDatasourcesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDatasourcesOptionsModel.Sort = core.StringPtr("testString")
				listDatasourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListDatasources(listDatasourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListDatasources(listDatasourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListDatasources(listDatasourcesOptions *ListDatasourcesOptions)`, func() {
		listDatasourcesPath := "/v2/settings/datasources"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDatasourcesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "datasources": [{"name": "Name", "description": "Description", "resource_group": "ResourceGroup", "tags": ["Tags"], "connection": "Connection", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListDatasources successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListDatasourcesOptions model
				listDatasourcesOptionsModel := new(schematics20apiv2.ListDatasourcesOptions)
				listDatasourcesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listDatasourcesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDatasourcesOptionsModel.Sort = core.StringPtr("testString")
				listDatasourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListDatasourcesWithContext(ctx, listDatasourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListDatasources(listDatasourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListDatasourcesWithContext(ctx, listDatasourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDatasourcesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "datasources": [{"name": "Name", "description": "Description", "resource_group": "ResourceGroup", "tags": ["Tags"], "connection": "Connection", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListDatasources successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListDatasources(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListDatasourcesOptions model
				listDatasourcesOptionsModel := new(schematics20apiv2.ListDatasourcesOptions)
				listDatasourcesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listDatasourcesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDatasourcesOptionsModel.Sort = core.StringPtr("testString")
				listDatasourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListDatasources(listDatasourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListDatasources with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListDatasourcesOptions model
				listDatasourcesOptionsModel := new(schematics20apiv2.ListDatasourcesOptions)
				listDatasourcesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listDatasourcesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDatasourcesOptionsModel.Sort = core.StringPtr("testString")
				listDatasourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListDatasources(listDatasourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDatasource(createDatasourceOptions *CreateDatasourceOptions) - Operation response error`, func() {
		createDatasourcePath := "/v2/settings/datasources"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDatasourcePath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateDatasource with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Datasource model
				datasourceModel := new(schematics20apiv2.Datasource)
				datasourceModel.Name = core.StringPtr("testString")
				datasourceModel.Description = core.StringPtr("testString")
				datasourceModel.ResourceGroup = core.StringPtr("testString")
				datasourceModel.Tags = []string{"testString"}
				datasourceModel.Connection = core.StringPtr("testString")
				datasourceModel.DatasourceProperties = []schematics20apiv2.VariableData{*variableDataModel}
				datasourceModel.Location = core.StringPtr("us-south")
				datasourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateDatasourceOptions model
				createDatasourceOptionsModel := new(schematics20apiv2.CreateDatasourceOptions)
				createDatasourceOptionsModel.Datasource = datasourceModel
				createDatasourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateDatasource(createDatasourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateDatasource(createDatasourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateDatasource(createDatasourceOptions *CreateDatasourceOptions)`, func() {
		createDatasourcePath := "/v2/settings/datasources"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDatasourcePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "description": "Description", "resource_group": "ResourceGroup", "tags": ["Tags"], "connection": "Connection", "datasource_properties": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "location": "us-south", "id": "ID", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}`)
				}))
			})
			It(`Invoke CreateDatasource successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Datasource model
				datasourceModel := new(schematics20apiv2.Datasource)
				datasourceModel.Name = core.StringPtr("testString")
				datasourceModel.Description = core.StringPtr("testString")
				datasourceModel.ResourceGroup = core.StringPtr("testString")
				datasourceModel.Tags = []string{"testString"}
				datasourceModel.Connection = core.StringPtr("testString")
				datasourceModel.DatasourceProperties = []schematics20apiv2.VariableData{*variableDataModel}
				datasourceModel.Location = core.StringPtr("us-south")
				datasourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateDatasourceOptions model
				createDatasourceOptionsModel := new(schematics20apiv2.CreateDatasourceOptions)
				createDatasourceOptionsModel.Datasource = datasourceModel
				createDatasourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateDatasourceWithContext(ctx, createDatasourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateDatasource(createDatasourceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateDatasourceWithContext(ctx, createDatasourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDatasourcePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "description": "Description", "resource_group": "ResourceGroup", "tags": ["Tags"], "connection": "Connection", "datasource_properties": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "location": "us-south", "id": "ID", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}`)
				}))
			})
			It(`Invoke CreateDatasource successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateDatasource(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Datasource model
				datasourceModel := new(schematics20apiv2.Datasource)
				datasourceModel.Name = core.StringPtr("testString")
				datasourceModel.Description = core.StringPtr("testString")
				datasourceModel.ResourceGroup = core.StringPtr("testString")
				datasourceModel.Tags = []string{"testString"}
				datasourceModel.Connection = core.StringPtr("testString")
				datasourceModel.DatasourceProperties = []schematics20apiv2.VariableData{*variableDataModel}
				datasourceModel.Location = core.StringPtr("us-south")
				datasourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateDatasourceOptions model
				createDatasourceOptionsModel := new(schematics20apiv2.CreateDatasourceOptions)
				createDatasourceOptionsModel.Datasource = datasourceModel
				createDatasourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateDatasource(createDatasourceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateDatasource with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Datasource model
				datasourceModel := new(schematics20apiv2.Datasource)
				datasourceModel.Name = core.StringPtr("testString")
				datasourceModel.Description = core.StringPtr("testString")
				datasourceModel.ResourceGroup = core.StringPtr("testString")
				datasourceModel.Tags = []string{"testString"}
				datasourceModel.Connection = core.StringPtr("testString")
				datasourceModel.DatasourceProperties = []schematics20apiv2.VariableData{*variableDataModel}
				datasourceModel.Location = core.StringPtr("us-south")
				datasourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateDatasourceOptions model
				createDatasourceOptionsModel := new(schematics20apiv2.CreateDatasourceOptions)
				createDatasourceOptionsModel.Datasource = datasourceModel
				createDatasourceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateDatasource(createDatasourceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateDatasourceOptions model with no property values
				createDatasourceOptionsModelNew := new(schematics20apiv2.CreateDatasourceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateDatasource(createDatasourceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetData(getDataOptions *GetDataOptions) - Operation response error`, func() {
		getDataPath := "/v2/settings/datasources/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDataPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["preview"]).To(Equal([]string{"all"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetData with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetDataOptions model
				getDataOptionsModel := new(schematics20apiv2.GetDataOptions)
				getDataOptionsModel.DatasourceID = core.StringPtr("testString")
				getDataOptionsModel.Preview = core.StringPtr("all")
				getDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetData(getDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetData(getDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetData(getDataOptions *GetDataOptions)`, func() {
		getDataPath := "/v2/settings/datasources/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDataPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["preview"]).To(Equal([]string{"all"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "all", "connection": "Connection", "data": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "version": "Version", "message": "Message", "viewed_at": "2019-01-01T12:00:00.000Z", "viewed_by": "ViewedBy"}`)
				}))
			})
			It(`Invoke GetData successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetDataOptions model
				getDataOptionsModel := new(schematics20apiv2.GetDataOptions)
				getDataOptionsModel.DatasourceID = core.StringPtr("testString")
				getDataOptionsModel.Preview = core.StringPtr("all")
				getDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetDataWithContext(ctx, getDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetData(getDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetDataWithContext(ctx, getDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDataPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["preview"]).To(Equal([]string{"all"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "all", "connection": "Connection", "data": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "version": "Version", "message": "Message", "viewed_at": "2019-01-01T12:00:00.000Z", "viewed_by": "ViewedBy"}`)
				}))
			})
			It(`Invoke GetData successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetData(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDataOptions model
				getDataOptionsModel := new(schematics20apiv2.GetDataOptions)
				getDataOptionsModel.DatasourceID = core.StringPtr("testString")
				getDataOptionsModel.Preview = core.StringPtr("all")
				getDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetData(getDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetData with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetDataOptions model
				getDataOptionsModel := new(schematics20apiv2.GetDataOptions)
				getDataOptionsModel.DatasourceID = core.StringPtr("testString")
				getDataOptionsModel.Preview = core.StringPtr("all")
				getDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetData(getDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDataOptions model with no property values
				getDataOptionsModelNew := new(schematics20apiv2.GetDataOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetData(getDataOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListCart(listCartOptions *ListCartOptions) - Operation response error`, func() {
		listCartPath := "/v2/cart"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCartPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["service_name"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListCart with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListCartOptions model
				listCartOptionsModel := new(schematics20apiv2.ListCartOptions)
				listCartOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCartOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCartOptionsModel.ServiceName = core.StringPtr("testString")
				listCartOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListCart(listCartOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListCart(listCartOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListCart(listCartOptions *ListCartOptions)`, func() {
		listCartPath := "/v2/cart"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCartPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["service_name"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "cart": [{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "service_name": "SatelliteLocation", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Order_Create_Init", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}}]}`)
				}))
			})
			It(`Invoke ListCart successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListCartOptions model
				listCartOptionsModel := new(schematics20apiv2.ListCartOptions)
				listCartOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCartOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCartOptionsModel.ServiceName = core.StringPtr("testString")
				listCartOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListCartWithContext(ctx, listCartOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListCart(listCartOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListCartWithContext(ctx, listCartOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCartPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["service_name"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "cart": [{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "service_name": "SatelliteLocation", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "Order_Create_Init", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}}]}`)
				}))
			})
			It(`Invoke ListCart successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListCart(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListCartOptions model
				listCartOptionsModel := new(schematics20apiv2.ListCartOptions)
				listCartOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCartOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCartOptionsModel.ServiceName = core.StringPtr("testString")
				listCartOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListCart(listCartOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListCart with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListCartOptions model
				listCartOptionsModel := new(schematics20apiv2.ListCartOptions)
				listCartOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCartOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCartOptionsModel.ServiceName = core.StringPtr("testString")
				listCartOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListCart(listCartOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateCartOrder(createCartOrderOptions *CreateCartOrderOptions) - Operation response error`, func() {
		createCartOrderPath := "/v2/cart"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createCartOrderPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateCartOrder with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SKUUserState model
				skuUserStateModel := new(schematics20apiv2.SKUUserState)
				skuUserStateModel.State = core.StringPtr("testString")
				skuUserStateModel.SetBy = core.StringPtr("testString")
				skuUserStateModel.SetAt = CreateMockDateTime()
				skuUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ItemSKU model
				itemSkuModel := new(schematics20apiv2.ItemSKU)
				itemSkuModel.SkuID = core.StringPtr("testString")
				itemSkuModel.SkuType = core.StringPtr("testString")
				itemSkuModel.SkuSysLock = systemLockModel
				itemSkuModel.SkuUserState = skuUserStateModel
				itemSkuModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the OrderItemConfiguration model
				orderItemConfigurationModel := new(schematics20apiv2.OrderItemConfiguration)
				orderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				orderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				orderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Target = targetRequestModel
				orderItemConfigurationModel.Operation = core.StringPtr("configure")
				orderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				orderItemConfigurationModel.CatalogID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingID = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccount = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccountCrn = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKindID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingTargetKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersionID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingFulfilmentKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersion = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerURL = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerSsh = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				orderItemConfigurationModel.ItemSku = itemSkuModel
				orderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderUserState model
				cartOrderUserStateModel := new(schematics20apiv2.CartOrderUserState)
				cartOrderUserStateModel.State = core.StringPtr("Order_Create_Init")
				cartOrderUserStateModel.SetBy = core.StringPtr("testString")
				cartOrderUserStateModel.SetAt = CreateMockDateTime()
				cartOrderUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderLiteState model
				cartOrderLiteStateModel := new(schematics20apiv2.CartOrderLiteState)
				cartOrderLiteStateModel.StatusCode = core.StringPtr("normal")
				cartOrderLiteStateModel.StatusMessage = core.StringPtr("testString")
				cartOrderLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrder model
				cartOrderModel := new(schematics20apiv2.CartOrder)
				cartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				cartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				cartOrderModel.Tags = []string{"testString"}
				cartOrderModel.CartItems = []schematics20apiv2.OrderItemConfiguration{*orderItemConfigurationModel}
				cartOrderModel.ServiceName = core.StringPtr("SatelliteLocation")
				cartOrderModel.ResourceGroup = core.StringPtr("testString")
				cartOrderModel.Location = core.StringPtr("us-south")
				cartOrderModel.UserState = cartOrderUserStateModel
				cartOrderModel.SysLock = systemLockModel
				cartOrderModel.State = cartOrderLiteStateModel
				cartOrderModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateCartOrderOptions model
				createCartOrderOptionsModel := new(schematics20apiv2.CreateCartOrderOptions)
				createCartOrderOptionsModel.CartOrder = cartOrderModel
				createCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateCartOrder(createCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateCartOrder(createCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateCartOrder(createCartOrderOptions *CreateCartOrderOptions)`, func() {
		createCartOrderPath := "/v2/cart"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createCartOrderPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["Tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "target": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "operation": "configure", "service_data": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "mapping": [{"type": "Type", "input_param_name": "InputParamName", "output_param_name": "OutputParamName"}]}], "catalog_id": "CatalogID", "offering_id": "OfferingID", "owning_account": "OwningAccount", "owning_account_crn": "OwningAccountCrn", "offering_kind_id": "OfferingKindID", "offering_target_kind": "OfferingTargetKind", "offering_version_id": "OfferingVersionID", "offering_kind": "OfferingKind", "offering_fulfilment_kind": "OfferingFulfilmentKind", "offering_version": "OfferingVersion", "offering_provisioner_url": "OfferingProvisionerURL", "offering_provisioner_ssh": "OfferingProvisionerSsh", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "item_sku": {"sku_id": "SkuID", "sku_type": "SkuType", "sku_sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "State", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "ResourceGroup", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "CartOrderID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke CreateCartOrder successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SKUUserState model
				skuUserStateModel := new(schematics20apiv2.SKUUserState)
				skuUserStateModel.State = core.StringPtr("testString")
				skuUserStateModel.SetBy = core.StringPtr("testString")
				skuUserStateModel.SetAt = CreateMockDateTime()
				skuUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ItemSKU model
				itemSkuModel := new(schematics20apiv2.ItemSKU)
				itemSkuModel.SkuID = core.StringPtr("testString")
				itemSkuModel.SkuType = core.StringPtr("testString")
				itemSkuModel.SkuSysLock = systemLockModel
				itemSkuModel.SkuUserState = skuUserStateModel
				itemSkuModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the OrderItemConfiguration model
				orderItemConfigurationModel := new(schematics20apiv2.OrderItemConfiguration)
				orderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				orderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				orderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Target = targetRequestModel
				orderItemConfigurationModel.Operation = core.StringPtr("configure")
				orderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				orderItemConfigurationModel.CatalogID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingID = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccount = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccountCrn = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKindID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingTargetKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersionID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingFulfilmentKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersion = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerURL = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerSsh = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				orderItemConfigurationModel.ItemSku = itemSkuModel
				orderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderUserState model
				cartOrderUserStateModel := new(schematics20apiv2.CartOrderUserState)
				cartOrderUserStateModel.State = core.StringPtr("Order_Create_Init")
				cartOrderUserStateModel.SetBy = core.StringPtr("testString")
				cartOrderUserStateModel.SetAt = CreateMockDateTime()
				cartOrderUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderLiteState model
				cartOrderLiteStateModel := new(schematics20apiv2.CartOrderLiteState)
				cartOrderLiteStateModel.StatusCode = core.StringPtr("normal")
				cartOrderLiteStateModel.StatusMessage = core.StringPtr("testString")
				cartOrderLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrder model
				cartOrderModel := new(schematics20apiv2.CartOrder)
				cartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				cartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				cartOrderModel.Tags = []string{"testString"}
				cartOrderModel.CartItems = []schematics20apiv2.OrderItemConfiguration{*orderItemConfigurationModel}
				cartOrderModel.ServiceName = core.StringPtr("SatelliteLocation")
				cartOrderModel.ResourceGroup = core.StringPtr("testString")
				cartOrderModel.Location = core.StringPtr("us-south")
				cartOrderModel.UserState = cartOrderUserStateModel
				cartOrderModel.SysLock = systemLockModel
				cartOrderModel.State = cartOrderLiteStateModel
				cartOrderModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateCartOrderOptions model
				createCartOrderOptionsModel := new(schematics20apiv2.CreateCartOrderOptions)
				createCartOrderOptionsModel.CartOrder = cartOrderModel
				createCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateCartOrderWithContext(ctx, createCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateCartOrder(createCartOrderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateCartOrderWithContext(ctx, createCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createCartOrderPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["Tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "target": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "operation": "configure", "service_data": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "mapping": [{"type": "Type", "input_param_name": "InputParamName", "output_param_name": "OutputParamName"}]}], "catalog_id": "CatalogID", "offering_id": "OfferingID", "owning_account": "OwningAccount", "owning_account_crn": "OwningAccountCrn", "offering_kind_id": "OfferingKindID", "offering_target_kind": "OfferingTargetKind", "offering_version_id": "OfferingVersionID", "offering_kind": "OfferingKind", "offering_fulfilment_kind": "OfferingFulfilmentKind", "offering_version": "OfferingVersion", "offering_provisioner_url": "OfferingProvisionerURL", "offering_provisioner_ssh": "OfferingProvisionerSsh", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "item_sku": {"sku_id": "SkuID", "sku_type": "SkuType", "sku_sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "State", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "ResourceGroup", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "CartOrderID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke CreateCartOrder successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateCartOrder(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SKUUserState model
				skuUserStateModel := new(schematics20apiv2.SKUUserState)
				skuUserStateModel.State = core.StringPtr("testString")
				skuUserStateModel.SetBy = core.StringPtr("testString")
				skuUserStateModel.SetAt = CreateMockDateTime()
				skuUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ItemSKU model
				itemSkuModel := new(schematics20apiv2.ItemSKU)
				itemSkuModel.SkuID = core.StringPtr("testString")
				itemSkuModel.SkuType = core.StringPtr("testString")
				itemSkuModel.SkuSysLock = systemLockModel
				itemSkuModel.SkuUserState = skuUserStateModel
				itemSkuModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the OrderItemConfiguration model
				orderItemConfigurationModel := new(schematics20apiv2.OrderItemConfiguration)
				orderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				orderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				orderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Target = targetRequestModel
				orderItemConfigurationModel.Operation = core.StringPtr("configure")
				orderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				orderItemConfigurationModel.CatalogID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingID = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccount = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccountCrn = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKindID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingTargetKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersionID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingFulfilmentKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersion = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerURL = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerSsh = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				orderItemConfigurationModel.ItemSku = itemSkuModel
				orderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderUserState model
				cartOrderUserStateModel := new(schematics20apiv2.CartOrderUserState)
				cartOrderUserStateModel.State = core.StringPtr("Order_Create_Init")
				cartOrderUserStateModel.SetBy = core.StringPtr("testString")
				cartOrderUserStateModel.SetAt = CreateMockDateTime()
				cartOrderUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderLiteState model
				cartOrderLiteStateModel := new(schematics20apiv2.CartOrderLiteState)
				cartOrderLiteStateModel.StatusCode = core.StringPtr("normal")
				cartOrderLiteStateModel.StatusMessage = core.StringPtr("testString")
				cartOrderLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrder model
				cartOrderModel := new(schematics20apiv2.CartOrder)
				cartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				cartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				cartOrderModel.Tags = []string{"testString"}
				cartOrderModel.CartItems = []schematics20apiv2.OrderItemConfiguration{*orderItemConfigurationModel}
				cartOrderModel.ServiceName = core.StringPtr("SatelliteLocation")
				cartOrderModel.ResourceGroup = core.StringPtr("testString")
				cartOrderModel.Location = core.StringPtr("us-south")
				cartOrderModel.UserState = cartOrderUserStateModel
				cartOrderModel.SysLock = systemLockModel
				cartOrderModel.State = cartOrderLiteStateModel
				cartOrderModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateCartOrderOptions model
				createCartOrderOptionsModel := new(schematics20apiv2.CreateCartOrderOptions)
				createCartOrderOptionsModel.CartOrder = cartOrderModel
				createCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateCartOrder(createCartOrderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateCartOrder with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SKUUserState model
				skuUserStateModel := new(schematics20apiv2.SKUUserState)
				skuUserStateModel.State = core.StringPtr("testString")
				skuUserStateModel.SetBy = core.StringPtr("testString")
				skuUserStateModel.SetAt = CreateMockDateTime()
				skuUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ItemSKU model
				itemSkuModel := new(schematics20apiv2.ItemSKU)
				itemSkuModel.SkuID = core.StringPtr("testString")
				itemSkuModel.SkuType = core.StringPtr("testString")
				itemSkuModel.SkuSysLock = systemLockModel
				itemSkuModel.SkuUserState = skuUserStateModel
				itemSkuModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the OrderItemConfiguration model
				orderItemConfigurationModel := new(schematics20apiv2.OrderItemConfiguration)
				orderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				orderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				orderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Target = targetRequestModel
				orderItemConfigurationModel.Operation = core.StringPtr("configure")
				orderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				orderItemConfigurationModel.CatalogID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingID = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccount = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccountCrn = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKindID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingTargetKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersionID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingFulfilmentKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersion = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerURL = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerSsh = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				orderItemConfigurationModel.ItemSku = itemSkuModel
				orderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderUserState model
				cartOrderUserStateModel := new(schematics20apiv2.CartOrderUserState)
				cartOrderUserStateModel.State = core.StringPtr("Order_Create_Init")
				cartOrderUserStateModel.SetBy = core.StringPtr("testString")
				cartOrderUserStateModel.SetAt = CreateMockDateTime()
				cartOrderUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderLiteState model
				cartOrderLiteStateModel := new(schematics20apiv2.CartOrderLiteState)
				cartOrderLiteStateModel.StatusCode = core.StringPtr("normal")
				cartOrderLiteStateModel.StatusMessage = core.StringPtr("testString")
				cartOrderLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrder model
				cartOrderModel := new(schematics20apiv2.CartOrder)
				cartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				cartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				cartOrderModel.Tags = []string{"testString"}
				cartOrderModel.CartItems = []schematics20apiv2.OrderItemConfiguration{*orderItemConfigurationModel}
				cartOrderModel.ServiceName = core.StringPtr("SatelliteLocation")
				cartOrderModel.ResourceGroup = core.StringPtr("testString")
				cartOrderModel.Location = core.StringPtr("us-south")
				cartOrderModel.UserState = cartOrderUserStateModel
				cartOrderModel.SysLock = systemLockModel
				cartOrderModel.State = cartOrderLiteStateModel
				cartOrderModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateCartOrderOptions model
				createCartOrderOptionsModel := new(schematics20apiv2.CreateCartOrderOptions)
				createCartOrderOptionsModel.CartOrder = cartOrderModel
				createCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateCartOrder(createCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateCartOrderOptions model with no property values
				createCartOrderOptionsModelNew := new(schematics20apiv2.CreateCartOrderOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateCartOrder(createCartOrderOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCartOrder(getCartOrderOptions *GetCartOrderOptions) - Operation response error`, func() {
		getCartOrderPath := "/v2/cart/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartOrderPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCartOrder with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCartOrderOptions model
				getCartOrderOptionsModel := new(schematics20apiv2.GetCartOrderOptions)
				getCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderOptionsModel.Profile = core.StringPtr("summary")
				getCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetCartOrder(getCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetCartOrder(getCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetCartOrder(getCartOrderOptions *GetCartOrderOptions)`, func() {
		getCartOrderPath := "/v2/cart/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartOrderPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["Tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "target": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "operation": "configure", "service_data": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "mapping": [{"type": "Type", "input_param_name": "InputParamName", "output_param_name": "OutputParamName"}]}], "catalog_id": "CatalogID", "offering_id": "OfferingID", "owning_account": "OwningAccount", "owning_account_crn": "OwningAccountCrn", "offering_kind_id": "OfferingKindID", "offering_target_kind": "OfferingTargetKind", "offering_version_id": "OfferingVersionID", "offering_kind": "OfferingKind", "offering_fulfilment_kind": "OfferingFulfilmentKind", "offering_version": "OfferingVersion", "offering_provisioner_url": "OfferingProvisionerURL", "offering_provisioner_ssh": "OfferingProvisionerSsh", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "item_sku": {"sku_id": "SkuID", "sku_type": "SkuType", "sku_sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "State", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "ResourceGroup", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "CartOrderID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke GetCartOrder successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetCartOrderOptions model
				getCartOrderOptionsModel := new(schematics20apiv2.GetCartOrderOptions)
				getCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderOptionsModel.Profile = core.StringPtr("summary")
				getCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetCartOrderWithContext(ctx, getCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetCartOrder(getCartOrderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetCartOrderWithContext(ctx, getCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartOrderPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["Tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "target": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "operation": "configure", "service_data": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "mapping": [{"type": "Type", "input_param_name": "InputParamName", "output_param_name": "OutputParamName"}]}], "catalog_id": "CatalogID", "offering_id": "OfferingID", "owning_account": "OwningAccount", "owning_account_crn": "OwningAccountCrn", "offering_kind_id": "OfferingKindID", "offering_target_kind": "OfferingTargetKind", "offering_version_id": "OfferingVersionID", "offering_kind": "OfferingKind", "offering_fulfilment_kind": "OfferingFulfilmentKind", "offering_version": "OfferingVersion", "offering_provisioner_url": "OfferingProvisionerURL", "offering_provisioner_ssh": "OfferingProvisionerSsh", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "item_sku": {"sku_id": "SkuID", "sku_type": "SkuType", "sku_sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "State", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "ResourceGroup", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "CartOrderID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke GetCartOrder successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetCartOrder(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCartOrderOptions model
				getCartOrderOptionsModel := new(schematics20apiv2.GetCartOrderOptions)
				getCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderOptionsModel.Profile = core.StringPtr("summary")
				getCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetCartOrder(getCartOrderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCartOrder with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCartOrderOptions model
				getCartOrderOptionsModel := new(schematics20apiv2.GetCartOrderOptions)
				getCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderOptionsModel.Profile = core.StringPtr("summary")
				getCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetCartOrder(getCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCartOrderOptions model with no property values
				getCartOrderOptionsModelNew := new(schematics20apiv2.GetCartOrderOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetCartOrder(getCartOrderOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceCartOrder(replaceCartOrderOptions *ReplaceCartOrderOptions) - Operation response error`, func() {
		replaceCartOrderPath := "/v2/cart/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceCartOrderPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["operation"]).To(Equal([]string{"0"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceCartOrder with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SKUUserState model
				skuUserStateModel := new(schematics20apiv2.SKUUserState)
				skuUserStateModel.State = core.StringPtr("testString")
				skuUserStateModel.SetBy = core.StringPtr("testString")
				skuUserStateModel.SetAt = CreateMockDateTime()
				skuUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ItemSKU model
				itemSkuModel := new(schematics20apiv2.ItemSKU)
				itemSkuModel.SkuID = core.StringPtr("testString")
				itemSkuModel.SkuType = core.StringPtr("testString")
				itemSkuModel.SkuSysLock = systemLockModel
				itemSkuModel.SkuUserState = skuUserStateModel
				itemSkuModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the OrderItemConfiguration model
				orderItemConfigurationModel := new(schematics20apiv2.OrderItemConfiguration)
				orderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				orderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				orderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Target = targetRequestModel
				orderItemConfigurationModel.Operation = core.StringPtr("configure")
				orderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				orderItemConfigurationModel.CatalogID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingID = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccount = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccountCrn = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKindID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingTargetKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersionID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingFulfilmentKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersion = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerURL = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerSsh = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				orderItemConfigurationModel.ItemSku = itemSkuModel
				orderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderUserState model
				cartOrderUserStateModel := new(schematics20apiv2.CartOrderUserState)
				cartOrderUserStateModel.State = core.StringPtr("Order_Create_Init")
				cartOrderUserStateModel.SetBy = core.StringPtr("testString")
				cartOrderUserStateModel.SetAt = CreateMockDateTime()
				cartOrderUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderLiteState model
				cartOrderLiteStateModel := new(schematics20apiv2.CartOrderLiteState)
				cartOrderLiteStateModel.StatusCode = core.StringPtr("normal")
				cartOrderLiteStateModel.StatusMessage = core.StringPtr("testString")
				cartOrderLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrder model
				cartOrderModel := new(schematics20apiv2.CartOrder)
				cartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				cartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				cartOrderModel.Tags = []string{"testString"}
				cartOrderModel.CartItems = []schematics20apiv2.OrderItemConfiguration{*orderItemConfigurationModel}
				cartOrderModel.ServiceName = core.StringPtr("SatelliteLocation")
				cartOrderModel.ResourceGroup = core.StringPtr("testString")
				cartOrderModel.Location = core.StringPtr("us-south")
				cartOrderModel.UserState = cartOrderUserStateModel
				cartOrderModel.SysLock = systemLockModel
				cartOrderModel.State = cartOrderLiteStateModel
				cartOrderModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceCartOrderOptions model
				replaceCartOrderOptionsModel := new(schematics20apiv2.ReplaceCartOrderOptions)
				replaceCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				replaceCartOrderOptionsModel.Operation = core.StringPtr("testString")
				replaceCartOrderOptionsModel.CartOrder = cartOrderModel
				replaceCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ReplaceCartOrder(replaceCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ReplaceCartOrder(replaceCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceCartOrder(replaceCartOrderOptions *ReplaceCartOrderOptions)`, func() {
		replaceCartOrderPath := "/v2/cart/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceCartOrderPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["operation"]).To(Equal([]string{"0"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["Tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "target": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "operation": "configure", "service_data": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "mapping": [{"type": "Type", "input_param_name": "InputParamName", "output_param_name": "OutputParamName"}]}], "catalog_id": "CatalogID", "offering_id": "OfferingID", "owning_account": "OwningAccount", "owning_account_crn": "OwningAccountCrn", "offering_kind_id": "OfferingKindID", "offering_target_kind": "OfferingTargetKind", "offering_version_id": "OfferingVersionID", "offering_kind": "OfferingKind", "offering_fulfilment_kind": "OfferingFulfilmentKind", "offering_version": "OfferingVersion", "offering_provisioner_url": "OfferingProvisionerURL", "offering_provisioner_ssh": "OfferingProvisionerSsh", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "item_sku": {"sku_id": "SkuID", "sku_type": "SkuType", "sku_sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "State", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "ResourceGroup", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "CartOrderID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke ReplaceCartOrder successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SKUUserState model
				skuUserStateModel := new(schematics20apiv2.SKUUserState)
				skuUserStateModel.State = core.StringPtr("testString")
				skuUserStateModel.SetBy = core.StringPtr("testString")
				skuUserStateModel.SetAt = CreateMockDateTime()
				skuUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ItemSKU model
				itemSkuModel := new(schematics20apiv2.ItemSKU)
				itemSkuModel.SkuID = core.StringPtr("testString")
				itemSkuModel.SkuType = core.StringPtr("testString")
				itemSkuModel.SkuSysLock = systemLockModel
				itemSkuModel.SkuUserState = skuUserStateModel
				itemSkuModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the OrderItemConfiguration model
				orderItemConfigurationModel := new(schematics20apiv2.OrderItemConfiguration)
				orderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				orderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				orderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Target = targetRequestModel
				orderItemConfigurationModel.Operation = core.StringPtr("configure")
				orderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				orderItemConfigurationModel.CatalogID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingID = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccount = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccountCrn = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKindID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingTargetKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersionID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingFulfilmentKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersion = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerURL = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerSsh = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				orderItemConfigurationModel.ItemSku = itemSkuModel
				orderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderUserState model
				cartOrderUserStateModel := new(schematics20apiv2.CartOrderUserState)
				cartOrderUserStateModel.State = core.StringPtr("Order_Create_Init")
				cartOrderUserStateModel.SetBy = core.StringPtr("testString")
				cartOrderUserStateModel.SetAt = CreateMockDateTime()
				cartOrderUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderLiteState model
				cartOrderLiteStateModel := new(schematics20apiv2.CartOrderLiteState)
				cartOrderLiteStateModel.StatusCode = core.StringPtr("normal")
				cartOrderLiteStateModel.StatusMessage = core.StringPtr("testString")
				cartOrderLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrder model
				cartOrderModel := new(schematics20apiv2.CartOrder)
				cartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				cartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				cartOrderModel.Tags = []string{"testString"}
				cartOrderModel.CartItems = []schematics20apiv2.OrderItemConfiguration{*orderItemConfigurationModel}
				cartOrderModel.ServiceName = core.StringPtr("SatelliteLocation")
				cartOrderModel.ResourceGroup = core.StringPtr("testString")
				cartOrderModel.Location = core.StringPtr("us-south")
				cartOrderModel.UserState = cartOrderUserStateModel
				cartOrderModel.SysLock = systemLockModel
				cartOrderModel.State = cartOrderLiteStateModel
				cartOrderModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceCartOrderOptions model
				replaceCartOrderOptionsModel := new(schematics20apiv2.ReplaceCartOrderOptions)
				replaceCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				replaceCartOrderOptionsModel.Operation = core.StringPtr("testString")
				replaceCartOrderOptionsModel.CartOrder = cartOrderModel
				replaceCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ReplaceCartOrderWithContext(ctx, replaceCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ReplaceCartOrder(replaceCartOrderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ReplaceCartOrderWithContext(ctx, replaceCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceCartOrderPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["operation"]).To(Equal([]string{"0"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["Tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "target": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "operation": "configure", "service_data": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "mapping": [{"type": "Type", "input_param_name": "InputParamName", "output_param_name": "OutputParamName"}]}], "catalog_id": "CatalogID", "offering_id": "OfferingID", "owning_account": "OwningAccount", "owning_account_crn": "OwningAccountCrn", "offering_kind_id": "OfferingKindID", "offering_target_kind": "OfferingTargetKind", "offering_version_id": "OfferingVersionID", "offering_kind": "OfferingKind", "offering_fulfilment_kind": "OfferingFulfilmentKind", "offering_version": "OfferingVersion", "offering_provisioner_url": "OfferingProvisionerURL", "offering_provisioner_ssh": "OfferingProvisionerSsh", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "item_sku": {"sku_id": "SkuID", "sku_type": "SkuType", "sku_sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "State", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "ResourceGroup", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "CartOrderID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke ReplaceCartOrder successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ReplaceCartOrder(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SKUUserState model
				skuUserStateModel := new(schematics20apiv2.SKUUserState)
				skuUserStateModel.State = core.StringPtr("testString")
				skuUserStateModel.SetBy = core.StringPtr("testString")
				skuUserStateModel.SetAt = CreateMockDateTime()
				skuUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ItemSKU model
				itemSkuModel := new(schematics20apiv2.ItemSKU)
				itemSkuModel.SkuID = core.StringPtr("testString")
				itemSkuModel.SkuType = core.StringPtr("testString")
				itemSkuModel.SkuSysLock = systemLockModel
				itemSkuModel.SkuUserState = skuUserStateModel
				itemSkuModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the OrderItemConfiguration model
				orderItemConfigurationModel := new(schematics20apiv2.OrderItemConfiguration)
				orderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				orderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				orderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Target = targetRequestModel
				orderItemConfigurationModel.Operation = core.StringPtr("configure")
				orderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				orderItemConfigurationModel.CatalogID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingID = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccount = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccountCrn = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKindID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingTargetKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersionID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingFulfilmentKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersion = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerURL = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerSsh = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				orderItemConfigurationModel.ItemSku = itemSkuModel
				orderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderUserState model
				cartOrderUserStateModel := new(schematics20apiv2.CartOrderUserState)
				cartOrderUserStateModel.State = core.StringPtr("Order_Create_Init")
				cartOrderUserStateModel.SetBy = core.StringPtr("testString")
				cartOrderUserStateModel.SetAt = CreateMockDateTime()
				cartOrderUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderLiteState model
				cartOrderLiteStateModel := new(schematics20apiv2.CartOrderLiteState)
				cartOrderLiteStateModel.StatusCode = core.StringPtr("normal")
				cartOrderLiteStateModel.StatusMessage = core.StringPtr("testString")
				cartOrderLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrder model
				cartOrderModel := new(schematics20apiv2.CartOrder)
				cartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				cartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				cartOrderModel.Tags = []string{"testString"}
				cartOrderModel.CartItems = []schematics20apiv2.OrderItemConfiguration{*orderItemConfigurationModel}
				cartOrderModel.ServiceName = core.StringPtr("SatelliteLocation")
				cartOrderModel.ResourceGroup = core.StringPtr("testString")
				cartOrderModel.Location = core.StringPtr("us-south")
				cartOrderModel.UserState = cartOrderUserStateModel
				cartOrderModel.SysLock = systemLockModel
				cartOrderModel.State = cartOrderLiteStateModel
				cartOrderModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceCartOrderOptions model
				replaceCartOrderOptionsModel := new(schematics20apiv2.ReplaceCartOrderOptions)
				replaceCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				replaceCartOrderOptionsModel.Operation = core.StringPtr("testString")
				replaceCartOrderOptionsModel.CartOrder = cartOrderModel
				replaceCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ReplaceCartOrder(replaceCartOrderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceCartOrder with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SKUUserState model
				skuUserStateModel := new(schematics20apiv2.SKUUserState)
				skuUserStateModel.State = core.StringPtr("testString")
				skuUserStateModel.SetBy = core.StringPtr("testString")
				skuUserStateModel.SetAt = CreateMockDateTime()
				skuUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ItemSKU model
				itemSkuModel := new(schematics20apiv2.ItemSKU)
				itemSkuModel.SkuID = core.StringPtr("testString")
				itemSkuModel.SkuType = core.StringPtr("testString")
				itemSkuModel.SkuSysLock = systemLockModel
				itemSkuModel.SkuUserState = skuUserStateModel
				itemSkuModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the OrderItemConfiguration model
				orderItemConfigurationModel := new(schematics20apiv2.OrderItemConfiguration)
				orderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				orderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				orderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Target = targetRequestModel
				orderItemConfigurationModel.Operation = core.StringPtr("configure")
				orderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				orderItemConfigurationModel.CatalogID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingID = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccount = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccountCrn = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKindID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingTargetKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersionID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingFulfilmentKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersion = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerURL = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerSsh = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				orderItemConfigurationModel.ItemSku = itemSkuModel
				orderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderUserState model
				cartOrderUserStateModel := new(schematics20apiv2.CartOrderUserState)
				cartOrderUserStateModel.State = core.StringPtr("Order_Create_Init")
				cartOrderUserStateModel.SetBy = core.StringPtr("testString")
				cartOrderUserStateModel.SetAt = CreateMockDateTime()
				cartOrderUserStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrderLiteState model
				cartOrderLiteStateModel := new(schematics20apiv2.CartOrderLiteState)
				cartOrderLiteStateModel.StatusCode = core.StringPtr("normal")
				cartOrderLiteStateModel.StatusMessage = core.StringPtr("testString")
				cartOrderLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CartOrder model
				cartOrderModel := new(schematics20apiv2.CartOrder)
				cartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				cartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				cartOrderModel.Tags = []string{"testString"}
				cartOrderModel.CartItems = []schematics20apiv2.OrderItemConfiguration{*orderItemConfigurationModel}
				cartOrderModel.ServiceName = core.StringPtr("SatelliteLocation")
				cartOrderModel.ResourceGroup = core.StringPtr("testString")
				cartOrderModel.Location = core.StringPtr("us-south")
				cartOrderModel.UserState = cartOrderUserStateModel
				cartOrderModel.SysLock = systemLockModel
				cartOrderModel.State = cartOrderLiteStateModel
				cartOrderModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceCartOrderOptions model
				replaceCartOrderOptionsModel := new(schematics20apiv2.ReplaceCartOrderOptions)
				replaceCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				replaceCartOrderOptionsModel.Operation = core.StringPtr("testString")
				replaceCartOrderOptionsModel.CartOrder = cartOrderModel
				replaceCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ReplaceCartOrder(replaceCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceCartOrderOptions model with no property values
				replaceCartOrderOptionsModelNew := new(schematics20apiv2.ReplaceCartOrderOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ReplaceCartOrder(replaceCartOrderOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`RunFulfilmentOperation(runFulfilmentOperationOptions *RunFulfilmentOperationOptions)`, func() {
		runFulfilmentOperationPath := "/v2/cart/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(runFulfilmentOperationPath))
					Expect(req.Method).To(Equal("POST"))

					Expect(req.URL.Query()["operation"]).To(Equal([]string{"0"}))
					res.WriteHeader(200)
				}))
			})
			It(`Invoke RunFulfilmentOperation successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.RunFulfilmentOperation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RunFulfilmentOperationOptions model
				runFulfilmentOperationOptionsModel := new(schematics20apiv2.RunFulfilmentOperationOptions)
				runFulfilmentOperationOptionsModel.OrderID = core.StringPtr("testString")
				runFulfilmentOperationOptionsModel.Operation = core.StringPtr("testString")
				runFulfilmentOperationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.RunFulfilmentOperation(runFulfilmentOperationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RunFulfilmentOperation with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the RunFulfilmentOperationOptions model
				runFulfilmentOperationOptionsModel := new(schematics20apiv2.RunFulfilmentOperationOptions)
				runFulfilmentOperationOptionsModel.OrderID = core.StringPtr("testString")
				runFulfilmentOperationOptionsModel.Operation = core.StringPtr("testString")
				runFulfilmentOperationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.RunFulfilmentOperation(runFulfilmentOperationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RunFulfilmentOperationOptions model with no property values
				runFulfilmentOperationOptionsModelNew := new(schematics20apiv2.RunFulfilmentOperationOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.RunFulfilmentOperation(runFulfilmentOperationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteCartOrder(deleteCartOrderOptions *DeleteCartOrderOptions)`, func() {
		deleteCartOrderPath := "/v2/cart/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteCartOrderPath))
					Expect(req.Method).To(Equal("DELETE"))

					// TODO: Add check for destroy query parameter
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteCartOrder successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteCartOrder(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteCartOrderOptions model
				deleteCartOrderOptionsModel := new(schematics20apiv2.DeleteCartOrderOptions)
				deleteCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				deleteCartOrderOptionsModel.Destroy = core.BoolPtr(true)
				deleteCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteCartOrder(deleteCartOrderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteCartOrder with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteCartOrderOptions model
				deleteCartOrderOptionsModel := new(schematics20apiv2.DeleteCartOrderOptions)
				deleteCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				deleteCartOrderOptionsModel.Destroy = core.BoolPtr(true)
				deleteCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteCartOrder(deleteCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteCartOrderOptions model with no property values
				deleteCartOrderOptionsModelNew := new(schematics20apiv2.DeleteCartOrderOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteCartOrder(deleteCartOrderOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateCartOrder(updateCartOrderOptions *UpdateCartOrderOptions) - Operation response error`, func() {
		updateCartOrderPath := "/v2/cart/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateCartOrderPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["operation"]).To(Equal([]string{"0"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateCartOrder with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateOrderItemConfiguration model
				updateOrderItemConfigurationModel := new(schematics20apiv2.UpdateOrderItemConfiguration)
				updateOrderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				updateOrderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				updateOrderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Target = targetRequestModel
				updateOrderItemConfigurationModel.Operation = core.StringPtr("configure")
				updateOrderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				updateOrderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateCartOrder model
				updateCartOrderModel := new(schematics20apiv2.UpdateCartOrder)
				updateCartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				updateCartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				updateCartOrderModel.Tags = []string{"testString"}
				updateCartOrderModel.CartItems = []schematics20apiv2.UpdateOrderItemConfiguration{*updateOrderItemConfigurationModel}
				updateCartOrderModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateCartOrderOptions model
				updateCartOrderOptionsModel := new(schematics20apiv2.UpdateCartOrderOptions)
				updateCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				updateCartOrderOptionsModel.Operation = core.StringPtr("testString")
				updateCartOrderOptionsModel.UpdateCartOrder = updateCartOrderModel
				updateCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UpdateCartOrder(updateCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UpdateCartOrder(updateCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateCartOrder(updateCartOrderOptions *UpdateCartOrderOptions)`, func() {
		updateCartOrderPath := "/v2/cart/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateCartOrderPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["operation"]).To(Equal([]string{"0"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["Tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "target": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "operation": "configure", "service_data": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "mapping": [{"type": "Type", "input_param_name": "InputParamName", "output_param_name": "OutputParamName"}]}], "catalog_id": "CatalogID", "offering_id": "OfferingID", "owning_account": "OwningAccount", "owning_account_crn": "OwningAccountCrn", "offering_kind_id": "OfferingKindID", "offering_target_kind": "OfferingTargetKind", "offering_version_id": "OfferingVersionID", "offering_kind": "OfferingKind", "offering_fulfilment_kind": "OfferingFulfilmentKind", "offering_version": "OfferingVersion", "offering_provisioner_url": "OfferingProvisionerURL", "offering_provisioner_ssh": "OfferingProvisionerSsh", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "item_sku": {"sku_id": "SkuID", "sku_type": "SkuType", "sku_sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "State", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "ResourceGroup", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "CartOrderID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke UpdateCartOrder successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateOrderItemConfiguration model
				updateOrderItemConfigurationModel := new(schematics20apiv2.UpdateOrderItemConfiguration)
				updateOrderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				updateOrderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				updateOrderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Target = targetRequestModel
				updateOrderItemConfigurationModel.Operation = core.StringPtr("configure")
				updateOrderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				updateOrderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateCartOrder model
				updateCartOrderModel := new(schematics20apiv2.UpdateCartOrder)
				updateCartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				updateCartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				updateCartOrderModel.Tags = []string{"testString"}
				updateCartOrderModel.CartItems = []schematics20apiv2.UpdateOrderItemConfiguration{*updateOrderItemConfigurationModel}
				updateCartOrderModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateCartOrderOptions model
				updateCartOrderOptionsModel := new(schematics20apiv2.UpdateCartOrderOptions)
				updateCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				updateCartOrderOptionsModel.Operation = core.StringPtr("testString")
				updateCartOrderOptionsModel.UpdateCartOrder = updateCartOrderModel
				updateCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UpdateCartOrderWithContext(ctx, updateCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UpdateCartOrder(updateCartOrderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UpdateCartOrderWithContext(ctx, updateCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateCartOrderPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["operation"]).To(Equal([]string{"0"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "tags": ["Tags"], "cart_items": [{"name": "AWS Satellite", "description": "Create satellite location in AWS", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "target": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_key": {"anyKey": "anyValue"}, "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "operation": "configure", "service_data": [{"name": "Name", "value": "Value", "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "mapping": [{"type": "Type", "input_param_name": "InputParamName", "output_param_name": "OutputParamName"}]}], "catalog_id": "CatalogID", "offering_id": "OfferingID", "owning_account": "OwningAccount", "owning_account_crn": "OwningAccountCrn", "offering_kind_id": "OfferingKindID", "offering_target_kind": "OfferingTargetKind", "offering_version_id": "OfferingVersionID", "offering_kind": "OfferingKind", "offering_fulfilment_kind": "OfferingFulfilmentKind", "offering_version": "OfferingVersion", "offering_provisioner_url": "OfferingProvisionerURL", "offering_provisioner_ssh": "OfferingProvisionerSsh", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "item_sku": {"sku_id": "SkuID", "sku_type": "SkuType", "sku_sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "sku_user_state": {"state": "State", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}}}], "service_name": "SatelliteLocation", "resource_group": "ResourceGroup", "location": "us-south", "user_state": {"state": "Order_Create_Init", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "cart_order_id": "CartOrderID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke UpdateCartOrder successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UpdateCartOrder(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateOrderItemConfiguration model
				updateOrderItemConfigurationModel := new(schematics20apiv2.UpdateOrderItemConfiguration)
				updateOrderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				updateOrderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				updateOrderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Target = targetRequestModel
				updateOrderItemConfigurationModel.Operation = core.StringPtr("configure")
				updateOrderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				updateOrderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateCartOrder model
				updateCartOrderModel := new(schematics20apiv2.UpdateCartOrder)
				updateCartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				updateCartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				updateCartOrderModel.Tags = []string{"testString"}
				updateCartOrderModel.CartItems = []schematics20apiv2.UpdateOrderItemConfiguration{*updateOrderItemConfigurationModel}
				updateCartOrderModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateCartOrderOptions model
				updateCartOrderOptionsModel := new(schematics20apiv2.UpdateCartOrderOptions)
				updateCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				updateCartOrderOptionsModel.Operation = core.StringPtr("testString")
				updateCartOrderOptionsModel.UpdateCartOrder = updateCartOrderModel
				updateCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UpdateCartOrder(updateCartOrderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateCartOrder with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateOrderItemConfiguration model
				updateOrderItemConfigurationModel := new(schematics20apiv2.UpdateOrderItemConfiguration)
				updateOrderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				updateOrderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				updateOrderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Target = targetRequestModel
				updateOrderItemConfigurationModel.Operation = core.StringPtr("configure")
				updateOrderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				updateOrderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateCartOrder model
				updateCartOrderModel := new(schematics20apiv2.UpdateCartOrder)
				updateCartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				updateCartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				updateCartOrderModel.Tags = []string{"testString"}
				updateCartOrderModel.CartItems = []schematics20apiv2.UpdateOrderItemConfiguration{*updateOrderItemConfigurationModel}
				updateCartOrderModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateCartOrderOptions model
				updateCartOrderOptionsModel := new(schematics20apiv2.UpdateCartOrderOptions)
				updateCartOrderOptionsModel.OrderID = core.StringPtr("testString")
				updateCartOrderOptionsModel.Operation = core.StringPtr("testString")
				updateCartOrderOptionsModel.UpdateCartOrder = updateCartOrderModel
				updateCartOrderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UpdateCartOrder(updateCartOrderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateCartOrderOptions model with no property values
				updateCartOrderOptionsModelNew := new(schematics20apiv2.UpdateCartOrderOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UpdateCartOrder(updateCartOrderOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCartMetadata(getCartMetadataOptions *GetCartMetadataOptions) - Operation response error`, func() {
		getCartMetadataPath := "/v2/cart/testString/metadata"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartMetadataPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCartMetadata with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCartMetadataOptions model
				getCartMetadataOptionsModel := new(schematics20apiv2.GetCartMetadataOptions)
				getCartMetadataOptionsModel.OrderID = core.StringPtr("testString")
				getCartMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetCartMetadata(getCartMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetCartMetadata(getCartMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetCartMetadata(getCartMetadataOptions *GetCartMetadataOptions)`, func() {
		getCartMetadataPath := "/v2/cart/testString/metadata"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartMetadataPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"item_id": "ItemID", "offering_id": "OfferingID", "offering_kind_id": "OfferingKindID", "offering_version_id": "OfferingVersionID", "name": "AWS Satellite", "description": "Create satellite location in AWS", "operations": ["configure"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke GetCartMetadata successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetCartMetadataOptions model
				getCartMetadataOptionsModel := new(schematics20apiv2.GetCartMetadataOptions)
				getCartMetadataOptionsModel.OrderID = core.StringPtr("testString")
				getCartMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetCartMetadataWithContext(ctx, getCartMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetCartMetadata(getCartMetadataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetCartMetadataWithContext(ctx, getCartMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartMetadataPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"item_id": "ItemID", "offering_id": "OfferingID", "offering_kind_id": "OfferingKindID", "offering_version_id": "OfferingVersionID", "name": "AWS Satellite", "description": "Create satellite location in AWS", "operations": ["configure"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke GetCartMetadata successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetCartMetadata(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCartMetadataOptions model
				getCartMetadataOptionsModel := new(schematics20apiv2.GetCartMetadataOptions)
				getCartMetadataOptionsModel.OrderID = core.StringPtr("testString")
				getCartMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetCartMetadata(getCartMetadataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCartMetadata with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCartMetadataOptions model
				getCartMetadataOptionsModel := new(schematics20apiv2.GetCartMetadataOptions)
				getCartMetadataOptionsModel.OrderID = core.StringPtr("testString")
				getCartMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetCartMetadata(getCartMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCartMetadataOptions model with no property values
				getCartMetadataOptionsModelNew := new(schematics20apiv2.GetCartMetadataOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetCartMetadata(getCartMetadataOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListCartResources(listCartResourcesOptions *ListCartResourcesOptions) - Operation response error`, func() {
		listCartResourcesPath := "/v2/cart/testString/resources"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCartResourcesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListCartResources with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListCartResourcesOptions model
				listCartResourcesOptionsModel := new(schematics20apiv2.ListCartResourcesOptions)
				listCartResourcesOptionsModel.OrderID = core.StringPtr("testString")
				listCartResourcesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCartResourcesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCartResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListCartResources(listCartResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListCartResources(listCartResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListCartResources(listCartResourcesOptions *ListCartResourcesOptions)`, func() {
		listCartResourcesPath := "/v2/cart/testString/resources"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCartResourcesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "outputs": [{"resource_id": "ResourceID", "cloud_resource_name": "CloudResourceName", "terraform_resource_name": "TerraformResourceName", "crn": "Crn", "resource_state": "ResourceState", "tags": ["Tags"]}]}`)
				}))
			})
			It(`Invoke ListCartResources successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListCartResourcesOptions model
				listCartResourcesOptionsModel := new(schematics20apiv2.ListCartResourcesOptions)
				listCartResourcesOptionsModel.OrderID = core.StringPtr("testString")
				listCartResourcesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCartResourcesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCartResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListCartResourcesWithContext(ctx, listCartResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListCartResources(listCartResourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListCartResourcesWithContext(ctx, listCartResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCartResourcesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "outputs": [{"resource_id": "ResourceID", "cloud_resource_name": "CloudResourceName", "terraform_resource_name": "TerraformResourceName", "crn": "Crn", "resource_state": "ResourceState", "tags": ["Tags"]}]}`)
				}))
			})
			It(`Invoke ListCartResources successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListCartResources(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListCartResourcesOptions model
				listCartResourcesOptionsModel := new(schematics20apiv2.ListCartResourcesOptions)
				listCartResourcesOptionsModel.OrderID = core.StringPtr("testString")
				listCartResourcesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCartResourcesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCartResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListCartResources(listCartResourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListCartResources with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListCartResourcesOptions model
				listCartResourcesOptionsModel := new(schematics20apiv2.ListCartResourcesOptions)
				listCartResourcesOptionsModel.OrderID = core.StringPtr("testString")
				listCartResourcesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCartResourcesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCartResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListCartResources(listCartResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListCartResourcesOptions model with no property values
				listCartResourcesOptionsModelNew := new(schematics20apiv2.ListCartResourcesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ListCartResources(listCartResourcesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListCartOrderJobs(listCartOrderJobsOptions *ListCartOrderJobsOptions) - Operation response error`, func() {
		listCartOrderJobsPath := "/v2/cart/testString/jobs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCartOrderJobsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListCartOrderJobs with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListCartOrderJobsOptions model
				listCartOrderJobsOptionsModel := new(schematics20apiv2.ListCartOrderJobsOptions)
				listCartOrderJobsOptionsModel.OrderID = core.StringPtr("testString")
				listCartOrderJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCartOrderJobsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCartOrderJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListCartOrderJobs(listCartOrderJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListCartOrderJobs(listCartOrderJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListCartOrderJobs(listCartOrderJobsOptions *ListCartOrderJobsOptions)`, func() {
		listCartOrderJobsPath := "/v2/cart/testString/jobs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCartOrderJobsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "jobs": [{"id": "ID", "name": "Name", "description": "Description", "command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "tags": ["Tags"], "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "duration": "Duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}]}`)
				}))
			})
			It(`Invoke ListCartOrderJobs successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListCartOrderJobsOptions model
				listCartOrderJobsOptionsModel := new(schematics20apiv2.ListCartOrderJobsOptions)
				listCartOrderJobsOptionsModel.OrderID = core.StringPtr("testString")
				listCartOrderJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCartOrderJobsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCartOrderJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListCartOrderJobsWithContext(ctx, listCartOrderJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListCartOrderJobs(listCartOrderJobsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListCartOrderJobsWithContext(ctx, listCartOrderJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCartOrderJobsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "jobs": [{"id": "ID", "name": "Name", "description": "Description", "command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "tags": ["Tags"], "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "duration": "Duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}]}`)
				}))
			})
			It(`Invoke ListCartOrderJobs successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListCartOrderJobs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListCartOrderJobsOptions model
				listCartOrderJobsOptionsModel := new(schematics20apiv2.ListCartOrderJobsOptions)
				listCartOrderJobsOptionsModel.OrderID = core.StringPtr("testString")
				listCartOrderJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCartOrderJobsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCartOrderJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListCartOrderJobs(listCartOrderJobsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListCartOrderJobs with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListCartOrderJobsOptions model
				listCartOrderJobsOptionsModel := new(schematics20apiv2.ListCartOrderJobsOptions)
				listCartOrderJobsOptionsModel.OrderID = core.StringPtr("testString")
				listCartOrderJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCartOrderJobsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCartOrderJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListCartOrderJobs(listCartOrderJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListCartOrderJobsOptions model with no property values
				listCartOrderJobsOptionsModelNew := new(schematics20apiv2.ListCartOrderJobsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ListCartOrderJobs(listCartOrderJobsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCartOrderJob(getCartOrderJobOptions *GetCartOrderJobOptions) - Operation response error`, func() {
		getCartOrderJobPath := "/v2/cart/testString/jobs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartOrderJobPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCartOrderJob with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCartOrderJobOptions model
				getCartOrderJobOptionsModel := new(schematics20apiv2.GetCartOrderJobOptions)
				getCartOrderJobOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderJobOptionsModel.JobID = core.StringPtr("testString")
				getCartOrderJobOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCartOrderJobOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCartOrderJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetCartOrderJob(getCartOrderJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetCartOrderJob(getCartOrderJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetCartOrderJob(getCartOrderJobOptions *GetCartOrderJobOptions)`, func() {
		getCartOrderJobPath := "/v2/cart/testString/jobs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartOrderJobPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "description": "Description", "command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "tags": ["Tags"], "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "duration": "Duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}`)
				}))
			})
			It(`Invoke GetCartOrderJob successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetCartOrderJobOptions model
				getCartOrderJobOptionsModel := new(schematics20apiv2.GetCartOrderJobOptions)
				getCartOrderJobOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderJobOptionsModel.JobID = core.StringPtr("testString")
				getCartOrderJobOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCartOrderJobOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCartOrderJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetCartOrderJobWithContext(ctx, getCartOrderJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetCartOrderJob(getCartOrderJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetCartOrderJobWithContext(ctx, getCartOrderJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartOrderJobPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "description": "Description", "command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "tags": ["Tags"], "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "duration": "Duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID"}`)
				}))
			})
			It(`Invoke GetCartOrderJob successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetCartOrderJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCartOrderJobOptions model
				getCartOrderJobOptionsModel := new(schematics20apiv2.GetCartOrderJobOptions)
				getCartOrderJobOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderJobOptionsModel.JobID = core.StringPtr("testString")
				getCartOrderJobOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCartOrderJobOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCartOrderJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetCartOrderJob(getCartOrderJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCartOrderJob with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCartOrderJobOptions model
				getCartOrderJobOptionsModel := new(schematics20apiv2.GetCartOrderJobOptions)
				getCartOrderJobOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderJobOptionsModel.JobID = core.StringPtr("testString")
				getCartOrderJobOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCartOrderJobOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCartOrderJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetCartOrderJob(getCartOrderJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCartOrderJobOptions model with no property values
				getCartOrderJobOptionsModelNew := new(schematics20apiv2.GetCartOrderJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetCartOrderJob(getCartOrderJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCartOrderJobLog(getCartOrderJobLogOptions *GetCartOrderJobLogOptions) - Operation response error`, func() {
		getCartOrderJobLogPath := "/v2/cart/testString/jobs/testString/logs"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartOrderJobLogPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCartOrderJobLog with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCartOrderJobLogOptions model
				getCartOrderJobLogOptionsModel := new(schematics20apiv2.GetCartOrderJobLogOptions)
				getCartOrderJobLogOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderJobLogOptionsModel.JobID = core.StringPtr("testString")
				getCartOrderJobLogOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCartOrderJobLogOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCartOrderJobLogOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetCartOrderJobLog(getCartOrderJobLogOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetCartOrderJobLog(getCartOrderJobLogOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetCartOrderJobLog(getCartOrderJobLogOptions *GetCartOrderJobLogOptions)`, func() {
		getCartOrderJobLogPath := "/v2/cart/testString/jobs/testString/logs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartOrderJobLogPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_id": "JobID", "job_name": "JobName", "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "format": "json", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetCartOrderJobLog successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetCartOrderJobLogOptions model
				getCartOrderJobLogOptionsModel := new(schematics20apiv2.GetCartOrderJobLogOptions)
				getCartOrderJobLogOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderJobLogOptionsModel.JobID = core.StringPtr("testString")
				getCartOrderJobLogOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCartOrderJobLogOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCartOrderJobLogOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetCartOrderJobLogWithContext(ctx, getCartOrderJobLogOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetCartOrderJobLog(getCartOrderJobLogOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetCartOrderJobLogWithContext(ctx, getCartOrderJobLogOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartOrderJobLogPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_id": "JobID", "job_name": "JobName", "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "format": "json", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetCartOrderJobLog successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetCartOrderJobLog(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCartOrderJobLogOptions model
				getCartOrderJobLogOptionsModel := new(schematics20apiv2.GetCartOrderJobLogOptions)
				getCartOrderJobLogOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderJobLogOptionsModel.JobID = core.StringPtr("testString")
				getCartOrderJobLogOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCartOrderJobLogOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCartOrderJobLogOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetCartOrderJobLog(getCartOrderJobLogOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCartOrderJobLog with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCartOrderJobLogOptions model
				getCartOrderJobLogOptionsModel := new(schematics20apiv2.GetCartOrderJobLogOptions)
				getCartOrderJobLogOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderJobLogOptionsModel.JobID = core.StringPtr("testString")
				getCartOrderJobLogOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCartOrderJobLogOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCartOrderJobLogOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetCartOrderJobLog(getCartOrderJobLogOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCartOrderJobLogOptions model with no property values
				getCartOrderJobLogOptionsModelNew := new(schematics20apiv2.GetCartOrderJobLogOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetCartOrderJobLog(getCartOrderJobLogOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCartOrderJobResources(getCartOrderJobResourcesOptions *GetCartOrderJobResourcesOptions) - Operation response error`, func() {
		getCartOrderJobResourcesPath := "/v2/cart/testString/jobs/testString/resources"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartOrderJobResourcesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCartOrderJobResources with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCartOrderJobResourcesOptions model
				getCartOrderJobResourcesOptionsModel := new(schematics20apiv2.GetCartOrderJobResourcesOptions)
				getCartOrderJobResourcesOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderJobResourcesOptionsModel.JobID = core.StringPtr("testString")
				getCartOrderJobResourcesOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCartOrderJobResourcesOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCartOrderJobResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetCartOrderJobResources(getCartOrderJobResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetCartOrderJobResources(getCartOrderJobResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetCartOrderJobResources(getCartOrderJobResourcesOptions *GetCartOrderJobResourcesOptions)`, func() {
		getCartOrderJobResourcesPath := "/v2/cart/testString/jobs/testString/resources"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartOrderJobResourcesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "outputs": [{"resource_id": "ResourceID", "cloud_resource_name": "CloudResourceName", "terraform_resource_name": "TerraformResourceName", "crn": "Crn", "resource_state": "ResourceState", "tags": ["Tags"]}]}`)
				}))
			})
			It(`Invoke GetCartOrderJobResources successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetCartOrderJobResourcesOptions model
				getCartOrderJobResourcesOptionsModel := new(schematics20apiv2.GetCartOrderJobResourcesOptions)
				getCartOrderJobResourcesOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderJobResourcesOptionsModel.JobID = core.StringPtr("testString")
				getCartOrderJobResourcesOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCartOrderJobResourcesOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCartOrderJobResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetCartOrderJobResourcesWithContext(ctx, getCartOrderJobResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetCartOrderJobResources(getCartOrderJobResourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetCartOrderJobResourcesWithContext(ctx, getCartOrderJobResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCartOrderJobResourcesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "outputs": [{"resource_id": "ResourceID", "cloud_resource_name": "CloudResourceName", "terraform_resource_name": "TerraformResourceName", "crn": "Crn", "resource_state": "ResourceState", "tags": ["Tags"]}]}`)
				}))
			})
			It(`Invoke GetCartOrderJobResources successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetCartOrderJobResources(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCartOrderJobResourcesOptions model
				getCartOrderJobResourcesOptionsModel := new(schematics20apiv2.GetCartOrderJobResourcesOptions)
				getCartOrderJobResourcesOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderJobResourcesOptionsModel.JobID = core.StringPtr("testString")
				getCartOrderJobResourcesOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCartOrderJobResourcesOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCartOrderJobResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetCartOrderJobResources(getCartOrderJobResourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCartOrderJobResources with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCartOrderJobResourcesOptions model
				getCartOrderJobResourcesOptionsModel := new(schematics20apiv2.GetCartOrderJobResourcesOptions)
				getCartOrderJobResourcesOptionsModel.OrderID = core.StringPtr("testString")
				getCartOrderJobResourcesOptionsModel.JobID = core.StringPtr("testString")
				getCartOrderJobResourcesOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCartOrderJobResourcesOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCartOrderJobResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetCartOrderJobResources(getCartOrderJobResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCartOrderJobResourcesOptions model with no property values
				getCartOrderJobResourcesOptionsModelNew := new(schematics20apiv2.GetCartOrderJobResourcesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetCartOrderJobResources(getCartOrderJobResourcesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListBlueprint(listBlueprintOptions *ListBlueprintOptions) - Operation response error`, func() {
		listBlueprintPath := "/v2/blueprints"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listBlueprintPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListBlueprint with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListBlueprintOptions model
				listBlueprintOptionsModel := new(schematics20apiv2.ListBlueprintOptions)
				listBlueprintOptionsModel.Offset = core.Int64Ptr(int64(0))
				listBlueprintOptionsModel.Limit = core.Int64Ptr(int64(1))
				listBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListBlueprint(listBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListBlueprint(listBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListBlueprint(listBlueprintOptions *ListBlueprintOptions)`, func() {
		listBlueprintPath := "/v2/blueprints"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listBlueprintPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "blueprints": [{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage"}}]}`)
				}))
			})
			It(`Invoke ListBlueprint successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListBlueprintOptions model
				listBlueprintOptionsModel := new(schematics20apiv2.ListBlueprintOptions)
				listBlueprintOptionsModel.Offset = core.Int64Ptr(int64(0))
				listBlueprintOptionsModel.Limit = core.Int64Ptr(int64(1))
				listBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListBlueprintWithContext(ctx, listBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListBlueprint(listBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListBlueprintWithContext(ctx, listBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listBlueprintPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "blueprints": [{"name": "MySatelliteLocation", "description": "Creates satellite location in AWS", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage"}}]}`)
				}))
			})
			It(`Invoke ListBlueprint successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListBlueprint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListBlueprintOptions model
				listBlueprintOptionsModel := new(schematics20apiv2.ListBlueprintOptions)
				listBlueprintOptionsModel.Offset = core.Int64Ptr(int64(0))
				listBlueprintOptionsModel.Limit = core.Int64Ptr(int64(1))
				listBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListBlueprint(listBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListBlueprint with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListBlueprintOptions model
				listBlueprintOptionsModel := new(schematics20apiv2.ListBlueprintOptions)
				listBlueprintOptionsModel.Offset = core.Int64Ptr(int64(0))
				listBlueprintOptionsModel.Limit = core.Int64Ptr(int64(1))
				listBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListBlueprint(listBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateBlueprint(createBlueprintOptions *CreateBlueprintOptions) - Operation response error`, func() {
		createBlueprintPath := "/v2/blueprints"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createBlueprintPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateBlueprint with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateBlueprintOptions model
				createBlueprintOptionsModel := new(schematics20apiv2.CreateBlueprintOptions)
				createBlueprintOptionsModel.Blueprint = blueprintModel
				createBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.CreateBlueprint(createBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.CreateBlueprint(createBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`CreateBlueprint(createBlueprintOptions *CreateBlueprintOptions)`, func() {
		createBlueprintPath := "/v2/blueprints"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createBlueprintPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "components": [{"component_id": "ComponentID", "component_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "inputs": [{"name": "Name", "value": "Value", "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke CreateBlueprint successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateBlueprintOptions model
				createBlueprintOptionsModel := new(schematics20apiv2.CreateBlueprintOptions)
				createBlueprintOptionsModel.Blueprint = blueprintModel
				createBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.CreateBlueprintWithContext(ctx, createBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.CreateBlueprint(createBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.CreateBlueprintWithContext(ctx, createBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createBlueprintPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "components": [{"component_id": "ComponentID", "component_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "inputs": [{"name": "Name", "value": "Value", "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke CreateBlueprint successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.CreateBlueprint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateBlueprintOptions model
				createBlueprintOptionsModel := new(schematics20apiv2.CreateBlueprintOptions)
				createBlueprintOptionsModel.Blueprint = blueprintModel
				createBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.CreateBlueprint(createBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateBlueprint with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the CreateBlueprintOptions model
				createBlueprintOptionsModel := new(schematics20apiv2.CreateBlueprintOptions)
				createBlueprintOptionsModel.Blueprint = blueprintModel
				createBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.CreateBlueprint(createBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateBlueprintOptions model with no property values
				createBlueprintOptionsModelNew := new(schematics20apiv2.CreateBlueprintOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.CreateBlueprint(createBlueprintOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetBlueprint(getBlueprintOptions *GetBlueprintOptions) - Operation response error`, func() {
		getBlueprintPath := "/v2/blueprints/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getBlueprintPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetBlueprint with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetBlueprintOptions model
				getBlueprintOptionsModel := new(schematics20apiv2.GetBlueprintOptions)
				getBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				getBlueprintOptionsModel.Profile = core.StringPtr("ids")
				getBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetBlueprint(getBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetBlueprint(getBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetBlueprint(getBlueprintOptions *GetBlueprintOptions)`, func() {
		getBlueprintPath := "/v2/blueprints/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getBlueprintPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "components": [{"component_id": "ComponentID", "component_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "inputs": [{"name": "Name", "value": "Value", "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke GetBlueprint successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetBlueprintOptions model
				getBlueprintOptionsModel := new(schematics20apiv2.GetBlueprintOptions)
				getBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				getBlueprintOptionsModel.Profile = core.StringPtr("ids")
				getBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetBlueprintWithContext(ctx, getBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetBlueprint(getBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetBlueprintWithContext(ctx, getBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getBlueprintPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "components": [{"component_id": "ComponentID", "component_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "inputs": [{"name": "Name", "value": "Value", "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke GetBlueprint successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetBlueprint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetBlueprintOptions model
				getBlueprintOptionsModel := new(schematics20apiv2.GetBlueprintOptions)
				getBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				getBlueprintOptionsModel.Profile = core.StringPtr("ids")
				getBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetBlueprint(getBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetBlueprint with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetBlueprintOptions model
				getBlueprintOptionsModel := new(schematics20apiv2.GetBlueprintOptions)
				getBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				getBlueprintOptionsModel.Profile = core.StringPtr("ids")
				getBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetBlueprint(getBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetBlueprintOptions model with no property values
				getBlueprintOptionsModelNew := new(schematics20apiv2.GetBlueprintOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetBlueprint(getBlueprintOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceBlueprint(replaceBlueprintOptions *ReplaceBlueprintOptions) - Operation response error`, func() {
		replaceBlueprintPath := "/v2/blueprints/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceBlueprintPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceBlueprint with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceBlueprintOptions model
				replaceBlueprintOptionsModel := new(schematics20apiv2.ReplaceBlueprintOptions)
				replaceBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				replaceBlueprintOptionsModel.Blueprint = blueprintModel
				replaceBlueprintOptionsModel.Profile = core.StringPtr("ids")
				replaceBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ReplaceBlueprint(replaceBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ReplaceBlueprint(replaceBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ReplaceBlueprint(replaceBlueprintOptions *ReplaceBlueprintOptions)`, func() {
		replaceBlueprintPath := "/v2/blueprints/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceBlueprintPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "components": [{"component_id": "ComponentID", "component_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "inputs": [{"name": "Name", "value": "Value", "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke ReplaceBlueprint successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceBlueprintOptions model
				replaceBlueprintOptionsModel := new(schematics20apiv2.ReplaceBlueprintOptions)
				replaceBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				replaceBlueprintOptionsModel.Blueprint = blueprintModel
				replaceBlueprintOptionsModel.Profile = core.StringPtr("ids")
				replaceBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ReplaceBlueprintWithContext(ctx, replaceBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ReplaceBlueprint(replaceBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ReplaceBlueprintWithContext(ctx, replaceBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceBlueprintPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "components": [{"component_id": "ComponentID", "component_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "inputs": [{"name": "Name", "value": "Value", "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke ReplaceBlueprint successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ReplaceBlueprint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceBlueprintOptions model
				replaceBlueprintOptionsModel := new(schematics20apiv2.ReplaceBlueprintOptions)
				replaceBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				replaceBlueprintOptionsModel.Blueprint = blueprintModel
				replaceBlueprintOptionsModel.Profile = core.StringPtr("ids")
				replaceBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ReplaceBlueprint(replaceBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceBlueprint with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ReplaceBlueprintOptions model
				replaceBlueprintOptionsModel := new(schematics20apiv2.ReplaceBlueprintOptions)
				replaceBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				replaceBlueprintOptionsModel.Blueprint = blueprintModel
				replaceBlueprintOptionsModel.Profile = core.StringPtr("ids")
				replaceBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ReplaceBlueprint(replaceBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceBlueprintOptions model with no property values
				replaceBlueprintOptionsModelNew := new(schematics20apiv2.ReplaceBlueprintOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.ReplaceBlueprint(replaceBlueprintOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`DeleteBlueprint(deleteBlueprintOptions *DeleteBlueprintOptions)`, func() {
		deleteBlueprintPath := "/v2/blueprints/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteBlueprintPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// TODO: Add check for destroy query parameter
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteBlueprint successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematics20ApiService.DeleteBlueprint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteBlueprintOptions model
				deleteBlueprintOptionsModel := new(schematics20apiv2.DeleteBlueprintOptions)
				deleteBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				deleteBlueprintOptionsModel.Profile = core.StringPtr("ids")
				deleteBlueprintOptionsModel.Destroy = core.BoolPtr(true)
				deleteBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematics20ApiService.DeleteBlueprint(deleteBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteBlueprint with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the DeleteBlueprintOptions model
				deleteBlueprintOptionsModel := new(schematics20apiv2.DeleteBlueprintOptions)
				deleteBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				deleteBlueprintOptionsModel.Profile = core.StringPtr("ids")
				deleteBlueprintOptionsModel.Destroy = core.BoolPtr(true)
				deleteBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematics20ApiService.DeleteBlueprint(deleteBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteBlueprintOptions model with no property values
				deleteBlueprintOptionsModelNew := new(schematics20apiv2.DeleteBlueprintOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematics20ApiService.DeleteBlueprint(deleteBlueprintOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateBlueprint(updateBlueprintOptions *UpdateBlueprintOptions) - Operation response error`, func() {
		updateBlueprintPath := "/v2/blueprints/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateBlueprintPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateBlueprint with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateBlueprintOptions model
				updateBlueprintOptionsModel := new(schematics20apiv2.UpdateBlueprintOptions)
				updateBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				updateBlueprintOptionsModel.Blueprint = blueprintModel
				updateBlueprintOptionsModel.Profile = core.StringPtr("ids")
				updateBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UpdateBlueprint(updateBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UpdateBlueprint(updateBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UpdateBlueprint(updateBlueprintOptions *UpdateBlueprintOptions)`, func() {
		updateBlueprintPath := "/v2/blueprints/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateBlueprintPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "components": [{"component_id": "ComponentID", "component_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "inputs": [{"name": "Name", "value": "Value", "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke UpdateBlueprint successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateBlueprintOptions model
				updateBlueprintOptionsModel := new(schematics20apiv2.UpdateBlueprintOptions)
				updateBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				updateBlueprintOptionsModel.Blueprint = blueprintModel
				updateBlueprintOptionsModel.Profile = core.StringPtr("ids")
				updateBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UpdateBlueprintWithContext(ctx, updateBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UpdateBlueprint(updateBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UpdateBlueprintWithContext(ctx, updateBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateBlueprintPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "inputs": [{"name": "Name", "value": "Value", "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "components": [{"component_id": "ComponentID", "component_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch"}, "catalog": {"catalog_name": "CatalogName", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_repo_url": "OfferingRepoURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "inputs": [{"name": "Name", "value": "Value", "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage"}}`)
				}))
			})
			It(`Invoke UpdateBlueprint successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UpdateBlueprint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateBlueprintOptions model
				updateBlueprintOptionsModel := new(schematics20apiv2.UpdateBlueprintOptions)
				updateBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				updateBlueprintOptionsModel.Blueprint = blueprintModel
				updateBlueprintOptionsModel.Profile = core.StringPtr("ids")
				updateBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UpdateBlueprint(updateBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateBlueprint with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateBlueprintOptions model
				updateBlueprintOptionsModel := new(schematics20apiv2.UpdateBlueprintOptions)
				updateBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				updateBlueprintOptionsModel.Blueprint = blueprintModel
				updateBlueprintOptionsModel.Profile = core.StringPtr("ids")
				updateBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UpdateBlueprint(updateBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateBlueprintOptions model with no property values
				updateBlueprintOptionsModelNew := new(schematics20apiv2.UpdateBlueprintOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UpdateBlueprint(updateBlueprintOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptions *UploadTemplateTarBlueprintOptions) - Operation response error`, func() {
		uploadTemplateTarBlueprintPath := "/v2/blueprints/testString/template_repo_upload"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarBlueprintPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UploadTemplateTarBlueprint with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarBlueprintOptions model
				uploadTemplateTarBlueprintOptionsModel := new(schematics20apiv2.UploadTemplateTarBlueprintOptions)
				uploadTemplateTarBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarBlueprintOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptions *UploadTemplateTarBlueprintOptions)`, func() {
		uploadTemplateTarBlueprintPath := "/v2/blueprints/testString/template_repo_upload"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarBlueprintPath))
					Expect(req.Method).To(Equal("PUT"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false, "id": "ID"}`)
				}))
			})
			It(`Invoke UploadTemplateTarBlueprint successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the UploadTemplateTarBlueprintOptions model
				uploadTemplateTarBlueprintOptionsModel := new(schematics20apiv2.UploadTemplateTarBlueprintOptions)
				uploadTemplateTarBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarBlueprintOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.UploadTemplateTarBlueprintWithContext(ctx, uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.UploadTemplateTarBlueprintWithContext(ctx, uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarBlueprintPath))
					Expect(req.Method).To(Equal("PUT"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false, "id": "ID"}`)
				}))
			})
			It(`Invoke UploadTemplateTarBlueprint successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.UploadTemplateTarBlueprint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UploadTemplateTarBlueprintOptions model
				uploadTemplateTarBlueprintOptionsModel := new(schematics20apiv2.UploadTemplateTarBlueprintOptions)
				uploadTemplateTarBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarBlueprintOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UploadTemplateTarBlueprint with error: Param validation error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:  testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarBlueprintOptions model
				uploadTemplateTarBlueprintOptionsModel := new(schematics20apiv2.UploadTemplateTarBlueprintOptions)
				// Invoke operation with invalid options model (negative test)
				result, response, operationErr := schematics20ApiService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			It(`Invoke UploadTemplateTarBlueprint with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarBlueprintOptions model
				uploadTemplateTarBlueprintOptionsModel := new(schematics20apiv2.UploadTemplateTarBlueprintOptions)
				uploadTemplateTarBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarBlueprintOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UploadTemplateTarBlueprintOptions model with no property values
				uploadTemplateTarBlueprintOptionsModelNew := new(schematics20apiv2.UploadTemplateTarBlueprintOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListCatalogItems(listCatalogItemsOptions *ListCatalogItemsOptions) - Operation response error`, func() {
		listCatalogItemsPath := "/v2/catalog"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCatalogItemsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["catalog_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["catalog_name"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListCatalogItems with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListCatalogItemsOptions model
				listCatalogItemsOptionsModel := new(schematics20apiv2.ListCatalogItemsOptions)
				listCatalogItemsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCatalogItemsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCatalogItemsOptionsModel.CatalogID = core.StringPtr("testString")
				listCatalogItemsOptionsModel.CatalogName = core.StringPtr("testString")
				listCatalogItemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListCatalogItems(listCatalogItemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListCatalogItems(listCatalogItemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListCatalogItems(listCatalogItemsOptions *ListCatalogItemsOptions)`, func() {
		listCatalogItemsPath := "/v2/catalog"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCatalogItemsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["catalog_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["catalog_name"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"name": "Schematics", "label": "Schematics", "offering_id": "OfferingID", "short_description": "ShortDescription", "crn": "Crn", "offering_url": "OfferingURL", "versions": [{"version": "Version", "versionid": "Versionid"}]}]`)
				}))
			})
			It(`Invoke ListCatalogItems successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListCatalogItemsOptions model
				listCatalogItemsOptionsModel := new(schematics20apiv2.ListCatalogItemsOptions)
				listCatalogItemsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCatalogItemsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCatalogItemsOptionsModel.CatalogID = core.StringPtr("testString")
				listCatalogItemsOptionsModel.CatalogName = core.StringPtr("testString")
				listCatalogItemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListCatalogItemsWithContext(ctx, listCatalogItemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListCatalogItems(listCatalogItemsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListCatalogItemsWithContext(ctx, listCatalogItemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCatalogItemsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["catalog_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["catalog_name"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"name": "Schematics", "label": "Schematics", "offering_id": "OfferingID", "short_description": "ShortDescription", "crn": "Crn", "offering_url": "OfferingURL", "versions": [{"version": "Version", "versionid": "Versionid"}]}]`)
				}))
			})
			It(`Invoke ListCatalogItems successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListCatalogItems(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListCatalogItemsOptions model
				listCatalogItemsOptionsModel := new(schematics20apiv2.ListCatalogItemsOptions)
				listCatalogItemsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCatalogItemsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCatalogItemsOptionsModel.CatalogID = core.StringPtr("testString")
				listCatalogItemsOptionsModel.CatalogName = core.StringPtr("testString")
				listCatalogItemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListCatalogItems(listCatalogItemsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListCatalogItems with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListCatalogItemsOptions model
				listCatalogItemsOptionsModel := new(schematics20apiv2.ListCatalogItemsOptions)
				listCatalogItemsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listCatalogItemsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listCatalogItemsOptionsModel.CatalogID = core.StringPtr("testString")
				listCatalogItemsOptionsModel.CatalogName = core.StringPtr("testString")
				listCatalogItemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListCatalogItems(listCatalogItemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCatalogItem(getCatalogItemOptions *GetCatalogItemOptions) - Operation response error`, func() {
		getCatalogItemPath := "/v2/catalog/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCatalogItemPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["catalog_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["catalog_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["offering_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["offering_version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCatalogItem with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCatalogItemOptions model
				getCatalogItemOptionsModel := new(schematics20apiv2.GetCatalogItemOptions)
				getCatalogItemOptionsModel.OfferingID = core.StringPtr("testString")
				getCatalogItemOptionsModel.CatalogID = core.StringPtr("testString")
				getCatalogItemOptionsModel.CatalogName = core.StringPtr("testString")
				getCatalogItemOptionsModel.OfferingName = core.StringPtr("testString")
				getCatalogItemOptionsModel.OfferingVersion = core.StringPtr("testString")
				getCatalogItemOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCatalogItemOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCatalogItemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.GetCatalogItem(getCatalogItemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.GetCatalogItem(getCatalogItemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`GetCatalogItem(getCatalogItemOptions *GetCatalogItemOptions)`, func() {
		getCatalogItemPath := "/v2/catalog/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCatalogItemPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["catalog_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["catalog_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["offering_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["offering_version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Schematics", "label": "Schematics", "offering_id": "OfferingID", "short_description": "ShortDescription", "crn": "Crn", "offering_url": "OfferingURL", "versions": [{"version": "Version", "versionid": "Versionid"}]}`)
				}))
			})
			It(`Invoke GetCatalogItem successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the GetCatalogItemOptions model
				getCatalogItemOptionsModel := new(schematics20apiv2.GetCatalogItemOptions)
				getCatalogItemOptionsModel.OfferingID = core.StringPtr("testString")
				getCatalogItemOptionsModel.CatalogID = core.StringPtr("testString")
				getCatalogItemOptionsModel.CatalogName = core.StringPtr("testString")
				getCatalogItemOptionsModel.OfferingName = core.StringPtr("testString")
				getCatalogItemOptionsModel.OfferingVersion = core.StringPtr("testString")
				getCatalogItemOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCatalogItemOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCatalogItemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.GetCatalogItemWithContext(ctx, getCatalogItemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.GetCatalogItem(getCatalogItemOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.GetCatalogItemWithContext(ctx, getCatalogItemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCatalogItemPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["catalog_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["catalog_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["offering_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["offering_version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Schematics", "label": "Schematics", "offering_id": "OfferingID", "short_description": "ShortDescription", "crn": "Crn", "offering_url": "OfferingURL", "versions": [{"version": "Version", "versionid": "Versionid"}]}`)
				}))
			})
			It(`Invoke GetCatalogItem successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.GetCatalogItem(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCatalogItemOptions model
				getCatalogItemOptionsModel := new(schematics20apiv2.GetCatalogItemOptions)
				getCatalogItemOptionsModel.OfferingID = core.StringPtr("testString")
				getCatalogItemOptionsModel.CatalogID = core.StringPtr("testString")
				getCatalogItemOptionsModel.CatalogName = core.StringPtr("testString")
				getCatalogItemOptionsModel.OfferingName = core.StringPtr("testString")
				getCatalogItemOptionsModel.OfferingVersion = core.StringPtr("testString")
				getCatalogItemOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCatalogItemOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCatalogItemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.GetCatalogItem(getCatalogItemOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCatalogItem with error: Operation validation and request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the GetCatalogItemOptions model
				getCatalogItemOptionsModel := new(schematics20apiv2.GetCatalogItemOptions)
				getCatalogItemOptionsModel.OfferingID = core.StringPtr("testString")
				getCatalogItemOptionsModel.CatalogID = core.StringPtr("testString")
				getCatalogItemOptionsModel.CatalogName = core.StringPtr("testString")
				getCatalogItemOptionsModel.OfferingName = core.StringPtr("testString")
				getCatalogItemOptionsModel.OfferingVersion = core.StringPtr("testString")
				getCatalogItemOptionsModel.Offset = core.Int64Ptr(int64(0))
				getCatalogItemOptionsModel.Limit = core.Int64Ptr(int64(1))
				getCatalogItemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.GetCatalogItem(getCatalogItemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCatalogItemOptions model with no property values
				getCatalogItemOptionsModelNew := new(schematics20apiv2.GetCatalogItemOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematics20ApiService.GetCatalogItem(getCatalogItemOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematics20ApiService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "https://schematics20apiv2/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematics20ApiService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
					URL: "https://testService/api",
				})
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				})
				err := schematics20ApiService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematics20ApiService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematics20ApiService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematics20ApiService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematics20ApiService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_URL": "https://schematics20apiv2/api",
				"SCHEMATICS_2_0_API_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_2_0_API_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2UsingExternalConfig(&schematics20apiv2.Schematics20ApiV2Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematics20ApiService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematics20apiv2.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListLocations(listLocationsOptions *ListLocationsOptions) - Operation response error`, func() {
		listLocationsPath := "/v2/locations"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLocations with error: Operation response processing error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(schematics20apiv2.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematics20ApiService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematics20ApiService.EnableRetries(0, 0)
				result, response, operationErr = schematics20ApiService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})

	Describe(`ListLocations(listLocationsOptions *ListLocationsOptions)`, func() {
		listLocationsPath := "/v2/locations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"locations": [{"region": "Region", "metro": "Metro", "geography_code": "GeographyCode", "geography": "Geography", "country": "Country", "kind": "Kind", "paired_region": ["PairedRegion"], "restricted": true, "display_name": "DisplayName", "schematics_regional_public_endpoint": "SchematicsRegionalPublicEndpoint", "schematics_regional_private_endpoint": "SchematicsRegionalPrivateEndpoint"}]}`)
				}))
			})
			It(`Invoke ListLocations successfully with retries`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())
				schematics20ApiService.EnableRetries(0, 0)

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(schematics20apiv2.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematics20ApiService.ListLocationsWithContext(ctx, listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematics20ApiService.DisableRetries()
				result, response, operationErr := schematics20ApiService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematics20ApiService.ListLocationsWithContext(ctx, listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"locations": [{"region": "Region", "metro": "Metro", "geography_code": "GeographyCode", "geography": "Geography", "country": "Country", "kind": "Kind", "paired_region": ["PairedRegion"], "restricted": true, "display_name": "DisplayName", "schematics_regional_public_endpoint": "SchematicsRegionalPublicEndpoint", "schematics_regional_private_endpoint": "SchematicsRegionalPrivateEndpoint"}]}`)
				}))
			})
			It(`Invoke ListLocations successfully`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematics20ApiService.ListLocations(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(schematics20apiv2.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematics20ApiService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListLocations with error: Operation request error`, func() {
				schematics20ApiService, serviceErr := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematics20ApiService).ToNot(BeNil())

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(schematics20apiv2.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematics20ApiService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematics20ApiService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Model constructor tests`, func() {
		Context(`Using a service client instance`, func() {
			schematics20ApiService, _ := schematics20apiv2.NewSchematics20ApiV2(&schematics20apiv2.Schematics20ApiV2Options{
				URL:           "http://schematics20apiv2modelgenerator.com",
				Authenticator: &core.NoAuthAuthenticator{},
			})
			It(`Invoke NewAddFlowToWorkspaceOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				Expect(templateCommandModel).ToNot(BeNil())
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateCommandModel.Command).To(Equal(core.StringPtr("workspace_plan")))
				Expect(templateCommandModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(templateCommandModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateCommandModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				Expect(templateFlowDefinitionTemplateOperationModel).ToNot(BeNil())
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowDefinitionTemplateOperationModel.PreCondition).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionTemplateOperationModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionTemplateOperationModel.OverrideCommand).To(Equal(templateCommandModel))
				Expect(templateFlowDefinitionTemplateOperationModel.PostCondition).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionTemplateOperationModel.OnError).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionTemplateOperationModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowDefinitionTemplateOperationModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				Expect(templateFlowDefinitionSimpleFlowModel).ToNot(BeNil())
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowDefinitionSimpleFlowModel.Index).To(Equal(core.Int64Ptr(int64(38))))
				Expect(templateFlowDefinitionSimpleFlowModel.Control).To(Equal(core.StringPtr("do")))
				Expect(templateFlowDefinitionSimpleFlowModel.TemplateOperation).To(Equal(templateFlowDefinitionTemplateOperationModel))
				Expect(templateFlowDefinitionSimpleFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowDefinitionSimpleFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				Expect(templateFlowDefinitionModel).ToNot(BeNil())
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowDefinitionModel.FlowType).To(Equal(core.StringPtr("simple")))
				Expect(templateFlowDefinitionModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionModel.SimpleFlow).To(Equal([]schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}))
				Expect(templateFlowDefinitionModel.CustomFlow).To(Equal(CreateMockByteArray("This is a mock byte array value.")))
				Expect(templateFlowDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				Expect(jobStatusWorkspaceTemplateFlowModel).ToNot(BeNil())
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkspaceTemplateFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceTemplateFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceTemplateFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceTemplateFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceTemplateFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkspaceTemplateFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkspaceTemplateFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				Expect(templateFlowValidationSummaryModel).ToNot(BeNil())
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowValidationSummaryModel.WarningCount).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(templateFlowValidationSummaryModel.ErrorCount).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(templateFlowValidationSummaryModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowValidationSummaryModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				Expect(templateFlowModel).ToNot(BeNil())
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowModel.Version).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowModel.Type).To(Equal(core.StringPtr("simple_flow")))
				Expect(templateFlowModel.UserState).To(Equal(userStateModel))
				Expect(templateFlowModel.Definition).To(Equal(templateFlowDefinitionModel))
				Expect(templateFlowModel.SysLock).To(Equal(systemLockModel))
				Expect(templateFlowModel.Status).To(Equal(jobStatusWorkspaceTemplateFlowModel))
				Expect(templateFlowModel.ValidationSummary).To(Equal(templateFlowValidationSummaryModel))
				Expect(templateFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the AddFlowToWorkspaceOptions model
				wID := "testString"
				var templateFlow *schematics20apiv2.TemplateFlow = nil
				addFlowToWorkspaceOptionsModel := schematics20ApiService.NewAddFlowToWorkspaceOptions(wID, templateFlow)
				addFlowToWorkspaceOptionsModel.SetWID("testString")
				addFlowToWorkspaceOptionsModel.SetTemplateFlow(templateFlowModel)
				addFlowToWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addFlowToWorkspaceOptionsModel).ToNot(BeNil())
				Expect(addFlowToWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(addFlowToWorkspaceOptionsModel.TemplateFlow).To(Equal(templateFlowModel))
				Expect(addFlowToWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddTemplatesToWorkspaceOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				Expect(templateModel).ToNot(BeNil())
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateModel.Name).To(Equal(core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")))
				Expect(templateModel.Description).To(Equal(core.StringPtr("This template provisions clusters in production environment")))
				Expect(templateModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(templateModel.UserState).To(Equal(userStateModel))
				Expect(templateModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(templateModel.Source).To(Equal(externalSourceModel))
				Expect(templateModel.SourceReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(templateModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(templateModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(templateModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(templateModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(templateModel.Status).To(Equal(jobStatusTemplateModel))
				Expect(templateModel.SysLock).To(Equal(systemLockModel))
				Expect(templateModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the AddTemplatesToWorkspaceOptions model
				wID := "testString"
				var template *schematics20apiv2.Template = nil
				addTemplatesToWorkspaceOptionsModel := schematics20ApiService.NewAddTemplatesToWorkspaceOptions(wID, template)
				addTemplatesToWorkspaceOptionsModel.SetWID("testString")
				addTemplatesToWorkspaceOptionsModel.SetTemplate(templateModel)
				addTemplatesToWorkspaceOptionsModel.SetXGithubToken("testString")
				addTemplatesToWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addTemplatesToWorkspaceOptionsModel).ToNot(BeNil())
				Expect(addTemplatesToWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(addTemplatesToWorkspaceOptionsModel.Template).To(Equal(templateModel))
				Expect(addTemplatesToWorkspaceOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(addTemplatesToWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAgent successfully`, func() {
				name := "MyDevAgent"
				profileID := "testString"
				agentID := "testString"
				model, err := schematics20ApiService.NewAgent(name, profileID, agentID)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewBlueprint successfully`, func() {
				name := "Toronto Dev Environtment"
				model, err := schematics20ApiService.NewBlueprint(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCartOrder successfully`, func() {
				name := "MySatelliteLocation"
				model, err := schematics20ApiService.NewCartOrder(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCreateActionOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematics20apiv2.CredentialVariableMetadata)
				Expect(credentialVariableMetadataModel).ToNot(BeNil())
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")
				credentialVariableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(credentialVariableMetadataModel.Type).To(Equal(core.StringPtr("string")))
				Expect(credentialVariableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(credentialVariableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(credentialVariableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(credentialVariableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(credentialVariableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematics20apiv2.CredentialVariableData)
				Expect(credentialVariableDataModel).ToNot(BeNil())
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel
				credentialVariableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(credentialVariableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableDataModel.Metadata).To(Equal(credentialVariableMetadataModel))
				Expect(credentialVariableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(credentialVariableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(bastionResourceDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ActionState model
				actionStateModel := new(schematics20apiv2.ActionState)
				Expect(actionStateModel).ToNot(BeNil())
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")
				actionStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(actionStateModel.StatusCode).To(Equal(core.StringPtr("normal")))
				Expect(actionStateModel.StatusJobID).To(Equal(core.StringPtr("testString")))
				Expect(actionStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(actionStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(actionStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Action model
				actionModel := new(schematics20apiv2.Action)
				Expect(actionModel).ToNot(BeNil())
				actionModel.Name = core.StringPtr("Stop Action")
				actionModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				actionModel.Location = core.StringPtr("us-south")
				actionModel.ResourceGroup = core.StringPtr("testString")
				actionModel.BastionConnectionType = core.StringPtr("ssh")
				actionModel.InventoryConnectionType = core.StringPtr("ssh")
				actionModel.Tags = []string{"testString"}
				actionModel.UserState = userStateModel
				actionModel.SourceReadmeURL = core.StringPtr("testString")
				actionModel.Source = externalSourceModel
				actionModel.SourceType = core.StringPtr("local")
				actionModel.CommandParameter = core.StringPtr("testString")
				actionModel.Inventory = core.StringPtr("testString")
				actionModel.Credentials = []schematics20apiv2.CredentialVariableData{*credentialVariableDataModel}
				actionModel.Bastion = bastionResourceDefinitionModel
				actionModel.BastionCredential = credentialVariableDataModel
				actionModel.TargetsIni = core.StringPtr("testString")
				actionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.State = actionStateModel
				actionModel.SysLock = systemLockModel
				actionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(actionModel.Name).To(Equal(core.StringPtr("Stop Action")))
				Expect(actionModel.Description).To(Equal(core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")))
				Expect(actionModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(actionModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(actionModel.BastionConnectionType).To(Equal(core.StringPtr("ssh")))
				Expect(actionModel.InventoryConnectionType).To(Equal(core.StringPtr("ssh")))
				Expect(actionModel.Tags).To(Equal([]string{"testString"}))
				Expect(actionModel.UserState).To(Equal(userStateModel))
				Expect(actionModel.SourceReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(actionModel.Source).To(Equal(externalSourceModel))
				Expect(actionModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(actionModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(actionModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(actionModel.Credentials).To(Equal([]schematics20apiv2.CredentialVariableData{*credentialVariableDataModel}))
				Expect(actionModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(actionModel.BastionCredential).To(Equal(credentialVariableDataModel))
				Expect(actionModel.TargetsIni).To(Equal(core.StringPtr("testString")))
				Expect(actionModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(actionModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(actionModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(actionModel.State).To(Equal(actionStateModel))
				Expect(actionModel.SysLock).To(Equal(systemLockModel))
				Expect(actionModel.GetProperties()).ToNot(BeEmpty())
				Expect(actionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateActionOptions model
				var action *schematics20apiv2.Action = nil
				createActionOptionsModel := schematics20ApiService.NewCreateActionOptions(action)
				createActionOptionsModel.SetAction(actionModel)
				createActionOptionsModel.SetXGithubToken("testString")
				createActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createActionOptionsModel).ToNot(BeNil())
				Expect(createActionOptionsModel.Action).To(Equal(actionModel))
				Expect(createActionOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(createActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateAdapterOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Adapter model
				adapterModel := new(schematics20apiv2.Adapter)
				Expect(adapterModel).ToNot(BeNil())
				adapterModel.AdapterName = core.StringPtr("testString")
				adapterModel.AdapterType = core.StringPtr("scm_adapter")
				adapterModel.Location = core.StringPtr("us-south")
				adapterModel.ResourceGroup = core.StringPtr("testString")
				adapterModel.Tags = []string{"testString"}
				adapterModel.AdapterEndpointURL = core.StringPtr("testString")
				adapterModel.ServiceID = core.StringPtr("testString")
				adapterModel.Apikey = core.StringPtr("testString")
				adapterModel.UserState = userStateModel
				adapterModel.IgnoreInflightOperations = core.BoolPtr(true)
				adapterModel.AdapterID = core.StringPtr("testString")
				adapterModel.RegisteredBy = core.StringPtr("testString")
				adapterModel.RegisteredAt = CreateMockDateTime()
				adapterModel.UpdatedAt = CreateMockDateTime()
				adapterModel.UpdatedBy = core.StringPtr("testString")
				adapterModel.SysLock = systemLockModel
				adapterModel.AdapterHealth = core.StringPtr("active")
				adapterModel.LastHealthCheckedAt = CreateMockDateTime()
				adapterModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(adapterModel.AdapterName).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.AdapterType).To(Equal(core.StringPtr("scm_adapter")))
				Expect(adapterModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(adapterModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.Tags).To(Equal([]string{"testString"}))
				Expect(adapterModel.AdapterEndpointURL).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.ServiceID).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.Apikey).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.UserState).To(Equal(userStateModel))
				Expect(adapterModel.IgnoreInflightOperations).To(Equal(core.BoolPtr(true)))
				Expect(adapterModel.AdapterID).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.RegisteredBy).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.RegisteredAt).To(Equal(CreateMockDateTime()))
				Expect(adapterModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(adapterModel.UpdatedBy).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.SysLock).To(Equal(systemLockModel))
				Expect(adapterModel.AdapterHealth).To(Equal(core.StringPtr("active")))
				Expect(adapterModel.LastHealthCheckedAt).To(Equal(CreateMockDateTime()))
				Expect(adapterModel.GetProperties()).ToNot(BeEmpty())
				Expect(adapterModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateAdapterOptions model
				var adapter *schematics20apiv2.Adapter = nil
				createAdapterOptionsModel := schematics20ApiService.NewCreateAdapterOptions(adapter)
				createAdapterOptionsModel.SetAdapter(adapterModel)
				createAdapterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createAdapterOptionsModel).ToNot(BeNil())
				Expect(createAdapterOptionsModel.Adapter).To(Equal(adapterModel))
				Expect(createAdapterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateBlueprintOptions successfully`, func() {
				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				Expect(blueprintVariableDataModel).ToNot(BeNil())
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintVariableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(blueprintVariableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(blueprintVariableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintVariableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				Expect(blueprintConfigItemModel).ToNot(BeNil())
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintConfigItemModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(blueprintConfigItemModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(blueprintConfigItemModel.Source).To(Equal(externalSourceModel))
				Expect(blueprintConfigItemModel.Inputs).To(Equal([]schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}))
				Expect(blueprintConfigItemModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintConfigItemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				Expect(blueprintFlowModel).ToNot(BeNil())
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				Expect(blueprintLiteStateModel).ToNot(BeNil())
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintLiteStateModel.StatusCode).To(Equal(core.StringPtr("Blueprint_Create_Init")))
				Expect(blueprintLiteStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(blueprintLiteStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintLiteStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				Expect(blueprintModel).ToNot(BeNil())
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintModel.Name).To(Equal(core.StringPtr("Toronto Dev Environtment")))
				Expect(blueprintModel.SchemaVersion).To(Equal(core.StringPtr("1.0")))
				Expect(blueprintModel.Source).To(Equal(externalSourceModel))
				Expect(blueprintModel.Config).To(Equal([]schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}))
				Expect(blueprintModel.Description).To(Equal(core.StringPtr("Deploys dev environtment instance in Toronto Region")))
				Expect(blueprintModel.ResourceGroup).To(Equal(core.StringPtr("Default")))
				Expect(blueprintModel.Tags).To(Equal([]string{"testString"}))
				Expect(blueprintModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(blueprintModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(blueprintModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(blueprintModel.Flow).To(Equal(blueprintFlowModel))
				Expect(blueprintModel.SysLock).To(Equal(systemLockModel))
				Expect(blueprintModel.UserState).To(Equal(userStateModel))
				Expect(blueprintModel.State).To(Equal(blueprintLiteStateModel))
				Expect(blueprintModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateBlueprintOptions model
				var blueprint *schematics20apiv2.Blueprint = nil
				createBlueprintOptionsModel := schematics20ApiService.NewCreateBlueprintOptions(blueprint)
				createBlueprintOptionsModel.SetBlueprint(blueprintModel)
				createBlueprintOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createBlueprintOptionsModel).ToNot(BeNil())
				Expect(createBlueprintOptionsModel.Blueprint).To(Equal(blueprintModel))
				Expect(createBlueprintOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateCapsuleOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				Expect(jobStatusWorkitemModel).ToNot(BeNil())
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkitemModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkitemModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkitemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkitemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				Expect(jobStatusFlowModel).ToNot(BeNil())
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.Workitems).To(Equal([]schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}))
				Expect(jobStatusFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				Expect(jobStatusWorkspaceModel).ToNot(BeNil())
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.FlowStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusWorkspaceModel.TemplateStatus).To(Equal([]schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}))
				Expect(jobStatusWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				Expect(jobStatusActionModel).ToNot(BeNil())
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusActionModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.BastionStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.BastionStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.TargetsStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.TargetsStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				Expect(jobStatusSchematicsResourcesModel).ToNot(BeNil())
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSchematicsResourcesModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSchematicsResourcesModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.SchematicsResourceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSchematicsResourcesModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSchematicsResourcesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				Expect(jobStatusSystemModel).ToNot(BeNil())
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSystemModel.SystemStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSystemModel.SystemStatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSystemModel.SchematicsResourceStatus).To(Equal([]schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}))
				Expect(jobStatusSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				Expect(jobStatusModel).ToNot(BeNil())
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusModel.PositionInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.TotalInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.WorkspaceJobStatus).To(Equal(jobStatusWorkspaceModel))
				Expect(jobStatusModel.ActionJobStatus).To(Equal(jobStatusActionModel))
				Expect(jobStatusModel.SystemJobStatus).To(Equal(jobStatusSystemModel))
				Expect(jobStatusModel.FlowJobStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				Expect(jobDataTemplateModel).ToNot(BeNil())
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobDataTemplateModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				Expect(jobDataWorkspaceModel).ToNot(BeNil())
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.TemplateData).To(Equal([]schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}))
				Expect(jobDataWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				Expect(inventoryResourceRecordModel).ToNot(BeNil())
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(inventoryResourceRecordModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceRecordModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(inventoryResourceRecordModel.GetProperties()).ToNot(BeEmpty())
				Expect(inventoryResourceRecordModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				Expect(jobDataActionModel).ToNot(BeNil())
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataActionModel.InventoryRecord).To(Equal(inventoryResourceRecordModel))
				Expect(jobDataActionModel.MaterializedInventory).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				Expect(jobDataSystemModel).ToNot(BeNil())
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataSystemModel.KeyID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataSystemModel.SchematicsResourceID).To(Equal([]string{"testString"}))
				Expect(jobDataSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				Expect(jobDataWorkItemLastJobModel).ToNot(BeNil())
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemLastJobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobDataWorkItemLastJobModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.JobStatus).To(Equal(core.StringPtr("job_pending")))
				Expect(jobDataWorkItemLastJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemLastJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				Expect(jobDataWorkItemModel).ToNot(BeNil())
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.Layers).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(jobDataWorkItemModel.Source).To(Equal(externalSourceModel))
				Expect(jobDataWorkItemModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.LastJob).To(Equal(jobDataWorkItemLastJobModel))
				Expect(jobDataWorkItemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkItemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				Expect(jobDataFlowModel).ToNot(BeNil())
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.Workitems).To(Equal([]schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}))
				Expect(jobDataFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				Expect(jobDataModel).ToNot(BeNil())
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobDataModel.WorkspaceJobData).To(Equal(jobDataWorkspaceModel))
				Expect(jobDataModel.ActionJobData).To(Equal(jobDataActionModel))
				Expect(jobDataModel.SystemJobData).To(Equal(jobDataSystemModel))
				Expect(jobDataModel.FlowJobData).To(Equal(jobDataFlowModel))
				Expect(jobDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(bastionResourceDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				Expect(jobLogSummaryRepoDownloadJobModel).ToNot(BeNil())
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				Expect(jobLogSummaryWorkspaceJobModel).ToNot(BeNil())
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkspaceJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkspaceJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				Expect(jobLogSummaryWorkitemsModel).ToNot(BeNil())
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkitemsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.LogURL).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkitemsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				Expect(jobLogSummaryFlowJobModel).ToNot(BeNil())
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryFlowJobModel.Workitems).To(Equal([]schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}))
				Expect(jobLogSummaryFlowJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryFlowJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				Expect(jobLogSummaryActionJobRecapModel).ToNot(BeNil())
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobRecapModel.Target).To(Equal([]string{"testString"}))
				Expect(jobLogSummaryActionJobRecapModel.Ok).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Changed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Skipped).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Unreachable).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobRecapModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				Expect(jobLogSummaryActionJobModel).ToNot(BeNil())
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobModel.Recap).To(Equal(jobLogSummaryActionJobRecapModel))
				Expect(jobLogSummaryActionJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				Expect(jobLogSummarySystemJobModel).ToNot(BeNil())
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummarySystemJobModel.Success).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummarySystemJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				Expect(jobLogSummaryModel).ToNot(BeNil())
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobLogSummaryModel.RepoDownloadJob).To(Equal(jobLogSummaryRepoDownloadJobModel))
				Expect(jobLogSummaryModel.WorkspaceJob).To(Equal(jobLogSummaryWorkspaceJobModel))
				Expect(jobLogSummaryModel.FlowJob).To(Equal(jobLogSummaryFlowJobModel))
				Expect(jobLogSummaryModel.ActionJob).To(Equal(jobLogSummaryActionJobModel))
				Expect(jobLogSummaryModel.SystemJob).To(Equal(jobLogSummarySystemJobModel))
				Expect(jobLogSummaryModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				Expect(jobModel).ToNot(BeNil())
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(jobModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Tags).To(Equal([]string{"testString"}))
				Expect(jobModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(jobModel.Status).To(Equal(jobStatusModel))
				Expect(jobModel.Data).To(Equal(jobDataModel))
				Expect(jobModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(jobModel.LogSummary).To(Equal(jobLogSummaryModel))
				Expect(jobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				Expect(triggerJobModel).ToNot(BeNil())
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerJobModel.Event).To(Equal(core.StringPtr("before | after")))
				Expect(triggerJobModel.Job).To(Equal(jobModel))
				Expect(triggerJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				Expect(triggerScheduledModel).ToNot(BeNil())
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerScheduledModel.Frequency).To(Equal(core.StringPtr("daily | weekly")))
				Expect(triggerScheduledModel.Time).To(Equal(core.StringPtr("time in UTC")))
				Expect(triggerScheduledModel.Day).To(Equal(core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")))
				Expect(triggerScheduledModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerScheduledModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				Expect(controlsDecisionModel).ToNot(BeNil())
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsDecisionModel.Rule).To(Equal(core.StringPtr("testString")))
				Expect(controlsDecisionModel.PassValue).To(Equal(core.StringPtr("before")))
				Expect(controlsDecisionModel.PassExpr).To(Equal(core.StringPtr("== OR != OR <= OR >= OR > OR <")))
				Expect(controlsDecisionModel.EvidenceFoundIn).To(Equal(core.StringPtr("rule emitting details")))
				Expect(controlsDecisionModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsDecisionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				Expect(controlsEscalationModel).ToNot(BeNil())
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsEscalationModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(controlsEscalationModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsEscalationModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				Expect(controlsLiteStateModel).ToNot(BeNil())
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsLiteStateModel.StatusCode).To(Equal(core.StringPtr("normal")))
				Expect(controlsLiteStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(controlsLiteStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsLiteStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				Expect(capsuleResultResourcesModel).ToNot(BeNil())
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(capsuleResultResourcesModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(capsuleResultResourcesModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(capsuleResultResourcesModel.GetProperties()).ToNot(BeEmpty())
				Expect(capsuleResultResourcesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				Expect(capsuleResultEvidencesModel).ToNot(BeNil())
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(capsuleResultEvidencesModel.Resources).To(Equal([]schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}))
				Expect(capsuleResultEvidencesModel.GetProperties()).ToNot(BeEmpty())
				Expect(capsuleResultEvidencesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				Expect(jobResultCapsuleModel).ToNot(BeNil())
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobResultCapsuleModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobResultCapsuleModel.JobName).To(Equal(core.StringPtr("testString")))
				Expect(jobResultCapsuleModel.Policy).To(Equal(core.StringPtr("testString")))
				Expect(jobResultCapsuleModel.Severity).To(Equal(core.Int64Ptr(int64(1))))
				Expect(jobResultCapsuleModel.JobState).To(Equal(core.StringPtr("success")))
				Expect(jobResultCapsuleModel.Failures).To(Equal([]string{"testString"}))
				Expect(jobResultCapsuleModel.Passed).To(Equal([]string{"testString"}))
				Expect(jobResultCapsuleModel.Evidences).To(Equal([]schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}))
				Expect(jobResultCapsuleModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobResultCapsuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobResultCapsuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				Expect(jobDataCapsuleModel).ToNot(BeNil())
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataCapsuleModel.CapsuleID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataCapsuleModel.CalsuleName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataCapsuleModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataCapsuleModel.Results).To(Equal([]schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}))
				Expect(jobDataCapsuleModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataCapsuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataCapsuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				Expect(capsuleModel).ToNot(BeNil())
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(capsuleModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.UserState).To(Equal(userStateModel))
				Expect(capsuleModel.Package).To(Equal(core.StringPtr("Policy package path")))
				Expect(capsuleModel.Severity).To(Equal(core.Int64Ptr(int64(1))))
				Expect(capsuleModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.TriggerRecordID).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.JobTriggers).To(Equal([]schematics20apiv2.TriggerJob{*triggerJobModel}))
				Expect(capsuleModel.ScheduledTriggers).To(Equal([]schematics20apiv2.TriggerScheduled{*triggerScheduledModel}))
				Expect(capsuleModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(capsuleModel.Decisions).To(Equal([]schematics20apiv2.ControlsDecision{*controlsDecisionModel}))
				Expect(capsuleModel.Escalations).To(Equal([]schematics20apiv2.ControlsEscalation{*controlsEscalationModel}))
				Expect(capsuleModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.ControlsID).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.ControlsName).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.CreatedAt).To(Equal(CreateMockDateTime()))
				Expect(capsuleModel.CreatedBy).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(capsuleModel.UpdatedBy).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.State).To(Equal(controlsLiteStateModel))
				Expect(capsuleModel.LastJobData).To(Equal(jobDataCapsuleModel))
				Expect(capsuleModel.SysLock).To(Equal(systemLockModel))
				Expect(capsuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(capsuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateCapsuleOptions model
				controlsID := "testString"
				var capsule *schematics20apiv2.Capsule = nil
				createCapsuleOptionsModel := schematics20ApiService.NewCreateCapsuleOptions(controlsID, capsule)
				createCapsuleOptionsModel.SetControlsID("testString")
				createCapsuleOptionsModel.SetCapsule(capsuleModel)
				createCapsuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createCapsuleOptionsModel).ToNot(BeNil())
				Expect(createCapsuleOptionsModel.ControlsID).To(Equal(core.StringPtr("testString")))
				Expect(createCapsuleOptionsModel.Capsule).To(Equal(capsuleModel))
				Expect(createCapsuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateCartOrderOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				Expect(targetRequestModel).ToNot(BeNil())
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(targetRequestModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.ClusterName).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.EntitlementKey).To(Equal(map[string]interface{}{"anyKey": "anyValue"}))
				Expect(targetRequestModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.GetProperties()).ToNot(BeEmpty())
				Expect(targetRequestModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				Expect(serviceMappingRuleModel).ToNot(BeNil())
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(serviceMappingRuleModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(serviceMappingRuleModel.InputParamName).To(Equal(core.StringPtr("testString")))
				Expect(serviceMappingRuleModel.OutputParamName).To(Equal(core.StringPtr("testString")))
				Expect(serviceMappingRuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(serviceMappingRuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				Expect(serviceVariableDataModel).ToNot(BeNil())
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(serviceVariableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(serviceVariableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(serviceVariableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(serviceVariableDataModel.Mapping).To(Equal([]schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}))
				Expect(serviceVariableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(serviceVariableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SKUUserState model
				skuUserStateModel := new(schematics20apiv2.SKUUserState)
				Expect(skuUserStateModel).ToNot(BeNil())
				skuUserStateModel.State = core.StringPtr("testString")
				skuUserStateModel.SetBy = core.StringPtr("testString")
				skuUserStateModel.SetAt = CreateMockDateTime()
				skuUserStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(skuUserStateModel.State).To(Equal(core.StringPtr("testString")))
				Expect(skuUserStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(skuUserStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(skuUserStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(skuUserStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ItemSKU model
				itemSkuModel := new(schematics20apiv2.ItemSKU)
				Expect(itemSkuModel).ToNot(BeNil())
				itemSkuModel.SkuID = core.StringPtr("testString")
				itemSkuModel.SkuType = core.StringPtr("testString")
				itemSkuModel.SkuSysLock = systemLockModel
				itemSkuModel.SkuUserState = skuUserStateModel
				itemSkuModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(itemSkuModel.SkuID).To(Equal(core.StringPtr("testString")))
				Expect(itemSkuModel.SkuType).To(Equal(core.StringPtr("testString")))
				Expect(itemSkuModel.SkuSysLock).To(Equal(systemLockModel))
				Expect(itemSkuModel.SkuUserState).To(Equal(skuUserStateModel))
				Expect(itemSkuModel.GetProperties()).ToNot(BeEmpty())
				Expect(itemSkuModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the OrderItemConfiguration model
				orderItemConfigurationModel := new(schematics20apiv2.OrderItemConfiguration)
				Expect(orderItemConfigurationModel).ToNot(BeNil())
				orderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				orderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				orderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Target = targetRequestModel
				orderItemConfigurationModel.Operation = core.StringPtr("configure")
				orderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				orderItemConfigurationModel.CatalogID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingID = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccount = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccountCrn = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKindID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingTargetKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersionID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingFulfilmentKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersion = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerURL = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerSsh = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				orderItemConfigurationModel.ItemSku = itemSkuModel
				orderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(orderItemConfigurationModel.Name).To(Equal(core.StringPtr("AWS Satellite")))
				Expect(orderItemConfigurationModel.Description).To(Equal(core.StringPtr("Create satellite location in AWS")))
				Expect(orderItemConfigurationModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(orderItemConfigurationModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(orderItemConfigurationModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(orderItemConfigurationModel.Target).To(Equal(targetRequestModel))
				Expect(orderItemConfigurationModel.Operation).To(Equal(core.StringPtr("configure")))
				Expect(orderItemConfigurationModel.ServiceData).To(Equal([]schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}))
				Expect(orderItemConfigurationModel.CatalogID).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OwningAccountCrn).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingKindID).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingTargetKind).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingFulfilmentKind).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingProvisionerURL).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingProvisionerSsh).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingProvisionerWorkingDirectory).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.ItemSku).To(Equal(itemSkuModel))
				Expect(orderItemConfigurationModel.GetProperties()).ToNot(BeEmpty())
				Expect(orderItemConfigurationModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CartOrderUserState model
				cartOrderUserStateModel := new(schematics20apiv2.CartOrderUserState)
				Expect(cartOrderUserStateModel).ToNot(BeNil())
				cartOrderUserStateModel.State = core.StringPtr("Order_Create_Init")
				cartOrderUserStateModel.SetBy = core.StringPtr("testString")
				cartOrderUserStateModel.SetAt = CreateMockDateTime()
				cartOrderUserStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(cartOrderUserStateModel.State).To(Equal(core.StringPtr("Order_Create_Init")))
				Expect(cartOrderUserStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(cartOrderUserStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(cartOrderUserStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(cartOrderUserStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CartOrderLiteState model
				cartOrderLiteStateModel := new(schematics20apiv2.CartOrderLiteState)
				Expect(cartOrderLiteStateModel).ToNot(BeNil())
				cartOrderLiteStateModel.StatusCode = core.StringPtr("normal")
				cartOrderLiteStateModel.StatusMessage = core.StringPtr("testString")
				cartOrderLiteStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(cartOrderLiteStateModel.StatusCode).To(Equal(core.StringPtr("normal")))
				Expect(cartOrderLiteStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(cartOrderLiteStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(cartOrderLiteStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CartOrder model
				cartOrderModel := new(schematics20apiv2.CartOrder)
				Expect(cartOrderModel).ToNot(BeNil())
				cartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				cartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				cartOrderModel.Tags = []string{"testString"}
				cartOrderModel.CartItems = []schematics20apiv2.OrderItemConfiguration{*orderItemConfigurationModel}
				cartOrderModel.ServiceName = core.StringPtr("SatelliteLocation")
				cartOrderModel.ResourceGroup = core.StringPtr("testString")
				cartOrderModel.Location = core.StringPtr("us-south")
				cartOrderModel.UserState = cartOrderUserStateModel
				cartOrderModel.SysLock = systemLockModel
				cartOrderModel.State = cartOrderLiteStateModel
				cartOrderModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(cartOrderModel.Name).To(Equal(core.StringPtr("MySatelliteLocation")))
				Expect(cartOrderModel.Description).To(Equal(core.StringPtr("Creates satellite location in AWS")))
				Expect(cartOrderModel.Tags).To(Equal([]string{"testString"}))
				Expect(cartOrderModel.CartItems).To(Equal([]schematics20apiv2.OrderItemConfiguration{*orderItemConfigurationModel}))
				Expect(cartOrderModel.ServiceName).To(Equal(core.StringPtr("SatelliteLocation")))
				Expect(cartOrderModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(cartOrderModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(cartOrderModel.UserState).To(Equal(cartOrderUserStateModel))
				Expect(cartOrderModel.SysLock).To(Equal(systemLockModel))
				Expect(cartOrderModel.State).To(Equal(cartOrderLiteStateModel))
				Expect(cartOrderModel.GetProperties()).ToNot(BeEmpty())
				Expect(cartOrderModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateCartOrderOptions model
				var cartOrder *schematics20apiv2.CartOrder = nil
				createCartOrderOptionsModel := schematics20ApiService.NewCreateCartOrderOptions(cartOrder)
				createCartOrderOptionsModel.SetCartOrder(cartOrderModel)
				createCartOrderOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createCartOrderOptionsModel).ToNot(BeNil())
				Expect(createCartOrderOptionsModel.CartOrder).To(Equal(cartOrderModel))
				Expect(createCartOrderOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateConnectionOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Connection model
				connectionModel := new(schematics20apiv2.Connection)
				Expect(connectionModel).ToNot(BeNil())
				connectionModel.Name = core.StringPtr("testString")
				connectionModel.Description = core.StringPtr("testString")
				connectionModel.ResourceGroup = core.StringPtr("testString")
				connectionModel.Location = core.StringPtr("us-south")
				connectionModel.Tags = []string{"testString"}
				connectionModel.ConnectionType = core.StringPtr("testString")
				connectionModel.ConnectionProperties = []schematics20apiv2.VariableData{*variableDataModel}
				connectionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(connectionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(connectionModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(connectionModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(connectionModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(connectionModel.Tags).To(Equal([]string{"testString"}))
				Expect(connectionModel.ConnectionType).To(Equal(core.StringPtr("testString")))
				Expect(connectionModel.ConnectionProperties).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(connectionModel.GetProperties()).ToNot(BeEmpty())
				Expect(connectionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateConnectionOptions model
				var connection *schematics20apiv2.Connection = nil
				createConnectionOptionsModel := schematics20ApiService.NewCreateConnectionOptions(connection)
				createConnectionOptionsModel.SetConnection(connectionModel)
				createConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createConnectionOptionsModel).ToNot(BeNil())
				Expect(createConnectionOptionsModel.Connection).To(Equal(connectionModel))
				Expect(createConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateControlsOptions successfully`, func() {
				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				Expect(jobStatusWorkitemModel).ToNot(BeNil())
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkitemModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkitemModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkitemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkitemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				Expect(jobStatusFlowModel).ToNot(BeNil())
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.Workitems).To(Equal([]schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}))
				Expect(jobStatusFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				Expect(jobStatusWorkspaceModel).ToNot(BeNil())
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.FlowStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusWorkspaceModel.TemplateStatus).To(Equal([]schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}))
				Expect(jobStatusWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				Expect(jobStatusActionModel).ToNot(BeNil())
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusActionModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.BastionStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.BastionStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.TargetsStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.TargetsStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				Expect(jobStatusSchematicsResourcesModel).ToNot(BeNil())
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSchematicsResourcesModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSchematicsResourcesModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.SchematicsResourceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSchematicsResourcesModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSchematicsResourcesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				Expect(jobStatusSystemModel).ToNot(BeNil())
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSystemModel.SystemStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSystemModel.SystemStatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSystemModel.SchematicsResourceStatus).To(Equal([]schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}))
				Expect(jobStatusSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				Expect(jobStatusModel).ToNot(BeNil())
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusModel.PositionInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.TotalInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.WorkspaceJobStatus).To(Equal(jobStatusWorkspaceModel))
				Expect(jobStatusModel.ActionJobStatus).To(Equal(jobStatusActionModel))
				Expect(jobStatusModel.SystemJobStatus).To(Equal(jobStatusSystemModel))
				Expect(jobStatusModel.FlowJobStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				Expect(jobDataTemplateModel).ToNot(BeNil())
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobDataTemplateModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				Expect(jobDataWorkspaceModel).ToNot(BeNil())
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.TemplateData).To(Equal([]schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}))
				Expect(jobDataWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				Expect(inventoryResourceRecordModel).ToNot(BeNil())
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(inventoryResourceRecordModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceRecordModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(inventoryResourceRecordModel.GetProperties()).ToNot(BeEmpty())
				Expect(inventoryResourceRecordModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				Expect(jobDataActionModel).ToNot(BeNil())
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataActionModel.InventoryRecord).To(Equal(inventoryResourceRecordModel))
				Expect(jobDataActionModel.MaterializedInventory).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				Expect(jobDataSystemModel).ToNot(BeNil())
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataSystemModel.KeyID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataSystemModel.SchematicsResourceID).To(Equal([]string{"testString"}))
				Expect(jobDataSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				Expect(jobDataWorkItemLastJobModel).ToNot(BeNil())
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemLastJobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobDataWorkItemLastJobModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.JobStatus).To(Equal(core.StringPtr("job_pending")))
				Expect(jobDataWorkItemLastJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemLastJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				Expect(jobDataWorkItemModel).ToNot(BeNil())
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.Layers).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(jobDataWorkItemModel.Source).To(Equal(externalSourceModel))
				Expect(jobDataWorkItemModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.LastJob).To(Equal(jobDataWorkItemLastJobModel))
				Expect(jobDataWorkItemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkItemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				Expect(jobDataFlowModel).ToNot(BeNil())
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.Workitems).To(Equal([]schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}))
				Expect(jobDataFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				Expect(jobDataModel).ToNot(BeNil())
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobDataModel.WorkspaceJobData).To(Equal(jobDataWorkspaceModel))
				Expect(jobDataModel.ActionJobData).To(Equal(jobDataActionModel))
				Expect(jobDataModel.SystemJobData).To(Equal(jobDataSystemModel))
				Expect(jobDataModel.FlowJobData).To(Equal(jobDataFlowModel))
				Expect(jobDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(bastionResourceDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				Expect(jobLogSummaryRepoDownloadJobModel).ToNot(BeNil())
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				Expect(jobLogSummaryWorkspaceJobModel).ToNot(BeNil())
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkspaceJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkspaceJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				Expect(jobLogSummaryWorkitemsModel).ToNot(BeNil())
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkitemsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.LogURL).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkitemsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				Expect(jobLogSummaryFlowJobModel).ToNot(BeNil())
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryFlowJobModel.Workitems).To(Equal([]schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}))
				Expect(jobLogSummaryFlowJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryFlowJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				Expect(jobLogSummaryActionJobRecapModel).ToNot(BeNil())
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobRecapModel.Target).To(Equal([]string{"testString"}))
				Expect(jobLogSummaryActionJobRecapModel.Ok).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Changed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Skipped).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Unreachable).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobRecapModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				Expect(jobLogSummaryActionJobModel).ToNot(BeNil())
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobModel.Recap).To(Equal(jobLogSummaryActionJobRecapModel))
				Expect(jobLogSummaryActionJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				Expect(jobLogSummarySystemJobModel).ToNot(BeNil())
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummarySystemJobModel.Success).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummarySystemJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				Expect(jobLogSummaryModel).ToNot(BeNil())
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobLogSummaryModel.RepoDownloadJob).To(Equal(jobLogSummaryRepoDownloadJobModel))
				Expect(jobLogSummaryModel.WorkspaceJob).To(Equal(jobLogSummaryWorkspaceJobModel))
				Expect(jobLogSummaryModel.FlowJob).To(Equal(jobLogSummaryFlowJobModel))
				Expect(jobLogSummaryModel.ActionJob).To(Equal(jobLogSummaryActionJobModel))
				Expect(jobLogSummaryModel.SystemJob).To(Equal(jobLogSummarySystemJobModel))
				Expect(jobLogSummaryModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				Expect(jobModel).ToNot(BeNil())
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(jobModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Tags).To(Equal([]string{"testString"}))
				Expect(jobModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(jobModel.Status).To(Equal(jobStatusModel))
				Expect(jobModel.Data).To(Equal(jobDataModel))
				Expect(jobModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(jobModel.LogSummary).To(Equal(jobLogSummaryModel))
				Expect(jobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				Expect(triggerJobModel).ToNot(BeNil())
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerJobModel.Event).To(Equal(core.StringPtr("before | after")))
				Expect(triggerJobModel.Job).To(Equal(jobModel))
				Expect(triggerJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				Expect(triggerScheduledModel).ToNot(BeNil())
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerScheduledModel.Frequency).To(Equal(core.StringPtr("daily | weekly")))
				Expect(triggerScheduledModel.Time).To(Equal(core.StringPtr("time in UTC")))
				Expect(triggerScheduledModel.Day).To(Equal(core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")))
				Expect(triggerScheduledModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerScheduledModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				Expect(controlsDecisionModel).ToNot(BeNil())
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsDecisionModel.Rule).To(Equal(core.StringPtr("testString")))
				Expect(controlsDecisionModel.PassValue).To(Equal(core.StringPtr("before")))
				Expect(controlsDecisionModel.PassExpr).To(Equal(core.StringPtr("== OR != OR <= OR >= OR > OR <")))
				Expect(controlsDecisionModel.EvidenceFoundIn).To(Equal(core.StringPtr("rule emitting details")))
				Expect(controlsDecisionModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsDecisionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				Expect(controlsEscalationModel).ToNot(BeNil())
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsEscalationModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(controlsEscalationModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsEscalationModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				Expect(controlsLiteStateModel).ToNot(BeNil())
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsLiteStateModel.StatusCode).To(Equal(core.StringPtr("normal")))
				Expect(controlsLiteStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(controlsLiteStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsLiteStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				Expect(capsuleResultResourcesModel).ToNot(BeNil())
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(capsuleResultResourcesModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(capsuleResultResourcesModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(capsuleResultResourcesModel.GetProperties()).ToNot(BeEmpty())
				Expect(capsuleResultResourcesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				Expect(capsuleResultEvidencesModel).ToNot(BeNil())
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(capsuleResultEvidencesModel.Resources).To(Equal([]schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}))
				Expect(capsuleResultEvidencesModel.GetProperties()).ToNot(BeEmpty())
				Expect(capsuleResultEvidencesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				Expect(jobResultCapsuleModel).ToNot(BeNil())
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobResultCapsuleModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobResultCapsuleModel.JobName).To(Equal(core.StringPtr("testString")))
				Expect(jobResultCapsuleModel.Policy).To(Equal(core.StringPtr("testString")))
				Expect(jobResultCapsuleModel.Severity).To(Equal(core.Int64Ptr(int64(1))))
				Expect(jobResultCapsuleModel.JobState).To(Equal(core.StringPtr("success")))
				Expect(jobResultCapsuleModel.Failures).To(Equal([]string{"testString"}))
				Expect(jobResultCapsuleModel.Passed).To(Equal([]string{"testString"}))
				Expect(jobResultCapsuleModel.Evidences).To(Equal([]schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}))
				Expect(jobResultCapsuleModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobResultCapsuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobResultCapsuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				Expect(jobDataCapsuleModel).ToNot(BeNil())
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataCapsuleModel.CapsuleID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataCapsuleModel.CalsuleName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataCapsuleModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataCapsuleModel.Results).To(Equal([]schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}))
				Expect(jobDataCapsuleModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataCapsuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataCapsuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				Expect(capsuleModel).ToNot(BeNil())
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(capsuleModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.UserState).To(Equal(userStateModel))
				Expect(capsuleModel.Package).To(Equal(core.StringPtr("Policy package path")))
				Expect(capsuleModel.Severity).To(Equal(core.Int64Ptr(int64(1))))
				Expect(capsuleModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.TriggerRecordID).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.JobTriggers).To(Equal([]schematics20apiv2.TriggerJob{*triggerJobModel}))
				Expect(capsuleModel.ScheduledTriggers).To(Equal([]schematics20apiv2.TriggerScheduled{*triggerScheduledModel}))
				Expect(capsuleModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(capsuleModel.Decisions).To(Equal([]schematics20apiv2.ControlsDecision{*controlsDecisionModel}))
				Expect(capsuleModel.Escalations).To(Equal([]schematics20apiv2.ControlsEscalation{*controlsEscalationModel}))
				Expect(capsuleModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.ControlsID).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.ControlsName).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.CreatedAt).To(Equal(CreateMockDateTime()))
				Expect(capsuleModel.CreatedBy).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(capsuleModel.UpdatedBy).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.State).To(Equal(controlsLiteStateModel))
				Expect(capsuleModel.LastJobData).To(Equal(jobDataCapsuleModel))
				Expect(capsuleModel.SysLock).To(Equal(systemLockModel))
				Expect(capsuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(capsuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Controls model
				controlsModel := new(schematics20apiv2.Controls)
				Expect(controlsModel).ToNot(BeNil())
				controlsModel.Name = core.StringPtr("testString")
				controlsModel.Type = core.StringPtr("it_controls")
				controlsModel.Description = core.StringPtr("testString")
				controlsModel.ResourceGroup = core.StringPtr("testString")
				controlsModel.Location = core.StringPtr("us-south")
				controlsModel.Tags = []string{"testString"}
				controlsModel.SourceReadmeURL = core.StringPtr("testString")
				controlsModel.Source = externalSourceModel
				controlsModel.SourceType = core.StringPtr("local")
				controlsModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				controlsModel.UserState = userStateModel
				controlsModel.SysLock = systemLockModel
				controlsModel.Capsules = []schematics20apiv2.Capsule{*capsuleModel}
				controlsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(controlsModel.Type).To(Equal(core.StringPtr("it_controls")))
				Expect(controlsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(controlsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(controlsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(controlsModel.Tags).To(Equal([]string{"testString"}))
				Expect(controlsModel.SourceReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(controlsModel.Source).To(Equal(externalSourceModel))
				Expect(controlsModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(controlsModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(controlsModel.UserState).To(Equal(userStateModel))
				Expect(controlsModel.SysLock).To(Equal(systemLockModel))
				Expect(controlsModel.Capsules).To(Equal([]schematics20apiv2.Capsule{*capsuleModel}))
				Expect(controlsModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateControlsOptions model
				var controls *schematics20apiv2.Controls = nil
				createControlsOptionsModel := schematics20ApiService.NewCreateControlsOptions(controls)
				createControlsOptionsModel.SetControls(controlsModel)
				createControlsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createControlsOptionsModel).ToNot(BeNil())
				Expect(createControlsOptionsModel.Controls).To(Equal(controlsModel))
				Expect(createControlsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateDatasetOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				Expect(datasetModel).ToNot(BeNil())
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(datasetModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(datasetModel.Type).To(Equal(core.StringPtr("credential")))
				Expect(datasetModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(datasetModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(datasetModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(datasetModel.Tags).To(Equal([]string{"testString"}))
				Expect(datasetModel.Data).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(datasetModel.Datasource).To(Equal(core.StringPtr("testString")))
				Expect(datasetModel.UserState).To(Equal(userStateModel))
				Expect(datasetModel.GetProperties()).ToNot(BeEmpty())
				Expect(datasetModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateDatasetOptions model
				var dataset *schematics20apiv2.Dataset = nil
				createDatasetOptionsModel := schematics20ApiService.NewCreateDatasetOptions(dataset)
				createDatasetOptionsModel.SetDataset(datasetModel)
				createDatasetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createDatasetOptionsModel).ToNot(BeNil())
				Expect(createDatasetOptionsModel.Dataset).To(Equal(datasetModel))
				Expect(createDatasetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateDatasourceOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Datasource model
				datasourceModel := new(schematics20apiv2.Datasource)
				Expect(datasourceModel).ToNot(BeNil())
				datasourceModel.Name = core.StringPtr("testString")
				datasourceModel.Description = core.StringPtr("testString")
				datasourceModel.ResourceGroup = core.StringPtr("testString")
				datasourceModel.Tags = []string{"testString"}
				datasourceModel.Connection = core.StringPtr("testString")
				datasourceModel.DatasourceProperties = []schematics20apiv2.VariableData{*variableDataModel}
				datasourceModel.Location = core.StringPtr("us-south")
				datasourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(datasourceModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(datasourceModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(datasourceModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(datasourceModel.Tags).To(Equal([]string{"testString"}))
				Expect(datasourceModel.Connection).To(Equal(core.StringPtr("testString")))
				Expect(datasourceModel.DatasourceProperties).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(datasourceModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(datasourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(datasourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateDatasourceOptions model
				var datasource *schematics20apiv2.Datasource = nil
				createDatasourceOptionsModel := schematics20ApiService.NewCreateDatasourceOptions(datasource)
				createDatasourceOptionsModel.SetDatasource(datasourceModel)
				createDatasourceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createDatasourceOptionsModel).ToNot(BeNil())
				Expect(createDatasourceOptionsModel.Datasource).To(Equal(datasourceModel))
				Expect(createDatasourceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInventoryOptions successfully`, func() {
				// Construct an instance of the InventoryResourceDefinition model
				inventoryResourceDefinitionModel := new(schematics20apiv2.InventoryResourceDefinition)
				Expect(inventoryResourceDefinitionModel).ToNot(BeNil())
				inventoryResourceDefinitionModel.Name = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Description = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Location = core.StringPtr("us-south")
				inventoryResourceDefinitionModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceDefinitionModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceDefinitionModel.ResourceQueries = []string{"testString"}
				inventoryResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(inventoryResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceDefinitionModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceDefinitionModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceDefinitionModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceDefinitionModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceDefinitionModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(inventoryResourceDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(inventoryResourceDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateInventoryOptions model
				var inventoryResourceDefinition *schematics20apiv2.InventoryResourceDefinition = nil
				createInventoryOptionsModel := schematics20ApiService.NewCreateInventoryOptions(inventoryResourceDefinition)
				createInventoryOptionsModel.SetInventoryResourceDefinition(inventoryResourceDefinitionModel)
				createInventoryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInventoryOptionsModel).ToNot(BeNil())
				Expect(createInventoryOptionsModel.InventoryResourceDefinition).To(Equal(inventoryResourceDefinitionModel))
				Expect(createInventoryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateJobOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				Expect(jobStatusWorkitemModel).ToNot(BeNil())
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkitemModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkitemModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkitemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkitemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				Expect(jobStatusFlowModel).ToNot(BeNil())
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.Workitems).To(Equal([]schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}))
				Expect(jobStatusFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				Expect(jobStatusWorkspaceModel).ToNot(BeNil())
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.FlowStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusWorkspaceModel.TemplateStatus).To(Equal([]schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}))
				Expect(jobStatusWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				Expect(jobStatusActionModel).ToNot(BeNil())
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusActionModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.BastionStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.BastionStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.TargetsStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.TargetsStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				Expect(jobStatusSchematicsResourcesModel).ToNot(BeNil())
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSchematicsResourcesModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSchematicsResourcesModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.SchematicsResourceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSchematicsResourcesModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSchematicsResourcesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				Expect(jobStatusSystemModel).ToNot(BeNil())
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSystemModel.SystemStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSystemModel.SystemStatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSystemModel.SchematicsResourceStatus).To(Equal([]schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}))
				Expect(jobStatusSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				Expect(jobStatusModel).ToNot(BeNil())
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusModel.PositionInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.TotalInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.WorkspaceJobStatus).To(Equal(jobStatusWorkspaceModel))
				Expect(jobStatusModel.ActionJobStatus).To(Equal(jobStatusActionModel))
				Expect(jobStatusModel.SystemJobStatus).To(Equal(jobStatusSystemModel))
				Expect(jobStatusModel.FlowJobStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				Expect(jobDataTemplateModel).ToNot(BeNil())
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobDataTemplateModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				Expect(jobDataWorkspaceModel).ToNot(BeNil())
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.TemplateData).To(Equal([]schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}))
				Expect(jobDataWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				Expect(inventoryResourceRecordModel).ToNot(BeNil())
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(inventoryResourceRecordModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceRecordModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(inventoryResourceRecordModel.GetProperties()).ToNot(BeEmpty())
				Expect(inventoryResourceRecordModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				Expect(jobDataActionModel).ToNot(BeNil())
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataActionModel.InventoryRecord).To(Equal(inventoryResourceRecordModel))
				Expect(jobDataActionModel.MaterializedInventory).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				Expect(jobDataSystemModel).ToNot(BeNil())
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataSystemModel.KeyID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataSystemModel.SchematicsResourceID).To(Equal([]string{"testString"}))
				Expect(jobDataSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				Expect(jobDataWorkItemLastJobModel).ToNot(BeNil())
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemLastJobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobDataWorkItemLastJobModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.JobStatus).To(Equal(core.StringPtr("job_pending")))
				Expect(jobDataWorkItemLastJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemLastJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				Expect(jobDataWorkItemModel).ToNot(BeNil())
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.Layers).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(jobDataWorkItemModel.Source).To(Equal(externalSourceModel))
				Expect(jobDataWorkItemModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.LastJob).To(Equal(jobDataWorkItemLastJobModel))
				Expect(jobDataWorkItemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkItemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				Expect(jobDataFlowModel).ToNot(BeNil())
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.Workitems).To(Equal([]schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}))
				Expect(jobDataFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				Expect(jobDataModel).ToNot(BeNil())
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobDataModel.WorkspaceJobData).To(Equal(jobDataWorkspaceModel))
				Expect(jobDataModel.ActionJobData).To(Equal(jobDataActionModel))
				Expect(jobDataModel.SystemJobData).To(Equal(jobDataSystemModel))
				Expect(jobDataModel.FlowJobData).To(Equal(jobDataFlowModel))
				Expect(jobDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(bastionResourceDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				Expect(jobLogSummaryRepoDownloadJobModel).ToNot(BeNil())
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				Expect(jobLogSummaryWorkspaceJobModel).ToNot(BeNil())
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkspaceJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkspaceJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				Expect(jobLogSummaryWorkitemsModel).ToNot(BeNil())
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkitemsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.LogURL).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkitemsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				Expect(jobLogSummaryFlowJobModel).ToNot(BeNil())
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryFlowJobModel.Workitems).To(Equal([]schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}))
				Expect(jobLogSummaryFlowJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryFlowJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				Expect(jobLogSummaryActionJobRecapModel).ToNot(BeNil())
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobRecapModel.Target).To(Equal([]string{"testString"}))
				Expect(jobLogSummaryActionJobRecapModel.Ok).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Changed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Skipped).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Unreachable).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobRecapModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				Expect(jobLogSummaryActionJobModel).ToNot(BeNil())
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobModel.Recap).To(Equal(jobLogSummaryActionJobRecapModel))
				Expect(jobLogSummaryActionJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				Expect(jobLogSummarySystemJobModel).ToNot(BeNil())
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummarySystemJobModel.Success).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummarySystemJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				Expect(jobLogSummaryModel).ToNot(BeNil())
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobLogSummaryModel.RepoDownloadJob).To(Equal(jobLogSummaryRepoDownloadJobModel))
				Expect(jobLogSummaryModel.WorkspaceJob).To(Equal(jobLogSummaryWorkspaceJobModel))
				Expect(jobLogSummaryModel.FlowJob).To(Equal(jobLogSummaryFlowJobModel))
				Expect(jobLogSummaryModel.ActionJob).To(Equal(jobLogSummaryActionJobModel))
				Expect(jobLogSummaryModel.SystemJob).To(Equal(jobLogSummarySystemJobModel))
				Expect(jobLogSummaryModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				Expect(jobModel).ToNot(BeNil())
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(jobModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Tags).To(Equal([]string{"testString"}))
				Expect(jobModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(jobModel.Status).To(Equal(jobStatusModel))
				Expect(jobModel.Data).To(Equal(jobDataModel))
				Expect(jobModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(jobModel.LogSummary).To(Equal(jobLogSummaryModel))
				Expect(jobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateJobOptions model
				refreshToken := "testString"
				var job *schematics20apiv2.Job = nil
				createJobOptionsModel := schematics20ApiService.NewCreateJobOptions(refreshToken, job)
				createJobOptionsModel.SetRefreshToken("testString")
				createJobOptionsModel.SetJob(jobModel)
				createJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createJobOptionsModel).ToNot(BeNil())
				Expect(createJobOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(createJobOptionsModel.Job).To(Equal(jobModel))
				Expect(createJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreatePrivateClusterOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the PrivateCluster model
				privateClusterModel := new(schematics20apiv2.PrivateCluster)
				Expect(privateClusterModel).ToNot(BeNil())
				privateClusterModel.ClusterID = core.StringPtr("testString")
				privateClusterModel.KubeConfig = core.StringPtr("testString")
				privateClusterModel.Tags = []string{"testString"}
				privateClusterModel.UserState = userStateModel
				privateClusterModel.RegisteredBy = core.StringPtr("testString")
				privateClusterModel.RegisteredAt = CreateMockDateTime()
				privateClusterModel.UpdatedAt = CreateMockDateTime()
				privateClusterModel.UpdatedBy = core.StringPtr("testString")
				privateClusterModel.SysLock = systemLockModel
				privateClusterModel.ClusterHealth = core.StringPtr("active")
				privateClusterModel.LastHealthCheckedAt = CreateMockDateTime()
				privateClusterModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(privateClusterModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(privateClusterModel.KubeConfig).To(Equal(core.StringPtr("testString")))
				Expect(privateClusterModel.Tags).To(Equal([]string{"testString"}))
				Expect(privateClusterModel.UserState).To(Equal(userStateModel))
				Expect(privateClusterModel.RegisteredBy).To(Equal(core.StringPtr("testString")))
				Expect(privateClusterModel.RegisteredAt).To(Equal(CreateMockDateTime()))
				Expect(privateClusterModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(privateClusterModel.UpdatedBy).To(Equal(core.StringPtr("testString")))
				Expect(privateClusterModel.SysLock).To(Equal(systemLockModel))
				Expect(privateClusterModel.ClusterHealth).To(Equal(core.StringPtr("active")))
				Expect(privateClusterModel.LastHealthCheckedAt).To(Equal(CreateMockDateTime()))
				Expect(privateClusterModel.GetProperties()).ToNot(BeEmpty())
				Expect(privateClusterModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreatePrivateClusterOptions model
				var privateCluster *schematics20apiv2.PrivateCluster = nil
				createPrivateClusterOptionsModel := schematics20ApiService.NewCreatePrivateClusterOptions(privateCluster)
				createPrivateClusterOptionsModel.SetPrivateCluster(privateClusterModel)
				createPrivateClusterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createPrivateClusterOptionsModel).ToNot(BeNil())
				Expect(createPrivateClusterOptionsModel.PrivateCluster).To(Equal(privateClusterModel))
				Expect(createPrivateClusterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateResourceQueryOptions successfully`, func() {
				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematics20apiv2.ResourceQueryParam)
				Expect(resourceQueryParamModel).ToNot(BeNil())
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				resourceQueryParamModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(resourceQueryParamModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.GetProperties()).ToNot(BeEmpty())
				Expect(resourceQueryParamModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematics20apiv2.ResourceQuery)
				Expect(resourceQueryModel).ToNot(BeNil())
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematics20apiv2.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				resourceQueryModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(resourceQueryModel.QueryType).To(Equal(core.StringPtr("workspaces")))
				Expect(resourceQueryModel.QueryCondition).To(Equal([]schematics20apiv2.ResourceQueryParam{*resourceQueryParamModel}))
				Expect(resourceQueryModel.QuerySelect).To(Equal([]string{"testString"}))
				Expect(resourceQueryModel.GetProperties()).ToNot(BeEmpty())
				Expect(resourceQueryModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ResourceQueryDefinition model
				resourceQueryDefinitionModel := new(schematics20apiv2.ResourceQueryDefinition)
				Expect(resourceQueryDefinitionModel).ToNot(BeNil())
				resourceQueryDefinitionModel.Type = core.StringPtr("vsi")
				resourceQueryDefinitionModel.Name = core.StringPtr("testString")
				resourceQueryDefinitionModel.Queries = []schematics20apiv2.ResourceQuery{*resourceQueryModel}
				resourceQueryDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(resourceQueryDefinitionModel.Type).To(Equal(core.StringPtr("vsi")))
				Expect(resourceQueryDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryDefinitionModel.Queries).To(Equal([]schematics20apiv2.ResourceQuery{*resourceQueryModel}))
				Expect(resourceQueryDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(resourceQueryDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateResourceQueryOptions model
				var resourceQueryDefinition *schematics20apiv2.ResourceQueryDefinition = nil
				createResourceQueryOptionsModel := schematics20ApiService.NewCreateResourceQueryOptions(resourceQueryDefinition)
				createResourceQueryOptionsModel.SetResourceQueryDefinition(resourceQueryDefinitionModel)
				createResourceQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createResourceQueryOptionsModel).ToNot(BeNil())
				Expect(createResourceQueryOptionsModel.ResourceQueryDefinition).To(Equal(resourceQueryDefinitionModel))
				Expect(createResourceQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateTriggerOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				Expect(jobStatusWorkitemModel).ToNot(BeNil())
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkitemModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkitemModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkitemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkitemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				Expect(jobStatusFlowModel).ToNot(BeNil())
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.Workitems).To(Equal([]schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}))
				Expect(jobStatusFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				Expect(jobStatusWorkspaceModel).ToNot(BeNil())
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.FlowStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusWorkspaceModel.TemplateStatus).To(Equal([]schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}))
				Expect(jobStatusWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				Expect(jobStatusActionModel).ToNot(BeNil())
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusActionModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.BastionStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.BastionStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.TargetsStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.TargetsStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				Expect(jobStatusSchematicsResourcesModel).ToNot(BeNil())
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSchematicsResourcesModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSchematicsResourcesModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.SchematicsResourceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSchematicsResourcesModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSchematicsResourcesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				Expect(jobStatusSystemModel).ToNot(BeNil())
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSystemModel.SystemStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSystemModel.SystemStatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSystemModel.SchematicsResourceStatus).To(Equal([]schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}))
				Expect(jobStatusSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				Expect(jobStatusModel).ToNot(BeNil())
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusModel.PositionInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.TotalInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.WorkspaceJobStatus).To(Equal(jobStatusWorkspaceModel))
				Expect(jobStatusModel.ActionJobStatus).To(Equal(jobStatusActionModel))
				Expect(jobStatusModel.SystemJobStatus).To(Equal(jobStatusSystemModel))
				Expect(jobStatusModel.FlowJobStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				Expect(jobDataTemplateModel).ToNot(BeNil())
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobDataTemplateModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				Expect(jobDataWorkspaceModel).ToNot(BeNil())
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.TemplateData).To(Equal([]schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}))
				Expect(jobDataWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				Expect(inventoryResourceRecordModel).ToNot(BeNil())
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(inventoryResourceRecordModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceRecordModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(inventoryResourceRecordModel.GetProperties()).ToNot(BeEmpty())
				Expect(inventoryResourceRecordModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				Expect(jobDataActionModel).ToNot(BeNil())
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataActionModel.InventoryRecord).To(Equal(inventoryResourceRecordModel))
				Expect(jobDataActionModel.MaterializedInventory).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				Expect(jobDataSystemModel).ToNot(BeNil())
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataSystemModel.KeyID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataSystemModel.SchematicsResourceID).To(Equal([]string{"testString"}))
				Expect(jobDataSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				Expect(jobDataWorkItemLastJobModel).ToNot(BeNil())
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemLastJobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobDataWorkItemLastJobModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.JobStatus).To(Equal(core.StringPtr("job_pending")))
				Expect(jobDataWorkItemLastJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemLastJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				Expect(jobDataWorkItemModel).ToNot(BeNil())
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.Layers).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(jobDataWorkItemModel.Source).To(Equal(externalSourceModel))
				Expect(jobDataWorkItemModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.LastJob).To(Equal(jobDataWorkItemLastJobModel))
				Expect(jobDataWorkItemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkItemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				Expect(jobDataFlowModel).ToNot(BeNil())
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.Workitems).To(Equal([]schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}))
				Expect(jobDataFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				Expect(jobDataModel).ToNot(BeNil())
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobDataModel.WorkspaceJobData).To(Equal(jobDataWorkspaceModel))
				Expect(jobDataModel.ActionJobData).To(Equal(jobDataActionModel))
				Expect(jobDataModel.SystemJobData).To(Equal(jobDataSystemModel))
				Expect(jobDataModel.FlowJobData).To(Equal(jobDataFlowModel))
				Expect(jobDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(bastionResourceDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				Expect(jobLogSummaryRepoDownloadJobModel).ToNot(BeNil())
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				Expect(jobLogSummaryWorkspaceJobModel).ToNot(BeNil())
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkspaceJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkspaceJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				Expect(jobLogSummaryWorkitemsModel).ToNot(BeNil())
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkitemsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.LogURL).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkitemsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				Expect(jobLogSummaryFlowJobModel).ToNot(BeNil())
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryFlowJobModel.Workitems).To(Equal([]schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}))
				Expect(jobLogSummaryFlowJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryFlowJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				Expect(jobLogSummaryActionJobRecapModel).ToNot(BeNil())
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobRecapModel.Target).To(Equal([]string{"testString"}))
				Expect(jobLogSummaryActionJobRecapModel.Ok).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Changed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Skipped).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Unreachable).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobRecapModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				Expect(jobLogSummaryActionJobModel).ToNot(BeNil())
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobModel.Recap).To(Equal(jobLogSummaryActionJobRecapModel))
				Expect(jobLogSummaryActionJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				Expect(jobLogSummarySystemJobModel).ToNot(BeNil())
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummarySystemJobModel.Success).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummarySystemJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				Expect(jobLogSummaryModel).ToNot(BeNil())
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobLogSummaryModel.RepoDownloadJob).To(Equal(jobLogSummaryRepoDownloadJobModel))
				Expect(jobLogSummaryModel.WorkspaceJob).To(Equal(jobLogSummaryWorkspaceJobModel))
				Expect(jobLogSummaryModel.FlowJob).To(Equal(jobLogSummaryFlowJobModel))
				Expect(jobLogSummaryModel.ActionJob).To(Equal(jobLogSummaryActionJobModel))
				Expect(jobLogSummaryModel.SystemJob).To(Equal(jobLogSummarySystemJobModel))
				Expect(jobLogSummaryModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				Expect(jobModel).ToNot(BeNil())
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(jobModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Tags).To(Equal([]string{"testString"}))
				Expect(jobModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(jobModel.Status).To(Equal(jobStatusModel))
				Expect(jobModel.Data).To(Equal(jobDataModel))
				Expect(jobModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(jobModel.LogSummary).To(Equal(jobLogSummaryModel))
				Expect(jobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				Expect(triggerJobModel).ToNot(BeNil())
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerJobModel.Event).To(Equal(core.StringPtr("before | after")))
				Expect(triggerJobModel.Job).To(Equal(jobModel))
				Expect(triggerJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				Expect(triggerScheduledModel).ToNot(BeNil())
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerScheduledModel.Frequency).To(Equal(core.StringPtr("daily | weekly")))
				Expect(triggerScheduledModel.Time).To(Equal(core.StringPtr("time in UTC")))
				Expect(triggerScheduledModel.Day).To(Equal(core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")))
				Expect(triggerScheduledModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerScheduledModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Trigger model
				triggerModel := new(schematics20apiv2.Trigger)
				Expect(triggerModel).ToNot(BeNil())
				triggerModel.Name = core.StringPtr("testString")
				triggerModel.Type = core.StringPtr("action")
				triggerModel.Description = core.StringPtr("testString")
				triggerModel.ResourceGroup = core.StringPtr("testString")
				triggerModel.ServiceID = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Apikey = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Location = core.StringPtr("us-south")
				triggerModel.Tags = []string{"testString"}
				triggerModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				triggerModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				triggerModel.UserState = userStateModel
				triggerModel.SysLock = systemLockModel
				triggerModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(triggerModel.Type).To(Equal(core.StringPtr("action")))
				Expect(triggerModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(triggerModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(triggerModel.ServiceID).To(Equal(CreateMockByteArray("This is a mock byte array value.")))
				Expect(triggerModel.Apikey).To(Equal(CreateMockByteArray("This is a mock byte array value.")))
				Expect(triggerModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(triggerModel.Tags).To(Equal([]string{"testString"}))
				Expect(triggerModel.JobTriggers).To(Equal([]schematics20apiv2.TriggerJob{*triggerJobModel}))
				Expect(triggerModel.ScheduledTriggers).To(Equal([]schematics20apiv2.TriggerScheduled{*triggerScheduledModel}))
				Expect(triggerModel.UserState).To(Equal(userStateModel))
				Expect(triggerModel.SysLock).To(Equal(systemLockModel))
				Expect(triggerModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateTriggerOptions model
				var trigger *schematics20apiv2.Trigger = nil
				createTriggerOptionsModel := schematics20ApiService.NewCreateTriggerOptions(trigger)
				createTriggerOptionsModel.SetTrigger(triggerModel)
				createTriggerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createTriggerOptionsModel).ToNot(BeNil())
				Expect(createTriggerOptionsModel.Trigger).To(Equal(triggerModel))
				Expect(createTriggerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateWebhookOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WebHook model
				webHookModel := new(schematics20apiv2.WebHook)
				Expect(webHookModel).ToNot(BeNil())
				webHookModel.CommandName = core.StringPtr("workspace_plan")
				webHookModel.HookType = core.StringPtr("hook")
				webHookModel.HookSite = core.StringPtr("before")
				webHookModel.Location = core.StringPtr("us-south")
				webHookModel.ResourceGroup = core.StringPtr("testString")
				webHookModel.Tags = []string{"testString"}
				webHookModel.HookEndpointURL = core.StringPtr("testString")
				webHookModel.ServiceID = core.StringPtr("testString")
				webHookModel.Apikey = core.StringPtr("testString")
				webHookModel.UserState = userStateModel
				webHookModel.IgnoreInflightOperations = core.BoolPtr(true)
				webHookModel.SysLock = systemLockModel
				webHookModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(webHookModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(webHookModel.HookType).To(Equal(core.StringPtr("hook")))
				Expect(webHookModel.HookSite).To(Equal(core.StringPtr("before")))
				Expect(webHookModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(webHookModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(webHookModel.Tags).To(Equal([]string{"testString"}))
				Expect(webHookModel.HookEndpointURL).To(Equal(core.StringPtr("testString")))
				Expect(webHookModel.ServiceID).To(Equal(core.StringPtr("testString")))
				Expect(webHookModel.Apikey).To(Equal(core.StringPtr("testString")))
				Expect(webHookModel.UserState).To(Equal(userStateModel))
				Expect(webHookModel.IgnoreInflightOperations).To(Equal(core.BoolPtr(true)))
				Expect(webHookModel.SysLock).To(Equal(systemLockModel))
				Expect(webHookModel.GetProperties()).ToNot(BeEmpty())
				Expect(webHookModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateWebhookOptions model
				var webHook *schematics20apiv2.WebHook = nil
				createWebhookOptionsModel := schematics20ApiService.NewCreateWebhookOptions(webHook)
				createWebhookOptionsModel.SetWebHook(webHookModel)
				createWebhookOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createWebhookOptionsModel).ToNot(BeNil())
				Expect(createWebhookOptionsModel.WebHook).To(Equal(webHookModel))
				Expect(createWebhookOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateWorkspaceOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				Expect(workspaceLiteStateModel).ToNot(BeNil())
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(workspaceLiteStateModel.StatusCode).To(Equal(core.StringPtr("normal")))
				Expect(workspaceLiteStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(workspaceLiteStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(workspaceLiteStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				Expect(workspaceModel).ToNot(BeNil())
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(workspaceModel.Name).To(Equal(core.StringPtr("My Workspace")))
				Expect(workspaceModel.Description).To(Equal(core.StringPtr("This workspace manages front-end micro service for production environment")))
				Expect(workspaceModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(workspaceModel.Tags).To(Equal([]string{"testString"}))
				Expect(workspaceModel.DestroyResourcesOnDelete).To(Equal(core.BoolPtr(true)))
				Expect(workspaceModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(workspaceModel.UserState).To(Equal(userStateModel))
				Expect(workspaceModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(workspaceModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(workspaceModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(workspaceModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(workspaceModel.State).To(Equal(workspaceLiteStateModel))
				Expect(workspaceModel.SysLock).To(Equal(systemLockModel))
				Expect(workspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(workspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateWorkspaceOptions model
				var workspace *schematics20apiv2.Workspace = nil
				createWorkspaceOptionsModel := schematics20ApiService.NewCreateWorkspaceOptions(workspace)
				createWorkspaceOptionsModel.SetWorkspace(workspaceModel)
				createWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createWorkspaceOptionsModel).ToNot(BeNil())
				Expect(createWorkspaceOptionsModel.Workspace).To(Equal(workspaceModel))
				Expect(createWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateWorkspaceTemplatesOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				Expect(templateModel).ToNot(BeNil())
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateModel.Name).To(Equal(core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")))
				Expect(templateModel.Description).To(Equal(core.StringPtr("This template provisions clusters in production environment")))
				Expect(templateModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(templateModel.UserState).To(Equal(userStateModel))
				Expect(templateModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(templateModel.Source).To(Equal(externalSourceModel))
				Expect(templateModel.SourceReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(templateModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(templateModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(templateModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(templateModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(templateModel.Status).To(Equal(jobStatusTemplateModel))
				Expect(templateModel.SysLock).To(Equal(systemLockModel))
				Expect(templateModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateListRequest model
				templateListRequestModel := new(schematics20apiv2.TemplateListRequest)
				Expect(templateListRequestModel).ToNot(BeNil())
				templateListRequestModel.Templates = []schematics20apiv2.Template{*templateModel}
				templateListRequestModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateListRequestModel.Templates).To(Equal([]schematics20apiv2.Template{*templateModel}))
				Expect(templateListRequestModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateListRequestModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateWorkspaceTemplatesOptions model
				var templateListRequest *schematics20apiv2.TemplateListRequest = nil
				createWorkspaceTemplatesOptionsModel := schematics20ApiService.NewCreateWorkspaceTemplatesOptions(templateListRequest)
				createWorkspaceTemplatesOptionsModel.SetTemplateListRequest(templateListRequestModel)
				createWorkspaceTemplatesOptionsModel.SetXGithubToken("testString")
				createWorkspaceTemplatesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createWorkspaceTemplatesOptionsModel).ToNot(BeNil())
				Expect(createWorkspaceTemplatesOptionsModel.TemplateListRequest).To(Equal(templateListRequestModel))
				Expect(createWorkspaceTemplatesOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceTemplatesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteActionOptions successfully`, func() {
				// Construct an instance of the DeleteActionOptions model
				actionID := "testString"
				deleteActionOptionsModel := schematics20ApiService.NewDeleteActionOptions(actionID)
				deleteActionOptionsModel.SetActionID("testString")
				deleteActionOptionsModel.SetForce(true)
				deleteActionOptionsModel.SetPropagate(true)
				deleteActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteActionOptionsModel).ToNot(BeNil())
				Expect(deleteActionOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(deleteActionOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteActionOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteAdapterOptions successfully`, func() {
				// Construct an instance of the DeleteAdapterOptions model
				adapterID := "testString"
				deleteAdapterOptionsModel := schematics20ApiService.NewDeleteAdapterOptions(adapterID)
				deleteAdapterOptionsModel.SetAdapterID("testString")
				deleteAdapterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteAdapterOptionsModel).ToNot(BeNil())
				Expect(deleteAdapterOptionsModel.AdapterID).To(Equal(core.StringPtr("testString")))
				Expect(deleteAdapterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteAgentOptions successfully`, func() {
				// Construct an instance of the DeleteAgentOptions model
				agentID := "testString"
				deleteAgentOptionsModel := schematics20ApiService.NewDeleteAgentOptions(agentID)
				deleteAgentOptionsModel.SetAgentID("testString")
				deleteAgentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteAgentOptionsModel).ToNot(BeNil())
				Expect(deleteAgentOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(deleteAgentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteBlueprintOptions successfully`, func() {
				// Construct an instance of the DeleteBlueprintOptions model
				blueprintID := "testString"
				deleteBlueprintOptionsModel := schematics20ApiService.NewDeleteBlueprintOptions(blueprintID)
				deleteBlueprintOptionsModel.SetBlueprintID("testString")
				deleteBlueprintOptionsModel.SetProfile("ids")
				deleteBlueprintOptionsModel.SetDestroy(true)
				deleteBlueprintOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteBlueprintOptionsModel).ToNot(BeNil())
				Expect(deleteBlueprintOptionsModel.BlueprintID).To(Equal(core.StringPtr("testString")))
				Expect(deleteBlueprintOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(deleteBlueprintOptionsModel.Destroy).To(Equal(core.BoolPtr(true)))
				Expect(deleteBlueprintOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteCapsuleOptions successfully`, func() {
				// Construct an instance of the DeleteCapsuleOptions model
				controlsID := "testString"
				capsuleID := "testString"
				deleteCapsuleOptionsModel := schematics20ApiService.NewDeleteCapsuleOptions(controlsID, capsuleID)
				deleteCapsuleOptionsModel.SetControlsID("testString")
				deleteCapsuleOptionsModel.SetCapsuleID("testString")
				deleteCapsuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteCapsuleOptionsModel).ToNot(BeNil())
				Expect(deleteCapsuleOptionsModel.ControlsID).To(Equal(core.StringPtr("testString")))
				Expect(deleteCapsuleOptionsModel.CapsuleID).To(Equal(core.StringPtr("testString")))
				Expect(deleteCapsuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteCartOrderOptions successfully`, func() {
				// Construct an instance of the DeleteCartOrderOptions model
				orderID := "testString"
				deleteCartOrderOptionsModel := schematics20ApiService.NewDeleteCartOrderOptions(orderID)
				deleteCartOrderOptionsModel.SetOrderID("testString")
				deleteCartOrderOptionsModel.SetDestroy(true)
				deleteCartOrderOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteCartOrderOptionsModel).ToNot(BeNil())
				Expect(deleteCartOrderOptionsModel.OrderID).To(Equal(core.StringPtr("testString")))
				Expect(deleteCartOrderOptionsModel.Destroy).To(Equal(core.BoolPtr(true)))
				Expect(deleteCartOrderOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteConnectionOptions successfully`, func() {
				// Construct an instance of the DeleteConnectionOptions model
				connectionID := "testString"
				deleteConnectionOptionsModel := schematics20ApiService.NewDeleteConnectionOptions(connectionID)
				deleteConnectionOptionsModel.SetConnectionID("testString")
				deleteConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteConnectionOptionsModel).ToNot(BeNil())
				Expect(deleteConnectionOptionsModel.ConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(deleteConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteControlsOptions successfully`, func() {
				// Construct an instance of the DeleteControlsOptions model
				controlsID := "testString"
				deleteControlsOptionsModel := schematics20ApiService.NewDeleteControlsOptions(controlsID)
				deleteControlsOptionsModel.SetControlsID("testString")
				deleteControlsOptionsModel.SetForce(true)
				deleteControlsOptionsModel.SetPropagate(true)
				deleteControlsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteControlsOptionsModel).ToNot(BeNil())
				Expect(deleteControlsOptionsModel.ControlsID).To(Equal(core.StringPtr("testString")))
				Expect(deleteControlsOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteControlsOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteControlsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteDatasetOptions successfully`, func() {
				// Construct an instance of the DeleteDatasetOptions model
				datasetID := "testString"
				deleteDatasetOptionsModel := schematics20ApiService.NewDeleteDatasetOptions(datasetID)
				deleteDatasetOptionsModel.SetDatasetID("testString")
				deleteDatasetOptionsModel.SetForce(true)
				deleteDatasetOptionsModel.SetPropagate(true)
				deleteDatasetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteDatasetOptionsModel).ToNot(BeNil())
				Expect(deleteDatasetOptionsModel.DatasetID).To(Equal(core.StringPtr("testString")))
				Expect(deleteDatasetOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteDatasetOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteDatasetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteFlowFromWorkspaceOptions successfully`, func() {
				// Construct an instance of the DeleteFlowFromWorkspaceOptions model
				wID := "testString"
				flowID := "testString"
				deleteFlowFromWorkspaceOptionsModel := schematics20ApiService.NewDeleteFlowFromWorkspaceOptions(wID, flowID)
				deleteFlowFromWorkspaceOptionsModel.SetWID("testString")
				deleteFlowFromWorkspaceOptionsModel.SetFlowID("testString")
				deleteFlowFromWorkspaceOptionsModel.SetPropagate(true)
				deleteFlowFromWorkspaceOptionsModel.SetForce(true)
				deleteFlowFromWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteFlowFromWorkspaceOptionsModel).ToNot(BeNil())
				Expect(deleteFlowFromWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(deleteFlowFromWorkspaceOptionsModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(deleteFlowFromWorkspaceOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteFlowFromWorkspaceOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteFlowFromWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInventoryOptions successfully`, func() {
				// Construct an instance of the DeleteInventoryOptions model
				inventoryID := "testString"
				deleteInventoryOptionsModel := schematics20ApiService.NewDeleteInventoryOptions(inventoryID)
				deleteInventoryOptionsModel.SetInventoryID("testString")
				deleteInventoryOptionsModel.SetForce(true)
				deleteInventoryOptionsModel.SetPropagate(true)
				deleteInventoryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInventoryOptionsModel).ToNot(BeNil())
				Expect(deleteInventoryOptionsModel.InventoryID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInventoryOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteInventoryOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteInventoryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteJobOptions successfully`, func() {
				// Construct an instance of the DeleteJobOptions model
				jobID := "testString"
				refreshToken := "testString"
				deleteJobOptionsModel := schematics20ApiService.NewDeleteJobOptions(jobID, refreshToken)
				deleteJobOptionsModel.SetJobID("testString")
				deleteJobOptionsModel.SetRefreshToken("testString")
				deleteJobOptionsModel.SetForce(true)
				deleteJobOptionsModel.SetPropagate(true)
				deleteJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteJobOptionsModel).ToNot(BeNil())
				Expect(deleteJobOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(deleteJobOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(deleteJobOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteJobOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeletePrivateClusterOptions successfully`, func() {
				// Construct an instance of the DeletePrivateClusterOptions model
				deletePrivateClusterOptionsModel := schematics20ApiService.NewDeletePrivateClusterOptions()
				deletePrivateClusterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deletePrivateClusterOptionsModel).ToNot(BeNil())
				Expect(deletePrivateClusterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteResourcesQueryOptions successfully`, func() {
				// Construct an instance of the DeleteResourcesQueryOptions model
				queryID := "testString"
				deleteResourcesQueryOptionsModel := schematics20ApiService.NewDeleteResourcesQueryOptions(queryID)
				deleteResourcesQueryOptionsModel.SetQueryID("testString")
				deleteResourcesQueryOptionsModel.SetForce(true)
				deleteResourcesQueryOptionsModel.SetPropagate(true)
				deleteResourcesQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteResourcesQueryOptionsModel).ToNot(BeNil())
				Expect(deleteResourcesQueryOptionsModel.QueryID).To(Equal(core.StringPtr("testString")))
				Expect(deleteResourcesQueryOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteResourcesQueryOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteResourcesQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteTemplateFromWorkspaceOptions successfully`, func() {
				// Construct an instance of the DeleteTemplateFromWorkspaceOptions model
				wID := "testString"
				tID := "testString"
				deleteTemplateFromWorkspaceOptionsModel := schematics20ApiService.NewDeleteTemplateFromWorkspaceOptions(wID, tID)
				deleteTemplateFromWorkspaceOptionsModel.SetWID("testString")
				deleteTemplateFromWorkspaceOptionsModel.SetTID("testString")
				deleteTemplateFromWorkspaceOptionsModel.SetForce(true)
				deleteTemplateFromWorkspaceOptionsModel.SetPropagate(true)
				deleteTemplateFromWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteTemplateFromWorkspaceOptionsModel).ToNot(BeNil())
				Expect(deleteTemplateFromWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTemplateFromWorkspaceOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTemplateFromWorkspaceOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteTemplateFromWorkspaceOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteTemplateFromWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteTriggerOptions successfully`, func() {
				// Construct an instance of the DeleteTriggerOptions model
				triggerID := "testString"
				deleteTriggerOptionsModel := schematics20ApiService.NewDeleteTriggerOptions(triggerID)
				deleteTriggerOptionsModel.SetTriggerID("testString")
				deleteTriggerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteTriggerOptionsModel).ToNot(BeNil())
				Expect(deleteTriggerOptionsModel.TriggerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTriggerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteWebhookOptions successfully`, func() {
				// Construct an instance of the DeleteWebhookOptions model
				hookID := "testString"
				deleteWebhookOptionsModel := schematics20ApiService.NewDeleteWebhookOptions(hookID)
				deleteWebhookOptionsModel.SetHookID("testString")
				deleteWebhookOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteWebhookOptionsModel).ToNot(BeNil())
				Expect(deleteWebhookOptionsModel.HookID).To(Equal(core.StringPtr("testString")))
				Expect(deleteWebhookOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteWorkspaceOptions successfully`, func() {
				// Construct an instance of the DeleteWorkspaceOptions model
				wID := "testString"
				deleteWorkspaceOptionsModel := schematics20ApiService.NewDeleteWorkspaceOptions(wID)
				deleteWorkspaceOptionsModel.SetWID("testString")
				deleteWorkspaceOptionsModel.SetForce(true)
				deleteWorkspaceOptionsModel.SetPropagate(true)
				deleteWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteWorkspaceOptionsModel).ToNot(BeNil())
				Expect(deleteWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(deleteWorkspaceOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteWorkspaceOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewExecuteResourceQueryOptions successfully`, func() {
				// Construct an instance of the ExecuteResourceQueryOptions model
				queryID := "testString"
				executeResourceQueryOptionsModel := schematics20ApiService.NewExecuteResourceQueryOptions(queryID)
				executeResourceQueryOptionsModel.SetQueryID("testString")
				executeResourceQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(executeResourceQueryOptionsModel).ToNot(BeNil())
				Expect(executeResourceQueryOptionsModel.QueryID).To(Equal(core.StringPtr("testString")))
				Expect(executeResourceQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewExternalSource successfully`, func() {
				sourceType := "local"
				model, err := schematics20ApiService.NewExternalSource(sourceType)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewGetActionOptions successfully`, func() {
				// Construct an instance of the GetActionOptions model
				actionID := "testString"
				getActionOptionsModel := schematics20ApiService.NewGetActionOptions(actionID)
				getActionOptionsModel.SetActionID("testString")
				getActionOptionsModel.SetProfile("summary")
				getActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getActionOptionsModel).ToNot(BeNil())
				Expect(getActionOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(getActionOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAdapterOptions successfully`, func() {
				// Construct an instance of the GetAdapterOptions model
				adapterID := "testString"
				getAdapterOptionsModel := schematics20ApiService.NewGetAdapterOptions(adapterID)
				getAdapterOptionsModel.SetAdapterID("testString")
				getAdapterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAdapterOptionsModel).ToNot(BeNil())
				Expect(getAdapterOptionsModel.AdapterID).To(Equal(core.StringPtr("testString")))
				Expect(getAdapterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAgentOptions successfully`, func() {
				// Construct an instance of the GetAgentOptions model
				agentID := "testString"
				getAgentOptionsModel := schematics20ApiService.NewGetAgentOptions(agentID)
				getAgentOptionsModel.SetAgentID("testString")
				getAgentOptionsModel.SetProfile("summary")
				getAgentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAgentOptionsModel).ToNot(BeNil())
				Expect(getAgentOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(getAgentOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getAgentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetBlueprintOptions successfully`, func() {
				// Construct an instance of the GetBlueprintOptions model
				blueprintID := "testString"
				getBlueprintOptionsModel := schematics20ApiService.NewGetBlueprintOptions(blueprintID)
				getBlueprintOptionsModel.SetBlueprintID("testString")
				getBlueprintOptionsModel.SetProfile("ids")
				getBlueprintOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getBlueprintOptionsModel).ToNot(BeNil())
				Expect(getBlueprintOptionsModel.BlueprintID).To(Equal(core.StringPtr("testString")))
				Expect(getBlueprintOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(getBlueprintOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCapsuleOptions successfully`, func() {
				// Construct an instance of the GetCapsuleOptions model
				controlsID := "testString"
				capsuleID := "testString"
				getCapsuleOptionsModel := schematics20ApiService.NewGetCapsuleOptions(controlsID, capsuleID)
				getCapsuleOptionsModel.SetControlsID("testString")
				getCapsuleOptionsModel.SetCapsuleID("testString")
				getCapsuleOptionsModel.SetProfile("summary")
				getCapsuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCapsuleOptionsModel).ToNot(BeNil())
				Expect(getCapsuleOptionsModel.ControlsID).To(Equal(core.StringPtr("testString")))
				Expect(getCapsuleOptionsModel.CapsuleID).To(Equal(core.StringPtr("testString")))
				Expect(getCapsuleOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getCapsuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCartMetadataOptions successfully`, func() {
				// Construct an instance of the GetCartMetadataOptions model
				orderID := "testString"
				getCartMetadataOptionsModel := schematics20ApiService.NewGetCartMetadataOptions(orderID)
				getCartMetadataOptionsModel.SetOrderID("testString")
				getCartMetadataOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCartMetadataOptionsModel).ToNot(BeNil())
				Expect(getCartMetadataOptionsModel.OrderID).To(Equal(core.StringPtr("testString")))
				Expect(getCartMetadataOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCartOrderJobLogOptions successfully`, func() {
				// Construct an instance of the GetCartOrderJobLogOptions model
				orderID := "testString"
				jobID := "testString"
				getCartOrderJobLogOptionsModel := schematics20ApiService.NewGetCartOrderJobLogOptions(orderID, jobID)
				getCartOrderJobLogOptionsModel.SetOrderID("testString")
				getCartOrderJobLogOptionsModel.SetJobID("testString")
				getCartOrderJobLogOptionsModel.SetOffset(int64(0))
				getCartOrderJobLogOptionsModel.SetLimit(int64(1))
				getCartOrderJobLogOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCartOrderJobLogOptionsModel).ToNot(BeNil())
				Expect(getCartOrderJobLogOptionsModel.OrderID).To(Equal(core.StringPtr("testString")))
				Expect(getCartOrderJobLogOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(getCartOrderJobLogOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getCartOrderJobLogOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(getCartOrderJobLogOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCartOrderJobOptions successfully`, func() {
				// Construct an instance of the GetCartOrderJobOptions model
				orderID := "testString"
				jobID := "testString"
				getCartOrderJobOptionsModel := schematics20ApiService.NewGetCartOrderJobOptions(orderID, jobID)
				getCartOrderJobOptionsModel.SetOrderID("testString")
				getCartOrderJobOptionsModel.SetJobID("testString")
				getCartOrderJobOptionsModel.SetOffset(int64(0))
				getCartOrderJobOptionsModel.SetLimit(int64(1))
				getCartOrderJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCartOrderJobOptionsModel).ToNot(BeNil())
				Expect(getCartOrderJobOptionsModel.OrderID).To(Equal(core.StringPtr("testString")))
				Expect(getCartOrderJobOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(getCartOrderJobOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getCartOrderJobOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(getCartOrderJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCartOrderJobResourcesOptions successfully`, func() {
				// Construct an instance of the GetCartOrderJobResourcesOptions model
				orderID := "testString"
				jobID := "testString"
				getCartOrderJobResourcesOptionsModel := schematics20ApiService.NewGetCartOrderJobResourcesOptions(orderID, jobID)
				getCartOrderJobResourcesOptionsModel.SetOrderID("testString")
				getCartOrderJobResourcesOptionsModel.SetJobID("testString")
				getCartOrderJobResourcesOptionsModel.SetOffset(int64(0))
				getCartOrderJobResourcesOptionsModel.SetLimit(int64(1))
				getCartOrderJobResourcesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCartOrderJobResourcesOptionsModel).ToNot(BeNil())
				Expect(getCartOrderJobResourcesOptionsModel.OrderID).To(Equal(core.StringPtr("testString")))
				Expect(getCartOrderJobResourcesOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(getCartOrderJobResourcesOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getCartOrderJobResourcesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(getCartOrderJobResourcesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCartOrderOptions successfully`, func() {
				// Construct an instance of the GetCartOrderOptions model
				orderID := "testString"
				getCartOrderOptionsModel := schematics20ApiService.NewGetCartOrderOptions(orderID)
				getCartOrderOptionsModel.SetOrderID("testString")
				getCartOrderOptionsModel.SetProfile("summary")
				getCartOrderOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCartOrderOptionsModel).ToNot(BeNil())
				Expect(getCartOrderOptionsModel.OrderID).To(Equal(core.StringPtr("testString")))
				Expect(getCartOrderOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getCartOrderOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCatalogItemOptions successfully`, func() {
				// Construct an instance of the GetCatalogItemOptions model
				offeringID := "testString"
				getCatalogItemOptionsModel := schematics20ApiService.NewGetCatalogItemOptions(offeringID)
				getCatalogItemOptionsModel.SetOfferingID("testString")
				getCatalogItemOptionsModel.SetCatalogID("testString")
				getCatalogItemOptionsModel.SetCatalogName("testString")
				getCatalogItemOptionsModel.SetOfferingName("testString")
				getCatalogItemOptionsModel.SetOfferingVersion("testString")
				getCatalogItemOptionsModel.SetOffset(int64(0))
				getCatalogItemOptionsModel.SetLimit(int64(1))
				getCatalogItemOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCatalogItemOptionsModel).ToNot(BeNil())
				Expect(getCatalogItemOptionsModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(getCatalogItemOptionsModel.CatalogID).To(Equal(core.StringPtr("testString")))
				Expect(getCatalogItemOptionsModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(getCatalogItemOptionsModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(getCatalogItemOptionsModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(getCatalogItemOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getCatalogItemOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(getCatalogItemOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetConnectionOptions successfully`, func() {
				// Construct an instance of the GetConnectionOptions model
				connectionID := "testString"
				getConnectionOptionsModel := schematics20ApiService.NewGetConnectionOptions(connectionID)
				getConnectionOptionsModel.SetConnectionID("testString")
				getConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getConnectionOptionsModel).ToNot(BeNil())
				Expect(getConnectionOptionsModel.ConnectionID).To(Equal(core.StringPtr("testString")))
				Expect(getConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetControlsOptions successfully`, func() {
				// Construct an instance of the GetControlsOptions model
				controlsID := "testString"
				getControlsOptionsModel := schematics20ApiService.NewGetControlsOptions(controlsID)
				getControlsOptionsModel.SetControlsID("testString")
				getControlsOptionsModel.SetProfile("summary")
				getControlsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getControlsOptionsModel).ToNot(BeNil())
				Expect(getControlsOptionsModel.ControlsID).To(Equal(core.StringPtr("testString")))
				Expect(getControlsOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getControlsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCredentialVariableValueOptions successfully`, func() {
				// Construct an instance of the GetCredentialVariableValueOptions model
				credsID := "testString"
				varName := "testString"
				getCredentialVariableValueOptionsModel := schematics20ApiService.NewGetCredentialVariableValueOptions(credsID, varName)
				getCredentialVariableValueOptionsModel.SetCredsID("testString")
				getCredentialVariableValueOptionsModel.SetVarName("testString")
				getCredentialVariableValueOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCredentialVariableValueOptionsModel).ToNot(BeNil())
				Expect(getCredentialVariableValueOptionsModel.CredsID).To(Equal(core.StringPtr("testString")))
				Expect(getCredentialVariableValueOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getCredentialVariableValueOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDataOptions successfully`, func() {
				// Construct an instance of the GetDataOptions model
				datasourceID := "testString"
				getDataOptionsModel := schematics20ApiService.NewGetDataOptions(datasourceID)
				getDataOptionsModel.SetDatasourceID("testString")
				getDataOptionsModel.SetPreview("all")
				getDataOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDataOptionsModel).ToNot(BeNil())
				Expect(getDataOptionsModel.DatasourceID).To(Equal(core.StringPtr("testString")))
				Expect(getDataOptionsModel.Preview).To(Equal(core.StringPtr("all")))
				Expect(getDataOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDatasetOptions successfully`, func() {
				// Construct an instance of the GetDatasetOptions model
				datasetID := "testString"
				getDatasetOptionsModel := schematics20ApiService.NewGetDatasetOptions(datasetID)
				getDatasetOptionsModel.SetDatasetID("testString")
				getDatasetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDatasetOptionsModel).ToNot(BeNil())
				Expect(getDatasetOptionsModel.DatasetID).To(Equal(core.StringPtr("testString")))
				Expect(getDatasetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDatasetVariableOptions successfully`, func() {
				// Construct an instance of the GetDatasetVariableOptions model
				datasetID := "testString"
				varName := "testString"
				getDatasetVariableOptionsModel := schematics20ApiService.NewGetDatasetVariableOptions(datasetID, varName)
				getDatasetVariableOptionsModel.SetDatasetID("testString")
				getDatasetVariableOptionsModel.SetVarName("testString")
				getDatasetVariableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDatasetVariableOptionsModel).ToNot(BeNil())
				Expect(getDatasetVariableOptionsModel.DatasetID).To(Equal(core.StringPtr("testString")))
				Expect(getDatasetVariableOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getDatasetVariableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDatasetVariableValueOptions successfully`, func() {
				// Construct an instance of the GetDatasetVariableValueOptions model
				datasetID := "testString"
				varName := "testString"
				getDatasetVariableValueOptionsModel := schematics20ApiService.NewGetDatasetVariableValueOptions(datasetID, varName)
				getDatasetVariableValueOptionsModel.SetDatasetID("testString")
				getDatasetVariableValueOptionsModel.SetVarName("testString")
				getDatasetVariableValueOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDatasetVariableValueOptionsModel).ToNot(BeNil())
				Expect(getDatasetVariableValueOptionsModel.DatasetID).To(Equal(core.StringPtr("testString")))
				Expect(getDatasetVariableValueOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getDatasetVariableValueOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetFlowInWorkspaceOptions successfully`, func() {
				// Construct an instance of the GetFlowInWorkspaceOptions model
				wID := "testString"
				flowID := "testString"
				getFlowInWorkspaceOptionsModel := schematics20ApiService.NewGetFlowInWorkspaceOptions(wID, flowID)
				getFlowInWorkspaceOptionsModel.SetWID("testString")
				getFlowInWorkspaceOptionsModel.SetFlowID("testString")
				getFlowInWorkspaceOptionsModel.SetProfile("summary")
				getFlowInWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getFlowInWorkspaceOptionsModel).ToNot(BeNil())
				Expect(getFlowInWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getFlowInWorkspaceOptionsModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(getFlowInWorkspaceOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getFlowInWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInventoryOptions successfully`, func() {
				// Construct an instance of the GetInventoryOptions model
				inventoryID := "testString"
				getInventoryOptionsModel := schematics20ApiService.NewGetInventoryOptions(inventoryID)
				getInventoryOptionsModel.SetInventoryID("testString")
				getInventoryOptionsModel.SetProfile("summary")
				getInventoryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInventoryOptionsModel).ToNot(BeNil())
				Expect(getInventoryOptionsModel.InventoryID).To(Equal(core.StringPtr("testString")))
				Expect(getInventoryOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getInventoryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInventoryVariableValueOptions successfully`, func() {
				// Construct an instance of the GetInventoryVariableValueOptions model
				inventoryID := "testString"
				varName := "testString"
				getInventoryVariableValueOptionsModel := schematics20ApiService.NewGetInventoryVariableValueOptions(inventoryID, varName)
				getInventoryVariableValueOptionsModel.SetInventoryID("testString")
				getInventoryVariableValueOptionsModel.SetVarName("testString")
				getInventoryVariableValueOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInventoryVariableValueOptionsModel).ToNot(BeNil())
				Expect(getInventoryVariableValueOptionsModel.InventoryID).To(Equal(core.StringPtr("testString")))
				Expect(getInventoryVariableValueOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getInventoryVariableValueOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetJobFilesOptions successfully`, func() {
				// Construct an instance of the GetJobFilesOptions model
				jobID := "testString"
				fileType := "state_file"
				getJobFilesOptionsModel := schematics20ApiService.NewGetJobFilesOptions(jobID, fileType)
				getJobFilesOptionsModel.SetJobID("testString")
				getJobFilesOptionsModel.SetFileType("state_file")
				getJobFilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getJobFilesOptionsModel).ToNot(BeNil())
				Expect(getJobFilesOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(getJobFilesOptionsModel.FileType).To(Equal(core.StringPtr("state_file")))
				Expect(getJobFilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetJobOptions successfully`, func() {
				// Construct an instance of the GetJobOptions model
				jobID := "testString"
				getJobOptionsModel := schematics20ApiService.NewGetJobOptions(jobID)
				getJobOptionsModel.SetJobID("testString")
				getJobOptionsModel.SetProfile("summary")
				getJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getJobOptionsModel).ToNot(BeNil())
				Expect(getJobOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(getJobOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetJobWorkspaceInputValueOptions successfully`, func() {
				// Construct an instance of the GetJobWorkspaceInputValueOptions model
				jobID := "testString"
				wID := "testString"
				varName := "testString"
				getJobWorkspaceInputValueOptionsModel := schematics20ApiService.NewGetJobWorkspaceInputValueOptions(jobID, wID, varName)
				getJobWorkspaceInputValueOptionsModel.SetJobID("testString")
				getJobWorkspaceInputValueOptionsModel.SetWID("testString")
				getJobWorkspaceInputValueOptionsModel.SetVarName("testString")
				getJobWorkspaceInputValueOptionsModel.SetOffset(int64(0))
				getJobWorkspaceInputValueOptionsModel.SetLimit(int64(1))
				getJobWorkspaceInputValueOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getJobWorkspaceInputValueOptionsModel).ToNot(BeNil())
				Expect(getJobWorkspaceInputValueOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(getJobWorkspaceInputValueOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getJobWorkspaceInputValueOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getJobWorkspaceInputValueOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getJobWorkspaceInputValueOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(getJobWorkspaceInputValueOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetJobWorkspaceOutputValueOptions successfully`, func() {
				// Construct an instance of the GetJobWorkspaceOutputValueOptions model
				jobID := "testString"
				wID := "testString"
				varName := "testString"
				getJobWorkspaceOutputValueOptionsModel := schematics20ApiService.NewGetJobWorkspaceOutputValueOptions(jobID, wID, varName)
				getJobWorkspaceOutputValueOptionsModel.SetJobID("testString")
				getJobWorkspaceOutputValueOptionsModel.SetWID("testString")
				getJobWorkspaceOutputValueOptionsModel.SetVarName("testString")
				getJobWorkspaceOutputValueOptionsModel.SetOffset(int64(0))
				getJobWorkspaceOutputValueOptionsModel.SetLimit(int64(1))
				getJobWorkspaceOutputValueOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getJobWorkspaceOutputValueOptionsModel).ToNot(BeNil())
				Expect(getJobWorkspaceOutputValueOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(getJobWorkspaceOutputValueOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getJobWorkspaceOutputValueOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getJobWorkspaceOutputValueOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getJobWorkspaceOutputValueOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(getJobWorkspaceOutputValueOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetJobWorkspaceSettingValueOptions successfully`, func() {
				// Construct an instance of the GetJobWorkspaceSettingValueOptions model
				jobID := "testString"
				wID := "testString"
				varName := "testString"
				getJobWorkspaceSettingValueOptionsModel := schematics20ApiService.NewGetJobWorkspaceSettingValueOptions(jobID, wID, varName)
				getJobWorkspaceSettingValueOptionsModel.SetJobID("testString")
				getJobWorkspaceSettingValueOptionsModel.SetWID("testString")
				getJobWorkspaceSettingValueOptionsModel.SetVarName("testString")
				getJobWorkspaceSettingValueOptionsModel.SetOffset(int64(0))
				getJobWorkspaceSettingValueOptionsModel.SetLimit(int64(1))
				getJobWorkspaceSettingValueOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getJobWorkspaceSettingValueOptionsModel).ToNot(BeNil())
				Expect(getJobWorkspaceSettingValueOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(getJobWorkspaceSettingValueOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getJobWorkspaceSettingValueOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getJobWorkspaceSettingValueOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getJobWorkspaceSettingValueOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(getJobWorkspaceSettingValueOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetKmsSettingsOptions successfully`, func() {
				// Construct an instance of the GetKmsSettingsOptions model
				location := "testString"
				getKmsSettingsOptionsModel := schematics20ApiService.NewGetKmsSettingsOptions(location)
				getKmsSettingsOptionsModel.SetLocation("testString")
				getKmsSettingsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getKmsSettingsOptionsModel).ToNot(BeNil())
				Expect(getKmsSettingsOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(getKmsSettingsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetPrivateClusterOptions successfully`, func() {
				// Construct an instance of the GetPrivateClusterOptions model
				getPrivateClusterOptionsModel := schematics20ApiService.NewGetPrivateClusterOptions()
				getPrivateClusterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getPrivateClusterOptionsModel).ToNot(BeNil())
				Expect(getPrivateClusterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetResourcesQueryOptions successfully`, func() {
				// Construct an instance of the GetResourcesQueryOptions model
				queryID := "testString"
				getResourcesQueryOptionsModel := schematics20ApiService.NewGetResourcesQueryOptions(queryID)
				getResourcesQueryOptionsModel.SetQueryID("testString")
				getResourcesQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getResourcesQueryOptionsModel).ToNot(BeNil())
				Expect(getResourcesQueryOptionsModel.QueryID).To(Equal(core.StringPtr("testString")))
				Expect(getResourcesQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSchematicsAccessRulesForResourceOptions successfully`, func() {
				// Construct an instance of the GetSchematicsAccessRulesForResourceOptions model
				resourceName := "testString"
				getSchematicsAccessRulesForResourceOptionsModel := schematics20ApiService.NewGetSchematicsAccessRulesForResourceOptions(resourceName)
				getSchematicsAccessRulesForResourceOptionsModel.SetResourceName("testString")
				getSchematicsAccessRulesForResourceOptionsModel.SetCommandName("testString")
				getSchematicsAccessRulesForResourceOptionsModel.SetCommandParameter("testString")
				getSchematicsAccessRulesForResourceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSchematicsAccessRulesForResourceOptionsModel).ToNot(BeNil())
				Expect(getSchematicsAccessRulesForResourceOptionsModel.ResourceName).To(Equal(core.StringPtr("testString")))
				Expect(getSchematicsAccessRulesForResourceOptionsModel.CommandName).To(Equal(core.StringPtr("testString")))
				Expect(getSchematicsAccessRulesForResourceOptionsModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(getSchematicsAccessRulesForResourceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSchematicsCommandNamesOptions successfully`, func() {
				// Construct an instance of the GetSchematicsCommandNamesOptions model
				resourceName := "testString"
				getSchematicsCommandNamesOptionsModel := schematics20ApiService.NewGetSchematicsCommandNamesOptions(resourceName)
				getSchematicsCommandNamesOptionsModel.SetResourceName("testString")
				getSchematicsCommandNamesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSchematicsCommandNamesOptionsModel).ToNot(BeNil())
				Expect(getSchematicsCommandNamesOptionsModel.ResourceName).To(Equal(core.StringPtr("testString")))
				Expect(getSchematicsCommandNamesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSchematicsInfoOptions successfully`, func() {
				// Construct an instance of the GetSchematicsInfoOptions model
				getSchematicsInfoOptionsModel := schematics20ApiService.NewGetSchematicsInfoOptions()
				getSchematicsInfoOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSchematicsInfoOptionsModel).ToNot(BeNil())
				Expect(getSchematicsInfoOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTemplateInWorkspaceOptions successfully`, func() {
				// Construct an instance of the GetTemplateInWorkspaceOptions model
				wID := "testString"
				tID := "testString"
				getTemplateInWorkspaceOptionsModel := schematics20ApiService.NewGetTemplateInWorkspaceOptions(wID, tID)
				getTemplateInWorkspaceOptionsModel.SetWID("testString")
				getTemplateInWorkspaceOptionsModel.SetTID("testString")
				getTemplateInWorkspaceOptionsModel.SetProfile("summary")
				getTemplateInWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTemplateInWorkspaceOptionsModel).ToNot(BeNil())
				Expect(getTemplateInWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateInWorkspaceOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateInWorkspaceOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getTemplateInWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTemplateReadmeOptions successfully`, func() {
				// Construct an instance of the GetTemplateReadmeOptions model
				wID := "testString"
				tID := "testString"
				getTemplateReadmeOptionsModel := schematics20ApiService.NewGetTemplateReadmeOptions(wID, tID)
				getTemplateReadmeOptionsModel.SetWID("testString")
				getTemplateReadmeOptionsModel.SetTID("testString")
				getTemplateReadmeOptionsModel.SetAccept("text/markdown")
				getTemplateReadmeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTemplateReadmeOptionsModel).ToNot(BeNil())
				Expect(getTemplateReadmeOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateReadmeOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateReadmeOptionsModel.Accept).To(Equal(core.StringPtr("text/markdown")))
				Expect(getTemplateReadmeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTemplateSourceOptions successfully`, func() {
				// Construct an instance of the GetTemplateSourceOptions model
				wID := "testString"
				tID := "testString"
				getTemplateSourceOptionsModel := schematics20ApiService.NewGetTemplateSourceOptions(wID, tID)
				getTemplateSourceOptionsModel.SetWID("testString")
				getTemplateSourceOptionsModel.SetTID("testString")
				getTemplateSourceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTemplateSourceOptionsModel).ToNot(BeNil())
				Expect(getTemplateSourceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateSourceOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateSourceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTriggerOptions successfully`, func() {
				// Construct an instance of the GetTriggerOptions model
				triggerID := "testString"
				getTriggerOptionsModel := schematics20ApiService.NewGetTriggerOptions(triggerID)
				getTriggerOptionsModel.SetTriggerID("testString")
				getTriggerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTriggerOptionsModel).ToNot(BeNil())
				Expect(getTriggerOptionsModel.TriggerID).To(Equal(core.StringPtr("testString")))
				Expect(getTriggerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWebhookOptions successfully`, func() {
				// Construct an instance of the GetWebhookOptions model
				hookID := "testString"
				getWebhookOptionsModel := schematics20ApiService.NewGetWebhookOptions(hookID)
				getWebhookOptionsModel.SetHookID("testString")
				getWebhookOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWebhookOptionsModel).ToNot(BeNil())
				Expect(getWebhookOptionsModel.HookID).To(Equal(core.StringPtr("testString")))
				Expect(getWebhookOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceInputValueOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceInputValueOptions model
				wID := "testString"
				varName := "testString"
				getWorkspaceInputValueOptionsModel := schematics20ApiService.NewGetWorkspaceInputValueOptions(wID, varName)
				getWorkspaceInputValueOptionsModel.SetWID("testString")
				getWorkspaceInputValueOptionsModel.SetVarName("testString")
				getWorkspaceInputValueOptionsModel.SetLimit(int64(1))
				getWorkspaceInputValueOptionsModel.SetOffset(int64(0))
				getWorkspaceInputValueOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceInputValueOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceInputValueOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceInputValueOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceInputValueOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(getWorkspaceInputValueOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getWorkspaceInputValueOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceOptions model
				wID := "testString"
				getWorkspaceOptionsModel := schematics20ApiService.NewGetWorkspaceOptions(wID)
				getWorkspaceOptionsModel.SetWID("testString")
				getWorkspaceOptionsModel.SetProfile("summary")
				getWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceOutputValueOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceOutputValueOptions model
				wID := "testString"
				varName := "testString"
				getWorkspaceOutputValueOptionsModel := schematics20ApiService.NewGetWorkspaceOutputValueOptions(wID, varName)
				getWorkspaceOutputValueOptionsModel.SetWID("testString")
				getWorkspaceOutputValueOptionsModel.SetVarName("testString")
				getWorkspaceOutputValueOptionsModel.SetOffset(int64(0))
				getWorkspaceOutputValueOptionsModel.SetLimit(int64(1))
				getWorkspaceOutputValueOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceOutputValueOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceOutputValueOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceOutputValueOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceOutputValueOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getWorkspaceOutputValueOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(getWorkspaceOutputValueOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceSettingsValueOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceSettingsValueOptions model
				wID := "testString"
				varName := "testString"
				getWorkspaceSettingsValueOptionsModel := schematics20ApiService.NewGetWorkspaceSettingsValueOptions(wID, varName)
				getWorkspaceSettingsValueOptionsModel.SetWID("testString")
				getWorkspaceSettingsValueOptionsModel.SetVarName("testString")
				getWorkspaceSettingsValueOptionsModel.SetOffset(int64(0))
				getWorkspaceSettingsValueOptionsModel.SetLimit(int64(1))
				getWorkspaceSettingsValueOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceSettingsValueOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceSettingsValueOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceSettingsValueOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceSettingsValueOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getWorkspaceSettingsValueOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(getWorkspaceSettingsValueOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceTemplateInputValueOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceTemplateInputValueOptions model
				wID := "testString"
				tID := "testString"
				varName := "testString"
				getWorkspaceTemplateInputValueOptionsModel := schematics20ApiService.NewGetWorkspaceTemplateInputValueOptions(wID, tID, varName)
				getWorkspaceTemplateInputValueOptionsModel.SetWID("testString")
				getWorkspaceTemplateInputValueOptionsModel.SetTID("testString")
				getWorkspaceTemplateInputValueOptionsModel.SetVarName("testString")
				getWorkspaceTemplateInputValueOptionsModel.SetOffset(int64(0))
				getWorkspaceTemplateInputValueOptionsModel.SetLimit(int64(1))
				getWorkspaceTemplateInputValueOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceTemplateInputValueOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceTemplateInputValueOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceTemplateInputValueOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceTemplateInputValueOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceTemplateInputValueOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getWorkspaceTemplateInputValueOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(getWorkspaceTemplateInputValueOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceTemplateOutputValueOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceTemplateOutputValueOptions model
				wID := "testString"
				tID := "testString"
				varName := "testString"
				getWorkspaceTemplateOutputValueOptionsModel := schematics20ApiService.NewGetWorkspaceTemplateOutputValueOptions(wID, tID, varName)
				getWorkspaceTemplateOutputValueOptionsModel.SetWID("testString")
				getWorkspaceTemplateOutputValueOptionsModel.SetTID("testString")
				getWorkspaceTemplateOutputValueOptionsModel.SetVarName("testString")
				getWorkspaceTemplateOutputValueOptionsModel.SetOffset(int64(0))
				getWorkspaceTemplateOutputValueOptionsModel.SetLimit(int64(1))
				getWorkspaceTemplateOutputValueOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceTemplateOutputValueOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceTemplateOutputValueOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceTemplateOutputValueOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceTemplateOutputValueOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceTemplateOutputValueOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getWorkspaceTemplateOutputValueOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(getWorkspaceTemplateOutputValueOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceTemplateSettingValueOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceTemplateSettingValueOptions model
				wID := "testString"
				tID := "testString"
				varName := "testString"
				getWorkspaceTemplateSettingValueOptionsModel := schematics20ApiService.NewGetWorkspaceTemplateSettingValueOptions(wID, tID, varName)
				getWorkspaceTemplateSettingValueOptionsModel.SetWID("testString")
				getWorkspaceTemplateSettingValueOptionsModel.SetTID("testString")
				getWorkspaceTemplateSettingValueOptionsModel.SetVarName("testString")
				getWorkspaceTemplateSettingValueOptionsModel.SetOffset(int64(0))
				getWorkspaceTemplateSettingValueOptionsModel.SetLimit(int64(1))
				getWorkspaceTemplateSettingValueOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceTemplateSettingValueOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceTemplateSettingValueOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceTemplateSettingValueOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceTemplateSettingValueOptionsModel.VarName).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceTemplateSettingValueOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getWorkspaceTemplateSettingValueOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(getWorkspaceTemplateSettingValueOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewItemSKU successfully`, func() {
				skuID := "testString"
				skuType := "testString"
				model, err := schematics20ApiService.NewItemSKU(skuID, skuType)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewJobData successfully`, func() {
				jobType := "repo_download_job"
				model, err := schematics20ApiService.NewJobData(jobType)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewListActionsOptions successfully`, func() {
				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := schematics20ApiService.NewListActionsOptions()
				listActionsOptionsModel.SetOffset(int64(0))
				listActionsOptionsModel.SetLimit(int64(1))
				listActionsOptionsModel.SetSort("testString")
				listActionsOptionsModel.SetProfile("ids")
				listActionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listActionsOptionsModel).ToNot(BeNil())
				Expect(listActionsOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listActionsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listActionsOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listActionsOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listActionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListAdapterOptions successfully`, func() {
				// Construct an instance of the ListAdapterOptions model
				listAdapterOptionsModel := schematics20ApiService.NewListAdapterOptions()
				listAdapterOptionsModel.SetOffset(int64(0))
				listAdapterOptionsModel.SetLimit(int64(1))
				listAdapterOptionsModel.SetSort("testString")
				listAdapterOptionsModel.SetProfile("ids")
				listAdapterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listAdapterOptionsModel).ToNot(BeNil())
				Expect(listAdapterOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listAdapterOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listAdapterOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listAdapterOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listAdapterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListAgentOptions successfully`, func() {
				// Construct an instance of the ListAgentOptions model
				listAgentOptionsModel := schematics20ApiService.NewListAgentOptions()
				listAgentOptionsModel.SetOffset(int64(0))
				listAgentOptionsModel.SetLimit(int64(1))
				listAgentOptionsModel.SetProfile("summary")
				listAgentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listAgentOptionsModel).ToNot(BeNil())
				Expect(listAgentOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listAgentOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listAgentOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(listAgentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListBlueprintOptions successfully`, func() {
				// Construct an instance of the ListBlueprintOptions model
				listBlueprintOptionsModel := schematics20ApiService.NewListBlueprintOptions()
				listBlueprintOptionsModel.SetOffset(int64(0))
				listBlueprintOptionsModel.SetLimit(int64(1))
				listBlueprintOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listBlueprintOptionsModel).ToNot(BeNil())
				Expect(listBlueprintOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listBlueprintOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listBlueprintOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListCapsulesOptions successfully`, func() {
				// Construct an instance of the ListCapsulesOptions model
				controlsID := "testString"
				listCapsulesOptionsModel := schematics20ApiService.NewListCapsulesOptions(controlsID)
				listCapsulesOptionsModel.SetControlsID("testString")
				listCapsulesOptionsModel.SetOffset(int64(0))
				listCapsulesOptionsModel.SetLimit(int64(1))
				listCapsulesOptionsModel.SetSort("testString")
				listCapsulesOptionsModel.SetProfile("ids")
				listCapsulesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listCapsulesOptionsModel).ToNot(BeNil())
				Expect(listCapsulesOptionsModel.ControlsID).To(Equal(core.StringPtr("testString")))
				Expect(listCapsulesOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listCapsulesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listCapsulesOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listCapsulesOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listCapsulesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListCartOptions successfully`, func() {
				// Construct an instance of the ListCartOptions model
				listCartOptionsModel := schematics20ApiService.NewListCartOptions()
				listCartOptionsModel.SetOffset(int64(0))
				listCartOptionsModel.SetLimit(int64(1))
				listCartOptionsModel.SetServiceName("testString")
				listCartOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listCartOptionsModel).ToNot(BeNil())
				Expect(listCartOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listCartOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listCartOptionsModel.ServiceName).To(Equal(core.StringPtr("testString")))
				Expect(listCartOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListCartOrderJobsOptions successfully`, func() {
				// Construct an instance of the ListCartOrderJobsOptions model
				orderID := "testString"
				listCartOrderJobsOptionsModel := schematics20ApiService.NewListCartOrderJobsOptions(orderID)
				listCartOrderJobsOptionsModel.SetOrderID("testString")
				listCartOrderJobsOptionsModel.SetOffset(int64(0))
				listCartOrderJobsOptionsModel.SetLimit(int64(1))
				listCartOrderJobsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listCartOrderJobsOptionsModel).ToNot(BeNil())
				Expect(listCartOrderJobsOptionsModel.OrderID).To(Equal(core.StringPtr("testString")))
				Expect(listCartOrderJobsOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listCartOrderJobsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listCartOrderJobsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListCartResourcesOptions successfully`, func() {
				// Construct an instance of the ListCartResourcesOptions model
				orderID := "testString"
				listCartResourcesOptionsModel := schematics20ApiService.NewListCartResourcesOptions(orderID)
				listCartResourcesOptionsModel.SetOrderID("testString")
				listCartResourcesOptionsModel.SetOffset(int64(0))
				listCartResourcesOptionsModel.SetLimit(int64(1))
				listCartResourcesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listCartResourcesOptionsModel).ToNot(BeNil())
				Expect(listCartResourcesOptionsModel.OrderID).To(Equal(core.StringPtr("testString")))
				Expect(listCartResourcesOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listCartResourcesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listCartResourcesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListCatalogItemsOptions successfully`, func() {
				// Construct an instance of the ListCatalogItemsOptions model
				listCatalogItemsOptionsModel := schematics20ApiService.NewListCatalogItemsOptions()
				listCatalogItemsOptionsModel.SetOffset(int64(0))
				listCatalogItemsOptionsModel.SetLimit(int64(1))
				listCatalogItemsOptionsModel.SetCatalogID("testString")
				listCatalogItemsOptionsModel.SetCatalogName("testString")
				listCatalogItemsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listCatalogItemsOptionsModel).ToNot(BeNil())
				Expect(listCatalogItemsOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listCatalogItemsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listCatalogItemsOptionsModel.CatalogID).To(Equal(core.StringPtr("testString")))
				Expect(listCatalogItemsOptionsModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(listCatalogItemsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListConnectionOptions successfully`, func() {
				// Construct an instance of the ListConnectionOptions model
				listConnectionOptionsModel := schematics20ApiService.NewListConnectionOptions()
				listConnectionOptionsModel.SetOffset(int64(0))
				listConnectionOptionsModel.SetLimit(int64(1))
				listConnectionOptionsModel.SetSort("testString")
				listConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listConnectionOptionsModel).ToNot(BeNil())
				Expect(listConnectionOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listConnectionOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listConnectionOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListControlsOptions successfully`, func() {
				// Construct an instance of the ListControlsOptions model
				listControlsOptionsModel := schematics20ApiService.NewListControlsOptions()
				listControlsOptionsModel.SetOffset(int64(0))
				listControlsOptionsModel.SetLimit(int64(1))
				listControlsOptionsModel.SetSort("testString")
				listControlsOptionsModel.SetProfile("ids")
				listControlsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listControlsOptionsModel).ToNot(BeNil())
				Expect(listControlsOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listControlsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listControlsOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listControlsOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listControlsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListDatasetVariablesOptions successfully`, func() {
				// Construct an instance of the ListDatasetVariablesOptions model
				datasetID := "testString"
				listDatasetVariablesOptionsModel := schematics20ApiService.NewListDatasetVariablesOptions(datasetID)
				listDatasetVariablesOptionsModel.SetDatasetID("testString")
				listDatasetVariablesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listDatasetVariablesOptionsModel).ToNot(BeNil())
				Expect(listDatasetVariablesOptionsModel.DatasetID).To(Equal(core.StringPtr("testString")))
				Expect(listDatasetVariablesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListDatasetsOptions successfully`, func() {
				// Construct an instance of the ListDatasetsOptions model
				listDatasetsOptionsModel := schematics20ApiService.NewListDatasetsOptions()
				listDatasetsOptionsModel.SetOffset(int64(0))
				listDatasetsOptionsModel.SetLimit(int64(1))
				listDatasetsOptionsModel.SetSort("testString")
				listDatasetsOptionsModel.SetProfile("ids")
				listDatasetsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listDatasetsOptionsModel).ToNot(BeNil())
				Expect(listDatasetsOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listDatasetsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listDatasetsOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listDatasetsOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listDatasetsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListDatasourcesOptions successfully`, func() {
				// Construct an instance of the ListDatasourcesOptions model
				listDatasourcesOptionsModel := schematics20ApiService.NewListDatasourcesOptions()
				listDatasourcesOptionsModel.SetOffset(int64(0))
				listDatasourcesOptionsModel.SetLimit(int64(1))
				listDatasourcesOptionsModel.SetSort("testString")
				listDatasourcesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listDatasourcesOptionsModel).ToNot(BeNil())
				Expect(listDatasourcesOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listDatasourcesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listDatasourcesOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listDatasourcesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListFlowsInWorkspaceOptions successfully`, func() {
				// Construct an instance of the ListFlowsInWorkspaceOptions model
				wID := "testString"
				listFlowsInWorkspaceOptionsModel := schematics20ApiService.NewListFlowsInWorkspaceOptions(wID)
				listFlowsInWorkspaceOptionsModel.SetWID("testString")
				listFlowsInWorkspaceOptionsModel.SetOffset(int64(0))
				listFlowsInWorkspaceOptionsModel.SetLimit(int64(1))
				listFlowsInWorkspaceOptionsModel.SetSort("testString")
				listFlowsInWorkspaceOptionsModel.SetProfile("ids")
				listFlowsInWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listFlowsInWorkspaceOptionsModel).ToNot(BeNil())
				Expect(listFlowsInWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(listFlowsInWorkspaceOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listFlowsInWorkspaceOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listFlowsInWorkspaceOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listFlowsInWorkspaceOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listFlowsInWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInventoriesOptions successfully`, func() {
				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := schematics20ApiService.NewListInventoriesOptions()
				listInventoriesOptionsModel.SetOffset(int64(0))
				listInventoriesOptionsModel.SetLimit(int64(1))
				listInventoriesOptionsModel.SetSort("testString")
				listInventoriesOptionsModel.SetProfile("ids")
				listInventoriesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInventoriesOptionsModel).ToNot(BeNil())
				Expect(listInventoriesOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listInventoriesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listInventoriesOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listInventoriesOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listInventoriesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListJobLogsOptions successfully`, func() {
				// Construct an instance of the ListJobLogsOptions model
				jobID := "testString"
				listJobLogsOptionsModel := schematics20ApiService.NewListJobLogsOptions(jobID)
				listJobLogsOptionsModel.SetJobID("testString")
				listJobLogsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listJobLogsOptionsModel).ToNot(BeNil())
				Expect(listJobLogsOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(listJobLogsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListJobsOptions successfully`, func() {
				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := schematics20ApiService.NewListJobsOptions()
				listJobsOptionsModel.SetOffset(int64(0))
				listJobsOptionsModel.SetLimit(int64(1))
				listJobsOptionsModel.SetSort("testString")
				listJobsOptionsModel.SetProfile("ids")
				listJobsOptionsModel.SetResource("workspace")
				listJobsOptionsModel.SetResourceID("testString")
				listJobsOptionsModel.SetActionID("testString")
				listJobsOptionsModel.SetList("all")
				listJobsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listJobsOptionsModel).ToNot(BeNil())
				Expect(listJobsOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listJobsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listJobsOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listJobsOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listJobsOptionsModel.Resource).To(Equal(core.StringPtr("workspace")))
				Expect(listJobsOptionsModel.ResourceID).To(Equal(core.StringPtr("testString")))
				Expect(listJobsOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(listJobsOptionsModel.List).To(Equal(core.StringPtr("all")))
				Expect(listJobsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListKmsOptions successfully`, func() {
				// Construct an instance of the ListKmsOptions model
				encryptionScheme := "testString"
				location := "testString"
				listKmsOptionsModel := schematics20ApiService.NewListKmsOptions(encryptionScheme, location)
				listKmsOptionsModel.SetEncryptionScheme("testString")
				listKmsOptionsModel.SetLocation("testString")
				listKmsOptionsModel.SetResourceGroup("testString")
				listKmsOptionsModel.SetLimit(int64(1))
				listKmsOptionsModel.SetSort("testString")
				listKmsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listKmsOptionsModel).ToNot(BeNil())
				Expect(listKmsOptionsModel.EncryptionScheme).To(Equal(core.StringPtr("testString")))
				Expect(listKmsOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(listKmsOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(listKmsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listKmsOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listKmsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLocationsOptions successfully`, func() {
				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := schematics20ApiService.NewListLocationsOptions()
				listLocationsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLocationsOptionsModel).ToNot(BeNil())
				Expect(listLocationsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListResourceQueryOptions successfully`, func() {
				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := schematics20ApiService.NewListResourceQueryOptions()
				listResourceQueryOptionsModel.SetOffset(int64(0))
				listResourceQueryOptionsModel.SetLimit(int64(1))
				listResourceQueryOptionsModel.SetSort("testString")
				listResourceQueryOptionsModel.SetProfile("ids")
				listResourceQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listResourceQueryOptionsModel).ToNot(BeNil())
				Expect(listResourceQueryOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listResourceQueryOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listResourceQueryOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listResourceQueryOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listResourceQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSchematicsAccessRulesOptions successfully`, func() {
				// Construct an instance of the ListSchematicsAccessRulesOptions model
				listSchematicsAccessRulesOptionsModel := schematics20ApiService.NewListSchematicsAccessRulesOptions()
				listSchematicsAccessRulesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSchematicsAccessRulesOptionsModel).ToNot(BeNil())
				Expect(listSchematicsAccessRulesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTemplateInputsOptions successfully`, func() {
				// Construct an instance of the ListTemplateInputsOptions model
				wID := "testString"
				tID := "testString"
				listTemplateInputsOptionsModel := schematics20ApiService.NewListTemplateInputsOptions(wID, tID)
				listTemplateInputsOptionsModel.SetWID("testString")
				listTemplateInputsOptionsModel.SetTID("testString")
				listTemplateInputsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTemplateInputsOptionsModel).ToNot(BeNil())
				Expect(listTemplateInputsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(listTemplateInputsOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(listTemplateInputsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTemplateOutputsOptions successfully`, func() {
				// Construct an instance of the ListTemplateOutputsOptions model
				wID := "testString"
				tID := "testString"
				listTemplateOutputsOptionsModel := schematics20ApiService.NewListTemplateOutputsOptions(wID, tID)
				listTemplateOutputsOptionsModel.SetWID("testString")
				listTemplateOutputsOptionsModel.SetTID("testString")
				listTemplateOutputsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTemplateOutputsOptionsModel).ToNot(BeNil())
				Expect(listTemplateOutputsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(listTemplateOutputsOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(listTemplateOutputsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTemplatesInWorkspaceOptions successfully`, func() {
				// Construct an instance of the ListTemplatesInWorkspaceOptions model
				wID := "testString"
				listTemplatesInWorkspaceOptionsModel := schematics20ApiService.NewListTemplatesInWorkspaceOptions(wID)
				listTemplatesInWorkspaceOptionsModel.SetWID("testString")
				listTemplatesInWorkspaceOptionsModel.SetOffset(int64(0))
				listTemplatesInWorkspaceOptionsModel.SetLimit(int64(1))
				listTemplatesInWorkspaceOptionsModel.SetSort("testString")
				listTemplatesInWorkspaceOptionsModel.SetProfile("ids")
				listTemplatesInWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTemplatesInWorkspaceOptionsModel).ToNot(BeNil())
				Expect(listTemplatesInWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(listTemplatesInWorkspaceOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listTemplatesInWorkspaceOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listTemplatesInWorkspaceOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listTemplatesInWorkspaceOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listTemplatesInWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTriggersOptions successfully`, func() {
				// Construct an instance of the ListTriggersOptions model
				listTriggersOptionsModel := schematics20ApiService.NewListTriggersOptions()
				listTriggersOptionsModel.SetOffset(int64(0))
				listTriggersOptionsModel.SetLimit(int64(1))
				listTriggersOptionsModel.SetSort("testString")
				listTriggersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTriggersOptionsModel).ToNot(BeNil())
				Expect(listTriggersOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listTriggersOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listTriggersOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listTriggersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListWebhookOptions successfully`, func() {
				// Construct an instance of the ListWebhookOptions model
				listWebhookOptionsModel := schematics20ApiService.NewListWebhookOptions()
				listWebhookOptionsModel.SetOffset(int64(0))
				listWebhookOptionsModel.SetLimit(int64(1))
				listWebhookOptionsModel.SetSort("testString")
				listWebhookOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listWebhookOptionsModel).ToNot(BeNil())
				Expect(listWebhookOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listWebhookOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listWebhookOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listWebhookOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListWorkspaceInputsOptions successfully`, func() {
				// Construct an instance of the ListWorkspaceInputsOptions model
				wID := "testString"
				listWorkspaceInputsOptionsModel := schematics20ApiService.NewListWorkspaceInputsOptions(wID)
				listWorkspaceInputsOptionsModel.SetWID("testString")
				listWorkspaceInputsOptionsModel.SetOffset(int64(0))
				listWorkspaceInputsOptionsModel.SetLimit(int64(1))
				listWorkspaceInputsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listWorkspaceInputsOptionsModel).ToNot(BeNil())
				Expect(listWorkspaceInputsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(listWorkspaceInputsOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listWorkspaceInputsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listWorkspaceInputsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListWorkspaceOutputsOptions successfully`, func() {
				// Construct an instance of the ListWorkspaceOutputsOptions model
				wID := "testString"
				listWorkspaceOutputsOptionsModel := schematics20ApiService.NewListWorkspaceOutputsOptions(wID)
				listWorkspaceOutputsOptionsModel.SetWID("testString")
				listWorkspaceOutputsOptionsModel.SetOffset(int64(0))
				listWorkspaceOutputsOptionsModel.SetLimit(int64(1))
				listWorkspaceOutputsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listWorkspaceOutputsOptionsModel).ToNot(BeNil())
				Expect(listWorkspaceOutputsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(listWorkspaceOutputsOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listWorkspaceOutputsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listWorkspaceOutputsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListWorkspacesOptions successfully`, func() {
				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := schematics20ApiService.NewListWorkspacesOptions()
				listWorkspacesOptionsModel.SetOffset(int64(0))
				listWorkspacesOptionsModel.SetLimit(int64(1))
				listWorkspacesOptionsModel.SetSort("testString")
				listWorkspacesOptionsModel.SetProfile("ids")
				listWorkspacesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listWorkspacesOptionsModel).ToNot(BeNil())
				Expect(listWorkspacesOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listWorkspacesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listWorkspacesOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listWorkspacesOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listWorkspacesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewOrderItemConfiguration successfully`, func() {
				catalogID := "testString"
				offeringID := "testString"
				model, err := schematics20ApiService.NewOrderItemConfiguration(catalogID, offeringID)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRegisterAgentOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the AgentHealth model
				agentHealthModel := new(schematics20apiv2.AgentHealth)
				Expect(agentHealthModel).ToNot(BeNil())
				agentHealthModel.State = core.StringPtr("Connected")
				agentHealthModel.CheckedAt = CreateMockDateTime()
				agentHealthModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(agentHealthModel.State).To(Equal(core.StringPtr("Connected")))
				Expect(agentHealthModel.CheckedAt).To(Equal(CreateMockDateTime()))
				Expect(agentHealthModel.GetProperties()).ToNot(BeEmpty())
				Expect(agentHealthModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the AgentSystemState model
				agentSystemStateModel := new(schematics20apiv2.AgentSystemState)
				Expect(agentSystemStateModel).ToNot(BeNil())
				agentSystemStateModel.State = core.StringPtr("error")
				agentSystemStateModel.Message = core.StringPtr("testString")
				agentSystemStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(agentSystemStateModel.State).To(Equal(core.StringPtr("error")))
				Expect(agentSystemStateModel.Message).To(Equal(core.StringPtr("testString")))
				Expect(agentSystemStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(agentSystemStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Agent model
				agentModel := new(schematics20apiv2.Agent)
				Expect(agentModel).ToNot(BeNil())
				agentModel.Name = core.StringPtr("MyDevAgent")
				agentModel.Description = core.StringPtr("Register agent")
				agentModel.ResourceGroup = core.StringPtr("testString")
				agentModel.Tags = []string{"testString"}
				agentModel.Location = core.StringPtr("us-south")
				agentModel.ProfileID = core.StringPtr("testString")
				agentModel.AgentID = core.StringPtr("testString")
				agentModel.UserState = userStateModel
				agentModel.AgentHealth = agentHealthModel
				agentModel.SystemState = agentSystemStateModel
				agentModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(agentModel.Name).To(Equal(core.StringPtr("MyDevAgent")))
				Expect(agentModel.Description).To(Equal(core.StringPtr("Register agent")))
				Expect(agentModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(agentModel.Tags).To(Equal([]string{"testString"}))
				Expect(agentModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(agentModel.ProfileID).To(Equal(core.StringPtr("testString")))
				Expect(agentModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(agentModel.UserState).To(Equal(userStateModel))
				Expect(agentModel.AgentHealth).To(Equal(agentHealthModel))
				Expect(agentModel.SystemState).To(Equal(agentSystemStateModel))
				Expect(agentModel.GetProperties()).ToNot(BeEmpty())
				Expect(agentModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the RegisterAgentOptions model
				var agent *schematics20apiv2.Agent = nil
				registerAgentOptionsModel := schematics20ApiService.NewRegisterAgentOptions(agent)
				registerAgentOptionsModel.SetAgent(agentModel)
				registerAgentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(registerAgentOptionsModel).ToNot(BeNil())
				Expect(registerAgentOptionsModel.Agent).To(Equal(agentModel))
				Expect(registerAgentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceAdapterOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Adapter model
				adapterModel := new(schematics20apiv2.Adapter)
				Expect(adapterModel).ToNot(BeNil())
				adapterModel.AdapterName = core.StringPtr("testString")
				adapterModel.AdapterType = core.StringPtr("scm_adapter")
				adapterModel.Location = core.StringPtr("us-south")
				adapterModel.ResourceGroup = core.StringPtr("testString")
				adapterModel.Tags = []string{"testString"}
				adapterModel.AdapterEndpointURL = core.StringPtr("testString")
				adapterModel.ServiceID = core.StringPtr("testString")
				adapterModel.Apikey = core.StringPtr("testString")
				adapterModel.UserState = userStateModel
				adapterModel.IgnoreInflightOperations = core.BoolPtr(true)
				adapterModel.AdapterID = core.StringPtr("testString")
				adapterModel.RegisteredBy = core.StringPtr("testString")
				adapterModel.RegisteredAt = CreateMockDateTime()
				adapterModel.UpdatedAt = CreateMockDateTime()
				adapterModel.UpdatedBy = core.StringPtr("testString")
				adapterModel.SysLock = systemLockModel
				adapterModel.AdapterHealth = core.StringPtr("active")
				adapterModel.LastHealthCheckedAt = CreateMockDateTime()
				adapterModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(adapterModel.AdapterName).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.AdapterType).To(Equal(core.StringPtr("scm_adapter")))
				Expect(adapterModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(adapterModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.Tags).To(Equal([]string{"testString"}))
				Expect(adapterModel.AdapterEndpointURL).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.ServiceID).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.Apikey).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.UserState).To(Equal(userStateModel))
				Expect(adapterModel.IgnoreInflightOperations).To(Equal(core.BoolPtr(true)))
				Expect(adapterModel.AdapterID).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.RegisteredBy).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.RegisteredAt).To(Equal(CreateMockDateTime()))
				Expect(adapterModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(adapterModel.UpdatedBy).To(Equal(core.StringPtr("testString")))
				Expect(adapterModel.SysLock).To(Equal(systemLockModel))
				Expect(adapterModel.AdapterHealth).To(Equal(core.StringPtr("active")))
				Expect(adapterModel.LastHealthCheckedAt).To(Equal(CreateMockDateTime()))
				Expect(adapterModel.GetProperties()).ToNot(BeEmpty())
				Expect(adapterModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceAdapterOptions model
				adapterID := "testString"
				var adapter *schematics20apiv2.Adapter = nil
				replaceAdapterOptionsModel := schematics20ApiService.NewReplaceAdapterOptions(adapterID, adapter)
				replaceAdapterOptionsModel.SetAdapterID("testString")
				replaceAdapterOptionsModel.SetAdapter(adapterModel)
				replaceAdapterOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceAdapterOptionsModel).ToNot(BeNil())
				Expect(replaceAdapterOptionsModel.AdapterID).To(Equal(core.StringPtr("testString")))
				Expect(replaceAdapterOptionsModel.Adapter).To(Equal(adapterModel))
				Expect(replaceAdapterOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceBlueprintOptions successfully`, func() {
				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				Expect(blueprintVariableDataModel).ToNot(BeNil())
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintVariableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(blueprintVariableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(blueprintVariableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintVariableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				Expect(blueprintConfigItemModel).ToNot(BeNil())
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintConfigItemModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(blueprintConfigItemModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(blueprintConfigItemModel.Source).To(Equal(externalSourceModel))
				Expect(blueprintConfigItemModel.Inputs).To(Equal([]schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}))
				Expect(blueprintConfigItemModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintConfigItemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				Expect(blueprintFlowModel).ToNot(BeNil())
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				Expect(blueprintLiteStateModel).ToNot(BeNil())
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintLiteStateModel.StatusCode).To(Equal(core.StringPtr("Blueprint_Create_Init")))
				Expect(blueprintLiteStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(blueprintLiteStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintLiteStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				Expect(blueprintModel).ToNot(BeNil())
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintModel.Name).To(Equal(core.StringPtr("Toronto Dev Environtment")))
				Expect(blueprintModel.SchemaVersion).To(Equal(core.StringPtr("1.0")))
				Expect(blueprintModel.Source).To(Equal(externalSourceModel))
				Expect(blueprintModel.Config).To(Equal([]schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}))
				Expect(blueprintModel.Description).To(Equal(core.StringPtr("Deploys dev environtment instance in Toronto Region")))
				Expect(blueprintModel.ResourceGroup).To(Equal(core.StringPtr("Default")))
				Expect(blueprintModel.Tags).To(Equal([]string{"testString"}))
				Expect(blueprintModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(blueprintModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(blueprintModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(blueprintModel.Flow).To(Equal(blueprintFlowModel))
				Expect(blueprintModel.SysLock).To(Equal(systemLockModel))
				Expect(blueprintModel.UserState).To(Equal(userStateModel))
				Expect(blueprintModel.State).To(Equal(blueprintLiteStateModel))
				Expect(blueprintModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceBlueprintOptions model
				blueprintID := "testString"
				var blueprint *schematics20apiv2.Blueprint = nil
				replaceBlueprintOptionsModel := schematics20ApiService.NewReplaceBlueprintOptions(blueprintID, blueprint)
				replaceBlueprintOptionsModel.SetBlueprintID("testString")
				replaceBlueprintOptionsModel.SetBlueprint(blueprintModel)
				replaceBlueprintOptionsModel.SetProfile("ids")
				replaceBlueprintOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceBlueprintOptionsModel).ToNot(BeNil())
				Expect(replaceBlueprintOptionsModel.BlueprintID).To(Equal(core.StringPtr("testString")))
				Expect(replaceBlueprintOptionsModel.Blueprint).To(Equal(blueprintModel))
				Expect(replaceBlueprintOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(replaceBlueprintOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceCartOrderOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				Expect(targetRequestModel).ToNot(BeNil())
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(targetRequestModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.ClusterName).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.EntitlementKey).To(Equal(map[string]interface{}{"anyKey": "anyValue"}))
				Expect(targetRequestModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.GetProperties()).ToNot(BeEmpty())
				Expect(targetRequestModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				Expect(serviceMappingRuleModel).ToNot(BeNil())
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(serviceMappingRuleModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(serviceMappingRuleModel.InputParamName).To(Equal(core.StringPtr("testString")))
				Expect(serviceMappingRuleModel.OutputParamName).To(Equal(core.StringPtr("testString")))
				Expect(serviceMappingRuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(serviceMappingRuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				Expect(serviceVariableDataModel).ToNot(BeNil())
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(serviceVariableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(serviceVariableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(serviceVariableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(serviceVariableDataModel.Mapping).To(Equal([]schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}))
				Expect(serviceVariableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(serviceVariableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SKUUserState model
				skuUserStateModel := new(schematics20apiv2.SKUUserState)
				Expect(skuUserStateModel).ToNot(BeNil())
				skuUserStateModel.State = core.StringPtr("testString")
				skuUserStateModel.SetBy = core.StringPtr("testString")
				skuUserStateModel.SetAt = CreateMockDateTime()
				skuUserStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(skuUserStateModel.State).To(Equal(core.StringPtr("testString")))
				Expect(skuUserStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(skuUserStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(skuUserStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(skuUserStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ItemSKU model
				itemSkuModel := new(schematics20apiv2.ItemSKU)
				Expect(itemSkuModel).ToNot(BeNil())
				itemSkuModel.SkuID = core.StringPtr("testString")
				itemSkuModel.SkuType = core.StringPtr("testString")
				itemSkuModel.SkuSysLock = systemLockModel
				itemSkuModel.SkuUserState = skuUserStateModel
				itemSkuModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(itemSkuModel.SkuID).To(Equal(core.StringPtr("testString")))
				Expect(itemSkuModel.SkuType).To(Equal(core.StringPtr("testString")))
				Expect(itemSkuModel.SkuSysLock).To(Equal(systemLockModel))
				Expect(itemSkuModel.SkuUserState).To(Equal(skuUserStateModel))
				Expect(itemSkuModel.GetProperties()).ToNot(BeEmpty())
				Expect(itemSkuModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the OrderItemConfiguration model
				orderItemConfigurationModel := new(schematics20apiv2.OrderItemConfiguration)
				Expect(orderItemConfigurationModel).ToNot(BeNil())
				orderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				orderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				orderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				orderItemConfigurationModel.Target = targetRequestModel
				orderItemConfigurationModel.Operation = core.StringPtr("configure")
				orderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				orderItemConfigurationModel.CatalogID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingID = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccount = core.StringPtr("testString")
				orderItemConfigurationModel.OwningAccountCrn = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKindID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingTargetKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersionID = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingFulfilmentKind = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingVersion = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerURL = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerSsh = core.StringPtr("testString")
				orderItemConfigurationModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				orderItemConfigurationModel.ItemSku = itemSkuModel
				orderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(orderItemConfigurationModel.Name).To(Equal(core.StringPtr("AWS Satellite")))
				Expect(orderItemConfigurationModel.Description).To(Equal(core.StringPtr("Create satellite location in AWS")))
				Expect(orderItemConfigurationModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(orderItemConfigurationModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(orderItemConfigurationModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(orderItemConfigurationModel.Target).To(Equal(targetRequestModel))
				Expect(orderItemConfigurationModel.Operation).To(Equal(core.StringPtr("configure")))
				Expect(orderItemConfigurationModel.ServiceData).To(Equal([]schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}))
				Expect(orderItemConfigurationModel.CatalogID).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OwningAccountCrn).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingKindID).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingTargetKind).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingFulfilmentKind).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingProvisionerURL).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingProvisionerSsh).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.OfferingProvisionerWorkingDirectory).To(Equal(core.StringPtr("testString")))
				Expect(orderItemConfigurationModel.ItemSku).To(Equal(itemSkuModel))
				Expect(orderItemConfigurationModel.GetProperties()).ToNot(BeEmpty())
				Expect(orderItemConfigurationModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CartOrderUserState model
				cartOrderUserStateModel := new(schematics20apiv2.CartOrderUserState)
				Expect(cartOrderUserStateModel).ToNot(BeNil())
				cartOrderUserStateModel.State = core.StringPtr("Order_Create_Init")
				cartOrderUserStateModel.SetBy = core.StringPtr("testString")
				cartOrderUserStateModel.SetAt = CreateMockDateTime()
				cartOrderUserStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(cartOrderUserStateModel.State).To(Equal(core.StringPtr("Order_Create_Init")))
				Expect(cartOrderUserStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(cartOrderUserStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(cartOrderUserStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(cartOrderUserStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CartOrderLiteState model
				cartOrderLiteStateModel := new(schematics20apiv2.CartOrderLiteState)
				Expect(cartOrderLiteStateModel).ToNot(BeNil())
				cartOrderLiteStateModel.StatusCode = core.StringPtr("normal")
				cartOrderLiteStateModel.StatusMessage = core.StringPtr("testString")
				cartOrderLiteStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(cartOrderLiteStateModel.StatusCode).To(Equal(core.StringPtr("normal")))
				Expect(cartOrderLiteStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(cartOrderLiteStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(cartOrderLiteStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CartOrder model
				cartOrderModel := new(schematics20apiv2.CartOrder)
				Expect(cartOrderModel).ToNot(BeNil())
				cartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				cartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				cartOrderModel.Tags = []string{"testString"}
				cartOrderModel.CartItems = []schematics20apiv2.OrderItemConfiguration{*orderItemConfigurationModel}
				cartOrderModel.ServiceName = core.StringPtr("SatelliteLocation")
				cartOrderModel.ResourceGroup = core.StringPtr("testString")
				cartOrderModel.Location = core.StringPtr("us-south")
				cartOrderModel.UserState = cartOrderUserStateModel
				cartOrderModel.SysLock = systemLockModel
				cartOrderModel.State = cartOrderLiteStateModel
				cartOrderModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(cartOrderModel.Name).To(Equal(core.StringPtr("MySatelliteLocation")))
				Expect(cartOrderModel.Description).To(Equal(core.StringPtr("Creates satellite location in AWS")))
				Expect(cartOrderModel.Tags).To(Equal([]string{"testString"}))
				Expect(cartOrderModel.CartItems).To(Equal([]schematics20apiv2.OrderItemConfiguration{*orderItemConfigurationModel}))
				Expect(cartOrderModel.ServiceName).To(Equal(core.StringPtr("SatelliteLocation")))
				Expect(cartOrderModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(cartOrderModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(cartOrderModel.UserState).To(Equal(cartOrderUserStateModel))
				Expect(cartOrderModel.SysLock).To(Equal(systemLockModel))
				Expect(cartOrderModel.State).To(Equal(cartOrderLiteStateModel))
				Expect(cartOrderModel.GetProperties()).ToNot(BeEmpty())
				Expect(cartOrderModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceCartOrderOptions model
				orderID := "testString"
				operation := "testString"
				var cartOrder *schematics20apiv2.CartOrder = nil
				replaceCartOrderOptionsModel := schematics20ApiService.NewReplaceCartOrderOptions(orderID, operation, cartOrder)
				replaceCartOrderOptionsModel.SetOrderID("testString")
				replaceCartOrderOptionsModel.SetOperation("testString")
				replaceCartOrderOptionsModel.SetCartOrder(cartOrderModel)
				replaceCartOrderOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceCartOrderOptionsModel).ToNot(BeNil())
				Expect(replaceCartOrderOptionsModel.OrderID).To(Equal(core.StringPtr("testString")))
				Expect(replaceCartOrderOptionsModel.Operation).To(Equal(core.StringPtr("testString")))
				Expect(replaceCartOrderOptionsModel.CartOrder).To(Equal(cartOrderModel))
				Expect(replaceCartOrderOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceDatasetOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				Expect(datasetModel).ToNot(BeNil())
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(datasetModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(datasetModel.Type).To(Equal(core.StringPtr("credential")))
				Expect(datasetModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(datasetModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(datasetModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(datasetModel.Tags).To(Equal([]string{"testString"}))
				Expect(datasetModel.Data).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(datasetModel.Datasource).To(Equal(core.StringPtr("testString")))
				Expect(datasetModel.UserState).To(Equal(userStateModel))
				Expect(datasetModel.GetProperties()).ToNot(BeEmpty())
				Expect(datasetModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceDatasetOptions model
				datasetID := "testString"
				var dataset *schematics20apiv2.Dataset = nil
				replaceDatasetOptionsModel := schematics20ApiService.NewReplaceDatasetOptions(datasetID, dataset)
				replaceDatasetOptionsModel.SetDatasetID("testString")
				replaceDatasetOptionsModel.SetDataset(datasetModel)
				replaceDatasetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceDatasetOptionsModel).ToNot(BeNil())
				Expect(replaceDatasetOptionsModel.DatasetID).To(Equal(core.StringPtr("testString")))
				Expect(replaceDatasetOptionsModel.Dataset).To(Equal(datasetModel))
				Expect(replaceDatasetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceFlowInWorkspaceOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				Expect(templateCommandModel).ToNot(BeNil())
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateCommandModel.Command).To(Equal(core.StringPtr("workspace_plan")))
				Expect(templateCommandModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(templateCommandModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateCommandModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				Expect(templateFlowDefinitionTemplateOperationModel).ToNot(BeNil())
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowDefinitionTemplateOperationModel.PreCondition).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionTemplateOperationModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionTemplateOperationModel.OverrideCommand).To(Equal(templateCommandModel))
				Expect(templateFlowDefinitionTemplateOperationModel.PostCondition).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionTemplateOperationModel.OnError).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionTemplateOperationModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowDefinitionTemplateOperationModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				Expect(templateFlowDefinitionSimpleFlowModel).ToNot(BeNil())
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowDefinitionSimpleFlowModel.Index).To(Equal(core.Int64Ptr(int64(38))))
				Expect(templateFlowDefinitionSimpleFlowModel.Control).To(Equal(core.StringPtr("do")))
				Expect(templateFlowDefinitionSimpleFlowModel.TemplateOperation).To(Equal(templateFlowDefinitionTemplateOperationModel))
				Expect(templateFlowDefinitionSimpleFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowDefinitionSimpleFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				Expect(templateFlowDefinitionModel).ToNot(BeNil())
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowDefinitionModel.FlowType).To(Equal(core.StringPtr("simple")))
				Expect(templateFlowDefinitionModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionModel.SimpleFlow).To(Equal([]schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}))
				Expect(templateFlowDefinitionModel.CustomFlow).To(Equal(CreateMockByteArray("This is a mock byte array value.")))
				Expect(templateFlowDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				Expect(jobStatusWorkspaceTemplateFlowModel).ToNot(BeNil())
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkspaceTemplateFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceTemplateFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceTemplateFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceTemplateFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceTemplateFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkspaceTemplateFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkspaceTemplateFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				Expect(templateFlowValidationSummaryModel).ToNot(BeNil())
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowValidationSummaryModel.WarningCount).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(templateFlowValidationSummaryModel.ErrorCount).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(templateFlowValidationSummaryModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowValidationSummaryModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				Expect(templateFlowModel).ToNot(BeNil())
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowModel.Version).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowModel.Type).To(Equal(core.StringPtr("simple_flow")))
				Expect(templateFlowModel.UserState).To(Equal(userStateModel))
				Expect(templateFlowModel.Definition).To(Equal(templateFlowDefinitionModel))
				Expect(templateFlowModel.SysLock).To(Equal(systemLockModel))
				Expect(templateFlowModel.Status).To(Equal(jobStatusWorkspaceTemplateFlowModel))
				Expect(templateFlowModel.ValidationSummary).To(Equal(templateFlowValidationSummaryModel))
				Expect(templateFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceFlowInWorkspaceOptions model
				wID := "testString"
				flowID := "testString"
				replaceFlowInWorkspaceOptionsModel := schematics20ApiService.NewReplaceFlowInWorkspaceOptions(wID, flowID)
				replaceFlowInWorkspaceOptionsModel.SetWID("testString")
				replaceFlowInWorkspaceOptionsModel.SetFlowID("testString")
				replaceFlowInWorkspaceOptionsModel.SetTemplateFlow(templateFlowModel)
				replaceFlowInWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceFlowInWorkspaceOptionsModel).ToNot(BeNil())
				Expect(replaceFlowInWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(replaceFlowInWorkspaceOptionsModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(replaceFlowInWorkspaceOptionsModel.TemplateFlow).To(Equal(templateFlowModel))
				Expect(replaceFlowInWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceInventoryOptions successfully`, func() {
				// Construct an instance of the InventoryResourceDefinition model
				inventoryResourceDefinitionModel := new(schematics20apiv2.InventoryResourceDefinition)
				Expect(inventoryResourceDefinitionModel).ToNot(BeNil())
				inventoryResourceDefinitionModel.Name = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Description = core.StringPtr("testString")
				inventoryResourceDefinitionModel.Location = core.StringPtr("us-south")
				inventoryResourceDefinitionModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceDefinitionModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceDefinitionModel.ResourceQueries = []string{"testString"}
				inventoryResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(inventoryResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceDefinitionModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceDefinitionModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceDefinitionModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceDefinitionModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceDefinitionModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(inventoryResourceDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(inventoryResourceDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceInventoryOptions model
				inventoryID := "testString"
				var inventoryResourceDefinition *schematics20apiv2.InventoryResourceDefinition = nil
				replaceInventoryOptionsModel := schematics20ApiService.NewReplaceInventoryOptions(inventoryID, inventoryResourceDefinition)
				replaceInventoryOptionsModel.SetInventoryID("testString")
				replaceInventoryOptionsModel.SetInventoryResourceDefinition(inventoryResourceDefinitionModel)
				replaceInventoryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceInventoryOptionsModel).ToNot(BeNil())
				Expect(replaceInventoryOptionsModel.InventoryID).To(Equal(core.StringPtr("testString")))
				Expect(replaceInventoryOptionsModel.InventoryResourceDefinition).To(Equal(inventoryResourceDefinitionModel))
				Expect(replaceInventoryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceResourcesQueryOptions successfully`, func() {
				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematics20apiv2.ResourceQueryParam)
				Expect(resourceQueryParamModel).ToNot(BeNil())
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				resourceQueryParamModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(resourceQueryParamModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.GetProperties()).ToNot(BeEmpty())
				Expect(resourceQueryParamModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematics20apiv2.ResourceQuery)
				Expect(resourceQueryModel).ToNot(BeNil())
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematics20apiv2.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				resourceQueryModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(resourceQueryModel.QueryType).To(Equal(core.StringPtr("workspaces")))
				Expect(resourceQueryModel.QueryCondition).To(Equal([]schematics20apiv2.ResourceQueryParam{*resourceQueryParamModel}))
				Expect(resourceQueryModel.QuerySelect).To(Equal([]string{"testString"}))
				Expect(resourceQueryModel.GetProperties()).ToNot(BeEmpty())
				Expect(resourceQueryModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ResourceQueryDefinition model
				resourceQueryDefinitionModel := new(schematics20apiv2.ResourceQueryDefinition)
				Expect(resourceQueryDefinitionModel).ToNot(BeNil())
				resourceQueryDefinitionModel.Type = core.StringPtr("vsi")
				resourceQueryDefinitionModel.Name = core.StringPtr("testString")
				resourceQueryDefinitionModel.Queries = []schematics20apiv2.ResourceQuery{*resourceQueryModel}
				resourceQueryDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(resourceQueryDefinitionModel.Type).To(Equal(core.StringPtr("vsi")))
				Expect(resourceQueryDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryDefinitionModel.Queries).To(Equal([]schematics20apiv2.ResourceQuery{*resourceQueryModel}))
				Expect(resourceQueryDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(resourceQueryDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceResourcesQueryOptions model
				queryID := "testString"
				var resourceQueryDefinition *schematics20apiv2.ResourceQueryDefinition = nil
				replaceResourcesQueryOptionsModel := schematics20ApiService.NewReplaceResourcesQueryOptions(queryID, resourceQueryDefinition)
				replaceResourcesQueryOptionsModel.SetQueryID("testString")
				replaceResourcesQueryOptionsModel.SetResourceQueryDefinition(resourceQueryDefinitionModel)
				replaceResourcesQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceResourcesQueryOptionsModel).ToNot(BeNil())
				Expect(replaceResourcesQueryOptionsModel.QueryID).To(Equal(core.StringPtr("testString")))
				Expect(replaceResourcesQueryOptionsModel.ResourceQueryDefinition).To(Equal(resourceQueryDefinitionModel))
				Expect(replaceResourcesQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceTemplateInWorkspaceOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				Expect(templateModel).ToNot(BeNil())
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateModel.Name).To(Equal(core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")))
				Expect(templateModel.Description).To(Equal(core.StringPtr("This template provisions clusters in production environment")))
				Expect(templateModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(templateModel.UserState).To(Equal(userStateModel))
				Expect(templateModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(templateModel.Source).To(Equal(externalSourceModel))
				Expect(templateModel.SourceReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(templateModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(templateModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(templateModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(templateModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(templateModel.Status).To(Equal(jobStatusTemplateModel))
				Expect(templateModel.SysLock).To(Equal(systemLockModel))
				Expect(templateModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceTemplateInWorkspaceOptions model
				wID := "testString"
				tID := "testString"
				replaceTemplateInWorkspaceOptionsModel := schematics20ApiService.NewReplaceTemplateInWorkspaceOptions(wID, tID)
				replaceTemplateInWorkspaceOptionsModel.SetWID("testString")
				replaceTemplateInWorkspaceOptionsModel.SetTID("testString")
				replaceTemplateInWorkspaceOptionsModel.SetTemplate(templateModel)
				replaceTemplateInWorkspaceOptionsModel.SetXGithubToken("testString")
				replaceTemplateInWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceTemplateInWorkspaceOptionsModel).ToNot(BeNil())
				Expect(replaceTemplateInWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(replaceTemplateInWorkspaceOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(replaceTemplateInWorkspaceOptionsModel.Template).To(Equal(templateModel))
				Expect(replaceTemplateInWorkspaceOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(replaceTemplateInWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceTriggerOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				Expect(jobStatusWorkitemModel).ToNot(BeNil())
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkitemModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkitemModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkitemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkitemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				Expect(jobStatusFlowModel).ToNot(BeNil())
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.Workitems).To(Equal([]schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}))
				Expect(jobStatusFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				Expect(jobStatusWorkspaceModel).ToNot(BeNil())
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.FlowStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusWorkspaceModel.TemplateStatus).To(Equal([]schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}))
				Expect(jobStatusWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				Expect(jobStatusActionModel).ToNot(BeNil())
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusActionModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.BastionStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.BastionStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.TargetsStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.TargetsStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				Expect(jobStatusSchematicsResourcesModel).ToNot(BeNil())
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSchematicsResourcesModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSchematicsResourcesModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.SchematicsResourceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSchematicsResourcesModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSchematicsResourcesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				Expect(jobStatusSystemModel).ToNot(BeNil())
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSystemModel.SystemStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSystemModel.SystemStatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSystemModel.SchematicsResourceStatus).To(Equal([]schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}))
				Expect(jobStatusSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				Expect(jobStatusModel).ToNot(BeNil())
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusModel.PositionInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.TotalInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.WorkspaceJobStatus).To(Equal(jobStatusWorkspaceModel))
				Expect(jobStatusModel.ActionJobStatus).To(Equal(jobStatusActionModel))
				Expect(jobStatusModel.SystemJobStatus).To(Equal(jobStatusSystemModel))
				Expect(jobStatusModel.FlowJobStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				Expect(jobDataTemplateModel).ToNot(BeNil())
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobDataTemplateModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				Expect(jobDataWorkspaceModel).ToNot(BeNil())
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.TemplateData).To(Equal([]schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}))
				Expect(jobDataWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				Expect(inventoryResourceRecordModel).ToNot(BeNil())
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(inventoryResourceRecordModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceRecordModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(inventoryResourceRecordModel.GetProperties()).ToNot(BeEmpty())
				Expect(inventoryResourceRecordModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				Expect(jobDataActionModel).ToNot(BeNil())
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataActionModel.InventoryRecord).To(Equal(inventoryResourceRecordModel))
				Expect(jobDataActionModel.MaterializedInventory).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				Expect(jobDataSystemModel).ToNot(BeNil())
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataSystemModel.KeyID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataSystemModel.SchematicsResourceID).To(Equal([]string{"testString"}))
				Expect(jobDataSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				Expect(jobDataWorkItemLastJobModel).ToNot(BeNil())
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemLastJobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobDataWorkItemLastJobModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.JobStatus).To(Equal(core.StringPtr("job_pending")))
				Expect(jobDataWorkItemLastJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemLastJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				Expect(jobDataWorkItemModel).ToNot(BeNil())
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.Layers).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(jobDataWorkItemModel.Source).To(Equal(externalSourceModel))
				Expect(jobDataWorkItemModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.LastJob).To(Equal(jobDataWorkItemLastJobModel))
				Expect(jobDataWorkItemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkItemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				Expect(jobDataFlowModel).ToNot(BeNil())
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.Workitems).To(Equal([]schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}))
				Expect(jobDataFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				Expect(jobDataModel).ToNot(BeNil())
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobDataModel.WorkspaceJobData).To(Equal(jobDataWorkspaceModel))
				Expect(jobDataModel.ActionJobData).To(Equal(jobDataActionModel))
				Expect(jobDataModel.SystemJobData).To(Equal(jobDataSystemModel))
				Expect(jobDataModel.FlowJobData).To(Equal(jobDataFlowModel))
				Expect(jobDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(bastionResourceDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				Expect(jobLogSummaryRepoDownloadJobModel).ToNot(BeNil())
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				Expect(jobLogSummaryWorkspaceJobModel).ToNot(BeNil())
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkspaceJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkspaceJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				Expect(jobLogSummaryWorkitemsModel).ToNot(BeNil())
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkitemsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.LogURL).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkitemsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				Expect(jobLogSummaryFlowJobModel).ToNot(BeNil())
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryFlowJobModel.Workitems).To(Equal([]schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}))
				Expect(jobLogSummaryFlowJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryFlowJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				Expect(jobLogSummaryActionJobRecapModel).ToNot(BeNil())
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobRecapModel.Target).To(Equal([]string{"testString"}))
				Expect(jobLogSummaryActionJobRecapModel.Ok).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Changed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Skipped).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Unreachable).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobRecapModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				Expect(jobLogSummaryActionJobModel).ToNot(BeNil())
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobModel.Recap).To(Equal(jobLogSummaryActionJobRecapModel))
				Expect(jobLogSummaryActionJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				Expect(jobLogSummarySystemJobModel).ToNot(BeNil())
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummarySystemJobModel.Success).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummarySystemJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				Expect(jobLogSummaryModel).ToNot(BeNil())
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobLogSummaryModel.RepoDownloadJob).To(Equal(jobLogSummaryRepoDownloadJobModel))
				Expect(jobLogSummaryModel.WorkspaceJob).To(Equal(jobLogSummaryWorkspaceJobModel))
				Expect(jobLogSummaryModel.FlowJob).To(Equal(jobLogSummaryFlowJobModel))
				Expect(jobLogSummaryModel.ActionJob).To(Equal(jobLogSummaryActionJobModel))
				Expect(jobLogSummaryModel.SystemJob).To(Equal(jobLogSummarySystemJobModel))
				Expect(jobLogSummaryModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				Expect(jobModel).ToNot(BeNil())
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(jobModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Tags).To(Equal([]string{"testString"}))
				Expect(jobModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(jobModel.Status).To(Equal(jobStatusModel))
				Expect(jobModel.Data).To(Equal(jobDataModel))
				Expect(jobModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(jobModel.LogSummary).To(Equal(jobLogSummaryModel))
				Expect(jobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				Expect(triggerJobModel).ToNot(BeNil())
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerJobModel.Event).To(Equal(core.StringPtr("before | after")))
				Expect(triggerJobModel.Job).To(Equal(jobModel))
				Expect(triggerJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				Expect(triggerScheduledModel).ToNot(BeNil())
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerScheduledModel.Frequency).To(Equal(core.StringPtr("daily | weekly")))
				Expect(triggerScheduledModel.Time).To(Equal(core.StringPtr("time in UTC")))
				Expect(triggerScheduledModel.Day).To(Equal(core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")))
				Expect(triggerScheduledModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerScheduledModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Trigger model
				triggerModel := new(schematics20apiv2.Trigger)
				Expect(triggerModel).ToNot(BeNil())
				triggerModel.Name = core.StringPtr("testString")
				triggerModel.Type = core.StringPtr("action")
				triggerModel.Description = core.StringPtr("testString")
				triggerModel.ResourceGroup = core.StringPtr("testString")
				triggerModel.ServiceID = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Apikey = CreateMockByteArray("This is a mock byte array value.")
				triggerModel.Location = core.StringPtr("us-south")
				triggerModel.Tags = []string{"testString"}
				triggerModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				triggerModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				triggerModel.UserState = userStateModel
				triggerModel.SysLock = systemLockModel
				triggerModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(triggerModel.Type).To(Equal(core.StringPtr("action")))
				Expect(triggerModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(triggerModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(triggerModel.ServiceID).To(Equal(CreateMockByteArray("This is a mock byte array value.")))
				Expect(triggerModel.Apikey).To(Equal(CreateMockByteArray("This is a mock byte array value.")))
				Expect(triggerModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(triggerModel.Tags).To(Equal([]string{"testString"}))
				Expect(triggerModel.JobTriggers).To(Equal([]schematics20apiv2.TriggerJob{*triggerJobModel}))
				Expect(triggerModel.ScheduledTriggers).To(Equal([]schematics20apiv2.TriggerScheduled{*triggerScheduledModel}))
				Expect(triggerModel.UserState).To(Equal(userStateModel))
				Expect(triggerModel.SysLock).To(Equal(systemLockModel))
				Expect(triggerModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceTriggerOptions model
				triggerID := "testString"
				var trigger *schematics20apiv2.Trigger = nil
				replaceTriggerOptionsModel := schematics20ApiService.NewReplaceTriggerOptions(triggerID, trigger)
				replaceTriggerOptionsModel.SetTriggerID("testString")
				replaceTriggerOptionsModel.SetTrigger(triggerModel)
				replaceTriggerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceTriggerOptionsModel).ToNot(BeNil())
				Expect(replaceTriggerOptionsModel.TriggerID).To(Equal(core.StringPtr("testString")))
				Expect(replaceTriggerOptionsModel.Trigger).To(Equal(triggerModel))
				Expect(replaceTriggerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceWebhookOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WebHook model
				webHookModel := new(schematics20apiv2.WebHook)
				Expect(webHookModel).ToNot(BeNil())
				webHookModel.CommandName = core.StringPtr("workspace_plan")
				webHookModel.HookType = core.StringPtr("hook")
				webHookModel.HookSite = core.StringPtr("before")
				webHookModel.Location = core.StringPtr("us-south")
				webHookModel.ResourceGroup = core.StringPtr("testString")
				webHookModel.Tags = []string{"testString"}
				webHookModel.HookEndpointURL = core.StringPtr("testString")
				webHookModel.ServiceID = core.StringPtr("testString")
				webHookModel.Apikey = core.StringPtr("testString")
				webHookModel.UserState = userStateModel
				webHookModel.IgnoreInflightOperations = core.BoolPtr(true)
				webHookModel.SysLock = systemLockModel
				webHookModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(webHookModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(webHookModel.HookType).To(Equal(core.StringPtr("hook")))
				Expect(webHookModel.HookSite).To(Equal(core.StringPtr("before")))
				Expect(webHookModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(webHookModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(webHookModel.Tags).To(Equal([]string{"testString"}))
				Expect(webHookModel.HookEndpointURL).To(Equal(core.StringPtr("testString")))
				Expect(webHookModel.ServiceID).To(Equal(core.StringPtr("testString")))
				Expect(webHookModel.Apikey).To(Equal(core.StringPtr("testString")))
				Expect(webHookModel.UserState).To(Equal(userStateModel))
				Expect(webHookModel.IgnoreInflightOperations).To(Equal(core.BoolPtr(true)))
				Expect(webHookModel.SysLock).To(Equal(systemLockModel))
				Expect(webHookModel.GetProperties()).ToNot(BeEmpty())
				Expect(webHookModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceWebhookOptions model
				hookID := "testString"
				var webHook *schematics20apiv2.WebHook = nil
				replaceWebhookOptionsModel := schematics20ApiService.NewReplaceWebhookOptions(hookID, webHook)
				replaceWebhookOptionsModel.SetHookID("testString")
				replaceWebhookOptionsModel.SetWebHook(webHookModel)
				replaceWebhookOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceWebhookOptionsModel).ToNot(BeNil())
				Expect(replaceWebhookOptionsModel.HookID).To(Equal(core.StringPtr("testString")))
				Expect(replaceWebhookOptionsModel.WebHook).To(Equal(webHookModel))
				Expect(replaceWebhookOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceWorkspaceOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				Expect(workspaceLiteStateModel).ToNot(BeNil())
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(workspaceLiteStateModel.StatusCode).To(Equal(core.StringPtr("normal")))
				Expect(workspaceLiteStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(workspaceLiteStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(workspaceLiteStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				Expect(workspaceModel).ToNot(BeNil())
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(workspaceModel.Name).To(Equal(core.StringPtr("My Workspace")))
				Expect(workspaceModel.Description).To(Equal(core.StringPtr("This workspace manages front-end micro service for production environment")))
				Expect(workspaceModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(workspaceModel.Tags).To(Equal([]string{"testString"}))
				Expect(workspaceModel.DestroyResourcesOnDelete).To(Equal(core.BoolPtr(true)))
				Expect(workspaceModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(workspaceModel.UserState).To(Equal(userStateModel))
				Expect(workspaceModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(workspaceModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(workspaceModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(workspaceModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(workspaceModel.State).To(Equal(workspaceLiteStateModel))
				Expect(workspaceModel.SysLock).To(Equal(systemLockModel))
				Expect(workspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(workspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceWorkspaceOptions model
				wID := "testString"
				var workspace *schematics20apiv2.Workspace = nil
				replaceWorkspaceOptionsModel := schematics20ApiService.NewReplaceWorkspaceOptions(wID, workspace)
				replaceWorkspaceOptionsModel.SetWID("testString")
				replaceWorkspaceOptionsModel.SetWorkspace(workspaceModel)
				replaceWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceWorkspaceOptionsModel).ToNot(BeNil())
				Expect(replaceWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceOptionsModel.Workspace).To(Equal(workspaceModel))
				Expect(replaceWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRunFulfilmentOperationOptions successfully`, func() {
				// Construct an instance of the RunFulfilmentOperationOptions model
				orderID := "testString"
				operation := "testString"
				runFulfilmentOperationOptionsModel := schematics20ApiService.NewRunFulfilmentOperationOptions(orderID, operation)
				runFulfilmentOperationOptionsModel.SetOrderID("testString")
				runFulfilmentOperationOptionsModel.SetOperation("testString")
				runFulfilmentOperationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(runFulfilmentOperationOptionsModel).ToNot(BeNil())
				Expect(runFulfilmentOperationOptionsModel.OrderID).To(Equal(core.StringPtr("testString")))
				Expect(runFulfilmentOperationOptionsModel.Operation).To(Equal(core.StringPtr("testString")))
				Expect(runFulfilmentOperationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateActionOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematics20apiv2.CredentialVariableMetadata)
				Expect(credentialVariableMetadataModel).ToNot(BeNil())
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")
				credentialVariableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(credentialVariableMetadataModel.Type).To(Equal(core.StringPtr("string")))
				Expect(credentialVariableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(credentialVariableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(credentialVariableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(credentialVariableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(credentialVariableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematics20apiv2.CredentialVariableData)
				Expect(credentialVariableDataModel).ToNot(BeNil())
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel
				credentialVariableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(credentialVariableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableDataModel.Metadata).To(Equal(credentialVariableMetadataModel))
				Expect(credentialVariableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(credentialVariableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(bastionResourceDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ActionState model
				actionStateModel := new(schematics20apiv2.ActionState)
				Expect(actionStateModel).ToNot(BeNil())
				actionStateModel.StatusCode = core.StringPtr("normal")
				actionStateModel.StatusJobID = core.StringPtr("testString")
				actionStateModel.StatusMessage = core.StringPtr("testString")
				actionStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(actionStateModel.StatusCode).To(Equal(core.StringPtr("normal")))
				Expect(actionStateModel.StatusJobID).To(Equal(core.StringPtr("testString")))
				Expect(actionStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(actionStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(actionStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Action model
				actionModel := new(schematics20apiv2.Action)
				Expect(actionModel).ToNot(BeNil())
				actionModel.Name = core.StringPtr("Stop Action")
				actionModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				actionModel.Location = core.StringPtr("us-south")
				actionModel.ResourceGroup = core.StringPtr("testString")
				actionModel.BastionConnectionType = core.StringPtr("ssh")
				actionModel.InventoryConnectionType = core.StringPtr("ssh")
				actionModel.Tags = []string{"testString"}
				actionModel.UserState = userStateModel
				actionModel.SourceReadmeURL = core.StringPtr("testString")
				actionModel.Source = externalSourceModel
				actionModel.SourceType = core.StringPtr("local")
				actionModel.CommandParameter = core.StringPtr("testString")
				actionModel.Inventory = core.StringPtr("testString")
				actionModel.Credentials = []schematics20apiv2.CredentialVariableData{*credentialVariableDataModel}
				actionModel.Bastion = bastionResourceDefinitionModel
				actionModel.BastionCredential = credentialVariableDataModel
				actionModel.TargetsIni = core.StringPtr("testString")
				actionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				actionModel.State = actionStateModel
				actionModel.SysLock = systemLockModel
				actionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(actionModel.Name).To(Equal(core.StringPtr("Stop Action")))
				Expect(actionModel.Description).To(Equal(core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")))
				Expect(actionModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(actionModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(actionModel.BastionConnectionType).To(Equal(core.StringPtr("ssh")))
				Expect(actionModel.InventoryConnectionType).To(Equal(core.StringPtr("ssh")))
				Expect(actionModel.Tags).To(Equal([]string{"testString"}))
				Expect(actionModel.UserState).To(Equal(userStateModel))
				Expect(actionModel.SourceReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(actionModel.Source).To(Equal(externalSourceModel))
				Expect(actionModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(actionModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(actionModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(actionModel.Credentials).To(Equal([]schematics20apiv2.CredentialVariableData{*credentialVariableDataModel}))
				Expect(actionModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(actionModel.BastionCredential).To(Equal(credentialVariableDataModel))
				Expect(actionModel.TargetsIni).To(Equal(core.StringPtr("testString")))
				Expect(actionModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(actionModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(actionModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(actionModel.State).To(Equal(actionStateModel))
				Expect(actionModel.SysLock).To(Equal(systemLockModel))
				Expect(actionModel.GetProperties()).ToNot(BeEmpty())
				Expect(actionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateActionOptions model
				actionID := "testString"
				var action *schematics20apiv2.Action = nil
				updateActionOptionsModel := schematics20ApiService.NewUpdateActionOptions(actionID, action)
				updateActionOptionsModel.SetActionID("testString")
				updateActionOptionsModel.SetAction(actionModel)
				updateActionOptionsModel.SetXGithubToken("testString")
				updateActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateActionOptionsModel).ToNot(BeNil())
				Expect(updateActionOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Action).To(Equal(actionModel))
				Expect(updateActionOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateAgentRegistrationOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the AgentHealth model
				agentHealthModel := new(schematics20apiv2.AgentHealth)
				Expect(agentHealthModel).ToNot(BeNil())
				agentHealthModel.State = core.StringPtr("Connected")
				agentHealthModel.CheckedAt = CreateMockDateTime()
				agentHealthModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(agentHealthModel.State).To(Equal(core.StringPtr("Connected")))
				Expect(agentHealthModel.CheckedAt).To(Equal(CreateMockDateTime()))
				Expect(agentHealthModel.GetProperties()).ToNot(BeEmpty())
				Expect(agentHealthModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the AgentSystemState model
				agentSystemStateModel := new(schematics20apiv2.AgentSystemState)
				Expect(agentSystemStateModel).ToNot(BeNil())
				agentSystemStateModel.State = core.StringPtr("error")
				agentSystemStateModel.Message = core.StringPtr("testString")
				agentSystemStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(agentSystemStateModel.State).To(Equal(core.StringPtr("error")))
				Expect(agentSystemStateModel.Message).To(Equal(core.StringPtr("testString")))
				Expect(agentSystemStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(agentSystemStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Agent model
				agentModel := new(schematics20apiv2.Agent)
				Expect(agentModel).ToNot(BeNil())
				agentModel.Name = core.StringPtr("MyDevAgent")
				agentModel.Description = core.StringPtr("Register agent")
				agentModel.ResourceGroup = core.StringPtr("testString")
				agentModel.Tags = []string{"testString"}
				agentModel.Location = core.StringPtr("us-south")
				agentModel.ProfileID = core.StringPtr("testString")
				agentModel.AgentID = core.StringPtr("testString")
				agentModel.UserState = userStateModel
				agentModel.AgentHealth = agentHealthModel
				agentModel.SystemState = agentSystemStateModel
				agentModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(agentModel.Name).To(Equal(core.StringPtr("MyDevAgent")))
				Expect(agentModel.Description).To(Equal(core.StringPtr("Register agent")))
				Expect(agentModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(agentModel.Tags).To(Equal([]string{"testString"}))
				Expect(agentModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(agentModel.ProfileID).To(Equal(core.StringPtr("testString")))
				Expect(agentModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(agentModel.UserState).To(Equal(userStateModel))
				Expect(agentModel.AgentHealth).To(Equal(agentHealthModel))
				Expect(agentModel.SystemState).To(Equal(agentSystemStateModel))
				Expect(agentModel.GetProperties()).ToNot(BeEmpty())
				Expect(agentModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateAgentRegistrationOptions model
				agentID := "testString"
				var agent *schematics20apiv2.Agent = nil
				updateAgentRegistrationOptionsModel := schematics20ApiService.NewUpdateAgentRegistrationOptions(agentID, agent)
				updateAgentRegistrationOptionsModel.SetAgentID("testString")
				updateAgentRegistrationOptionsModel.SetAgent(agentModel)
				updateAgentRegistrationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateAgentRegistrationOptionsModel).ToNot(BeNil())
				Expect(updateAgentRegistrationOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(updateAgentRegistrationOptionsModel.Agent).To(Equal(agentModel))
				Expect(updateAgentRegistrationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateAtasetOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Dataset model
				datasetModel := new(schematics20apiv2.Dataset)
				Expect(datasetModel).ToNot(BeNil())
				datasetModel.Name = core.StringPtr("testString")
				datasetModel.Type = core.StringPtr("credential")
				datasetModel.Description = core.StringPtr("testString")
				datasetModel.ResourceGroup = core.StringPtr("testString")
				datasetModel.Location = core.StringPtr("us-south")
				datasetModel.Tags = []string{"testString"}
				datasetModel.Data = []schematics20apiv2.VariableData{*variableDataModel}
				datasetModel.Datasource = core.StringPtr("testString")
				datasetModel.UserState = userStateModel
				datasetModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(datasetModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(datasetModel.Type).To(Equal(core.StringPtr("credential")))
				Expect(datasetModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(datasetModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(datasetModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(datasetModel.Tags).To(Equal([]string{"testString"}))
				Expect(datasetModel.Data).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(datasetModel.Datasource).To(Equal(core.StringPtr("testString")))
				Expect(datasetModel.UserState).To(Equal(userStateModel))
				Expect(datasetModel.GetProperties()).ToNot(BeEmpty())
				Expect(datasetModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateAtasetOptions model
				datasetID := "testString"
				var dataset *schematics20apiv2.Dataset = nil
				updateAtasetOptionsModel := schematics20ApiService.NewUpdateAtasetOptions(datasetID, dataset)
				updateAtasetOptionsModel.SetDatasetID("testString")
				updateAtasetOptionsModel.SetDataset(datasetModel)
				updateAtasetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateAtasetOptionsModel).ToNot(BeNil())
				Expect(updateAtasetOptionsModel.DatasetID).To(Equal(core.StringPtr("testString")))
				Expect(updateAtasetOptionsModel.Dataset).To(Equal(datasetModel))
				Expect(updateAtasetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateBlueprintOptions successfully`, func() {
				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BlueprintVariableData model
				blueprintVariableDataModel := new(schematics20apiv2.BlueprintVariableData)
				Expect(blueprintVariableDataModel).ToNot(BeNil())
				blueprintVariableDataModel.Name = core.StringPtr("testString")
				blueprintVariableDataModel.Value = core.StringPtr("testString")
				blueprintVariableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintVariableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(blueprintVariableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(blueprintVariableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintVariableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematics20apiv2.BlueprintConfigItem)
				Expect(blueprintConfigItemModel).ToNot(BeNil())
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}
				blueprintConfigItemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintConfigItemModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(blueprintConfigItemModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(blueprintConfigItemModel.Source).To(Equal(externalSourceModel))
				Expect(blueprintConfigItemModel.Inputs).To(Equal([]schematics20apiv2.BlueprintVariableData{*blueprintVariableDataModel}))
				Expect(blueprintConfigItemModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintConfigItemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematics20apiv2.BlueprintFlow)
				Expect(blueprintFlowModel).ToNot(BeNil())
				blueprintFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BlueprintLiteState model
				blueprintLiteStateModel := new(schematics20apiv2.BlueprintLiteState)
				Expect(blueprintLiteStateModel).ToNot(BeNil())
				blueprintLiteStateModel.StatusCode = core.StringPtr("Blueprint_Create_Init")
				blueprintLiteStateModel.StatusMessage = core.StringPtr("testString")
				blueprintLiteStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintLiteStateModel.StatusCode).To(Equal(core.StringPtr("Blueprint_Create_Init")))
				Expect(blueprintLiteStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(blueprintLiteStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintLiteStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Blueprint model
				blueprintModel := new(schematics20apiv2.Blueprint)
				Expect(blueprintModel).ToNot(BeNil())
				blueprintModel.Name = core.StringPtr("Toronto Dev Environtment")
				blueprintModel.SchemaVersion = core.StringPtr("1.0")
				blueprintModel.Source = externalSourceModel
				blueprintModel.Config = []schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}
				blueprintModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				blueprintModel.ResourceGroup = core.StringPtr("Default")
				blueprintModel.Tags = []string{"testString"}
				blueprintModel.Location = core.StringPtr("us-south")
				blueprintModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				blueprintModel.Flow = blueprintFlowModel
				blueprintModel.SysLock = systemLockModel
				blueprintModel.UserState = userStateModel
				blueprintModel.State = blueprintLiteStateModel
				blueprintModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(blueprintModel.Name).To(Equal(core.StringPtr("Toronto Dev Environtment")))
				Expect(blueprintModel.SchemaVersion).To(Equal(core.StringPtr("1.0")))
				Expect(blueprintModel.Source).To(Equal(externalSourceModel))
				Expect(blueprintModel.Config).To(Equal([]schematics20apiv2.BlueprintConfigItem{*blueprintConfigItemModel}))
				Expect(blueprintModel.Description).To(Equal(core.StringPtr("Deploys dev environtment instance in Toronto Region")))
				Expect(blueprintModel.ResourceGroup).To(Equal(core.StringPtr("Default")))
				Expect(blueprintModel.Tags).To(Equal([]string{"testString"}))
				Expect(blueprintModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(blueprintModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(blueprintModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(blueprintModel.Flow).To(Equal(blueprintFlowModel))
				Expect(blueprintModel.SysLock).To(Equal(systemLockModel))
				Expect(blueprintModel.UserState).To(Equal(userStateModel))
				Expect(blueprintModel.State).To(Equal(blueprintLiteStateModel))
				Expect(blueprintModel.GetProperties()).ToNot(BeEmpty())
				Expect(blueprintModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateBlueprintOptions model
				blueprintID := "testString"
				var blueprint *schematics20apiv2.Blueprint = nil
				updateBlueprintOptionsModel := schematics20ApiService.NewUpdateBlueprintOptions(blueprintID, blueprint)
				updateBlueprintOptionsModel.SetBlueprintID("testString")
				updateBlueprintOptionsModel.SetBlueprint(blueprintModel)
				updateBlueprintOptionsModel.SetProfile("ids")
				updateBlueprintOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateBlueprintOptionsModel).ToNot(BeNil())
				Expect(updateBlueprintOptionsModel.BlueprintID).To(Equal(core.StringPtr("testString")))
				Expect(updateBlueprintOptionsModel.Blueprint).To(Equal(blueprintModel))
				Expect(updateBlueprintOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(updateBlueprintOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateCapsuleOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				Expect(jobStatusWorkitemModel).ToNot(BeNil())
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkitemModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkitemModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkitemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkitemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				Expect(jobStatusFlowModel).ToNot(BeNil())
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.Workitems).To(Equal([]schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}))
				Expect(jobStatusFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				Expect(jobStatusWorkspaceModel).ToNot(BeNil())
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.FlowStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusWorkspaceModel.TemplateStatus).To(Equal([]schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}))
				Expect(jobStatusWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				Expect(jobStatusActionModel).ToNot(BeNil())
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusActionModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.BastionStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.BastionStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.TargetsStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.TargetsStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				Expect(jobStatusSchematicsResourcesModel).ToNot(BeNil())
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSchematicsResourcesModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSchematicsResourcesModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.SchematicsResourceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSchematicsResourcesModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSchematicsResourcesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				Expect(jobStatusSystemModel).ToNot(BeNil())
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSystemModel.SystemStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSystemModel.SystemStatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSystemModel.SchematicsResourceStatus).To(Equal([]schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}))
				Expect(jobStatusSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				Expect(jobStatusModel).ToNot(BeNil())
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusModel.PositionInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.TotalInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.WorkspaceJobStatus).To(Equal(jobStatusWorkspaceModel))
				Expect(jobStatusModel.ActionJobStatus).To(Equal(jobStatusActionModel))
				Expect(jobStatusModel.SystemJobStatus).To(Equal(jobStatusSystemModel))
				Expect(jobStatusModel.FlowJobStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				Expect(jobDataTemplateModel).ToNot(BeNil())
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobDataTemplateModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				Expect(jobDataWorkspaceModel).ToNot(BeNil())
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.TemplateData).To(Equal([]schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}))
				Expect(jobDataWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				Expect(inventoryResourceRecordModel).ToNot(BeNil())
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(inventoryResourceRecordModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceRecordModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(inventoryResourceRecordModel.GetProperties()).ToNot(BeEmpty())
				Expect(inventoryResourceRecordModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				Expect(jobDataActionModel).ToNot(BeNil())
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataActionModel.InventoryRecord).To(Equal(inventoryResourceRecordModel))
				Expect(jobDataActionModel.MaterializedInventory).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				Expect(jobDataSystemModel).ToNot(BeNil())
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataSystemModel.KeyID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataSystemModel.SchematicsResourceID).To(Equal([]string{"testString"}))
				Expect(jobDataSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				Expect(jobDataWorkItemLastJobModel).ToNot(BeNil())
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemLastJobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobDataWorkItemLastJobModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.JobStatus).To(Equal(core.StringPtr("job_pending")))
				Expect(jobDataWorkItemLastJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemLastJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				Expect(jobDataWorkItemModel).ToNot(BeNil())
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.Layers).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(jobDataWorkItemModel.Source).To(Equal(externalSourceModel))
				Expect(jobDataWorkItemModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.LastJob).To(Equal(jobDataWorkItemLastJobModel))
				Expect(jobDataWorkItemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkItemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				Expect(jobDataFlowModel).ToNot(BeNil())
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.Workitems).To(Equal([]schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}))
				Expect(jobDataFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				Expect(jobDataModel).ToNot(BeNil())
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobDataModel.WorkspaceJobData).To(Equal(jobDataWorkspaceModel))
				Expect(jobDataModel.ActionJobData).To(Equal(jobDataActionModel))
				Expect(jobDataModel.SystemJobData).To(Equal(jobDataSystemModel))
				Expect(jobDataModel.FlowJobData).To(Equal(jobDataFlowModel))
				Expect(jobDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(bastionResourceDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				Expect(jobLogSummaryRepoDownloadJobModel).ToNot(BeNil())
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				Expect(jobLogSummaryWorkspaceJobModel).ToNot(BeNil())
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkspaceJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkspaceJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				Expect(jobLogSummaryWorkitemsModel).ToNot(BeNil())
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkitemsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.LogURL).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkitemsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				Expect(jobLogSummaryFlowJobModel).ToNot(BeNil())
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryFlowJobModel.Workitems).To(Equal([]schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}))
				Expect(jobLogSummaryFlowJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryFlowJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				Expect(jobLogSummaryActionJobRecapModel).ToNot(BeNil())
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobRecapModel.Target).To(Equal([]string{"testString"}))
				Expect(jobLogSummaryActionJobRecapModel.Ok).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Changed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Skipped).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Unreachable).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobRecapModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				Expect(jobLogSummaryActionJobModel).ToNot(BeNil())
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobModel.Recap).To(Equal(jobLogSummaryActionJobRecapModel))
				Expect(jobLogSummaryActionJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				Expect(jobLogSummarySystemJobModel).ToNot(BeNil())
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummarySystemJobModel.Success).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummarySystemJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				Expect(jobLogSummaryModel).ToNot(BeNil())
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobLogSummaryModel.RepoDownloadJob).To(Equal(jobLogSummaryRepoDownloadJobModel))
				Expect(jobLogSummaryModel.WorkspaceJob).To(Equal(jobLogSummaryWorkspaceJobModel))
				Expect(jobLogSummaryModel.FlowJob).To(Equal(jobLogSummaryFlowJobModel))
				Expect(jobLogSummaryModel.ActionJob).To(Equal(jobLogSummaryActionJobModel))
				Expect(jobLogSummaryModel.SystemJob).To(Equal(jobLogSummarySystemJobModel))
				Expect(jobLogSummaryModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				Expect(jobModel).ToNot(BeNil())
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(jobModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Tags).To(Equal([]string{"testString"}))
				Expect(jobModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(jobModel.Status).To(Equal(jobStatusModel))
				Expect(jobModel.Data).To(Equal(jobDataModel))
				Expect(jobModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(jobModel.LogSummary).To(Equal(jobLogSummaryModel))
				Expect(jobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				Expect(triggerJobModel).ToNot(BeNil())
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerJobModel.Event).To(Equal(core.StringPtr("before | after")))
				Expect(triggerJobModel.Job).To(Equal(jobModel))
				Expect(triggerJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				Expect(triggerScheduledModel).ToNot(BeNil())
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerScheduledModel.Frequency).To(Equal(core.StringPtr("daily | weekly")))
				Expect(triggerScheduledModel.Time).To(Equal(core.StringPtr("time in UTC")))
				Expect(triggerScheduledModel.Day).To(Equal(core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")))
				Expect(triggerScheduledModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerScheduledModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				Expect(controlsDecisionModel).ToNot(BeNil())
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsDecisionModel.Rule).To(Equal(core.StringPtr("testString")))
				Expect(controlsDecisionModel.PassValue).To(Equal(core.StringPtr("before")))
				Expect(controlsDecisionModel.PassExpr).To(Equal(core.StringPtr("== OR != OR <= OR >= OR > OR <")))
				Expect(controlsDecisionModel.EvidenceFoundIn).To(Equal(core.StringPtr("rule emitting details")))
				Expect(controlsDecisionModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsDecisionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				Expect(controlsEscalationModel).ToNot(BeNil())
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsEscalationModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(controlsEscalationModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsEscalationModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				Expect(controlsLiteStateModel).ToNot(BeNil())
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsLiteStateModel.StatusCode).To(Equal(core.StringPtr("normal")))
				Expect(controlsLiteStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(controlsLiteStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsLiteStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				Expect(capsuleResultResourcesModel).ToNot(BeNil())
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(capsuleResultResourcesModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(capsuleResultResourcesModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(capsuleResultResourcesModel.GetProperties()).ToNot(BeEmpty())
				Expect(capsuleResultResourcesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				Expect(capsuleResultEvidencesModel).ToNot(BeNil())
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(capsuleResultEvidencesModel.Resources).To(Equal([]schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}))
				Expect(capsuleResultEvidencesModel.GetProperties()).ToNot(BeEmpty())
				Expect(capsuleResultEvidencesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				Expect(jobResultCapsuleModel).ToNot(BeNil())
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobResultCapsuleModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobResultCapsuleModel.JobName).To(Equal(core.StringPtr("testString")))
				Expect(jobResultCapsuleModel.Policy).To(Equal(core.StringPtr("testString")))
				Expect(jobResultCapsuleModel.Severity).To(Equal(core.Int64Ptr(int64(1))))
				Expect(jobResultCapsuleModel.JobState).To(Equal(core.StringPtr("success")))
				Expect(jobResultCapsuleModel.Failures).To(Equal([]string{"testString"}))
				Expect(jobResultCapsuleModel.Passed).To(Equal([]string{"testString"}))
				Expect(jobResultCapsuleModel.Evidences).To(Equal([]schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}))
				Expect(jobResultCapsuleModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobResultCapsuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobResultCapsuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				Expect(jobDataCapsuleModel).ToNot(BeNil())
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataCapsuleModel.CapsuleID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataCapsuleModel.CalsuleName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataCapsuleModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataCapsuleModel.Results).To(Equal([]schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}))
				Expect(jobDataCapsuleModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataCapsuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataCapsuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				Expect(capsuleModel).ToNot(BeNil())
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(capsuleModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.UserState).To(Equal(userStateModel))
				Expect(capsuleModel.Package).To(Equal(core.StringPtr("Policy package path")))
				Expect(capsuleModel.Severity).To(Equal(core.Int64Ptr(int64(1))))
				Expect(capsuleModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.TriggerRecordID).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.JobTriggers).To(Equal([]schematics20apiv2.TriggerJob{*triggerJobModel}))
				Expect(capsuleModel.ScheduledTriggers).To(Equal([]schematics20apiv2.TriggerScheduled{*triggerScheduledModel}))
				Expect(capsuleModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(capsuleModel.Decisions).To(Equal([]schematics20apiv2.ControlsDecision{*controlsDecisionModel}))
				Expect(capsuleModel.Escalations).To(Equal([]schematics20apiv2.ControlsEscalation{*controlsEscalationModel}))
				Expect(capsuleModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.ControlsID).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.ControlsName).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.CreatedAt).To(Equal(CreateMockDateTime()))
				Expect(capsuleModel.CreatedBy).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(capsuleModel.UpdatedBy).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.State).To(Equal(controlsLiteStateModel))
				Expect(capsuleModel.LastJobData).To(Equal(jobDataCapsuleModel))
				Expect(capsuleModel.SysLock).To(Equal(systemLockModel))
				Expect(capsuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(capsuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateCapsuleOptions model
				controlsID := "testString"
				capsuleID := "testString"
				var capsule *schematics20apiv2.Capsule = nil
				updateCapsuleOptionsModel := schematics20ApiService.NewUpdateCapsuleOptions(controlsID, capsuleID, capsule)
				updateCapsuleOptionsModel.SetControlsID("testString")
				updateCapsuleOptionsModel.SetCapsuleID("testString")
				updateCapsuleOptionsModel.SetCapsule(capsuleModel)
				updateCapsuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateCapsuleOptionsModel).ToNot(BeNil())
				Expect(updateCapsuleOptionsModel.ControlsID).To(Equal(core.StringPtr("testString")))
				Expect(updateCapsuleOptionsModel.CapsuleID).To(Equal(core.StringPtr("testString")))
				Expect(updateCapsuleOptionsModel.Capsule).To(Equal(capsuleModel))
				Expect(updateCapsuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateCartOrderOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TargetRequest model
				targetRequestModel := new(schematics20apiv2.TargetRequest)
				Expect(targetRequestModel).ToNot(BeNil())
				targetRequestModel.ClusterID = core.StringPtr("testString")
				targetRequestModel.ClusterName = core.StringPtr("testString")
				targetRequestModel.EntitlementKey = map[string]interface{}{"anyKey": "anyValue"}
				targetRequestModel.Namespace = core.StringPtr("testString")
				targetRequestModel.Region = core.StringPtr("testString")
				targetRequestModel.ResourceGroupID = core.StringPtr("testString")
				targetRequestModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(targetRequestModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.ClusterName).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.EntitlementKey).To(Equal(map[string]interface{}{"anyKey": "anyValue"}))
				Expect(targetRequestModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(targetRequestModel.GetProperties()).ToNot(BeEmpty())
				Expect(targetRequestModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ServiceMappingRule model
				serviceMappingRuleModel := new(schematics20apiv2.ServiceMappingRule)
				Expect(serviceMappingRuleModel).ToNot(BeNil())
				serviceMappingRuleModel.Type = core.StringPtr("testString")
				serviceMappingRuleModel.InputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.OutputParamName = core.StringPtr("testString")
				serviceMappingRuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(serviceMappingRuleModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(serviceMappingRuleModel.InputParamName).To(Equal(core.StringPtr("testString")))
				Expect(serviceMappingRuleModel.OutputParamName).To(Equal(core.StringPtr("testString")))
				Expect(serviceMappingRuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(serviceMappingRuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ServiceVariableData model
				serviceVariableDataModel := new(schematics20apiv2.ServiceVariableData)
				Expect(serviceVariableDataModel).ToNot(BeNil())
				serviceVariableDataModel.Name = core.StringPtr("testString")
				serviceVariableDataModel.Value = core.StringPtr("testString")
				serviceVariableDataModel.Metadata = variableMetadataModel
				serviceVariableDataModel.Mapping = []schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}
				serviceVariableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(serviceVariableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(serviceVariableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(serviceVariableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(serviceVariableDataModel.Mapping).To(Equal([]schematics20apiv2.ServiceMappingRule{*serviceMappingRuleModel}))
				Expect(serviceVariableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(serviceVariableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateOrderItemConfiguration model
				updateOrderItemConfigurationModel := new(schematics20apiv2.UpdateOrderItemConfiguration)
				Expect(updateOrderItemConfigurationModel).ToNot(BeNil())
				updateOrderItemConfigurationModel.Name = core.StringPtr("AWS Satellite")
				updateOrderItemConfigurationModel.Description = core.StringPtr("Create satellite location in AWS")
				updateOrderItemConfigurationModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				updateOrderItemConfigurationModel.Target = targetRequestModel
				updateOrderItemConfigurationModel.Operation = core.StringPtr("configure")
				updateOrderItemConfigurationModel.ServiceData = []schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}
				updateOrderItemConfigurationModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(updateOrderItemConfigurationModel.Name).To(Equal(core.StringPtr("AWS Satellite")))
				Expect(updateOrderItemConfigurationModel.Description).To(Equal(core.StringPtr("Create satellite location in AWS")))
				Expect(updateOrderItemConfigurationModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(updateOrderItemConfigurationModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(updateOrderItemConfigurationModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(updateOrderItemConfigurationModel.Target).To(Equal(targetRequestModel))
				Expect(updateOrderItemConfigurationModel.Operation).To(Equal(core.StringPtr("configure")))
				Expect(updateOrderItemConfigurationModel.ServiceData).To(Equal([]schematics20apiv2.ServiceVariableData{*serviceVariableDataModel}))
				Expect(updateOrderItemConfigurationModel.GetProperties()).ToNot(BeEmpty())
				Expect(updateOrderItemConfigurationModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateCartOrder model
				updateCartOrderModel := new(schematics20apiv2.UpdateCartOrder)
				Expect(updateCartOrderModel).ToNot(BeNil())
				updateCartOrderModel.Name = core.StringPtr("MySatelliteLocation")
				updateCartOrderModel.Description = core.StringPtr("Creates satellite location in AWS")
				updateCartOrderModel.Tags = []string{"testString"}
				updateCartOrderModel.CartItems = []schematics20apiv2.UpdateOrderItemConfiguration{*updateOrderItemConfigurationModel}
				updateCartOrderModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(updateCartOrderModel.Name).To(Equal(core.StringPtr("MySatelliteLocation")))
				Expect(updateCartOrderModel.Description).To(Equal(core.StringPtr("Creates satellite location in AWS")))
				Expect(updateCartOrderModel.Tags).To(Equal([]string{"testString"}))
				Expect(updateCartOrderModel.CartItems).To(Equal([]schematics20apiv2.UpdateOrderItemConfiguration{*updateOrderItemConfigurationModel}))
				Expect(updateCartOrderModel.GetProperties()).ToNot(BeEmpty())
				Expect(updateCartOrderModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateCartOrderOptions model
				orderID := "testString"
				operation := "testString"
				var updateCartOrder *schematics20apiv2.UpdateCartOrder = nil
				updateCartOrderOptionsModel := schematics20ApiService.NewUpdateCartOrderOptions(orderID, operation, updateCartOrder)
				updateCartOrderOptionsModel.SetOrderID("testString")
				updateCartOrderOptionsModel.SetOperation("testString")
				updateCartOrderOptionsModel.SetUpdateCartOrder(updateCartOrderModel)
				updateCartOrderOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateCartOrderOptionsModel).ToNot(BeNil())
				Expect(updateCartOrderOptionsModel.OrderID).To(Equal(core.StringPtr("testString")))
				Expect(updateCartOrderOptionsModel.Operation).To(Equal(core.StringPtr("testString")))
				Expect(updateCartOrderOptionsModel.UpdateCartOrder).To(Equal(updateCartOrderModel))
				Expect(updateCartOrderOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateControlsOptions successfully`, func() {
				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				Expect(jobStatusWorkitemModel).ToNot(BeNil())
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkitemModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkitemModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkitemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkitemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				Expect(jobStatusFlowModel).ToNot(BeNil())
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.Workitems).To(Equal([]schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}))
				Expect(jobStatusFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				Expect(jobStatusWorkspaceModel).ToNot(BeNil())
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.FlowStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusWorkspaceModel.TemplateStatus).To(Equal([]schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}))
				Expect(jobStatusWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				Expect(jobStatusActionModel).ToNot(BeNil())
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusActionModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.BastionStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.BastionStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.TargetsStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.TargetsStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				Expect(jobStatusSchematicsResourcesModel).ToNot(BeNil())
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSchematicsResourcesModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSchematicsResourcesModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.SchematicsResourceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSchematicsResourcesModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSchematicsResourcesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				Expect(jobStatusSystemModel).ToNot(BeNil())
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSystemModel.SystemStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSystemModel.SystemStatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSystemModel.SchematicsResourceStatus).To(Equal([]schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}))
				Expect(jobStatusSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				Expect(jobStatusModel).ToNot(BeNil())
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusModel.PositionInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.TotalInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.WorkspaceJobStatus).To(Equal(jobStatusWorkspaceModel))
				Expect(jobStatusModel.ActionJobStatus).To(Equal(jobStatusActionModel))
				Expect(jobStatusModel.SystemJobStatus).To(Equal(jobStatusSystemModel))
				Expect(jobStatusModel.FlowJobStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				Expect(jobDataTemplateModel).ToNot(BeNil())
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobDataTemplateModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				Expect(jobDataWorkspaceModel).ToNot(BeNil())
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.TemplateData).To(Equal([]schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}))
				Expect(jobDataWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				Expect(inventoryResourceRecordModel).ToNot(BeNil())
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(inventoryResourceRecordModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceRecordModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(inventoryResourceRecordModel.GetProperties()).ToNot(BeEmpty())
				Expect(inventoryResourceRecordModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				Expect(jobDataActionModel).ToNot(BeNil())
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataActionModel.InventoryRecord).To(Equal(inventoryResourceRecordModel))
				Expect(jobDataActionModel.MaterializedInventory).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				Expect(jobDataSystemModel).ToNot(BeNil())
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataSystemModel.KeyID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataSystemModel.SchematicsResourceID).To(Equal([]string{"testString"}))
				Expect(jobDataSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				Expect(jobDataWorkItemLastJobModel).ToNot(BeNil())
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemLastJobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobDataWorkItemLastJobModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.JobStatus).To(Equal(core.StringPtr("job_pending")))
				Expect(jobDataWorkItemLastJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemLastJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				Expect(jobDataWorkItemModel).ToNot(BeNil())
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.Layers).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(jobDataWorkItemModel.Source).To(Equal(externalSourceModel))
				Expect(jobDataWorkItemModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.LastJob).To(Equal(jobDataWorkItemLastJobModel))
				Expect(jobDataWorkItemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkItemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				Expect(jobDataFlowModel).ToNot(BeNil())
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.Workitems).To(Equal([]schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}))
				Expect(jobDataFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				Expect(jobDataModel).ToNot(BeNil())
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobDataModel.WorkspaceJobData).To(Equal(jobDataWorkspaceModel))
				Expect(jobDataModel.ActionJobData).To(Equal(jobDataActionModel))
				Expect(jobDataModel.SystemJobData).To(Equal(jobDataSystemModel))
				Expect(jobDataModel.FlowJobData).To(Equal(jobDataFlowModel))
				Expect(jobDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(bastionResourceDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				Expect(jobLogSummaryRepoDownloadJobModel).ToNot(BeNil())
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				Expect(jobLogSummaryWorkspaceJobModel).ToNot(BeNil())
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkspaceJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkspaceJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				Expect(jobLogSummaryWorkitemsModel).ToNot(BeNil())
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkitemsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.LogURL).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkitemsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				Expect(jobLogSummaryFlowJobModel).ToNot(BeNil())
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryFlowJobModel.Workitems).To(Equal([]schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}))
				Expect(jobLogSummaryFlowJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryFlowJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				Expect(jobLogSummaryActionJobRecapModel).ToNot(BeNil())
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobRecapModel.Target).To(Equal([]string{"testString"}))
				Expect(jobLogSummaryActionJobRecapModel.Ok).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Changed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Skipped).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Unreachable).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobRecapModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				Expect(jobLogSummaryActionJobModel).ToNot(BeNil())
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobModel.Recap).To(Equal(jobLogSummaryActionJobRecapModel))
				Expect(jobLogSummaryActionJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				Expect(jobLogSummarySystemJobModel).ToNot(BeNil())
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummarySystemJobModel.Success).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummarySystemJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				Expect(jobLogSummaryModel).ToNot(BeNil())
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobLogSummaryModel.RepoDownloadJob).To(Equal(jobLogSummaryRepoDownloadJobModel))
				Expect(jobLogSummaryModel.WorkspaceJob).To(Equal(jobLogSummaryWorkspaceJobModel))
				Expect(jobLogSummaryModel.FlowJob).To(Equal(jobLogSummaryFlowJobModel))
				Expect(jobLogSummaryModel.ActionJob).To(Equal(jobLogSummaryActionJobModel))
				Expect(jobLogSummaryModel.SystemJob).To(Equal(jobLogSummarySystemJobModel))
				Expect(jobLogSummaryModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				Expect(jobModel).ToNot(BeNil())
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(jobModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Tags).To(Equal([]string{"testString"}))
				Expect(jobModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(jobModel.Status).To(Equal(jobStatusModel))
				Expect(jobModel.Data).To(Equal(jobDataModel))
				Expect(jobModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(jobModel.LogSummary).To(Equal(jobLogSummaryModel))
				Expect(jobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TriggerJob model
				triggerJobModel := new(schematics20apiv2.TriggerJob)
				Expect(triggerJobModel).ToNot(BeNil())
				triggerJobModel.Event = core.StringPtr("before | after")
				triggerJobModel.Job = jobModel
				triggerJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerJobModel.Event).To(Equal(core.StringPtr("before | after")))
				Expect(triggerJobModel.Job).To(Equal(jobModel))
				Expect(triggerJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TriggerScheduled model
				triggerScheduledModel := new(schematics20apiv2.TriggerScheduled)
				Expect(triggerScheduledModel).ToNot(BeNil())
				triggerScheduledModel.Frequency = core.StringPtr("daily | weekly")
				triggerScheduledModel.Time = core.StringPtr("time in UTC")
				triggerScheduledModel.Day = core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")
				triggerScheduledModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(triggerScheduledModel.Frequency).To(Equal(core.StringPtr("daily | weekly")))
				Expect(triggerScheduledModel.Time).To(Equal(core.StringPtr("time in UTC")))
				Expect(triggerScheduledModel.Day).To(Equal(core.StringPtr("expected values : 1-7 comments:required for weekly 1: Monday - 7: Sunday")))
				Expect(triggerScheduledModel.GetProperties()).ToNot(BeEmpty())
				Expect(triggerScheduledModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlsDecision model
				controlsDecisionModel := new(schematics20apiv2.ControlsDecision)
				Expect(controlsDecisionModel).ToNot(BeNil())
				controlsDecisionModel.Rule = core.StringPtr("testString")
				controlsDecisionModel.PassValue = core.StringPtr("before")
				controlsDecisionModel.PassExpr = core.StringPtr("== OR != OR <= OR >= OR > OR <")
				controlsDecisionModel.EvidenceFoundIn = core.StringPtr("rule emitting details")
				controlsDecisionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsDecisionModel.Rule).To(Equal(core.StringPtr("testString")))
				Expect(controlsDecisionModel.PassValue).To(Equal(core.StringPtr("before")))
				Expect(controlsDecisionModel.PassExpr).To(Equal(core.StringPtr("== OR != OR <= OR >= OR > OR <")))
				Expect(controlsDecisionModel.EvidenceFoundIn).To(Equal(core.StringPtr("rule emitting details")))
				Expect(controlsDecisionModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsDecisionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlsEscalation model
				controlsEscalationModel := new(schematics20apiv2.ControlsEscalation)
				Expect(controlsEscalationModel).ToNot(BeNil())
				controlsEscalationModel.ActionID = core.StringPtr("testString")
				controlsEscalationModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsEscalationModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(controlsEscalationModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsEscalationModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlsLiteState model
				controlsLiteStateModel := new(schematics20apiv2.ControlsLiteState)
				Expect(controlsLiteStateModel).ToNot(BeNil())
				controlsLiteStateModel.StatusCode = core.StringPtr("normal")
				controlsLiteStateModel.StatusMessage = core.StringPtr("testString")
				controlsLiteStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsLiteStateModel.StatusCode).To(Equal(core.StringPtr("normal")))
				Expect(controlsLiteStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(controlsLiteStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsLiteStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CapsuleResultResources model
				capsuleResultResourcesModel := new(schematics20apiv2.CapsuleResultResources)
				Expect(capsuleResultResourcesModel).ToNot(BeNil())
				capsuleResultResourcesModel.Name = core.StringPtr("testString")
				capsuleResultResourcesModel.Type = core.StringPtr("testString")
				capsuleResultResourcesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(capsuleResultResourcesModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(capsuleResultResourcesModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(capsuleResultResourcesModel.GetProperties()).ToNot(BeEmpty())
				Expect(capsuleResultResourcesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CapsuleResultEvidences model
				capsuleResultEvidencesModel := new(schematics20apiv2.CapsuleResultEvidences)
				Expect(capsuleResultEvidencesModel).ToNot(BeNil())
				capsuleResultEvidencesModel.Resources = []schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}
				capsuleResultEvidencesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(capsuleResultEvidencesModel.Resources).To(Equal([]schematics20apiv2.CapsuleResultResources{*capsuleResultResourcesModel}))
				Expect(capsuleResultEvidencesModel.GetProperties()).ToNot(BeEmpty())
				Expect(capsuleResultEvidencesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobResultCapsule model
				jobResultCapsuleModel := new(schematics20apiv2.JobResultCapsule)
				Expect(jobResultCapsuleModel).ToNot(BeNil())
				jobResultCapsuleModel.JobID = core.StringPtr("testString")
				jobResultCapsuleModel.JobName = core.StringPtr("testString")
				jobResultCapsuleModel.Policy = core.StringPtr("testString")
				jobResultCapsuleModel.Severity = core.Int64Ptr(int64(1))
				jobResultCapsuleModel.JobState = core.StringPtr("success")
				jobResultCapsuleModel.Failures = []string{"testString"}
				jobResultCapsuleModel.Passed = []string{"testString"}
				jobResultCapsuleModel.Evidences = []schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}
				jobResultCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobResultCapsuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobResultCapsuleModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobResultCapsuleModel.JobName).To(Equal(core.StringPtr("testString")))
				Expect(jobResultCapsuleModel.Policy).To(Equal(core.StringPtr("testString")))
				Expect(jobResultCapsuleModel.Severity).To(Equal(core.Int64Ptr(int64(1))))
				Expect(jobResultCapsuleModel.JobState).To(Equal(core.StringPtr("success")))
				Expect(jobResultCapsuleModel.Failures).To(Equal([]string{"testString"}))
				Expect(jobResultCapsuleModel.Passed).To(Equal([]string{"testString"}))
				Expect(jobResultCapsuleModel.Evidences).To(Equal([]schematics20apiv2.CapsuleResultEvidences{*capsuleResultEvidencesModel}))
				Expect(jobResultCapsuleModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobResultCapsuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobResultCapsuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataCapsule model
				jobDataCapsuleModel := new(schematics20apiv2.JobDataCapsule)
				Expect(jobDataCapsuleModel).ToNot(BeNil())
				jobDataCapsuleModel.CapsuleID = core.StringPtr("testString")
				jobDataCapsuleModel.CalsuleName = core.StringPtr("testString")
				jobDataCapsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataCapsuleModel.Results = []schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}
				jobDataCapsuleModel.UpdatedAt = CreateMockDateTime()
				jobDataCapsuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataCapsuleModel.CapsuleID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataCapsuleModel.CalsuleName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataCapsuleModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataCapsuleModel.Results).To(Equal([]schematics20apiv2.JobResultCapsule{*jobResultCapsuleModel}))
				Expect(jobDataCapsuleModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataCapsuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataCapsuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Capsule model
				capsuleModel := new(schematics20apiv2.Capsule)
				Expect(capsuleModel).ToNot(BeNil())
				capsuleModel.Name = core.StringPtr("testString")
				capsuleModel.Description = core.StringPtr("testString")
				capsuleModel.Type = core.StringPtr("testString")
				capsuleModel.UserState = userStateModel
				capsuleModel.Package = core.StringPtr("Policy package path")
				capsuleModel.Severity = core.Int64Ptr(int64(1))
				capsuleModel.Inventory = core.StringPtr("testString")
				capsuleModel.TriggerRecordID = core.StringPtr("testString")
				capsuleModel.JobTriggers = []schematics20apiv2.TriggerJob{*triggerJobModel}
				capsuleModel.ScheduledTriggers = []schematics20apiv2.TriggerScheduled{*triggerScheduledModel}
				capsuleModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				capsuleModel.Decisions = []schematics20apiv2.ControlsDecision{*controlsDecisionModel}
				capsuleModel.Escalations = []schematics20apiv2.ControlsEscalation{*controlsEscalationModel}
				capsuleModel.ID = core.StringPtr("testString")
				capsuleModel.Status = core.StringPtr("testString")
				capsuleModel.ControlsID = core.StringPtr("testString")
				capsuleModel.ControlsName = core.StringPtr("testString")
				capsuleModel.CreatedAt = CreateMockDateTime()
				capsuleModel.CreatedBy = core.StringPtr("testString")
				capsuleModel.UpdatedAt = CreateMockDateTime()
				capsuleModel.UpdatedBy = core.StringPtr("testString")
				capsuleModel.State = controlsLiteStateModel
				capsuleModel.LastJobData = jobDataCapsuleModel
				capsuleModel.SysLock = systemLockModel
				capsuleModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(capsuleModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.UserState).To(Equal(userStateModel))
				Expect(capsuleModel.Package).To(Equal(core.StringPtr("Policy package path")))
				Expect(capsuleModel.Severity).To(Equal(core.Int64Ptr(int64(1))))
				Expect(capsuleModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.TriggerRecordID).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.JobTriggers).To(Equal([]schematics20apiv2.TriggerJob{*triggerJobModel}))
				Expect(capsuleModel.ScheduledTriggers).To(Equal([]schematics20apiv2.TriggerScheduled{*triggerScheduledModel}))
				Expect(capsuleModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(capsuleModel.Decisions).To(Equal([]schematics20apiv2.ControlsDecision{*controlsDecisionModel}))
				Expect(capsuleModel.Escalations).To(Equal([]schematics20apiv2.ControlsEscalation{*controlsEscalationModel}))
				Expect(capsuleModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.ControlsID).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.ControlsName).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.CreatedAt).To(Equal(CreateMockDateTime()))
				Expect(capsuleModel.CreatedBy).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(capsuleModel.UpdatedBy).To(Equal(core.StringPtr("testString")))
				Expect(capsuleModel.State).To(Equal(controlsLiteStateModel))
				Expect(capsuleModel.LastJobData).To(Equal(jobDataCapsuleModel))
				Expect(capsuleModel.SysLock).To(Equal(systemLockModel))
				Expect(capsuleModel.GetProperties()).ToNot(BeEmpty())
				Expect(capsuleModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Controls model
				controlsModel := new(schematics20apiv2.Controls)
				Expect(controlsModel).ToNot(BeNil())
				controlsModel.Name = core.StringPtr("testString")
				controlsModel.Type = core.StringPtr("it_controls")
				controlsModel.Description = core.StringPtr("testString")
				controlsModel.ResourceGroup = core.StringPtr("testString")
				controlsModel.Location = core.StringPtr("us-south")
				controlsModel.Tags = []string{"testString"}
				controlsModel.SourceReadmeURL = core.StringPtr("testString")
				controlsModel.Source = externalSourceModel
				controlsModel.SourceType = core.StringPtr("local")
				controlsModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				controlsModel.UserState = userStateModel
				controlsModel.SysLock = systemLockModel
				controlsModel.Capsules = []schematics20apiv2.Capsule{*capsuleModel}
				controlsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(controlsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(controlsModel.Type).To(Equal(core.StringPtr("it_controls")))
				Expect(controlsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(controlsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(controlsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(controlsModel.Tags).To(Equal([]string{"testString"}))
				Expect(controlsModel.SourceReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(controlsModel.Source).To(Equal(externalSourceModel))
				Expect(controlsModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(controlsModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(controlsModel.UserState).To(Equal(userStateModel))
				Expect(controlsModel.SysLock).To(Equal(systemLockModel))
				Expect(controlsModel.Capsules).To(Equal([]schematics20apiv2.Capsule{*capsuleModel}))
				Expect(controlsModel.GetProperties()).ToNot(BeEmpty())
				Expect(controlsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateControlsOptions model
				controlsID := "testString"
				var controls *schematics20apiv2.Controls = nil
				updateControlsOptionsModel := schematics20ApiService.NewUpdateControlsOptions(controlsID, controls)
				updateControlsOptionsModel.SetControlsID("testString")
				updateControlsOptionsModel.SetControls(controlsModel)
				updateControlsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateControlsOptionsModel).ToNot(BeNil())
				Expect(updateControlsOptionsModel.ControlsID).To(Equal(core.StringPtr("testString")))
				Expect(updateControlsOptionsModel.Controls).To(Equal(controlsModel))
				Expect(updateControlsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateFlowInWorkspaceOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateCommand model
				templateCommandModel := new(schematics20apiv2.TemplateCommand)
				Expect(templateCommandModel).ToNot(BeNil())
				templateCommandModel.Command = core.StringPtr("workspace_plan")
				templateCommandModel.CommandOptions = []string{"testString"}
				templateCommandModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateCommandModel.Command).To(Equal(core.StringPtr("workspace_plan")))
				Expect(templateCommandModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(templateCommandModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateCommandModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlowDefinitionTemplateOperation model
				templateFlowDefinitionTemplateOperationModel := new(schematics20apiv2.TemplateFlowDefinitionTemplateOperation)
				Expect(templateFlowDefinitionTemplateOperationModel).ToNot(BeNil())
				templateFlowDefinitionTemplateOperationModel.PreCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.TemplateID = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OverrideCommand = templateCommandModel
				templateFlowDefinitionTemplateOperationModel.PostCondition = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.OnError = core.StringPtr("testString")
				templateFlowDefinitionTemplateOperationModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowDefinitionTemplateOperationModel.PreCondition).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionTemplateOperationModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionTemplateOperationModel.OverrideCommand).To(Equal(templateCommandModel))
				Expect(templateFlowDefinitionTemplateOperationModel.PostCondition).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionTemplateOperationModel.OnError).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionTemplateOperationModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowDefinitionTemplateOperationModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlowDefinitionSimpleFlow model
				templateFlowDefinitionSimpleFlowModel := new(schematics20apiv2.TemplateFlowDefinitionSimpleFlow)
				Expect(templateFlowDefinitionSimpleFlowModel).ToNot(BeNil())
				templateFlowDefinitionSimpleFlowModel.Index = core.Int64Ptr(int64(38))
				templateFlowDefinitionSimpleFlowModel.Control = core.StringPtr("do")
				templateFlowDefinitionSimpleFlowModel.TemplateOperation = templateFlowDefinitionTemplateOperationModel
				templateFlowDefinitionSimpleFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowDefinitionSimpleFlowModel.Index).To(Equal(core.Int64Ptr(int64(38))))
				Expect(templateFlowDefinitionSimpleFlowModel.Control).To(Equal(core.StringPtr("do")))
				Expect(templateFlowDefinitionSimpleFlowModel.TemplateOperation).To(Equal(templateFlowDefinitionTemplateOperationModel))
				Expect(templateFlowDefinitionSimpleFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowDefinitionSimpleFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlowDefinition model
				templateFlowDefinitionModel := new(schematics20apiv2.TemplateFlowDefinition)
				Expect(templateFlowDefinitionModel).ToNot(BeNil())
				templateFlowDefinitionModel.FlowType = core.StringPtr("simple")
				templateFlowDefinitionModel.ID = core.StringPtr("testString")
				templateFlowDefinitionModel.SimpleFlow = []schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}
				templateFlowDefinitionModel.CustomFlow = CreateMockByteArray("This is a mock byte array value.")
				templateFlowDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowDefinitionModel.FlowType).To(Equal(core.StringPtr("simple")))
				Expect(templateFlowDefinitionModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowDefinitionModel.SimpleFlow).To(Equal([]schematics20apiv2.TemplateFlowDefinitionSimpleFlow{*templateFlowDefinitionSimpleFlowModel}))
				Expect(templateFlowDefinitionModel.CustomFlow).To(Equal(CreateMockByteArray("This is a mock byte array value.")))
				Expect(templateFlowDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkspaceTemplateFlow model
				jobStatusWorkspaceTemplateFlowModel := new(schematics20apiv2.JobStatusWorkspaceTemplateFlow)
				Expect(jobStatusWorkspaceTemplateFlowModel).ToNot(BeNil())
				jobStatusWorkspaceTemplateFlowModel.FlowID = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.FlowName = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceTemplateFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceTemplateFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceTemplateFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkspaceTemplateFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceTemplateFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceTemplateFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceTemplateFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceTemplateFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkspaceTemplateFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkspaceTemplateFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlowValidationSummary model
				templateFlowValidationSummaryModel := new(schematics20apiv2.TemplateFlowValidationSummary)
				Expect(templateFlowValidationSummaryModel).ToNot(BeNil())
				templateFlowValidationSummaryModel.WarningCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.ErrorCount = core.Float64Ptr(float64(72.5))
				templateFlowValidationSummaryModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowValidationSummaryModel.WarningCount).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(templateFlowValidationSummaryModel.ErrorCount).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(templateFlowValidationSummaryModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowValidationSummaryModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateFlow model
				templateFlowModel := new(schematics20apiv2.TemplateFlow)
				Expect(templateFlowModel).ToNot(BeNil())
				templateFlowModel.Name = core.StringPtr("testString")
				templateFlowModel.Version = core.StringPtr("testString")
				templateFlowModel.Type = core.StringPtr("simple_flow")
				templateFlowModel.UserState = userStateModel
				templateFlowModel.Definition = templateFlowDefinitionModel
				templateFlowModel.SysLock = systemLockModel
				templateFlowModel.Status = jobStatusWorkspaceTemplateFlowModel
				templateFlowModel.ValidationSummary = templateFlowValidationSummaryModel
				templateFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateFlowModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowModel.Version).To(Equal(core.StringPtr("testString")))
				Expect(templateFlowModel.Type).To(Equal(core.StringPtr("simple_flow")))
				Expect(templateFlowModel.UserState).To(Equal(userStateModel))
				Expect(templateFlowModel.Definition).To(Equal(templateFlowDefinitionModel))
				Expect(templateFlowModel.SysLock).To(Equal(systemLockModel))
				Expect(templateFlowModel.Status).To(Equal(jobStatusWorkspaceTemplateFlowModel))
				Expect(templateFlowModel.ValidationSummary).To(Equal(templateFlowValidationSummaryModel))
				Expect(templateFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateFlowInWorkspaceOptions model
				wID := "testString"
				flowID := "testString"
				updateFlowInWorkspaceOptionsModel := schematics20ApiService.NewUpdateFlowInWorkspaceOptions(wID, flowID)
				updateFlowInWorkspaceOptionsModel.SetWID("testString")
				updateFlowInWorkspaceOptionsModel.SetFlowID("testString")
				updateFlowInWorkspaceOptionsModel.SetTemplateFlow(templateFlowModel)
				updateFlowInWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateFlowInWorkspaceOptionsModel).ToNot(BeNil())
				Expect(updateFlowInWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(updateFlowInWorkspaceOptionsModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(updateFlowInWorkspaceOptionsModel.TemplateFlow).To(Equal(templateFlowModel))
				Expect(updateFlowInWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateJobOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematics20apiv2.JobStatusWorkitem)
				Expect(jobStatusWorkitemModel).ToNot(BeNil())
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkitemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkitemModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkitemModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkitemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkitemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematics20apiv2.JobStatusFlow)
				Expect(jobStatusFlowModel).ToNot(BeNil())
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime()
				jobStatusFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.Workitems).To(Equal([]schematics20apiv2.JobStatusWorkitem{*jobStatusWorkitemModel}))
				Expect(jobStatusFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematics20apiv2.JobStatusWorkspace)
				Expect(jobStatusWorkspaceModel).ToNot(BeNil())
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobStatusWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.FlowStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusWorkspaceModel.TemplateStatus).To(Equal([]schematics20apiv2.JobStatusTemplate{*jobStatusTemplateModel}))
				Expect(jobStatusWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematics20apiv2.JobStatusAction)
				Expect(jobStatusActionModel).ToNot(BeNil())
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime()
				jobStatusActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusActionModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.BastionStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.BastionStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.TargetsStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.TargetsStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematics20apiv2.JobStatusSchematicsResources)
				Expect(jobStatusSchematicsResourcesModel).ToNot(BeNil())
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime()
				jobStatusSchematicsResourcesModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSchematicsResourcesModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSchematicsResourcesModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.SchematicsResourceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSchematicsResourcesModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSchematicsResourcesModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematics20apiv2.JobStatusSystem)
				Expect(jobStatusSystemModel).ToNot(BeNil())
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime()
				jobStatusSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusSystemModel.SystemStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSystemModel.SystemStatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSystemModel.SchematicsResourceStatus).To(Equal([]schematics20apiv2.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}))
				Expect(jobStatusSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematics20apiv2.JobStatus)
				Expect(jobStatusModel).ToNot(BeNil())
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				jobStatusModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusModel.PositionInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.TotalInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.WorkspaceJobStatus).To(Equal(jobStatusWorkspaceModel))
				Expect(jobStatusModel.ActionJobStatus).To(Equal(jobStatusActionModel))
				Expect(jobStatusModel.SystemJobStatus).To(Equal(jobStatusSystemModel))
				Expect(jobStatusModel.FlowJobStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematics20apiv2.JobDataTemplate)
				Expect(jobDataTemplateModel).ToNot(BeNil())
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime()
				jobDataTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobDataTemplateModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematics20apiv2.JobDataWorkspace)
				Expect(jobDataWorkspaceModel).ToNot(BeNil())
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.TemplateData).To(Equal([]schematics20apiv2.JobDataTemplate{*jobDataTemplateModel}))
				Expect(jobDataWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematics20apiv2.InventoryResourceRecord)
				Expect(inventoryResourceRecordModel).ToNot(BeNil())
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				inventoryResourceRecordModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(inventoryResourceRecordModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceRecordModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(inventoryResourceRecordModel.GetProperties()).ToNot(BeEmpty())
				Expect(inventoryResourceRecordModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematics20apiv2.JobDataAction)
				Expect(jobDataActionModel).ToNot(BeNil())
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime()
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				jobDataActionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataActionModel.InventoryRecord).To(Equal(inventoryResourceRecordModel))
				Expect(jobDataActionModel.MaterializedInventory).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataActionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematics20apiv2.JobDataSystem)
				Expect(jobDataSystemModel).ToNot(BeNil())
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime()
				jobDataSystemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataSystemModel.KeyID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataSystemModel.SchematicsResourceID).To(Equal([]string{"testString"}))
				Expect(jobDataSystemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataSystemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataSystemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematics20apiv2.JobDataWorkItemLastJob)
				Expect(jobDataWorkItemLastJobModel).ToNot(BeNil())
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				jobDataWorkItemLastJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemLastJobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobDataWorkItemLastJobModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.JobStatus).To(Equal(core.StringPtr("job_pending")))
				Expect(jobDataWorkItemLastJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemLastJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematics20apiv2.JobDataWorkItem)
				Expect(jobDataWorkItemModel).ToNot(BeNil())
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime()
				jobDataWorkItemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataWorkItemModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.Layers).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(jobDataWorkItemModel.Source).To(Equal(externalSourceModel))
				Expect(jobDataWorkItemModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.LastJob).To(Equal(jobDataWorkItemLastJobModel))
				Expect(jobDataWorkItemModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataWorkItemModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataWorkItemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematics20apiv2.JobDataFlow)
				Expect(jobDataFlowModel).ToNot(BeNil())
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime()
				jobDataFlowModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.Workitems).To(Equal([]schematics20apiv2.JobDataWorkItem{*jobDataWorkItemModel}))
				Expect(jobDataFlowModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobDataFlowModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataFlowModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobData model
				jobDataModel := new(schematics20apiv2.JobData)
				Expect(jobDataModel).ToNot(BeNil())
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				jobDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobDataModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobDataModel.WorkspaceJobData).To(Equal(jobDataWorkspaceModel))
				Expect(jobDataModel.ActionJobData).To(Equal(jobDataActionModel))
				Expect(jobDataModel.SystemJobData).To(Equal(jobDataSystemModel))
				Expect(jobDataModel.FlowJobData).To(Equal(jobDataFlowModel))
				Expect(jobDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematics20apiv2.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				bastionResourceDefinitionModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.GetProperties()).ToNot(BeEmpty())
				Expect(bastionResourceDefinitionModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematics20apiv2.JobLogSummaryRepoDownloadJob)
				Expect(jobLogSummaryRepoDownloadJobModel).ToNot(BeNil())
				jobLogSummaryRepoDownloadJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryRepoDownloadJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematics20apiv2.JobLogSummaryWorkspaceJob)
				Expect(jobLogSummaryWorkspaceJobModel).ToNot(BeNil())
				jobLogSummaryWorkspaceJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkspaceJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkspaceJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematics20apiv2.JobLogSummaryWorkitems)
				Expect(jobLogSummaryWorkitemsModel).ToNot(BeNil())
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryWorkitemsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.LogURL).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryWorkitemsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematics20apiv2.JobLogSummaryFlowJob)
				Expect(jobLogSummaryFlowJobModel).ToNot(BeNil())
				jobLogSummaryFlowJobModel.Workitems = []schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				jobLogSummaryFlowJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryFlowJobModel.Workitems).To(Equal([]schematics20apiv2.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}))
				Expect(jobLogSummaryFlowJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryFlowJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematics20apiv2.JobLogSummaryActionJobRecap)
				Expect(jobLogSummaryActionJobRecapModel).ToNot(BeNil())
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobRecapModel.Target).To(Equal([]string{"testString"}))
				Expect(jobLogSummaryActionJobRecapModel.Ok).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Changed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Skipped).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Unreachable).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobRecapModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematics20apiv2.JobLogSummaryActionJob)
				Expect(jobLogSummaryActionJobModel).ToNot(BeNil())
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				jobLogSummaryActionJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryActionJobModel.Recap).To(Equal(jobLogSummaryActionJobRecapModel))
				Expect(jobLogSummaryActionJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryActionJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematics20apiv2.JobLogSummarySystemJob)
				Expect(jobLogSummarySystemJobModel).ToNot(BeNil())
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummarySystemJobModel.Success).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummarySystemJobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematics20apiv2.JobLogSummary)
				Expect(jobLogSummaryModel).ToNot(BeNil())
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				jobLogSummaryModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobLogSummaryModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobLogSummaryModel.RepoDownloadJob).To(Equal(jobLogSummaryRepoDownloadJobModel))
				Expect(jobLogSummaryModel.WorkspaceJob).To(Equal(jobLogSummaryWorkspaceJobModel))
				Expect(jobLogSummaryModel.FlowJob).To(Equal(jobLogSummaryFlowJobModel))
				Expect(jobLogSummaryModel.ActionJob).To(Equal(jobLogSummaryActionJobModel))
				Expect(jobLogSummaryModel.SystemJob).To(Equal(jobLogSummarySystemJobModel))
				Expect(jobLogSummaryModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobLogSummaryModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Job model
				jobModel := new(schematics20apiv2.Job)
				Expect(jobModel).ToNot(BeNil())
				jobModel.CommandObject = core.StringPtr("workspace")
				jobModel.CommandObjectID = core.StringPtr("testString")
				jobModel.CommandName = core.StringPtr("workspace_plan")
				jobModel.CommandParameter = core.StringPtr("testString")
				jobModel.CommandOptions = []string{"testString"}
				jobModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				jobModel.Tags = []string{"testString"}
				jobModel.Location = core.StringPtr("us-south")
				jobModel.Status = jobStatusModel
				jobModel.Data = jobDataModel
				jobModel.Bastion = bastionResourceDefinitionModel
				jobModel.LogSummary = jobLogSummaryModel
				jobModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(jobModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(jobModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(jobModel.Tags).To(Equal([]string{"testString"}))
				Expect(jobModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(jobModel.Status).To(Equal(jobStatusModel))
				Expect(jobModel.Data).To(Equal(jobDataModel))
				Expect(jobModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(jobModel.LogSummary).To(Equal(jobLogSummaryModel))
				Expect(jobModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateJobOptions model
				jobID := "testString"
				refreshToken := "testString"
				var job *schematics20apiv2.Job = nil
				updateJobOptionsModel := schematics20ApiService.NewUpdateJobOptions(jobID, refreshToken, job)
				updateJobOptionsModel.SetJobID("testString")
				updateJobOptionsModel.SetRefreshToken("testString")
				updateJobOptionsModel.SetJob(jobModel)
				updateJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateJobOptionsModel).ToNot(BeNil())
				Expect(updateJobOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(updateJobOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(updateJobOptionsModel.Job).To(Equal(jobModel))
				Expect(updateJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateKmsSettingsOptions successfully`, func() {
				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematics20apiv2.KMSSettingsPrimaryCrk)
				Expect(kmsSettingsPrimaryCrkModel).ToNot(BeNil())
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(kmsSettingsPrimaryCrkModel.KmsName).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsPrimaryCrkModel.KeyCrn).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsPrimaryCrkModel.GetProperties()).ToNot(BeEmpty())
				Expect(kmsSettingsPrimaryCrkModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematics20apiv2.KMSSettingsSecondaryCrk)
				Expect(kmsSettingsSecondaryCrkModel).ToNot(BeNil())
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(kmsSettingsSecondaryCrkModel.KmsName).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsSecondaryCrkModel.KeyCrn).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsSecondaryCrkModel.GetProperties()).ToNot(BeEmpty())
				Expect(kmsSettingsSecondaryCrkModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the KMSSettings model
				kmsSettingsModel := new(schematics20apiv2.KMSSettings)
				Expect(kmsSettingsModel).ToNot(BeNil())
				kmsSettingsModel.Location = core.StringPtr("testString")
				kmsSettingsModel.EncryptionScheme = core.StringPtr("testString")
				kmsSettingsModel.ResourceGroup = core.StringPtr("testString")
				kmsSettingsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				kmsSettingsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				kmsSettingsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(kmsSettingsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsModel.EncryptionScheme).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsModel.PrimaryCrk).To(Equal(kmsSettingsPrimaryCrkModel))
				Expect(kmsSettingsModel.SecondaryCrk).To(Equal(kmsSettingsSecondaryCrkModel))
				Expect(kmsSettingsModel.GetProperties()).ToNot(BeEmpty())
				Expect(kmsSettingsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateKmsSettingsOptions model
				var kmsSettings *schematics20apiv2.KMSSettings = nil
				updateKmsSettingsOptionsModel := schematics20ApiService.NewUpdateKmsSettingsOptions(kmsSettings)
				updateKmsSettingsOptionsModel.SetKMSSettings(kmsSettingsModel)
				updateKmsSettingsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateKmsSettingsOptionsModel).ToNot(BeNil())
				Expect(updateKmsSettingsOptionsModel.KMSSettings).To(Equal(kmsSettingsModel))
				Expect(updateKmsSettingsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateTemplateInWorkspaceOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceGit model
				externalSourceGitModel := new(schematics20apiv2.ExternalSourceGit)
				Expect(externalSourceGitModel).ToNot(BeNil())
				externalSourceGitModel.ComputedGitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitRepoURL = core.StringPtr("testString")
				externalSourceGitModel.GitToken = core.StringPtr("testString")
				externalSourceGitModel.GitRepoFolder = core.StringPtr("testString")
				externalSourceGitModel.GitRelease = core.StringPtr("testString")
				externalSourceGitModel.GitBranch = core.StringPtr("testString")
				externalSourceGitModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceGitModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GitBranch).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceGitModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceGitModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSourceCatalog model
				externalSourceCatalogModel := new(schematics20apiv2.ExternalSourceCatalog)
				Expect(externalSourceCatalogModel).ToNot(BeNil())
				externalSourceCatalogModel.CatalogName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingName = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersion = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingKind = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingVersionID = core.StringPtr("testString")
				externalSourceCatalogModel.OfferingRepoURL = core.StringPtr("testString")
				externalSourceCatalogModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceCatalogModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(externalSourceCatalogModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceCatalogModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematics20apiv2.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = externalSourceGitModel
				externalSourceModel.Catalog = externalSourceCatalogModel
				externalSourceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(externalSourceGitModel))
				Expect(externalSourceModel.Catalog).To(Equal(externalSourceCatalogModel))
				Expect(externalSourceModel.GetProperties()).ToNot(BeEmpty())
				Expect(externalSourceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematics20apiv2.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime()
				jobStatusTemplateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime()))
				Expect(jobStatusTemplateModel.GetProperties()).ToNot(BeEmpty())
				Expect(jobStatusTemplateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Template model
				templateModel := new(schematics20apiv2.Template)
				Expect(templateModel).ToNot(BeNil())
				templateModel.Name = core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")
				templateModel.Description = core.StringPtr("This template provisions clusters in production environment")
				templateModel.Type = core.StringPtr("testString")
				templateModel.UserState = userStateModel
				templateModel.SourceType = core.StringPtr("local")
				templateModel.Source = externalSourceModel
				templateModel.SourceReadmeURL = core.StringPtr("testString")
				templateModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				templateModel.Inventory = core.StringPtr("testString")
				templateModel.Status = jobStatusTemplateModel
				templateModel.SysLock = systemLockModel
				templateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(templateModel.Name).To(Equal(core.StringPtr("vpc_terraform / helm_front_end_app_micro_service")))
				Expect(templateModel.Description).To(Equal(core.StringPtr("This template provisions clusters in production environment")))
				Expect(templateModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(templateModel.UserState).To(Equal(userStateModel))
				Expect(templateModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(templateModel.Source).To(Equal(externalSourceModel))
				Expect(templateModel.SourceReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(templateModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(templateModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(templateModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(templateModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(templateModel.Status).To(Equal(jobStatusTemplateModel))
				Expect(templateModel.SysLock).To(Equal(systemLockModel))
				Expect(templateModel.GetProperties()).ToNot(BeEmpty())
				Expect(templateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateTemplateInWorkspaceOptions model
				wID := "testString"
				tID := "testString"
				updateTemplateInWorkspaceOptionsModel := schematics20ApiService.NewUpdateTemplateInWorkspaceOptions(wID, tID)
				updateTemplateInWorkspaceOptionsModel.SetWID("testString")
				updateTemplateInWorkspaceOptionsModel.SetTID("testString")
				updateTemplateInWorkspaceOptionsModel.SetTemplate(templateModel)
				updateTemplateInWorkspaceOptionsModel.SetXGithubToken("testString")
				updateTemplateInWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateTemplateInWorkspaceOptionsModel).ToNot(BeNil())
				Expect(updateTemplateInWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(updateTemplateInWorkspaceOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(updateTemplateInWorkspaceOptionsModel.Template).To(Equal(templateModel))
				Expect(updateTemplateInWorkspaceOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(updateTemplateInWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateWorkspaceOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematics20apiv2.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime()
				userStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime()))
				Expect(userStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(userStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematics20apiv2.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				variableMetadataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableMetadataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematics20apiv2.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				variableDataModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))
				Expect(variableDataModel.GetProperties()).ToNot(BeEmpty())
				Expect(variableDataModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WorkspaceLiteState model
				workspaceLiteStateModel := new(schematics20apiv2.WorkspaceLiteState)
				Expect(workspaceLiteStateModel).ToNot(BeNil())
				workspaceLiteStateModel.StatusCode = core.StringPtr("normal")
				workspaceLiteStateModel.StatusMessage = core.StringPtr("testString")
				workspaceLiteStateModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(workspaceLiteStateModel.StatusCode).To(Equal(core.StringPtr("normal")))
				Expect(workspaceLiteStateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(workspaceLiteStateModel.GetProperties()).ToNot(BeEmpty())
				Expect(workspaceLiteStateModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SystemLock model
				systemLockModel := new(schematics20apiv2.SystemLock)
				Expect(systemLockModel).ToNot(BeNil())
				systemLockModel.SysLocked = core.BoolPtr(true)
				systemLockModel.SysLockedBy = core.StringPtr("testString")
				systemLockModel.SysLockedAt = CreateMockDateTime()
				systemLockModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(systemLockModel.SysLocked).To(Equal(core.BoolPtr(true)))
				Expect(systemLockModel.SysLockedBy).To(Equal(core.StringPtr("testString")))
				Expect(systemLockModel.SysLockedAt).To(Equal(CreateMockDateTime()))
				Expect(systemLockModel.GetProperties()).ToNot(BeEmpty())
				Expect(systemLockModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Workspace model
				workspaceModel := new(schematics20apiv2.Workspace)
				Expect(workspaceModel).ToNot(BeNil())
				workspaceModel.Name = core.StringPtr("My Workspace")
				workspaceModel.Description = core.StringPtr("This workspace manages front-end micro service for production environment")
				workspaceModel.ResourceGroup = core.StringPtr("testString")
				workspaceModel.Tags = []string{"testString"}
				workspaceModel.DestroyResourcesOnDelete = core.BoolPtr(true)
				workspaceModel.Location = core.StringPtr("us-south")
				workspaceModel.UserState = userStateModel
				workspaceModel.CommandParameter = core.StringPtr("testString")
				workspaceModel.Inputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Outputs = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.Settings = []schematics20apiv2.VariableData{*variableDataModel}
				workspaceModel.State = workspaceLiteStateModel
				workspaceModel.SysLock = systemLockModel
				workspaceModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(workspaceModel.Name).To(Equal(core.StringPtr("My Workspace")))
				Expect(workspaceModel.Description).To(Equal(core.StringPtr("This workspace manages front-end micro service for production environment")))
				Expect(workspaceModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(workspaceModel.Tags).To(Equal([]string{"testString"}))
				Expect(workspaceModel.DestroyResourcesOnDelete).To(Equal(core.BoolPtr(true)))
				Expect(workspaceModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(workspaceModel.UserState).To(Equal(userStateModel))
				Expect(workspaceModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(workspaceModel.Inputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(workspaceModel.Outputs).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(workspaceModel.Settings).To(Equal([]schematics20apiv2.VariableData{*variableDataModel}))
				Expect(workspaceModel.State).To(Equal(workspaceLiteStateModel))
				Expect(workspaceModel.SysLock).To(Equal(systemLockModel))
				Expect(workspaceModel.GetProperties()).ToNot(BeEmpty())
				Expect(workspaceModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateWorkspaceOptions model
				wID := "testString"
				var workspace *schematics20apiv2.Workspace = nil
				updateWorkspaceOptionsModel := schematics20ApiService.NewUpdateWorkspaceOptions(wID, workspace)
				updateWorkspaceOptionsModel.SetWID("testString")
				updateWorkspaceOptionsModel.SetWorkspace(workspaceModel)
				updateWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateWorkspaceOptionsModel).ToNot(BeNil())
				Expect(updateWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(updateWorkspaceOptionsModel.Workspace).To(Equal(workspaceModel))
				Expect(updateWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUploadTemplateTarActionOptions successfully`, func() {
				// Construct an instance of the UploadTemplateTarActionOptions model
				actionID := "testString"
				uploadTemplateTarActionOptionsModel := schematics20ApiService.NewUploadTemplateTarActionOptions(actionID)
				uploadTemplateTarActionOptionsModel.SetActionID("testString")
				uploadTemplateTarActionOptionsModel.SetFile(CreateMockReader("This is a mock file."))
				uploadTemplateTarActionOptionsModel.SetFileContentType("testString")
				uploadTemplateTarActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(uploadTemplateTarActionOptionsModel).ToNot(BeNil())
				Expect(uploadTemplateTarActionOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarActionOptionsModel.File).To(Equal(CreateMockReader("This is a mock file.")))
				Expect(uploadTemplateTarActionOptionsModel.FileContentType).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUploadTemplateTarBlueprintOptions successfully`, func() {
				// Construct an instance of the UploadTemplateTarBlueprintOptions model
				blueprintID := "testString"
				uploadTemplateTarBlueprintOptionsModel := schematics20ApiService.NewUploadTemplateTarBlueprintOptions(blueprintID)
				uploadTemplateTarBlueprintOptionsModel.SetBlueprintID("testString")
				uploadTemplateTarBlueprintOptionsModel.SetFile(CreateMockReader("This is a mock file."))
				uploadTemplateTarBlueprintOptionsModel.SetFileContentType("testString")
				uploadTemplateTarBlueprintOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(uploadTemplateTarBlueprintOptionsModel).ToNot(BeNil())
				Expect(uploadTemplateTarBlueprintOptionsModel.BlueprintID).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarBlueprintOptionsModel.File).To(Equal(CreateMockReader("This is a mock file.")))
				Expect(uploadTemplateTarBlueprintOptionsModel.FileContentType).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarBlueprintOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUploadTemplateTarInWorkspaceOptions successfully`, func() {
				// Construct an instance of the UploadTemplateTarInWorkspaceOptions model
				wID := "testString"
				tID := "testString"
				uploadTemplateTarInWorkspaceOptionsModel := schematics20ApiService.NewUploadTemplateTarInWorkspaceOptions(wID, tID)
				uploadTemplateTarInWorkspaceOptionsModel.SetWID("testString")
				uploadTemplateTarInWorkspaceOptionsModel.SetTID("testString")
				uploadTemplateTarInWorkspaceOptionsModel.SetFile(CreateMockReader("This is a mock file."))
				uploadTemplateTarInWorkspaceOptionsModel.SetFileContentType("testString")
				uploadTemplateTarInWorkspaceOptionsModel.SetXGithubToken("testString")
				uploadTemplateTarInWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(uploadTemplateTarInWorkspaceOptionsModel).ToNot(BeNil())
				Expect(uploadTemplateTarInWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarInWorkspaceOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarInWorkspaceOptionsModel.File).To(Equal(CreateMockReader("This is a mock file.")))
				Expect(uploadTemplateTarInWorkspaceOptionsModel.FileContentType).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarInWorkspaceOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarInWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewWorkspace successfully`, func() {
				name := "My Workspace"
				resourceGroup := "testString"
				location := "us-south"
				model, err := schematics20ApiService.NewWorkspace(name, resourceGroup, location)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
		})
	})
	Describe(`Utility function tests`, func() {
		It(`Invoke CreateMockByteArray() successfully`, func() {
			mockByteArray := CreateMockByteArray("This is a test")
			Expect(mockByteArray).ToNot(BeNil())
		})
		It(`Invoke CreateMockUUID() successfully`, func() {
			mockUUID := CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
			Expect(mockUUID).ToNot(BeNil())
		})
		It(`Invoke CreateMockReader() successfully`, func() {
			mockReader := CreateMockReader("This is a test.")
			Expect(mockReader).ToNot(BeNil())
		})
		It(`Invoke CreateMockDate() successfully`, func() {
			mockDate := CreateMockDate()
			Expect(mockDate).ToNot(BeNil())
		})
		It(`Invoke CreateMockDateTime() successfully`, func() {
			mockDateTime := CreateMockDateTime()
			Expect(mockDateTime).ToNot(BeNil())
		})
	})
})

//
// Utility functions used by the generated test code
//

func CreateMockByteArray(mockData string) *[]byte {
	ba := make([]byte, 0)
	ba = append(ba, mockData...)
	return &ba
}

func CreateMockUUID(mockData string) *strfmt.UUID {
	uuid := strfmt.UUID(mockData)
	return &uuid
}

func CreateMockReader(mockData string) io.ReadCloser {
	return ioutil.NopCloser(bytes.NewReader([]byte(mockData)))
}

func CreateMockDate() *strfmt.Date {
	d := strfmt.Date(time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
	return &d
}

func CreateMockDateTime() *strfmt.DateTime {
	d := strfmt.DateTime(time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
	return &d
}

func SetTestEnvironment(testEnvironment map[string]string) {
	for key, value := range testEnvironment {
		os.Setenv(key, value)
	}
}

func ClearTestEnvironment(testEnvironment map[string]string) {
	for key := range testEnvironment {
		os.Unsetenv(key)
	}
}
